
smarthome.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000358c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000118  00800060  0000358c  00003620  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  00800178  00800178  00003738  2**0
                  ALLOC
  3 .stab         00003b1c  00000000  00000000  00003738  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001ae6  00000000  00000000  00007254  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  00008d3a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d1  00000000  00000000  00008eba  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002010  00000000  00000000  0000908b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001161  00000000  00000000  0000b09b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001003  00000000  00000000  0000c1fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  0000d200  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002be  00000000  00000000  0000d3a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000090e  00000000  00000000  0000d65e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000df6c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 01 0a 	jmp	0x1402	; 0x1402 <__vector_1>
       8:	0c 94 ab 0a 	jmp	0x1556	; 0x1556 <__vector_2>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 70 09 	jmp	0x12e0	; 0x12e0 <__vector_6>
      1c:	0c 94 3d 09 	jmp	0x127a	; 0x127a <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 0a 09 	jmp	0x1214	; 0x1214 <__vector_9>
      28:	0c 94 f1 07 	jmp	0xfe2	; 0xfe2 <__vector_10>
      2c:	0c 94 be 07 	jmp	0xf7c	; 0xf7c <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 d5 0f 	jmp	0x1faa	; 0x1faa <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e8       	ldi	r30, 0x8C	; 140
      68:	f5 e3       	ldi	r31, 0x35	; 53
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 37       	cpi	r26, 0x78	; 120
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a8 e7       	ldi	r26, 0x78	; 120
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 38       	cpi	r26, 0x84	; 132
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 45 1a 	call	0x348a	; 0x348a <main>
      8a:	0c 94 c4 1a 	jmp	0x3588	; 0x3588 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 8d 1a 	jmp	0x351a	; 0x351a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 a9 1a 	jmp	0x3552	; 0x3552 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 99 1a 	jmp	0x3532	; 0x3532 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 b5 1a 	jmp	0x356a	; 0x356a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 99 1a 	jmp	0x3532	; 0x3532 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 b5 1a 	jmp	0x356a	; 0x356a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 8d 1a 	jmp	0x351a	; 0x351a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 a9 1a 	jmp	0x3552	; 0x3552 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 99 1a 	jmp	0x3532	; 0x3532 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 b5 1a 	jmp	0x356a	; 0x356a <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 99 1a 	jmp	0x3532	; 0x3532 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 b5 1a 	jmp	0x356a	; 0x356a <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 99 1a 	jmp	0x3532	; 0x3532 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 b5 1a 	jmp	0x356a	; 0x356a <__epilogue_restores__+0x18>

00000752 <__floatsisf>:
     752:	a8 e0       	ldi	r26, 0x08	; 8
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 96 1a 	jmp	0x352c	; 0x352c <__prologue_saves__+0x12>
     75e:	9b 01       	movw	r18, r22
     760:	ac 01       	movw	r20, r24
     762:	83 e0       	ldi	r24, 0x03	; 3
     764:	89 83       	std	Y+1, r24	; 0x01
     766:	da 01       	movw	r26, r20
     768:	c9 01       	movw	r24, r18
     76a:	88 27       	eor	r24, r24
     76c:	b7 fd       	sbrc	r27, 7
     76e:	83 95       	inc	r24
     770:	99 27       	eor	r25, r25
     772:	aa 27       	eor	r26, r26
     774:	bb 27       	eor	r27, r27
     776:	b8 2e       	mov	r11, r24
     778:	21 15       	cp	r18, r1
     77a:	31 05       	cpc	r19, r1
     77c:	41 05       	cpc	r20, r1
     77e:	51 05       	cpc	r21, r1
     780:	19 f4       	brne	.+6      	; 0x788 <__floatsisf+0x36>
     782:	82 e0       	ldi	r24, 0x02	; 2
     784:	89 83       	std	Y+1, r24	; 0x01
     786:	3a c0       	rjmp	.+116    	; 0x7fc <__floatsisf+0xaa>
     788:	88 23       	and	r24, r24
     78a:	a9 f0       	breq	.+42     	; 0x7b6 <__floatsisf+0x64>
     78c:	20 30       	cpi	r18, 0x00	; 0
     78e:	80 e0       	ldi	r24, 0x00	; 0
     790:	38 07       	cpc	r19, r24
     792:	80 e0       	ldi	r24, 0x00	; 0
     794:	48 07       	cpc	r20, r24
     796:	80 e8       	ldi	r24, 0x80	; 128
     798:	58 07       	cpc	r21, r24
     79a:	29 f4       	brne	.+10     	; 0x7a6 <__floatsisf+0x54>
     79c:	60 e0       	ldi	r22, 0x00	; 0
     79e:	70 e0       	ldi	r23, 0x00	; 0
     7a0:	80 e0       	ldi	r24, 0x00	; 0
     7a2:	9f ec       	ldi	r25, 0xCF	; 207
     7a4:	30 c0       	rjmp	.+96     	; 0x806 <__floatsisf+0xb4>
     7a6:	ee 24       	eor	r14, r14
     7a8:	ff 24       	eor	r15, r15
     7aa:	87 01       	movw	r16, r14
     7ac:	e2 1a       	sub	r14, r18
     7ae:	f3 0a       	sbc	r15, r19
     7b0:	04 0b       	sbc	r16, r20
     7b2:	15 0b       	sbc	r17, r21
     7b4:	02 c0       	rjmp	.+4      	; 0x7ba <__floatsisf+0x68>
     7b6:	79 01       	movw	r14, r18
     7b8:	8a 01       	movw	r16, r20
     7ba:	8e e1       	ldi	r24, 0x1E	; 30
     7bc:	c8 2e       	mov	r12, r24
     7be:	d1 2c       	mov	r13, r1
     7c0:	dc 82       	std	Y+4, r13	; 0x04
     7c2:	cb 82       	std	Y+3, r12	; 0x03
     7c4:	ed 82       	std	Y+5, r14	; 0x05
     7c6:	fe 82       	std	Y+6, r15	; 0x06
     7c8:	0f 83       	std	Y+7, r16	; 0x07
     7ca:	18 87       	std	Y+8, r17	; 0x08
     7cc:	c8 01       	movw	r24, r16
     7ce:	b7 01       	movw	r22, r14
     7d0:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <__clzsi2>
     7d4:	01 97       	sbiw	r24, 0x01	; 1
     7d6:	18 16       	cp	r1, r24
     7d8:	19 06       	cpc	r1, r25
     7da:	84 f4       	brge	.+32     	; 0x7fc <__floatsisf+0xaa>
     7dc:	08 2e       	mov	r0, r24
     7de:	04 c0       	rjmp	.+8      	; 0x7e8 <__floatsisf+0x96>
     7e0:	ee 0c       	add	r14, r14
     7e2:	ff 1c       	adc	r15, r15
     7e4:	00 1f       	adc	r16, r16
     7e6:	11 1f       	adc	r17, r17
     7e8:	0a 94       	dec	r0
     7ea:	d2 f7       	brpl	.-12     	; 0x7e0 <__floatsisf+0x8e>
     7ec:	ed 82       	std	Y+5, r14	; 0x05
     7ee:	fe 82       	std	Y+6, r15	; 0x06
     7f0:	0f 83       	std	Y+7, r16	; 0x07
     7f2:	18 87       	std	Y+8, r17	; 0x08
     7f4:	c8 1a       	sub	r12, r24
     7f6:	d9 0a       	sbc	r13, r25
     7f8:	dc 82       	std	Y+4, r13	; 0x04
     7fa:	cb 82       	std	Y+3, r12	; 0x03
     7fc:	ba 82       	std	Y+2, r11	; 0x02
     7fe:	ce 01       	movw	r24, r28
     800:	01 96       	adiw	r24, 0x01	; 1
     802:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     806:	28 96       	adiw	r28, 0x08	; 8
     808:	e9 e0       	ldi	r30, 0x09	; 9
     80a:	0c 94 b2 1a 	jmp	0x3564	; 0x3564 <__epilogue_restores__+0x12>

0000080e <__fixsfsi>:
     80e:	ac e0       	ldi	r26, 0x0C	; 12
     810:	b0 e0       	ldi	r27, 0x00	; 0
     812:	ed e0       	ldi	r30, 0x0D	; 13
     814:	f4 e0       	ldi	r31, 0x04	; 4
     816:	0c 94 9d 1a 	jmp	0x353a	; 0x353a <__prologue_saves__+0x20>
     81a:	69 83       	std	Y+1, r22	; 0x01
     81c:	7a 83       	std	Y+2, r23	; 0x02
     81e:	8b 83       	std	Y+3, r24	; 0x03
     820:	9c 83       	std	Y+4, r25	; 0x04
     822:	ce 01       	movw	r24, r28
     824:	01 96       	adiw	r24, 0x01	; 1
     826:	be 01       	movw	r22, r28
     828:	6b 5f       	subi	r22, 0xFB	; 251
     82a:	7f 4f       	sbci	r23, 0xFF	; 255
     82c:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     830:	8d 81       	ldd	r24, Y+5	; 0x05
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	61 f1       	breq	.+88     	; 0x88e <__stack+0x2f>
     836:	82 30       	cpi	r24, 0x02	; 2
     838:	50 f1       	brcs	.+84     	; 0x88e <__stack+0x2f>
     83a:	84 30       	cpi	r24, 0x04	; 4
     83c:	21 f4       	brne	.+8      	; 0x846 <__fixsfsi+0x38>
     83e:	8e 81       	ldd	r24, Y+6	; 0x06
     840:	88 23       	and	r24, r24
     842:	51 f1       	breq	.+84     	; 0x898 <__stack+0x39>
     844:	2e c0       	rjmp	.+92     	; 0x8a2 <__stack+0x43>
     846:	2f 81       	ldd	r18, Y+7	; 0x07
     848:	38 85       	ldd	r19, Y+8	; 0x08
     84a:	37 fd       	sbrc	r19, 7
     84c:	20 c0       	rjmp	.+64     	; 0x88e <__stack+0x2f>
     84e:	6e 81       	ldd	r22, Y+6	; 0x06
     850:	2f 31       	cpi	r18, 0x1F	; 31
     852:	31 05       	cpc	r19, r1
     854:	1c f0       	brlt	.+6      	; 0x85c <__fixsfsi+0x4e>
     856:	66 23       	and	r22, r22
     858:	f9 f0       	breq	.+62     	; 0x898 <__stack+0x39>
     85a:	23 c0       	rjmp	.+70     	; 0x8a2 <__stack+0x43>
     85c:	8e e1       	ldi	r24, 0x1E	; 30
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	82 1b       	sub	r24, r18
     862:	93 0b       	sbc	r25, r19
     864:	29 85       	ldd	r18, Y+9	; 0x09
     866:	3a 85       	ldd	r19, Y+10	; 0x0a
     868:	4b 85       	ldd	r20, Y+11	; 0x0b
     86a:	5c 85       	ldd	r21, Y+12	; 0x0c
     86c:	04 c0       	rjmp	.+8      	; 0x876 <__stack+0x17>
     86e:	56 95       	lsr	r21
     870:	47 95       	ror	r20
     872:	37 95       	ror	r19
     874:	27 95       	ror	r18
     876:	8a 95       	dec	r24
     878:	d2 f7       	brpl	.-12     	; 0x86e <__stack+0xf>
     87a:	66 23       	and	r22, r22
     87c:	b1 f0       	breq	.+44     	; 0x8aa <__stack+0x4b>
     87e:	50 95       	com	r21
     880:	40 95       	com	r20
     882:	30 95       	com	r19
     884:	21 95       	neg	r18
     886:	3f 4f       	sbci	r19, 0xFF	; 255
     888:	4f 4f       	sbci	r20, 0xFF	; 255
     88a:	5f 4f       	sbci	r21, 0xFF	; 255
     88c:	0e c0       	rjmp	.+28     	; 0x8aa <__stack+0x4b>
     88e:	20 e0       	ldi	r18, 0x00	; 0
     890:	30 e0       	ldi	r19, 0x00	; 0
     892:	40 e0       	ldi	r20, 0x00	; 0
     894:	50 e0       	ldi	r21, 0x00	; 0
     896:	09 c0       	rjmp	.+18     	; 0x8aa <__stack+0x4b>
     898:	2f ef       	ldi	r18, 0xFF	; 255
     89a:	3f ef       	ldi	r19, 0xFF	; 255
     89c:	4f ef       	ldi	r20, 0xFF	; 255
     89e:	5f e7       	ldi	r21, 0x7F	; 127
     8a0:	04 c0       	rjmp	.+8      	; 0x8aa <__stack+0x4b>
     8a2:	20 e0       	ldi	r18, 0x00	; 0
     8a4:	30 e0       	ldi	r19, 0x00	; 0
     8a6:	40 e0       	ldi	r20, 0x00	; 0
     8a8:	50 e8       	ldi	r21, 0x80	; 128
     8aa:	b9 01       	movw	r22, r18
     8ac:	ca 01       	movw	r24, r20
     8ae:	2c 96       	adiw	r28, 0x0c	; 12
     8b0:	e2 e0       	ldi	r30, 0x02	; 2
     8b2:	0c 94 b9 1a 	jmp	0x3572	; 0x3572 <__epilogue_restores__+0x20>

000008b6 <__clzsi2>:
     8b6:	ef 92       	push	r14
     8b8:	ff 92       	push	r15
     8ba:	0f 93       	push	r16
     8bc:	1f 93       	push	r17
     8be:	7b 01       	movw	r14, r22
     8c0:	8c 01       	movw	r16, r24
     8c2:	80 e0       	ldi	r24, 0x00	; 0
     8c4:	e8 16       	cp	r14, r24
     8c6:	80 e0       	ldi	r24, 0x00	; 0
     8c8:	f8 06       	cpc	r15, r24
     8ca:	81 e0       	ldi	r24, 0x01	; 1
     8cc:	08 07       	cpc	r16, r24
     8ce:	80 e0       	ldi	r24, 0x00	; 0
     8d0:	18 07       	cpc	r17, r24
     8d2:	88 f4       	brcc	.+34     	; 0x8f6 <__clzsi2+0x40>
     8d4:	8f ef       	ldi	r24, 0xFF	; 255
     8d6:	e8 16       	cp	r14, r24
     8d8:	f1 04       	cpc	r15, r1
     8da:	01 05       	cpc	r16, r1
     8dc:	11 05       	cpc	r17, r1
     8de:	31 f0       	breq	.+12     	; 0x8ec <__clzsi2+0x36>
     8e0:	28 f0       	brcs	.+10     	; 0x8ec <__clzsi2+0x36>
     8e2:	88 e0       	ldi	r24, 0x08	; 8
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	b0 e0       	ldi	r27, 0x00	; 0
     8ea:	17 c0       	rjmp	.+46     	; 0x91a <__clzsi2+0x64>
     8ec:	80 e0       	ldi	r24, 0x00	; 0
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	a0 e0       	ldi	r26, 0x00	; 0
     8f2:	b0 e0       	ldi	r27, 0x00	; 0
     8f4:	12 c0       	rjmp	.+36     	; 0x91a <__clzsi2+0x64>
     8f6:	80 e0       	ldi	r24, 0x00	; 0
     8f8:	e8 16       	cp	r14, r24
     8fa:	80 e0       	ldi	r24, 0x00	; 0
     8fc:	f8 06       	cpc	r15, r24
     8fe:	80 e0       	ldi	r24, 0x00	; 0
     900:	08 07       	cpc	r16, r24
     902:	81 e0       	ldi	r24, 0x01	; 1
     904:	18 07       	cpc	r17, r24
     906:	28 f0       	brcs	.+10     	; 0x912 <__clzsi2+0x5c>
     908:	88 e1       	ldi	r24, 0x18	; 24
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	a0 e0       	ldi	r26, 0x00	; 0
     90e:	b0 e0       	ldi	r27, 0x00	; 0
     910:	04 c0       	rjmp	.+8      	; 0x91a <__clzsi2+0x64>
     912:	80 e1       	ldi	r24, 0x10	; 16
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	a0 e0       	ldi	r26, 0x00	; 0
     918:	b0 e0       	ldi	r27, 0x00	; 0
     91a:	20 e2       	ldi	r18, 0x20	; 32
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	28 1b       	sub	r18, r24
     924:	39 0b       	sbc	r19, r25
     926:	4a 0b       	sbc	r20, r26
     928:	5b 0b       	sbc	r21, r27
     92a:	04 c0       	rjmp	.+8      	; 0x934 <__clzsi2+0x7e>
     92c:	16 95       	lsr	r17
     92e:	07 95       	ror	r16
     930:	f7 94       	ror	r15
     932:	e7 94       	ror	r14
     934:	8a 95       	dec	r24
     936:	d2 f7       	brpl	.-12     	; 0x92c <__clzsi2+0x76>
     938:	f7 01       	movw	r30, r14
     93a:	e8 59       	subi	r30, 0x98	; 152
     93c:	ff 4f       	sbci	r31, 0xFF	; 255
     93e:	80 81       	ld	r24, Z
     940:	28 1b       	sub	r18, r24
     942:	31 09       	sbc	r19, r1
     944:	41 09       	sbc	r20, r1
     946:	51 09       	sbc	r21, r1
     948:	c9 01       	movw	r24, r18
     94a:	1f 91       	pop	r17
     94c:	0f 91       	pop	r16
     94e:	ff 90       	pop	r15
     950:	ef 90       	pop	r14
     952:	08 95       	ret

00000954 <__pack_f>:
     954:	df 92       	push	r13
     956:	ef 92       	push	r14
     958:	ff 92       	push	r15
     95a:	0f 93       	push	r16
     95c:	1f 93       	push	r17
     95e:	fc 01       	movw	r30, r24
     960:	e4 80       	ldd	r14, Z+4	; 0x04
     962:	f5 80       	ldd	r15, Z+5	; 0x05
     964:	06 81       	ldd	r16, Z+6	; 0x06
     966:	17 81       	ldd	r17, Z+7	; 0x07
     968:	d1 80       	ldd	r13, Z+1	; 0x01
     96a:	80 81       	ld	r24, Z
     96c:	82 30       	cpi	r24, 0x02	; 2
     96e:	48 f4       	brcc	.+18     	; 0x982 <__pack_f+0x2e>
     970:	80 e0       	ldi	r24, 0x00	; 0
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	a0 e1       	ldi	r26, 0x10	; 16
     976:	b0 e0       	ldi	r27, 0x00	; 0
     978:	e8 2a       	or	r14, r24
     97a:	f9 2a       	or	r15, r25
     97c:	0a 2b       	or	r16, r26
     97e:	1b 2b       	or	r17, r27
     980:	a5 c0       	rjmp	.+330    	; 0xacc <__pack_f+0x178>
     982:	84 30       	cpi	r24, 0x04	; 4
     984:	09 f4       	brne	.+2      	; 0x988 <__pack_f+0x34>
     986:	9f c0       	rjmp	.+318    	; 0xac6 <__pack_f+0x172>
     988:	82 30       	cpi	r24, 0x02	; 2
     98a:	21 f4       	brne	.+8      	; 0x994 <__pack_f+0x40>
     98c:	ee 24       	eor	r14, r14
     98e:	ff 24       	eor	r15, r15
     990:	87 01       	movw	r16, r14
     992:	05 c0       	rjmp	.+10     	; 0x99e <__pack_f+0x4a>
     994:	e1 14       	cp	r14, r1
     996:	f1 04       	cpc	r15, r1
     998:	01 05       	cpc	r16, r1
     99a:	11 05       	cpc	r17, r1
     99c:	19 f4       	brne	.+6      	; 0x9a4 <__pack_f+0x50>
     99e:	e0 e0       	ldi	r30, 0x00	; 0
     9a0:	f0 e0       	ldi	r31, 0x00	; 0
     9a2:	96 c0       	rjmp	.+300    	; 0xad0 <__pack_f+0x17c>
     9a4:	62 81       	ldd	r22, Z+2	; 0x02
     9a6:	73 81       	ldd	r23, Z+3	; 0x03
     9a8:	9f ef       	ldi	r25, 0xFF	; 255
     9aa:	62 38       	cpi	r22, 0x82	; 130
     9ac:	79 07       	cpc	r23, r25
     9ae:	0c f0       	brlt	.+2      	; 0x9b2 <__pack_f+0x5e>
     9b0:	5b c0       	rjmp	.+182    	; 0xa68 <__pack_f+0x114>
     9b2:	22 e8       	ldi	r18, 0x82	; 130
     9b4:	3f ef       	ldi	r19, 0xFF	; 255
     9b6:	26 1b       	sub	r18, r22
     9b8:	37 0b       	sbc	r19, r23
     9ba:	2a 31       	cpi	r18, 0x1A	; 26
     9bc:	31 05       	cpc	r19, r1
     9be:	2c f0       	brlt	.+10     	; 0x9ca <__pack_f+0x76>
     9c0:	20 e0       	ldi	r18, 0x00	; 0
     9c2:	30 e0       	ldi	r19, 0x00	; 0
     9c4:	40 e0       	ldi	r20, 0x00	; 0
     9c6:	50 e0       	ldi	r21, 0x00	; 0
     9c8:	2a c0       	rjmp	.+84     	; 0xa1e <__pack_f+0xca>
     9ca:	b8 01       	movw	r22, r16
     9cc:	a7 01       	movw	r20, r14
     9ce:	02 2e       	mov	r0, r18
     9d0:	04 c0       	rjmp	.+8      	; 0x9da <__pack_f+0x86>
     9d2:	76 95       	lsr	r23
     9d4:	67 95       	ror	r22
     9d6:	57 95       	ror	r21
     9d8:	47 95       	ror	r20
     9da:	0a 94       	dec	r0
     9dc:	d2 f7       	brpl	.-12     	; 0x9d2 <__pack_f+0x7e>
     9de:	81 e0       	ldi	r24, 0x01	; 1
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	a0 e0       	ldi	r26, 0x00	; 0
     9e4:	b0 e0       	ldi	r27, 0x00	; 0
     9e6:	04 c0       	rjmp	.+8      	; 0x9f0 <__pack_f+0x9c>
     9e8:	88 0f       	add	r24, r24
     9ea:	99 1f       	adc	r25, r25
     9ec:	aa 1f       	adc	r26, r26
     9ee:	bb 1f       	adc	r27, r27
     9f0:	2a 95       	dec	r18
     9f2:	d2 f7       	brpl	.-12     	; 0x9e8 <__pack_f+0x94>
     9f4:	01 97       	sbiw	r24, 0x01	; 1
     9f6:	a1 09       	sbc	r26, r1
     9f8:	b1 09       	sbc	r27, r1
     9fa:	8e 21       	and	r24, r14
     9fc:	9f 21       	and	r25, r15
     9fe:	a0 23       	and	r26, r16
     a00:	b1 23       	and	r27, r17
     a02:	00 97       	sbiw	r24, 0x00	; 0
     a04:	a1 05       	cpc	r26, r1
     a06:	b1 05       	cpc	r27, r1
     a08:	21 f0       	breq	.+8      	; 0xa12 <__pack_f+0xbe>
     a0a:	81 e0       	ldi	r24, 0x01	; 1
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	a0 e0       	ldi	r26, 0x00	; 0
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	9a 01       	movw	r18, r20
     a14:	ab 01       	movw	r20, r22
     a16:	28 2b       	or	r18, r24
     a18:	39 2b       	or	r19, r25
     a1a:	4a 2b       	or	r20, r26
     a1c:	5b 2b       	or	r21, r27
     a1e:	da 01       	movw	r26, r20
     a20:	c9 01       	movw	r24, r18
     a22:	8f 77       	andi	r24, 0x7F	; 127
     a24:	90 70       	andi	r25, 0x00	; 0
     a26:	a0 70       	andi	r26, 0x00	; 0
     a28:	b0 70       	andi	r27, 0x00	; 0
     a2a:	80 34       	cpi	r24, 0x40	; 64
     a2c:	91 05       	cpc	r25, r1
     a2e:	a1 05       	cpc	r26, r1
     a30:	b1 05       	cpc	r27, r1
     a32:	39 f4       	brne	.+14     	; 0xa42 <__pack_f+0xee>
     a34:	27 ff       	sbrs	r18, 7
     a36:	09 c0       	rjmp	.+18     	; 0xa4a <__pack_f+0xf6>
     a38:	20 5c       	subi	r18, 0xC0	; 192
     a3a:	3f 4f       	sbci	r19, 0xFF	; 255
     a3c:	4f 4f       	sbci	r20, 0xFF	; 255
     a3e:	5f 4f       	sbci	r21, 0xFF	; 255
     a40:	04 c0       	rjmp	.+8      	; 0xa4a <__pack_f+0xf6>
     a42:	21 5c       	subi	r18, 0xC1	; 193
     a44:	3f 4f       	sbci	r19, 0xFF	; 255
     a46:	4f 4f       	sbci	r20, 0xFF	; 255
     a48:	5f 4f       	sbci	r21, 0xFF	; 255
     a4a:	e0 e0       	ldi	r30, 0x00	; 0
     a4c:	f0 e0       	ldi	r31, 0x00	; 0
     a4e:	20 30       	cpi	r18, 0x00	; 0
     a50:	a0 e0       	ldi	r26, 0x00	; 0
     a52:	3a 07       	cpc	r19, r26
     a54:	a0 e0       	ldi	r26, 0x00	; 0
     a56:	4a 07       	cpc	r20, r26
     a58:	a0 e4       	ldi	r26, 0x40	; 64
     a5a:	5a 07       	cpc	r21, r26
     a5c:	10 f0       	brcs	.+4      	; 0xa62 <__pack_f+0x10e>
     a5e:	e1 e0       	ldi	r30, 0x01	; 1
     a60:	f0 e0       	ldi	r31, 0x00	; 0
     a62:	79 01       	movw	r14, r18
     a64:	8a 01       	movw	r16, r20
     a66:	27 c0       	rjmp	.+78     	; 0xab6 <__pack_f+0x162>
     a68:	60 38       	cpi	r22, 0x80	; 128
     a6a:	71 05       	cpc	r23, r1
     a6c:	64 f5       	brge	.+88     	; 0xac6 <__pack_f+0x172>
     a6e:	fb 01       	movw	r30, r22
     a70:	e1 58       	subi	r30, 0x81	; 129
     a72:	ff 4f       	sbci	r31, 0xFF	; 255
     a74:	d8 01       	movw	r26, r16
     a76:	c7 01       	movw	r24, r14
     a78:	8f 77       	andi	r24, 0x7F	; 127
     a7a:	90 70       	andi	r25, 0x00	; 0
     a7c:	a0 70       	andi	r26, 0x00	; 0
     a7e:	b0 70       	andi	r27, 0x00	; 0
     a80:	80 34       	cpi	r24, 0x40	; 64
     a82:	91 05       	cpc	r25, r1
     a84:	a1 05       	cpc	r26, r1
     a86:	b1 05       	cpc	r27, r1
     a88:	39 f4       	brne	.+14     	; 0xa98 <__pack_f+0x144>
     a8a:	e7 fe       	sbrs	r14, 7
     a8c:	0d c0       	rjmp	.+26     	; 0xaa8 <__pack_f+0x154>
     a8e:	80 e4       	ldi	r24, 0x40	; 64
     a90:	90 e0       	ldi	r25, 0x00	; 0
     a92:	a0 e0       	ldi	r26, 0x00	; 0
     a94:	b0 e0       	ldi	r27, 0x00	; 0
     a96:	04 c0       	rjmp	.+8      	; 0xaa0 <__pack_f+0x14c>
     a98:	8f e3       	ldi	r24, 0x3F	; 63
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	a0 e0       	ldi	r26, 0x00	; 0
     a9e:	b0 e0       	ldi	r27, 0x00	; 0
     aa0:	e8 0e       	add	r14, r24
     aa2:	f9 1e       	adc	r15, r25
     aa4:	0a 1f       	adc	r16, r26
     aa6:	1b 1f       	adc	r17, r27
     aa8:	17 ff       	sbrs	r17, 7
     aaa:	05 c0       	rjmp	.+10     	; 0xab6 <__pack_f+0x162>
     aac:	16 95       	lsr	r17
     aae:	07 95       	ror	r16
     ab0:	f7 94       	ror	r15
     ab2:	e7 94       	ror	r14
     ab4:	31 96       	adiw	r30, 0x01	; 1
     ab6:	87 e0       	ldi	r24, 0x07	; 7
     ab8:	16 95       	lsr	r17
     aba:	07 95       	ror	r16
     abc:	f7 94       	ror	r15
     abe:	e7 94       	ror	r14
     ac0:	8a 95       	dec	r24
     ac2:	d1 f7       	brne	.-12     	; 0xab8 <__pack_f+0x164>
     ac4:	05 c0       	rjmp	.+10     	; 0xad0 <__pack_f+0x17c>
     ac6:	ee 24       	eor	r14, r14
     ac8:	ff 24       	eor	r15, r15
     aca:	87 01       	movw	r16, r14
     acc:	ef ef       	ldi	r30, 0xFF	; 255
     ace:	f0 e0       	ldi	r31, 0x00	; 0
     ad0:	6e 2f       	mov	r22, r30
     ad2:	67 95       	ror	r22
     ad4:	66 27       	eor	r22, r22
     ad6:	67 95       	ror	r22
     ad8:	90 2f       	mov	r25, r16
     ada:	9f 77       	andi	r25, 0x7F	; 127
     adc:	d7 94       	ror	r13
     ade:	dd 24       	eor	r13, r13
     ae0:	d7 94       	ror	r13
     ae2:	8e 2f       	mov	r24, r30
     ae4:	86 95       	lsr	r24
     ae6:	49 2f       	mov	r20, r25
     ae8:	46 2b       	or	r20, r22
     aea:	58 2f       	mov	r21, r24
     aec:	5d 29       	or	r21, r13
     aee:	b7 01       	movw	r22, r14
     af0:	ca 01       	movw	r24, r20
     af2:	1f 91       	pop	r17
     af4:	0f 91       	pop	r16
     af6:	ff 90       	pop	r15
     af8:	ef 90       	pop	r14
     afa:	df 90       	pop	r13
     afc:	08 95       	ret

00000afe <__unpack_f>:
     afe:	fc 01       	movw	r30, r24
     b00:	db 01       	movw	r26, r22
     b02:	40 81       	ld	r20, Z
     b04:	51 81       	ldd	r21, Z+1	; 0x01
     b06:	22 81       	ldd	r18, Z+2	; 0x02
     b08:	62 2f       	mov	r22, r18
     b0a:	6f 77       	andi	r22, 0x7F	; 127
     b0c:	70 e0       	ldi	r23, 0x00	; 0
     b0e:	22 1f       	adc	r18, r18
     b10:	22 27       	eor	r18, r18
     b12:	22 1f       	adc	r18, r18
     b14:	93 81       	ldd	r25, Z+3	; 0x03
     b16:	89 2f       	mov	r24, r25
     b18:	88 0f       	add	r24, r24
     b1a:	82 2b       	or	r24, r18
     b1c:	28 2f       	mov	r18, r24
     b1e:	30 e0       	ldi	r19, 0x00	; 0
     b20:	99 1f       	adc	r25, r25
     b22:	99 27       	eor	r25, r25
     b24:	99 1f       	adc	r25, r25
     b26:	11 96       	adiw	r26, 0x01	; 1
     b28:	9c 93       	st	X, r25
     b2a:	11 97       	sbiw	r26, 0x01	; 1
     b2c:	21 15       	cp	r18, r1
     b2e:	31 05       	cpc	r19, r1
     b30:	a9 f5       	brne	.+106    	; 0xb9c <__unpack_f+0x9e>
     b32:	41 15       	cp	r20, r1
     b34:	51 05       	cpc	r21, r1
     b36:	61 05       	cpc	r22, r1
     b38:	71 05       	cpc	r23, r1
     b3a:	11 f4       	brne	.+4      	; 0xb40 <__unpack_f+0x42>
     b3c:	82 e0       	ldi	r24, 0x02	; 2
     b3e:	37 c0       	rjmp	.+110    	; 0xbae <__unpack_f+0xb0>
     b40:	82 e8       	ldi	r24, 0x82	; 130
     b42:	9f ef       	ldi	r25, 0xFF	; 255
     b44:	13 96       	adiw	r26, 0x03	; 3
     b46:	9c 93       	st	X, r25
     b48:	8e 93       	st	-X, r24
     b4a:	12 97       	sbiw	r26, 0x02	; 2
     b4c:	9a 01       	movw	r18, r20
     b4e:	ab 01       	movw	r20, r22
     b50:	67 e0       	ldi	r22, 0x07	; 7
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	44 1f       	adc	r20, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	6a 95       	dec	r22
     b5c:	d1 f7       	brne	.-12     	; 0xb52 <__unpack_f+0x54>
     b5e:	83 e0       	ldi	r24, 0x03	; 3
     b60:	8c 93       	st	X, r24
     b62:	0d c0       	rjmp	.+26     	; 0xb7e <__unpack_f+0x80>
     b64:	22 0f       	add	r18, r18
     b66:	33 1f       	adc	r19, r19
     b68:	44 1f       	adc	r20, r20
     b6a:	55 1f       	adc	r21, r21
     b6c:	12 96       	adiw	r26, 0x02	; 2
     b6e:	8d 91       	ld	r24, X+
     b70:	9c 91       	ld	r25, X
     b72:	13 97       	sbiw	r26, 0x03	; 3
     b74:	01 97       	sbiw	r24, 0x01	; 1
     b76:	13 96       	adiw	r26, 0x03	; 3
     b78:	9c 93       	st	X, r25
     b7a:	8e 93       	st	-X, r24
     b7c:	12 97       	sbiw	r26, 0x02	; 2
     b7e:	20 30       	cpi	r18, 0x00	; 0
     b80:	80 e0       	ldi	r24, 0x00	; 0
     b82:	38 07       	cpc	r19, r24
     b84:	80 e0       	ldi	r24, 0x00	; 0
     b86:	48 07       	cpc	r20, r24
     b88:	80 e4       	ldi	r24, 0x40	; 64
     b8a:	58 07       	cpc	r21, r24
     b8c:	58 f3       	brcs	.-42     	; 0xb64 <__unpack_f+0x66>
     b8e:	14 96       	adiw	r26, 0x04	; 4
     b90:	2d 93       	st	X+, r18
     b92:	3d 93       	st	X+, r19
     b94:	4d 93       	st	X+, r20
     b96:	5c 93       	st	X, r21
     b98:	17 97       	sbiw	r26, 0x07	; 7
     b9a:	08 95       	ret
     b9c:	2f 3f       	cpi	r18, 0xFF	; 255
     b9e:	31 05       	cpc	r19, r1
     ba0:	79 f4       	brne	.+30     	; 0xbc0 <__unpack_f+0xc2>
     ba2:	41 15       	cp	r20, r1
     ba4:	51 05       	cpc	r21, r1
     ba6:	61 05       	cpc	r22, r1
     ba8:	71 05       	cpc	r23, r1
     baa:	19 f4       	brne	.+6      	; 0xbb2 <__unpack_f+0xb4>
     bac:	84 e0       	ldi	r24, 0x04	; 4
     bae:	8c 93       	st	X, r24
     bb0:	08 95       	ret
     bb2:	64 ff       	sbrs	r22, 4
     bb4:	03 c0       	rjmp	.+6      	; 0xbbc <__unpack_f+0xbe>
     bb6:	81 e0       	ldi	r24, 0x01	; 1
     bb8:	8c 93       	st	X, r24
     bba:	12 c0       	rjmp	.+36     	; 0xbe0 <__unpack_f+0xe2>
     bbc:	1c 92       	st	X, r1
     bbe:	10 c0       	rjmp	.+32     	; 0xbe0 <__unpack_f+0xe2>
     bc0:	2f 57       	subi	r18, 0x7F	; 127
     bc2:	30 40       	sbci	r19, 0x00	; 0
     bc4:	13 96       	adiw	r26, 0x03	; 3
     bc6:	3c 93       	st	X, r19
     bc8:	2e 93       	st	-X, r18
     bca:	12 97       	sbiw	r26, 0x02	; 2
     bcc:	83 e0       	ldi	r24, 0x03	; 3
     bce:	8c 93       	st	X, r24
     bd0:	87 e0       	ldi	r24, 0x07	; 7
     bd2:	44 0f       	add	r20, r20
     bd4:	55 1f       	adc	r21, r21
     bd6:	66 1f       	adc	r22, r22
     bd8:	77 1f       	adc	r23, r23
     bda:	8a 95       	dec	r24
     bdc:	d1 f7       	brne	.-12     	; 0xbd2 <__unpack_f+0xd4>
     bde:	70 64       	ori	r23, 0x40	; 64
     be0:	14 96       	adiw	r26, 0x04	; 4
     be2:	4d 93       	st	X+, r20
     be4:	5d 93       	st	X+, r21
     be6:	6d 93       	st	X+, r22
     be8:	7c 93       	st	X, r23
     bea:	17 97       	sbiw	r26, 0x07	; 7
     bec:	08 95       	ret

00000bee <__fpcmp_parts_f>:
     bee:	1f 93       	push	r17
     bf0:	dc 01       	movw	r26, r24
     bf2:	fb 01       	movw	r30, r22
     bf4:	9c 91       	ld	r25, X
     bf6:	92 30       	cpi	r25, 0x02	; 2
     bf8:	08 f4       	brcc	.+2      	; 0xbfc <__fpcmp_parts_f+0xe>
     bfa:	47 c0       	rjmp	.+142    	; 0xc8a <__fpcmp_parts_f+0x9c>
     bfc:	80 81       	ld	r24, Z
     bfe:	82 30       	cpi	r24, 0x02	; 2
     c00:	08 f4       	brcc	.+2      	; 0xc04 <__fpcmp_parts_f+0x16>
     c02:	43 c0       	rjmp	.+134    	; 0xc8a <__fpcmp_parts_f+0x9c>
     c04:	94 30       	cpi	r25, 0x04	; 4
     c06:	51 f4       	brne	.+20     	; 0xc1c <__fpcmp_parts_f+0x2e>
     c08:	11 96       	adiw	r26, 0x01	; 1
     c0a:	1c 91       	ld	r17, X
     c0c:	84 30       	cpi	r24, 0x04	; 4
     c0e:	99 f5       	brne	.+102    	; 0xc76 <__fpcmp_parts_f+0x88>
     c10:	81 81       	ldd	r24, Z+1	; 0x01
     c12:	68 2f       	mov	r22, r24
     c14:	70 e0       	ldi	r23, 0x00	; 0
     c16:	61 1b       	sub	r22, r17
     c18:	71 09       	sbc	r23, r1
     c1a:	3f c0       	rjmp	.+126    	; 0xc9a <__fpcmp_parts_f+0xac>
     c1c:	84 30       	cpi	r24, 0x04	; 4
     c1e:	21 f0       	breq	.+8      	; 0xc28 <__fpcmp_parts_f+0x3a>
     c20:	92 30       	cpi	r25, 0x02	; 2
     c22:	31 f4       	brne	.+12     	; 0xc30 <__fpcmp_parts_f+0x42>
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	b9 f1       	breq	.+110    	; 0xc96 <__fpcmp_parts_f+0xa8>
     c28:	81 81       	ldd	r24, Z+1	; 0x01
     c2a:	88 23       	and	r24, r24
     c2c:	89 f1       	breq	.+98     	; 0xc90 <__fpcmp_parts_f+0xa2>
     c2e:	2d c0       	rjmp	.+90     	; 0xc8a <__fpcmp_parts_f+0x9c>
     c30:	11 96       	adiw	r26, 0x01	; 1
     c32:	1c 91       	ld	r17, X
     c34:	11 97       	sbiw	r26, 0x01	; 1
     c36:	82 30       	cpi	r24, 0x02	; 2
     c38:	f1 f0       	breq	.+60     	; 0xc76 <__fpcmp_parts_f+0x88>
     c3a:	81 81       	ldd	r24, Z+1	; 0x01
     c3c:	18 17       	cp	r17, r24
     c3e:	d9 f4       	brne	.+54     	; 0xc76 <__fpcmp_parts_f+0x88>
     c40:	12 96       	adiw	r26, 0x02	; 2
     c42:	2d 91       	ld	r18, X+
     c44:	3c 91       	ld	r19, X
     c46:	13 97       	sbiw	r26, 0x03	; 3
     c48:	82 81       	ldd	r24, Z+2	; 0x02
     c4a:	93 81       	ldd	r25, Z+3	; 0x03
     c4c:	82 17       	cp	r24, r18
     c4e:	93 07       	cpc	r25, r19
     c50:	94 f0       	brlt	.+36     	; 0xc76 <__fpcmp_parts_f+0x88>
     c52:	28 17       	cp	r18, r24
     c54:	39 07       	cpc	r19, r25
     c56:	bc f0       	brlt	.+46     	; 0xc86 <__fpcmp_parts_f+0x98>
     c58:	14 96       	adiw	r26, 0x04	; 4
     c5a:	8d 91       	ld	r24, X+
     c5c:	9d 91       	ld	r25, X+
     c5e:	0d 90       	ld	r0, X+
     c60:	bc 91       	ld	r27, X
     c62:	a0 2d       	mov	r26, r0
     c64:	24 81       	ldd	r18, Z+4	; 0x04
     c66:	35 81       	ldd	r19, Z+5	; 0x05
     c68:	46 81       	ldd	r20, Z+6	; 0x06
     c6a:	57 81       	ldd	r21, Z+7	; 0x07
     c6c:	28 17       	cp	r18, r24
     c6e:	39 07       	cpc	r19, r25
     c70:	4a 07       	cpc	r20, r26
     c72:	5b 07       	cpc	r21, r27
     c74:	18 f4       	brcc	.+6      	; 0xc7c <__fpcmp_parts_f+0x8e>
     c76:	11 23       	and	r17, r17
     c78:	41 f0       	breq	.+16     	; 0xc8a <__fpcmp_parts_f+0x9c>
     c7a:	0a c0       	rjmp	.+20     	; 0xc90 <__fpcmp_parts_f+0xa2>
     c7c:	82 17       	cp	r24, r18
     c7e:	93 07       	cpc	r25, r19
     c80:	a4 07       	cpc	r26, r20
     c82:	b5 07       	cpc	r27, r21
     c84:	40 f4       	brcc	.+16     	; 0xc96 <__fpcmp_parts_f+0xa8>
     c86:	11 23       	and	r17, r17
     c88:	19 f0       	breq	.+6      	; 0xc90 <__fpcmp_parts_f+0xa2>
     c8a:	61 e0       	ldi	r22, 0x01	; 1
     c8c:	70 e0       	ldi	r23, 0x00	; 0
     c8e:	05 c0       	rjmp	.+10     	; 0xc9a <__fpcmp_parts_f+0xac>
     c90:	6f ef       	ldi	r22, 0xFF	; 255
     c92:	7f ef       	ldi	r23, 0xFF	; 255
     c94:	02 c0       	rjmp	.+4      	; 0xc9a <__fpcmp_parts_f+0xac>
     c96:	60 e0       	ldi	r22, 0x00	; 0
     c98:	70 e0       	ldi	r23, 0x00	; 0
     c9a:	cb 01       	movw	r24, r22
     c9c:	1f 91       	pop	r17
     c9e:	08 95       	ret

00000ca0 <UART_VidInit>:
#include "UART_Interface.h"
#include "UART_Register.h"


void UART_VidInit(u16 LOC_u16BaudRate)
{
     ca0:	df 93       	push	r29
     ca2:	cf 93       	push	r28
     ca4:	00 d0       	rcall	.+0      	; 0xca6 <UART_VidInit+0x6>
     ca6:	00 d0       	rcall	.+0      	; 0xca8 <UART_VidInit+0x8>
     ca8:	0f 92       	push	r0
     caa:	cd b7       	in	r28, 0x3d	; 61
     cac:	de b7       	in	r29, 0x3e	; 62
     cae:	9d 83       	std	Y+5, r25	; 0x05
     cb0:	8c 83       	std	Y+4, r24	; 0x04
	//Baud Rate
	u16 UBRR=0;
     cb2:	1b 82       	std	Y+3, r1	; 0x03
     cb4:	1a 82       	std	Y+2, r1	; 0x02
	UBRR=((8000000/(16*(u32)LOC_u16BaudRate))-1);
     cb6:	8c 81       	ldd	r24, Y+4	; 0x04
     cb8:	9d 81       	ldd	r25, Y+5	; 0x05
     cba:	cc 01       	movw	r24, r24
     cbc:	a0 e0       	ldi	r26, 0x00	; 0
     cbe:	b0 e0       	ldi	r27, 0x00	; 0
     cc0:	88 0f       	add	r24, r24
     cc2:	99 1f       	adc	r25, r25
     cc4:	aa 1f       	adc	r26, r26
     cc6:	bb 1f       	adc	r27, r27
     cc8:	88 0f       	add	r24, r24
     cca:	99 1f       	adc	r25, r25
     ccc:	aa 1f       	adc	r26, r26
     cce:	bb 1f       	adc	r27, r27
     cd0:	88 0f       	add	r24, r24
     cd2:	99 1f       	adc	r25, r25
     cd4:	aa 1f       	adc	r26, r26
     cd6:	bb 1f       	adc	r27, r27
     cd8:	88 0f       	add	r24, r24
     cda:	99 1f       	adc	r25, r25
     cdc:	aa 1f       	adc	r26, r26
     cde:	bb 1f       	adc	r27, r27
     ce0:	9c 01       	movw	r18, r24
     ce2:	ad 01       	movw	r20, r26
     ce4:	80 e0       	ldi	r24, 0x00	; 0
     ce6:	92 e1       	ldi	r25, 0x12	; 18
     ce8:	aa e7       	ldi	r26, 0x7A	; 122
     cea:	b0 e0       	ldi	r27, 0x00	; 0
     cec:	bc 01       	movw	r22, r24
     cee:	cd 01       	movw	r24, r26
     cf0:	0e 94 6b 1a 	call	0x34d6	; 0x34d6 <__udivmodsi4>
     cf4:	da 01       	movw	r26, r20
     cf6:	c9 01       	movw	r24, r18
     cf8:	01 97       	sbiw	r24, 0x01	; 1
     cfa:	9b 83       	std	Y+3, r25	; 0x03
     cfc:	8a 83       	std	Y+2, r24	; 0x02
	UBRRL=UBRR;
     cfe:	e9 e2       	ldi	r30, 0x29	; 41
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	8a 81       	ldd	r24, Y+2	; 0x02
     d04:	80 83       	st	Z, r24
	UBRRH=0;
     d06:	e0 e4       	ldi	r30, 0x40	; 64
     d08:	f0 e0       	ldi	r31, 0x00	; 0
     d0a:	10 82       	st	Z, r1



	//Enable double speed
	#if DoubleSpeed==0
		CLR_BIT(UCSRA,U2X);
     d0c:	ab e2       	ldi	r26, 0x2B	; 43
     d0e:	b0 e0       	ldi	r27, 0x00	; 0
     d10:	eb e2       	ldi	r30, 0x2B	; 43
     d12:	f0 e0       	ldi	r31, 0x00	; 0
     d14:	80 81       	ld	r24, Z
     d16:	8d 7f       	andi	r24, 0xFD	; 253
     d18:	8c 93       	st	X, r24
		SET_BIT(UCSRA,U2X)
	#endif
		
	//Enable Multiple Processor Mode
	#if MutiProcessor==0
		CLR_BIT(UCSRA,MPCM);
     d1a:	ab e2       	ldi	r26, 0x2B	; 43
     d1c:	b0 e0       	ldi	r27, 0x00	; 0
     d1e:	eb e2       	ldi	r30, 0x2B	; 43
     d20:	f0 e0       	ldi	r31, 0x00	; 0
     d22:	80 81       	ld	r24, Z
     d24:	8e 7f       	andi	r24, 0xFE	; 254
     d26:	8c 93       	st	X, r24
	#elif MutiProcessor==1
		SET_BIT(UCSRA,MPCM);
	#endif
	
	//Character Size
		u8 UCSR1=0;
     d28:	19 82       	std	Y+1, r1	; 0x01
	#elif CharSize==7
	CLR_BIT(UCSRB,UCSZ2);
	SET_BIT(UCSR1,UCSZ1);
	CLR_BIT(UCSR1,UCSZ0);
	#elif CharSize==8
	CLR_BIT(UCSRB,UCSZ2);
     d2a:	aa e2       	ldi	r26, 0x2A	; 42
     d2c:	b0 e0       	ldi	r27, 0x00	; 0
     d2e:	ea e2       	ldi	r30, 0x2A	; 42
     d30:	f0 e0       	ldi	r31, 0x00	; 0
     d32:	80 81       	ld	r24, Z
     d34:	8b 7f       	andi	r24, 0xFB	; 251
     d36:	8c 93       	st	X, r24
	SET_BIT(UCSR1,UCSZ1);
     d38:	89 81       	ldd	r24, Y+1	; 0x01
     d3a:	84 60       	ori	r24, 0x04	; 4
     d3c:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(UCSR1,UCSZ0);
     d3e:	89 81       	ldd	r24, Y+1	; 0x01
     d40:	82 60       	ori	r24, 0x02	; 2
     d42:	89 83       	std	Y+1, r24	; 0x01
	#elif CharSize==9
	SET_BIT(UCSRB,UCSZ2);
	SET_BIT(UCSR1,UCSZ1);
	SET_BIT(UCSR1,UCSZ0);
	#endif
	SET_BIT(UCSR1,7);
     d44:	89 81       	ldd	r24, Y+1	; 0x01
     d46:	80 68       	ori	r24, 0x80	; 128
     d48:	89 83       	std	Y+1, r24	; 0x01
	//To choose Asynchronous and Synchronous
		#if ModeSelect==0
		CLR_BIT(UCSR1,UMSEL);
     d4a:	89 81       	ldd	r24, Y+1	; 0x01
     d4c:	8f 7b       	andi	r24, 0xBF	; 191
     d4e:	89 83       	std	Y+1, r24	; 0x01
		SET_BIT(UCSR1,UMSEL)
		#endif
		
	// TO Enable Parity
		#if ParityMode==0
		CLR_BIT(UCSR1,UPM1);
     d50:	89 81       	ldd	r24, Y+1	; 0x01
     d52:	8f 7d       	andi	r24, 0xDF	; 223
     d54:	89 83       	std	Y+1, r24	; 0x01
		CLR_BIT(UCSR1,UPM0);
     d56:	89 81       	ldd	r24, Y+1	; 0x01
     d58:	8f 7e       	andi	r24, 0xEF	; 239
     d5a:	89 83       	std	Y+1, r24	; 0x01
		SET_BIT(UCSR1,UPM0);
		#endif
		
		//Stop Bit Mode
		#if StopMode==0
		CLR_BIT(UCSR1,USBS);
     d5c:	89 81       	ldd	r24, Y+1	; 0x01
     d5e:	87 7f       	andi	r24, 0xF7	; 247
     d60:	89 83       	std	Y+1, r24	; 0x01
		SET_BIT(UCSR1,USBS);
		#endif
		
		//Clock Polarity 
		#if ClkPolarity==0
		CLR_BIT(UCSR1,UCPOL);
     d62:	89 81       	ldd	r24, Y+1	; 0x01
     d64:	8e 7f       	andi	r24, 0xFE	; 254
     d66:	89 83       	std	Y+1, r24	; 0x01
		SET_BIT(UCSR1,UCPOL);
		#endif
		
		//Enable Tx Rx 
		#if RxEnable==1 
		SET_BIT(UCSRB,RXEN);
     d68:	aa e2       	ldi	r26, 0x2A	; 42
     d6a:	b0 e0       	ldi	r27, 0x00	; 0
     d6c:	ea e2       	ldi	r30, 0x2A	; 42
     d6e:	f0 e0       	ldi	r31, 0x00	; 0
     d70:	80 81       	ld	r24, Z
     d72:	80 61       	ori	r24, 0x10	; 16
     d74:	8c 93       	st	X, r24
		#elif RxEnable==0
		CLR_BIT(UCSRB,RXEN);
		#endif
		
		#if TxEnable==1
		SET_BIT(UCSRB,TXEN);
     d76:	aa e2       	ldi	r26, 0x2A	; 42
     d78:	b0 e0       	ldi	r27, 0x00	; 0
     d7a:	ea e2       	ldi	r30, 0x2A	; 42
     d7c:	f0 e0       	ldi	r31, 0x00	; 0
     d7e:	80 81       	ld	r24, Z
     d80:	88 60       	ori	r24, 0x08	; 8
     d82:	8c 93       	st	X, r24

		#elif TxEnable==0
		CLR_BIT(UCSRB,TXEN);
		#endif
		UCSRC=UCSR1;
     d84:	e0 e4       	ldi	r30, 0x40	; 64
     d86:	f0 e0       	ldi	r31, 0x00	; 0
     d88:	89 81       	ldd	r24, Y+1	; 0x01
     d8a:	80 83       	st	Z, r24
}
     d8c:	0f 90       	pop	r0
     d8e:	0f 90       	pop	r0
     d90:	0f 90       	pop	r0
     d92:	0f 90       	pop	r0
     d94:	0f 90       	pop	r0
     d96:	cf 91       	pop	r28
     d98:	df 91       	pop	r29
     d9a:	08 95       	ret

00000d9c <UART_VidSendData>:


void UART_VidSendData(u8 data)
{
     d9c:	df 93       	push	r29
     d9e:	cf 93       	push	r28
     da0:	0f 92       	push	r0
     da2:	cd b7       	in	r28, 0x3d	; 61
     da4:	de b7       	in	r29, 0x3e	; 62
     da6:	89 83       	std	Y+1, r24	; 0x01
	while( !(GET_BIT(UCSRA,UDRE)));
     da8:	eb e2       	ldi	r30, 0x2B	; 43
     daa:	f0 e0       	ldi	r31, 0x00	; 0
     dac:	80 81       	ld	r24, Z
     dae:	82 95       	swap	r24
     db0:	86 95       	lsr	r24
     db2:	87 70       	andi	r24, 0x07	; 7
     db4:	88 2f       	mov	r24, r24
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	81 70       	andi	r24, 0x01	; 1
     dba:	90 70       	andi	r25, 0x00	; 0
     dbc:	00 97       	sbiw	r24, 0x00	; 0
     dbe:	a1 f3       	breq	.-24     	; 0xda8 <UART_VidSendData+0xc>
	UDR = data ;
     dc0:	ec e2       	ldi	r30, 0x2C	; 44
     dc2:	f0 e0       	ldi	r31, 0x00	; 0
     dc4:	89 81       	ldd	r24, Y+1	; 0x01
     dc6:	80 83       	st	Z, r24
}
     dc8:	0f 90       	pop	r0
     dca:	cf 91       	pop	r28
     dcc:	df 91       	pop	r29
     dce:	08 95       	ret

00000dd0 <UART_u8ReadData>:

u8 UART_u8ReadData(void)
{
     dd0:	df 93       	push	r29
     dd2:	cf 93       	push	r28
     dd4:	cd b7       	in	r28, 0x3d	; 61
     dd6:	de b7       	in	r29, 0x3e	; 62
	while(!GET_BIT(UCSRA,RXC))
     dd8:	eb e2       	ldi	r30, 0x2B	; 43
     dda:	f0 e0       	ldi	r31, 0x00	; 0
     ddc:	80 81       	ld	r24, Z
     dde:	88 23       	and	r24, r24
     de0:	dc f7       	brge	.-10     	; 0xdd8 <UART_u8ReadData+0x8>
	{ /* wait for data to be received */ }

	return UDR;
     de2:	ec e2       	ldi	r30, 0x2C	; 44
     de4:	f0 e0       	ldi	r31, 0x00	; 0
     de6:	80 81       	ld	r24, Z
}
     de8:	cf 91       	pop	r28
     dea:	df 91       	pop	r29
     dec:	08 95       	ret

00000dee <Tim_Count0_VidInit>:

static void (*Tim0CallBackPtrOVFL)(void)=NULL;
static void (*Tim0CallBackPtrCOMA)(void)=NULL;

void Tim_Count0_VidInit(void)
{
     dee:	df 93       	push	r29
     df0:	cf 93       	push	r28
     df2:	cd b7       	in	r28, 0x3d	; 61
     df4:	de b7       	in	r29, 0x3e	; 62
	#if WaveGen==Normal
	CLR_BIT(TCCR0,6);
	CLR_BIT(TCCR0,3);
	#elif WaveGen==PWM_Phase
	SET_BIT(TCCR0,6);
     df6:	a3 e5       	ldi	r26, 0x53	; 83
     df8:	b0 e0       	ldi	r27, 0x00	; 0
     dfa:	e3 e5       	ldi	r30, 0x53	; 83
     dfc:	f0 e0       	ldi	r31, 0x00	; 0
     dfe:	80 81       	ld	r24, Z
     e00:	80 64       	ori	r24, 0x40	; 64
     e02:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,3);
     e04:	a3 e5       	ldi	r26, 0x53	; 83
     e06:	b0 e0       	ldi	r27, 0x00	; 0
     e08:	e3 e5       	ldi	r30, 0x53	; 83
     e0a:	f0 e0       	ldi	r31, 0x00	; 0
     e0c:	80 81       	ld	r24, Z
     e0e:	87 7f       	andi	r24, 0xF7	; 247
     e10:	8c 93       	st	X, r24
	#elif ClockSet==64
	CLR_BIT(TCCR0,2);
	SET_BIT(TCCR0,1);
	SET_BIT(TCCR0,0);
	#elif ClockSet==256
	SET_BIT(TCCR0,2);
     e12:	a3 e5       	ldi	r26, 0x53	; 83
     e14:	b0 e0       	ldi	r27, 0x00	; 0
     e16:	e3 e5       	ldi	r30, 0x53	; 83
     e18:	f0 e0       	ldi	r31, 0x00	; 0
     e1a:	80 81       	ld	r24, Z
     e1c:	84 60       	ori	r24, 0x04	; 4
     e1e:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,1);
     e20:	a3 e5       	ldi	r26, 0x53	; 83
     e22:	b0 e0       	ldi	r27, 0x00	; 0
     e24:	e3 e5       	ldi	r30, 0x53	; 83
     e26:	f0 e0       	ldi	r31, 0x00	; 0
     e28:	80 81       	ld	r24, Z
     e2a:	8d 7f       	andi	r24, 0xFD	; 253
     e2c:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,0);
     e2e:	a3 e5       	ldi	r26, 0x53	; 83
     e30:	b0 e0       	ldi	r27, 0x00	; 0
     e32:	e3 e5       	ldi	r30, 0x53	; 83
     e34:	f0 e0       	ldi	r31, 0x00	; 0
     e36:	80 81       	ld	r24, Z
     e38:	8e 7f       	andi	r24, 0xFE	; 254
     e3a:	8c 93       	st	X, r24
	SET_BIT(TCCR0,1);
	SET_BIT(TCCR0,0);
	#else
		#error "Wrong Choose of Set Clock"
	#endif
}
     e3c:	cf 91       	pop	r28
     e3e:	df 91       	pop	r29
     e40:	08 95       	ret

00000e42 <Tim_Count0_VidCompOutMode>:

void Tim_Count0_VidCompOutMode(void)
{
     e42:	df 93       	push	r29
     e44:	cf 93       	push	r28
     e46:	cd b7       	in	r28, 0x3d	; 61
     e48:	de b7       	in	r29, 0x3e	; 62
	#elif WaveGen==PWM_Phase
		#if PhaseOut==Normal
		CLR_BIT(TCCR0,5);
		CLR_BIT(TCCR0,4);
		#elif PhaseOut==Clear
		SET_BIT(TCCR0,5);
     e4a:	a3 e5       	ldi	r26, 0x53	; 83
     e4c:	b0 e0       	ldi	r27, 0x00	; 0
     e4e:	e3 e5       	ldi	r30, 0x53	; 83
     e50:	f0 e0       	ldi	r31, 0x00	; 0
     e52:	80 81       	ld	r24, Z
     e54:	80 62       	ori	r24, 0x20	; 32
     e56:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,4);
     e58:	a3 e5       	ldi	r26, 0x53	; 83
     e5a:	b0 e0       	ldi	r27, 0x00	; 0
     e5c:	e3 e5       	ldi	r30, 0x53	; 83
     e5e:	f0 e0       	ldi	r31, 0x00	; 0
     e60:	80 81       	ld	r24, Z
     e62:	8f 7e       	andi	r24, 0xEF	; 239
     e64:	8c 93       	st	X, r24
		#elif FastOut==Set
		SET_BIT(TCCR0,5);
		SET_BIT(TCCR0,4);
		#endif
	#endif
}
     e66:	cf 91       	pop	r28
     e68:	df 91       	pop	r29
     e6a:	08 95       	ret

00000e6c <Tim_Count0_VidInterruptEn>:



void Tim_Count0_VidInterruptEn(void)
{
     e6c:	df 93       	push	r29
     e6e:	cf 93       	push	r28
     e70:	cd b7       	in	r28, 0x3d	; 61
     e72:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,1);
	#elif INT_EN==CompMatch
	SET_BIT(TIMSK,1);
	CLR_BIT(TIMSK,0);
	#else
	CLR_BIT(TIMSK,1);
     e74:	a9 e5       	ldi	r26, 0x59	; 89
     e76:	b0 e0       	ldi	r27, 0x00	; 0
     e78:	e9 e5       	ldi	r30, 0x59	; 89
     e7a:	f0 e0       	ldi	r31, 0x00	; 0
     e7c:	80 81       	ld	r24, Z
     e7e:	8d 7f       	andi	r24, 0xFD	; 253
     e80:	8c 93       	st	X, r24
	CLR_BIT(TIMSK,0);
     e82:	a9 e5       	ldi	r26, 0x59	; 89
     e84:	b0 e0       	ldi	r27, 0x00	; 0
     e86:	e9 e5       	ldi	r30, 0x59	; 89
     e88:	f0 e0       	ldi	r31, 0x00	; 0
     e8a:	80 81       	ld	r24, Z
     e8c:	8e 7f       	andi	r24, 0xFE	; 254
     e8e:	8c 93       	st	X, r24
	#endif
}
     e90:	cf 91       	pop	r28
     e92:	df 91       	pop	r29
     e94:	08 95       	ret

00000e96 <Tim_Count0_VidCounterReg>:

void Tim_Count0_VidCounterReg(u8 Loc_u8TCNTvalue)
{
     e96:	df 93       	push	r29
     e98:	cf 93       	push	r28
     e9a:	0f 92       	push	r0
     e9c:	cd b7       	in	r28, 0x3d	; 61
     e9e:	de b7       	in	r29, 0x3e	; 62
     ea0:	89 83       	std	Y+1, r24	; 0x01
	TCNT0=Loc_u8TCNTvalue;
     ea2:	e2 e5       	ldi	r30, 0x52	; 82
     ea4:	f0 e0       	ldi	r31, 0x00	; 0
     ea6:	89 81       	ldd	r24, Y+1	; 0x01
     ea8:	80 83       	st	Z, r24
}
     eaa:	0f 90       	pop	r0
     eac:	cf 91       	pop	r28
     eae:	df 91       	pop	r29
     eb0:	08 95       	ret

00000eb2 <Tim_Count0_VidCompareReg>:

void Tim_Count0_VidCompareReg(u8 Loc_u8OVoltage)
{
     eb2:	cf 92       	push	r12
     eb4:	df 92       	push	r13
     eb6:	ef 92       	push	r14
     eb8:	ff 92       	push	r15
     eba:	0f 93       	push	r16
     ebc:	1f 93       	push	r17
     ebe:	df 93       	push	r29
     ec0:	cf 93       	push	r28
     ec2:	0f 92       	push	r0
     ec4:	cd b7       	in	r28, 0x3d	; 61
     ec6:	de b7       	in	r29, 0x3e	; 62
     ec8:	89 83       	std	Y+1, r24	; 0x01
	OCR0=10.2*Loc_u8OVoltage*Loc_u8OVoltage;
     eca:	0f 2e       	mov	r0, r31
     ecc:	fc e5       	ldi	r31, 0x5C	; 92
     ece:	cf 2e       	mov	r12, r31
     ed0:	dd 24       	eor	r13, r13
     ed2:	f0 2d       	mov	r31, r0
     ed4:	89 81       	ldd	r24, Y+1	; 0x01
     ed6:	88 2f       	mov	r24, r24
     ed8:	90 e0       	ldi	r25, 0x00	; 0
     eda:	aa 27       	eor	r26, r26
     edc:	97 fd       	sbrc	r25, 7
     ede:	a0 95       	com	r26
     ee0:	ba 2f       	mov	r27, r26
     ee2:	bc 01       	movw	r22, r24
     ee4:	cd 01       	movw	r24, r26
     ee6:	0e 94 a9 03 	call	0x752	; 0x752 <__floatsisf>
     eea:	dc 01       	movw	r26, r24
     eec:	cb 01       	movw	r24, r22
     eee:	bc 01       	movw	r22, r24
     ef0:	cd 01       	movw	r24, r26
     ef2:	23 e3       	ldi	r18, 0x33	; 51
     ef4:	33 e3       	ldi	r19, 0x33	; 51
     ef6:	43 e2       	ldi	r20, 0x23	; 35
     ef8:	51 e4       	ldi	r21, 0x41	; 65
     efa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     efe:	dc 01       	movw	r26, r24
     f00:	cb 01       	movw	r24, r22
     f02:	7c 01       	movw	r14, r24
     f04:	8d 01       	movw	r16, r26
     f06:	89 81       	ldd	r24, Y+1	; 0x01
     f08:	88 2f       	mov	r24, r24
     f0a:	90 e0       	ldi	r25, 0x00	; 0
     f0c:	aa 27       	eor	r26, r26
     f0e:	97 fd       	sbrc	r25, 7
     f10:	a0 95       	com	r26
     f12:	ba 2f       	mov	r27, r26
     f14:	bc 01       	movw	r22, r24
     f16:	cd 01       	movw	r24, r26
     f18:	0e 94 a9 03 	call	0x752	; 0x752 <__floatsisf>
     f1c:	9b 01       	movw	r18, r22
     f1e:	ac 01       	movw	r20, r24
     f20:	c8 01       	movw	r24, r16
     f22:	b7 01       	movw	r22, r14
     f24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f28:	dc 01       	movw	r26, r24
     f2a:	cb 01       	movw	r24, r22
     f2c:	bc 01       	movw	r22, r24
     f2e:	cd 01       	movw	r24, r26
     f30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f34:	dc 01       	movw	r26, r24
     f36:	cb 01       	movw	r24, r22
     f38:	f6 01       	movw	r30, r12
     f3a:	80 83       	st	Z, r24
}
     f3c:	0f 90       	pop	r0
     f3e:	cf 91       	pop	r28
     f40:	df 91       	pop	r29
     f42:	1f 91       	pop	r17
     f44:	0f 91       	pop	r16
     f46:	ff 90       	pop	r15
     f48:	ef 90       	pop	r14
     f4a:	df 90       	pop	r13
     f4c:	cf 90       	pop	r12
     f4e:	08 95       	ret

00000f50 <Timer0_VidSetCallBack>:

void Timer0_VidSetCallBack(void (*Fptr)(void))
{
     f50:	df 93       	push	r29
     f52:	cf 93       	push	r28
     f54:	00 d0       	rcall	.+0      	; 0xf56 <Timer0_VidSetCallBack+0x6>
     f56:	cd b7       	in	r28, 0x3d	; 61
     f58:	de b7       	in	r29, 0x3e	; 62
     f5a:	9a 83       	std	Y+2, r25	; 0x02
     f5c:	89 83       	std	Y+1, r24	; 0x01
	if (Fptr !=NULL)
     f5e:	89 81       	ldd	r24, Y+1	; 0x01
     f60:	9a 81       	ldd	r25, Y+2	; 0x02
     f62:	00 97       	sbiw	r24, 0x00	; 0
     f64:	31 f0       	breq	.+12     	; 0xf72 <Timer0_VidSetCallBack+0x22>
	{
		#if WaveGen==Normal
		Tim0CallBackPtrOVFL=Fptr;
		#else
		Tim0CallBackPtrCOMA=Fptr;
     f66:	89 81       	ldd	r24, Y+1	; 0x01
     f68:	9a 81       	ldd	r25, Y+2	; 0x02
     f6a:	90 93 7b 01 	sts	0x017B, r25
     f6e:	80 93 7a 01 	sts	0x017A, r24
		#endif
	}

	}
     f72:	0f 90       	pop	r0
     f74:	0f 90       	pop	r0
     f76:	cf 91       	pop	r28
     f78:	df 91       	pop	r29
     f7a:	08 95       	ret

00000f7c <__vector_11>:

void __vector_11(void) //Overflow Interrupt
{
     f7c:	1f 92       	push	r1
     f7e:	0f 92       	push	r0
     f80:	0f b6       	in	r0, 0x3f	; 63
     f82:	0f 92       	push	r0
     f84:	11 24       	eor	r1, r1
     f86:	2f 93       	push	r18
     f88:	3f 93       	push	r19
     f8a:	4f 93       	push	r20
     f8c:	5f 93       	push	r21
     f8e:	6f 93       	push	r22
     f90:	7f 93       	push	r23
     f92:	8f 93       	push	r24
     f94:	9f 93       	push	r25
     f96:	af 93       	push	r26
     f98:	bf 93       	push	r27
     f9a:	ef 93       	push	r30
     f9c:	ff 93       	push	r31
     f9e:	df 93       	push	r29
     fa0:	cf 93       	push	r28
     fa2:	cd b7       	in	r28, 0x3d	; 61
     fa4:	de b7       	in	r29, 0x3e	; 62
	if (Tim0CallBackPtrOVFL !=NULL)
     fa6:	80 91 78 01 	lds	r24, 0x0178
     faa:	90 91 79 01 	lds	r25, 0x0179
     fae:	00 97       	sbiw	r24, 0x00	; 0
     fb0:	29 f0       	breq	.+10     	; 0xfbc <__vector_11+0x40>
	{
		Tim0CallBackPtrOVFL();
     fb2:	e0 91 78 01 	lds	r30, 0x0178
     fb6:	f0 91 79 01 	lds	r31, 0x0179
     fba:	09 95       	icall
	}
}
     fbc:	cf 91       	pop	r28
     fbe:	df 91       	pop	r29
     fc0:	ff 91       	pop	r31
     fc2:	ef 91       	pop	r30
     fc4:	bf 91       	pop	r27
     fc6:	af 91       	pop	r26
     fc8:	9f 91       	pop	r25
     fca:	8f 91       	pop	r24
     fcc:	7f 91       	pop	r23
     fce:	6f 91       	pop	r22
     fd0:	5f 91       	pop	r21
     fd2:	4f 91       	pop	r20
     fd4:	3f 91       	pop	r19
     fd6:	2f 91       	pop	r18
     fd8:	0f 90       	pop	r0
     fda:	0f be       	out	0x3f, r0	; 63
     fdc:	0f 90       	pop	r0
     fde:	1f 90       	pop	r1
     fe0:	18 95       	reti

00000fe2 <__vector_10>:

void __vector_10(void) //Compare match Interrupt
{
     fe2:	1f 92       	push	r1
     fe4:	0f 92       	push	r0
     fe6:	0f b6       	in	r0, 0x3f	; 63
     fe8:	0f 92       	push	r0
     fea:	11 24       	eor	r1, r1
     fec:	2f 93       	push	r18
     fee:	3f 93       	push	r19
     ff0:	4f 93       	push	r20
     ff2:	5f 93       	push	r21
     ff4:	6f 93       	push	r22
     ff6:	7f 93       	push	r23
     ff8:	8f 93       	push	r24
     ffa:	9f 93       	push	r25
     ffc:	af 93       	push	r26
     ffe:	bf 93       	push	r27
    1000:	ef 93       	push	r30
    1002:	ff 93       	push	r31
    1004:	df 93       	push	r29
    1006:	cf 93       	push	r28
    1008:	cd b7       	in	r28, 0x3d	; 61
    100a:	de b7       	in	r29, 0x3e	; 62
	if (Tim0CallBackPtrCOMA !=NULL)
    100c:	80 91 7a 01 	lds	r24, 0x017A
    1010:	90 91 7b 01 	lds	r25, 0x017B
    1014:	00 97       	sbiw	r24, 0x00	; 0
    1016:	29 f0       	breq	.+10     	; 0x1022 <__vector_10+0x40>
		{
		Tim0CallBackPtrCOMA();
    1018:	e0 91 7a 01 	lds	r30, 0x017A
    101c:	f0 91 7b 01 	lds	r31, 0x017B
    1020:	09 95       	icall
		}
}
    1022:	cf 91       	pop	r28
    1024:	df 91       	pop	r29
    1026:	ff 91       	pop	r31
    1028:	ef 91       	pop	r30
    102a:	bf 91       	pop	r27
    102c:	af 91       	pop	r26
    102e:	9f 91       	pop	r25
    1030:	8f 91       	pop	r24
    1032:	7f 91       	pop	r23
    1034:	6f 91       	pop	r22
    1036:	5f 91       	pop	r21
    1038:	4f 91       	pop	r20
    103a:	3f 91       	pop	r19
    103c:	2f 91       	pop	r18
    103e:	0f 90       	pop	r0
    1040:	0f be       	out	0x3f, r0	; 63
    1042:	0f 90       	pop	r0
    1044:	1f 90       	pop	r1
    1046:	18 95       	reti

00001048 <Tim1_VidInit>:
static void (*Tim1CallBackPtrCOMA)(void)=NULL;
//static void (*Tim1CallBackPtrCOMB)(void)=NULL;
static void (*Tim1CallBackPtrCapture)(void)=NULL;

void Tim1_VidInit(void)
{
    1048:	df 93       	push	r29
    104a:	cf 93       	push	r28
    104c:	cd b7       	in	r28, 0x3d	; 61
    104e:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR1A,0);
	CLR_BIT(TCCR1A,1);
	SET_BIT(TCCR1B,3);
	SET_BIT(TCCR1B,4);
	#elif Wavegen==Fast_PWM_ICR
	CLR_BIT(TCCR1A,0);
    1050:	af e4       	ldi	r26, 0x4F	; 79
    1052:	b0 e0       	ldi	r27, 0x00	; 0
    1054:	ef e4       	ldi	r30, 0x4F	; 79
    1056:	f0 e0       	ldi	r31, 0x00	; 0
    1058:	80 81       	ld	r24, Z
    105a:	8e 7f       	andi	r24, 0xFE	; 254
    105c:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,1);
    105e:	af e4       	ldi	r26, 0x4F	; 79
    1060:	b0 e0       	ldi	r27, 0x00	; 0
    1062:	ef e4       	ldi	r30, 0x4F	; 79
    1064:	f0 e0       	ldi	r31, 0x00	; 0
    1066:	80 81       	ld	r24, Z
    1068:	82 60       	ori	r24, 0x02	; 2
    106a:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,3);
    106c:	ae e4       	ldi	r26, 0x4E	; 78
    106e:	b0 e0       	ldi	r27, 0x00	; 0
    1070:	ee e4       	ldi	r30, 0x4E	; 78
    1072:	f0 e0       	ldi	r31, 0x00	; 0
    1074:	80 81       	ld	r24, Z
    1076:	88 60       	ori	r24, 0x08	; 8
    1078:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,4);
    107a:	ae e4       	ldi	r26, 0x4E	; 78
    107c:	b0 e0       	ldi	r27, 0x00	; 0
    107e:	ee e4       	ldi	r30, 0x4E	; 78
    1080:	f0 e0       	ldi	r31, 0x00	; 0
    1082:	80 81       	ld	r24, Z
    1084:	80 61       	ori	r24, 0x10	; 16
    1086:	8c 93       	st	X, r24
	#elif Prescaler==64
	SET_BIT(TCCR1B,0);
	SET_BIT(TCCR1B,1);
	CLR_BIT(TCCR1B,2);
	#elif Prescaler==256
	CLR_BIT(TCCR1B,0);
    1088:	ae e4       	ldi	r26, 0x4E	; 78
    108a:	b0 e0       	ldi	r27, 0x00	; 0
    108c:	ee e4       	ldi	r30, 0x4E	; 78
    108e:	f0 e0       	ldi	r31, 0x00	; 0
    1090:	80 81       	ld	r24, Z
    1092:	8e 7f       	andi	r24, 0xFE	; 254
    1094:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,1);
    1096:	ae e4       	ldi	r26, 0x4E	; 78
    1098:	b0 e0       	ldi	r27, 0x00	; 0
    109a:	ee e4       	ldi	r30, 0x4E	; 78
    109c:	f0 e0       	ldi	r31, 0x00	; 0
    109e:	80 81       	ld	r24, Z
    10a0:	8d 7f       	andi	r24, 0xFD	; 253
    10a2:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,2);
    10a4:	ae e4       	ldi	r26, 0x4E	; 78
    10a6:	b0 e0       	ldi	r27, 0x00	; 0
    10a8:	ee e4       	ldi	r30, 0x4E	; 78
    10aa:	f0 e0       	ldi	r31, 0x00	; 0
    10ac:	80 81       	ld	r24, Z
    10ae:	84 60       	ori	r24, 0x04	; 4
    10b0:	8c 93       	st	X, r24
	
	//Noise_Canceller Enable
	#if Noise_Canceller_EN==1
		SET_BIT(TCCR1B,7);
	#elif	Noise_Canceller_EN==0
		CLR_BIT(TCCR1B,0);
    10b2:	ae e4       	ldi	r26, 0x4E	; 78
    10b4:	b0 e0       	ldi	r27, 0x00	; 0
    10b6:	ee e4       	ldi	r30, 0x4E	; 78
    10b8:	f0 e0       	ldi	r31, 0x00	; 0
    10ba:	80 81       	ld	r24, Z
    10bc:	8e 7f       	andi	r24, 0xFE	; 254
    10be:	8c 93       	st	X, r24
	#endif
	
	
}
    10c0:	cf 91       	pop	r28
    10c2:	df 91       	pop	r29
    10c4:	08 95       	ret

000010c6 <Tim1_VidIntEN>:
void Tim1_VidIntEN(void)
{
    10c6:	df 93       	push	r29
    10c8:	cf 93       	push	r28
    10ca:	cd b7       	in	r28, 0x3d	; 61
    10cc:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,2);
	CLR_BIT(TIMSK,3);
	CLR_BIT(TIMSK,4);
	CLR_BIT(TIMSK,5);
	#endif
}
    10ce:	cf 91       	pop	r28
    10d0:	df 91       	pop	r29
    10d2:	08 95       	ret

000010d4 <Tim1_VidOutCompare>:

void Tim1_VidOutCompare(void)
{
    10d4:	df 93       	push	r29
    10d6:	cf 93       	push	r28
    10d8:	cd b7       	in	r28, 0x3d	; 61
    10da:	de b7       	in	r29, 0x3e	; 62
			CLR_BIT(TCCR1A,7);
			CLR_BIT(TCCR1A,5);
			SET_BIT(TCCR1A,6);
			SET_BIT(TCCR1A,4);
		#elif OutFast==Clear
			SET_BIT(TCCR1A,7);
    10dc:	af e4       	ldi	r26, 0x4F	; 79
    10de:	b0 e0       	ldi	r27, 0x00	; 0
    10e0:	ef e4       	ldi	r30, 0x4F	; 79
    10e2:	f0 e0       	ldi	r31, 0x00	; 0
    10e4:	80 81       	ld	r24, Z
    10e6:	80 68       	ori	r24, 0x80	; 128
    10e8:	8c 93       	st	X, r24
			SET_BIT(TCCR1A,5);
    10ea:	af e4       	ldi	r26, 0x4F	; 79
    10ec:	b0 e0       	ldi	r27, 0x00	; 0
    10ee:	ef e4       	ldi	r30, 0x4F	; 79
    10f0:	f0 e0       	ldi	r31, 0x00	; 0
    10f2:	80 81       	ld	r24, Z
    10f4:	80 62       	ori	r24, 0x20	; 32
    10f6:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A,6);
    10f8:	af e4       	ldi	r26, 0x4F	; 79
    10fa:	b0 e0       	ldi	r27, 0x00	; 0
    10fc:	ef e4       	ldi	r30, 0x4F	; 79
    10fe:	f0 e0       	ldi	r31, 0x00	; 0
    1100:	80 81       	ld	r24, Z
    1102:	8f 7b       	andi	r24, 0xBF	; 191
    1104:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A,4);
    1106:	af e4       	ldi	r26, 0x4F	; 79
    1108:	b0 e0       	ldi	r27, 0x00	; 0
    110a:	ef e4       	ldi	r30, 0x4F	; 79
    110c:	f0 e0       	ldi	r31, 0x00	; 0
    110e:	80 81       	ld	r24, Z
    1110:	8f 7e       	andi	r24, 0xEF	; 239
    1112:	8c 93       	st	X, r24
			SET_BIT(TCCR1A,6);
			SET_BIT(TCCR1A,4)
		#endif 
	#endif	
		
}
    1114:	cf 91       	pop	r28
    1116:	df 91       	pop	r29
    1118:	08 95       	ret

0000111a <Tim1_VidEdgeSelect>:
void Tim1_VidEdgeSelect(u8 LOC_u16Edge)
{
    111a:	df 93       	push	r29
    111c:	cf 93       	push	r28
    111e:	0f 92       	push	r0
    1120:	cd b7       	in	r28, 0x3d	; 61
    1122:	de b7       	in	r29, 0x3e	; 62
    1124:	89 83       	std	Y+1, r24	; 0x01
	if (LOC_u16Edge==0)
    1126:	89 81       	ldd	r24, Y+1	; 0x01
    1128:	88 23       	and	r24, r24
    112a:	41 f4       	brne	.+16     	; 0x113c <Tim1_VidEdgeSelect+0x22>
	{
		CLR_BIT(TCCR1B,6);
    112c:	ae e4       	ldi	r26, 0x4E	; 78
    112e:	b0 e0       	ldi	r27, 0x00	; 0
    1130:	ee e4       	ldi	r30, 0x4E	; 78
    1132:	f0 e0       	ldi	r31, 0x00	; 0
    1134:	80 81       	ld	r24, Z
    1136:	8f 7b       	andi	r24, 0xBF	; 191
    1138:	8c 93       	st	X, r24
    113a:	0a c0       	rjmp	.+20     	; 0x1150 <Tim1_VidEdgeSelect+0x36>
	}
	else if (LOC_u16Edge==1)
    113c:	89 81       	ldd	r24, Y+1	; 0x01
    113e:	81 30       	cpi	r24, 0x01	; 1
    1140:	39 f4       	brne	.+14     	; 0x1150 <Tim1_VidEdgeSelect+0x36>
	{
		SET_BIT(TCCR1B,6);
    1142:	ae e4       	ldi	r26, 0x4E	; 78
    1144:	b0 e0       	ldi	r27, 0x00	; 0
    1146:	ee e4       	ldi	r30, 0x4E	; 78
    1148:	f0 e0       	ldi	r31, 0x00	; 0
    114a:	80 81       	ld	r24, Z
    114c:	80 64       	ori	r24, 0x40	; 64
    114e:	8c 93       	st	X, r24
	}

}
    1150:	0f 90       	pop	r0
    1152:	cf 91       	pop	r28
    1154:	df 91       	pop	r29
    1156:	08 95       	ret

00001158 <Tim1_VidTCNT>:

void Tim1_VidTCNT(u16 LOC_u16TCNT)
{
    1158:	df 93       	push	r29
    115a:	cf 93       	push	r28
    115c:	00 d0       	rcall	.+0      	; 0x115e <Tim1_VidTCNT+0x6>
    115e:	cd b7       	in	r28, 0x3d	; 61
    1160:	de b7       	in	r29, 0x3e	; 62
    1162:	9a 83       	std	Y+2, r25	; 0x02
    1164:	89 83       	std	Y+1, r24	; 0x01
	TCNT1=LOC_u16TCNT;
    1166:	ec e4       	ldi	r30, 0x4C	; 76
    1168:	f0 e0       	ldi	r31, 0x00	; 0
    116a:	89 81       	ldd	r24, Y+1	; 0x01
    116c:	9a 81       	ldd	r25, Y+2	; 0x02
    116e:	91 83       	std	Z+1, r25	; 0x01
    1170:	80 83       	st	Z, r24
}
    1172:	0f 90       	pop	r0
    1174:	0f 90       	pop	r0
    1176:	cf 91       	pop	r28
    1178:	df 91       	pop	r29
    117a:	08 95       	ret

0000117c <Tim1_VidOCRA>:

void Tim1_VidOCRA(u16 LOC_u16OCRA)
{
    117c:	df 93       	push	r29
    117e:	cf 93       	push	r28
    1180:	00 d0       	rcall	.+0      	; 0x1182 <Tim1_VidOCRA+0x6>
    1182:	cd b7       	in	r28, 0x3d	; 61
    1184:	de b7       	in	r29, 0x3e	; 62
    1186:	9a 83       	std	Y+2, r25	; 0x02
    1188:	89 83       	std	Y+1, r24	; 0x01
	OCR1A=LOC_u16OCRA;
    118a:	ea e4       	ldi	r30, 0x4A	; 74
    118c:	f0 e0       	ldi	r31, 0x00	; 0
    118e:	89 81       	ldd	r24, Y+1	; 0x01
    1190:	9a 81       	ldd	r25, Y+2	; 0x02
    1192:	91 83       	std	Z+1, r25	; 0x01
    1194:	80 83       	st	Z, r24
}
    1196:	0f 90       	pop	r0
    1198:	0f 90       	pop	r0
    119a:	cf 91       	pop	r28
    119c:	df 91       	pop	r29
    119e:	08 95       	ret

000011a0 <Tim1_VidOCRB>:

void Tim1_VidOCRB(u16 LOC_u16OCRB)
{
    11a0:	df 93       	push	r29
    11a2:	cf 93       	push	r28
    11a4:	00 d0       	rcall	.+0      	; 0x11a6 <Tim1_VidOCRB+0x6>
    11a6:	cd b7       	in	r28, 0x3d	; 61
    11a8:	de b7       	in	r29, 0x3e	; 62
    11aa:	9a 83       	std	Y+2, r25	; 0x02
    11ac:	89 83       	std	Y+1, r24	; 0x01
	OCR1B=LOC_u16OCRB;
    11ae:	e8 e4       	ldi	r30, 0x48	; 72
    11b0:	f0 e0       	ldi	r31, 0x00	; 0
    11b2:	89 81       	ldd	r24, Y+1	; 0x01
    11b4:	9a 81       	ldd	r25, Y+2	; 0x02
    11b6:	91 83       	std	Z+1, r25	; 0x01
    11b8:	80 83       	st	Z, r24
}
    11ba:	0f 90       	pop	r0
    11bc:	0f 90       	pop	r0
    11be:	cf 91       	pop	r28
    11c0:	df 91       	pop	r29
    11c2:	08 95       	ret

000011c4 <Tim1_VidICR>:

void Tim1_VidICR(u16 LOC_u16ICR)
{
    11c4:	df 93       	push	r29
    11c6:	cf 93       	push	r28
    11c8:	00 d0       	rcall	.+0      	; 0x11ca <Tim1_VidICR+0x6>
    11ca:	cd b7       	in	r28, 0x3d	; 61
    11cc:	de b7       	in	r29, 0x3e	; 62
    11ce:	9a 83       	std	Y+2, r25	; 0x02
    11d0:	89 83       	std	Y+1, r24	; 0x01
	ICR1=LOC_u16ICR;
    11d2:	e6 e4       	ldi	r30, 0x46	; 70
    11d4:	f0 e0       	ldi	r31, 0x00	; 0
    11d6:	89 81       	ldd	r24, Y+1	; 0x01
    11d8:	9a 81       	ldd	r25, Y+2	; 0x02
    11da:	91 83       	std	Z+1, r25	; 0x01
    11dc:	80 83       	st	Z, r24
}
    11de:	0f 90       	pop	r0
    11e0:	0f 90       	pop	r0
    11e2:	cf 91       	pop	r28
    11e4:	df 91       	pop	r29
    11e6:	08 95       	ret

000011e8 <Timer1_VidSetCallBack>:


//***********************************************************************************************************

void Timer1_VidSetCallBack(void (*Fptr)(void))
{
    11e8:	df 93       	push	r29
    11ea:	cf 93       	push	r28
    11ec:	00 d0       	rcall	.+0      	; 0x11ee <Timer1_VidSetCallBack+0x6>
    11ee:	cd b7       	in	r28, 0x3d	; 61
    11f0:	de b7       	in	r29, 0x3e	; 62
    11f2:	9a 83       	std	Y+2, r25	; 0x02
    11f4:	89 83       	std	Y+1, r24	; 0x01
	if (Fptr !=NULL)
    11f6:	89 81       	ldd	r24, Y+1	; 0x01
    11f8:	9a 81       	ldd	r25, Y+2	; 0x02
    11fa:	00 97       	sbiw	r24, 0x00	; 0
    11fc:	31 f0       	breq	.+12     	; 0x120a <Timer1_VidSetCallBack+0x22>
	{
		#if Wavegen==Normal
		Tim1CallBackPtrOVFL=Fptr;
		#elif Wavegen !=Normal || Wavegen !=Fast_PWM_ICR || Wavegen!=Phase_PWM_Frq_ICR ||Wavegen!=CTC_ICR
		Tim1CallBackPtrCOMA=Fptr;
    11fe:	89 81       	ldd	r24, Y+1	; 0x01
    1200:	9a 81       	ldd	r25, Y+2	; 0x02
    1202:	90 93 7f 01 	sts	0x017F, r25
    1206:	80 93 7e 01 	sts	0x017E, r24
		#elif Wavegen ==Fast_PWM_ICR || Wavegen==Phase_PWM_Frq_ICR ||Wavegen==CTC_ICR
		Tim1CallBackPtrCapture=Fptr
		#endif
	}

	}
    120a:	0f 90       	pop	r0
    120c:	0f 90       	pop	r0
    120e:	cf 91       	pop	r28
    1210:	df 91       	pop	r29
    1212:	08 95       	ret

00001214 <__vector_9>:

void __vector_9(void) //Overflow Interrupt
{
    1214:	1f 92       	push	r1
    1216:	0f 92       	push	r0
    1218:	0f b6       	in	r0, 0x3f	; 63
    121a:	0f 92       	push	r0
    121c:	11 24       	eor	r1, r1
    121e:	2f 93       	push	r18
    1220:	3f 93       	push	r19
    1222:	4f 93       	push	r20
    1224:	5f 93       	push	r21
    1226:	6f 93       	push	r22
    1228:	7f 93       	push	r23
    122a:	8f 93       	push	r24
    122c:	9f 93       	push	r25
    122e:	af 93       	push	r26
    1230:	bf 93       	push	r27
    1232:	ef 93       	push	r30
    1234:	ff 93       	push	r31
    1236:	df 93       	push	r29
    1238:	cf 93       	push	r28
    123a:	cd b7       	in	r28, 0x3d	; 61
    123c:	de b7       	in	r29, 0x3e	; 62
	if (Tim1CallBackPtrOVFL !=NULL)
    123e:	80 91 7c 01 	lds	r24, 0x017C
    1242:	90 91 7d 01 	lds	r25, 0x017D
    1246:	00 97       	sbiw	r24, 0x00	; 0
    1248:	29 f0       	breq	.+10     	; 0x1254 <__vector_9+0x40>
	{
		Tim1CallBackPtrOVFL();
    124a:	e0 91 7c 01 	lds	r30, 0x017C
    124e:	f0 91 7d 01 	lds	r31, 0x017D
    1252:	09 95       	icall
	}
}
    1254:	cf 91       	pop	r28
    1256:	df 91       	pop	r29
    1258:	ff 91       	pop	r31
    125a:	ef 91       	pop	r30
    125c:	bf 91       	pop	r27
    125e:	af 91       	pop	r26
    1260:	9f 91       	pop	r25
    1262:	8f 91       	pop	r24
    1264:	7f 91       	pop	r23
    1266:	6f 91       	pop	r22
    1268:	5f 91       	pop	r21
    126a:	4f 91       	pop	r20
    126c:	3f 91       	pop	r19
    126e:	2f 91       	pop	r18
    1270:	0f 90       	pop	r0
    1272:	0f be       	out	0x3f, r0	; 63
    1274:	0f 90       	pop	r0
    1276:	1f 90       	pop	r1
    1278:	18 95       	reti

0000127a <__vector_7>:

void __vector_7(void) //Compare match A Interrupt
{
    127a:	1f 92       	push	r1
    127c:	0f 92       	push	r0
    127e:	0f b6       	in	r0, 0x3f	; 63
    1280:	0f 92       	push	r0
    1282:	11 24       	eor	r1, r1
    1284:	2f 93       	push	r18
    1286:	3f 93       	push	r19
    1288:	4f 93       	push	r20
    128a:	5f 93       	push	r21
    128c:	6f 93       	push	r22
    128e:	7f 93       	push	r23
    1290:	8f 93       	push	r24
    1292:	9f 93       	push	r25
    1294:	af 93       	push	r26
    1296:	bf 93       	push	r27
    1298:	ef 93       	push	r30
    129a:	ff 93       	push	r31
    129c:	df 93       	push	r29
    129e:	cf 93       	push	r28
    12a0:	cd b7       	in	r28, 0x3d	; 61
    12a2:	de b7       	in	r29, 0x3e	; 62
	if (Tim1CallBackPtrCOMA !=NULL)
    12a4:	80 91 7e 01 	lds	r24, 0x017E
    12a8:	90 91 7f 01 	lds	r25, 0x017F
    12ac:	00 97       	sbiw	r24, 0x00	; 0
    12ae:	29 f0       	breq	.+10     	; 0x12ba <__vector_7+0x40>
		{
		Tim1CallBackPtrCOMA();
    12b0:	e0 91 7e 01 	lds	r30, 0x017E
    12b4:	f0 91 7f 01 	lds	r31, 0x017F
    12b8:	09 95       	icall
		}
}
    12ba:	cf 91       	pop	r28
    12bc:	df 91       	pop	r29
    12be:	ff 91       	pop	r31
    12c0:	ef 91       	pop	r30
    12c2:	bf 91       	pop	r27
    12c4:	af 91       	pop	r26
    12c6:	9f 91       	pop	r25
    12c8:	8f 91       	pop	r24
    12ca:	7f 91       	pop	r23
    12cc:	6f 91       	pop	r22
    12ce:	5f 91       	pop	r21
    12d0:	4f 91       	pop	r20
    12d2:	3f 91       	pop	r19
    12d4:	2f 91       	pop	r18
    12d6:	0f 90       	pop	r0
    12d8:	0f be       	out	0x3f, r0	; 63
    12da:	0f 90       	pop	r0
    12dc:	1f 90       	pop	r1
    12de:	18 95       	reti

000012e0 <__vector_6>:


void __vector_6(void)
{
    12e0:	1f 92       	push	r1
    12e2:	0f 92       	push	r0
    12e4:	0f b6       	in	r0, 0x3f	; 63
    12e6:	0f 92       	push	r0
    12e8:	11 24       	eor	r1, r1
    12ea:	2f 93       	push	r18
    12ec:	3f 93       	push	r19
    12ee:	4f 93       	push	r20
    12f0:	5f 93       	push	r21
    12f2:	6f 93       	push	r22
    12f4:	7f 93       	push	r23
    12f6:	8f 93       	push	r24
    12f8:	9f 93       	push	r25
    12fa:	af 93       	push	r26
    12fc:	bf 93       	push	r27
    12fe:	ef 93       	push	r30
    1300:	ff 93       	push	r31
    1302:	df 93       	push	r29
    1304:	cf 93       	push	r28
    1306:	cd b7       	in	r28, 0x3d	; 61
    1308:	de b7       	in	r29, 0x3e	; 62
	if (Tim1CallBackPtrCapture !=NULL)
    130a:	80 91 80 01 	lds	r24, 0x0180
    130e:	90 91 81 01 	lds	r25, 0x0181
    1312:	00 97       	sbiw	r24, 0x00	; 0
    1314:	29 f0       	breq	.+10     	; 0x1320 <__vector_6+0x40>
		{
		Tim1CallBackPtrCapture();
    1316:	e0 91 80 01 	lds	r30, 0x0180
    131a:	f0 91 81 01 	lds	r31, 0x0181
    131e:	09 95       	icall
		}
}
    1320:	cf 91       	pop	r28
    1322:	df 91       	pop	r29
    1324:	ff 91       	pop	r31
    1326:	ef 91       	pop	r30
    1328:	bf 91       	pop	r27
    132a:	af 91       	pop	r26
    132c:	9f 91       	pop	r25
    132e:	8f 91       	pop	r24
    1330:	7f 91       	pop	r23
    1332:	6f 91       	pop	r22
    1334:	5f 91       	pop	r21
    1336:	4f 91       	pop	r20
    1338:	3f 91       	pop	r19
    133a:	2f 91       	pop	r18
    133c:	0f 90       	pop	r0
    133e:	0f be       	out	0x3f, r0	; 63
    1340:	0f 90       	pop	r0
    1342:	1f 90       	pop	r1
    1344:	18 95       	reti

00001346 <SREG_VidEnable>:
#include "../../LIB/BIT_MATH.h"
#include "GIE_Register.h"


void SREG_VidEnable(void)
{
    1346:	df 93       	push	r29
    1348:	cf 93       	push	r28
    134a:	cd b7       	in	r28, 0x3d	; 61
    134c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,7);
    134e:	af e5       	ldi	r26, 0x5F	; 95
    1350:	b0 e0       	ldi	r27, 0x00	; 0
    1352:	ef e5       	ldi	r30, 0x5F	; 95
    1354:	f0 e0       	ldi	r31, 0x00	; 0
    1356:	80 81       	ld	r24, Z
    1358:	80 68       	ori	r24, 0x80	; 128
    135a:	8c 93       	st	X, r24
	
}
    135c:	cf 91       	pop	r28
    135e:	df 91       	pop	r29
    1360:	08 95       	ret

00001362 <SREG_VidDisble>:
void SREG_VidDisble(void)
{
    1362:	df 93       	push	r29
    1364:	cf 93       	push	r28
    1366:	cd b7       	in	r28, 0x3d	; 61
    1368:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,7);
    136a:	af e5       	ldi	r26, 0x5F	; 95
    136c:	b0 e0       	ldi	r27, 0x00	; 0
    136e:	ef e5       	ldi	r30, 0x5F	; 95
    1370:	f0 e0       	ldi	r31, 0x00	; 0
    1372:	80 81       	ld	r24, Z
    1374:	8f 77       	andi	r24, 0x7F	; 127
    1376:	8c 93       	st	X, r24
	
}
    1378:	cf 91       	pop	r28
    137a:	df 91       	pop	r29
    137c:	08 95       	ret

0000137e <EXT_Vidinit>:
#include "EXT_Register.h"



void EXT_Vidinit(void)
{
    137e:	df 93       	push	r29
    1380:	cf 93       	push	r28
    1382:	cd b7       	in	r28, 0x3d	; 61
    1384:	de b7       	in	r29, 0x3e	; 62
#if EXT0_EN==1
	DIO_VidSetPinDirection(PRTD,PIN2,INPUT);
    1386:	83 e0       	ldi	r24, 0x03	; 3
    1388:	62 e0       	ldi	r22, 0x02	; 2
    138a:	40 e0       	ldi	r20, 0x00	; 0
    138c:	0e 94 b7 0b 	call	0x176e	; 0x176e <DIO_VidSetPinDirection>
	DIO_VidSetPinValue(PRTD,PIN2,HIGH);
    1390:	83 e0       	ldi	r24, 0x03	; 3
    1392:	62 e0       	ldi	r22, 0x02	; 2
    1394:	41 e0       	ldi	r20, 0x01	; 1
    1396:	0e 94 b7 0c 	call	0x196e	; 0x196e <DIO_VidSetPinValue>
	DIO_VidSetPinValue(PRTB,PIN2,HIGH);
#endif
	#if EXT0_EN==0 && EXT1_EN==0 && EXT2_EN==0
	#error "NO Choose of EXT Interrupt"
#endif
}
    139a:	cf 91       	pop	r28
    139c:	df 91       	pop	r29
    139e:	08 95       	ret

000013a0 <EXT_VidSense>:

void EXT_VidSense(void)
{
    13a0:	df 93       	push	r29
    13a2:	cf 93       	push	r28
    13a4:	cd b7       	in	r28, 0x3d	; 61
    13a6:	de b7       	in	r29, 0x3e	; 62
#if SENCE_MODE_EX0 ==FALLING && EXT0_EN==1
	SET_BIT(MCUCR,1);
	CLR_BIT(MCUCR,0);
#elif SENCE_MODE_EX0 ==RISING && EXT0_EN==1
	SET_BIT(MCUCR,0);
    13a8:	a5 e5       	ldi	r26, 0x55	; 85
    13aa:	b0 e0       	ldi	r27, 0x00	; 0
    13ac:	e5 e5       	ldi	r30, 0x55	; 85
    13ae:	f0 e0       	ldi	r31, 0x00	; 0
    13b0:	80 81       	ld	r24, Z
    13b2:	81 60       	ori	r24, 0x01	; 1
    13b4:	8c 93       	st	X, r24
	SET_BIT(MCUCR,1);
    13b6:	a5 e5       	ldi	r26, 0x55	; 85
    13b8:	b0 e0       	ldi	r27, 0x00	; 0
    13ba:	e5 e5       	ldi	r30, 0x55	; 85
    13bc:	f0 e0       	ldi	r31, 0x00	; 0
    13be:	80 81       	ld	r24, Z
    13c0:	82 60       	ori	r24, 0x02	; 2
    13c2:	8c 93       	st	X, r24
	SET_BIT(MCUCSR,6);
#elif SENCE_MODE_EX2==FALLING && EXT2_EN==1
	CLR_BIT(MCUCSR,6);
#endif

}
    13c4:	cf 91       	pop	r28
    13c6:	df 91       	pop	r29
    13c8:	08 95       	ret

000013ca <EXT_VidEnable>:

void EXT_VidEnable(void)
{
    13ca:	df 93       	push	r29
    13cc:	cf 93       	push	r28
    13ce:	cd b7       	in	r28, 0x3d	; 61
    13d0:	de b7       	in	r29, 0x3e	; 62
#if EXT0_EN==1
	SET_BIT(GICR,6);
    13d2:	ab e5       	ldi	r26, 0x5B	; 91
    13d4:	b0 e0       	ldi	r27, 0x00	; 0
    13d6:	eb e5       	ldi	r30, 0x5B	; 91
    13d8:	f0 e0       	ldi	r31, 0x00	; 0
    13da:	80 81       	ld	r24, Z
    13dc:	80 64       	ori	r24, 0x40	; 64
    13de:	8c 93       	st	X, r24
	SET_BIT(GICR,7);
#endif
#if EXT2_EN==1
	SET_BIT(GICR,5);
#endif
}
    13e0:	cf 91       	pop	r28
    13e2:	df 91       	pop	r29
    13e4:	08 95       	ret

000013e6 <EXT_VidDisable>:
void EXT_VidDisable(void)
{
    13e6:	df 93       	push	r29
    13e8:	cf 93       	push	r28
    13ea:	cd b7       	in	r28, 0x3d	; 61
    13ec:	de b7       	in	r29, 0x3e	; 62
#if EXT0_EN==1
	CLR_BIT(GICR,6);
    13ee:	ab e5       	ldi	r26, 0x5B	; 91
    13f0:	b0 e0       	ldi	r27, 0x00	; 0
    13f2:	eb e5       	ldi	r30, 0x5B	; 91
    13f4:	f0 e0       	ldi	r31, 0x00	; 0
    13f6:	80 81       	ld	r24, Z
    13f8:	8f 7b       	andi	r24, 0xBF	; 191
    13fa:	8c 93       	st	X, r24
	CLR_BIT(GICR,7);
#endif
#if EXT2_EN==1
	CLR_BIT(GICR,5);
#endif
	}
    13fc:	cf 91       	pop	r28
    13fe:	df 91       	pop	r29
    1400:	08 95       	ret

00001402 <__vector_1>:



void __vector_1(void)

{
    1402:	1f 92       	push	r1
    1404:	0f 92       	push	r0
    1406:	0f b6       	in	r0, 0x3f	; 63
    1408:	0f 92       	push	r0
    140a:	11 24       	eor	r1, r1
    140c:	2f 93       	push	r18
    140e:	3f 93       	push	r19
    1410:	4f 93       	push	r20
    1412:	5f 93       	push	r21
    1414:	6f 93       	push	r22
    1416:	7f 93       	push	r23
    1418:	8f 93       	push	r24
    141a:	9f 93       	push	r25
    141c:	af 93       	push	r26
    141e:	bf 93       	push	r27
    1420:	ef 93       	push	r30
    1422:	ff 93       	push	r31
    1424:	df 93       	push	r29
    1426:	cf 93       	push	r28
    1428:	cd b7       	in	r28, 0x3d	; 61
    142a:	de b7       	in	r29, 0x3e	; 62
    142c:	2e 97       	sbiw	r28, 0x0e	; 14
    142e:	de bf       	out	0x3e, r29	; 62
    1430:	cd bf       	out	0x3d, r28	; 61
	DIO_VidSetPinValue(PRTA,PIN7,HIGH);
    1432:	80 e0       	ldi	r24, 0x00	; 0
    1434:	67 e0       	ldi	r22, 0x07	; 7
    1436:	41 e0       	ldi	r20, 0x01	; 1
    1438:	0e 94 b7 0c 	call	0x196e	; 0x196e <DIO_VidSetPinValue>
    143c:	80 e0       	ldi	r24, 0x00	; 0
    143e:	90 e0       	ldi	r25, 0x00	; 0
    1440:	aa e7       	ldi	r26, 0x7A	; 122
    1442:	b4 e4       	ldi	r27, 0x44	; 68
    1444:	8b 87       	std	Y+11, r24	; 0x0b
    1446:	9c 87       	std	Y+12, r25	; 0x0c
    1448:	ad 87       	std	Y+13, r26	; 0x0d
    144a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    144c:	6b 85       	ldd	r22, Y+11	; 0x0b
    144e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1450:	8d 85       	ldd	r24, Y+13	; 0x0d
    1452:	9e 85       	ldd	r25, Y+14	; 0x0e
    1454:	20 e0       	ldi	r18, 0x00	; 0
    1456:	30 e0       	ldi	r19, 0x00	; 0
    1458:	4a ef       	ldi	r20, 0xFA	; 250
    145a:	54 e4       	ldi	r21, 0x44	; 68
    145c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1460:	dc 01       	movw	r26, r24
    1462:	cb 01       	movw	r24, r22
    1464:	8f 83       	std	Y+7, r24	; 0x07
    1466:	98 87       	std	Y+8, r25	; 0x08
    1468:	a9 87       	std	Y+9, r26	; 0x09
    146a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    146c:	6f 81       	ldd	r22, Y+7	; 0x07
    146e:	78 85       	ldd	r23, Y+8	; 0x08
    1470:	89 85       	ldd	r24, Y+9	; 0x09
    1472:	9a 85       	ldd	r25, Y+10	; 0x0a
    1474:	20 e0       	ldi	r18, 0x00	; 0
    1476:	30 e0       	ldi	r19, 0x00	; 0
    1478:	40 e8       	ldi	r20, 0x80	; 128
    147a:	5f e3       	ldi	r21, 0x3F	; 63
    147c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1480:	88 23       	and	r24, r24
    1482:	2c f4       	brge	.+10     	; 0x148e <__vector_1+0x8c>
		__ticks = 1;
    1484:	81 e0       	ldi	r24, 0x01	; 1
    1486:	90 e0       	ldi	r25, 0x00	; 0
    1488:	9e 83       	std	Y+6, r25	; 0x06
    148a:	8d 83       	std	Y+5, r24	; 0x05
    148c:	3f c0       	rjmp	.+126    	; 0x150c <__vector_1+0x10a>
	else if (__tmp > 65535)
    148e:	6f 81       	ldd	r22, Y+7	; 0x07
    1490:	78 85       	ldd	r23, Y+8	; 0x08
    1492:	89 85       	ldd	r24, Y+9	; 0x09
    1494:	9a 85       	ldd	r25, Y+10	; 0x0a
    1496:	20 e0       	ldi	r18, 0x00	; 0
    1498:	3f ef       	ldi	r19, 0xFF	; 255
    149a:	4f e7       	ldi	r20, 0x7F	; 127
    149c:	57 e4       	ldi	r21, 0x47	; 71
    149e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14a2:	18 16       	cp	r1, r24
    14a4:	4c f5       	brge	.+82     	; 0x14f8 <__vector_1+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    14a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    14aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    14ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    14ae:	20 e0       	ldi	r18, 0x00	; 0
    14b0:	30 e0       	ldi	r19, 0x00	; 0
    14b2:	40 e2       	ldi	r20, 0x20	; 32
    14b4:	51 e4       	ldi	r21, 0x41	; 65
    14b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14ba:	dc 01       	movw	r26, r24
    14bc:	cb 01       	movw	r24, r22
    14be:	bc 01       	movw	r22, r24
    14c0:	cd 01       	movw	r24, r26
    14c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14c6:	dc 01       	movw	r26, r24
    14c8:	cb 01       	movw	r24, r22
    14ca:	9e 83       	std	Y+6, r25	; 0x06
    14cc:	8d 83       	std	Y+5, r24	; 0x05
    14ce:	0f c0       	rjmp	.+30     	; 0x14ee <__vector_1+0xec>
    14d0:	88 ec       	ldi	r24, 0xC8	; 200
    14d2:	90 e0       	ldi	r25, 0x00	; 0
    14d4:	9c 83       	std	Y+4, r25	; 0x04
    14d6:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    14d8:	8b 81       	ldd	r24, Y+3	; 0x03
    14da:	9c 81       	ldd	r25, Y+4	; 0x04
    14dc:	01 97       	sbiw	r24, 0x01	; 1
    14de:	f1 f7       	brne	.-4      	; 0x14dc <__vector_1+0xda>
    14e0:	9c 83       	std	Y+4, r25	; 0x04
    14e2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14e4:	8d 81       	ldd	r24, Y+5	; 0x05
    14e6:	9e 81       	ldd	r25, Y+6	; 0x06
    14e8:	01 97       	sbiw	r24, 0x01	; 1
    14ea:	9e 83       	std	Y+6, r25	; 0x06
    14ec:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14ee:	8d 81       	ldd	r24, Y+5	; 0x05
    14f0:	9e 81       	ldd	r25, Y+6	; 0x06
    14f2:	00 97       	sbiw	r24, 0x00	; 0
    14f4:	69 f7       	brne	.-38     	; 0x14d0 <__vector_1+0xce>
    14f6:	14 c0       	rjmp	.+40     	; 0x1520 <__vector_1+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14f8:	6f 81       	ldd	r22, Y+7	; 0x07
    14fa:	78 85       	ldd	r23, Y+8	; 0x08
    14fc:	89 85       	ldd	r24, Y+9	; 0x09
    14fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1500:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1504:	dc 01       	movw	r26, r24
    1506:	cb 01       	movw	r24, r22
    1508:	9e 83       	std	Y+6, r25	; 0x06
    150a:	8d 83       	std	Y+5, r24	; 0x05
    150c:	8d 81       	ldd	r24, Y+5	; 0x05
    150e:	9e 81       	ldd	r25, Y+6	; 0x06
    1510:	9a 83       	std	Y+2, r25	; 0x02
    1512:	89 83       	std	Y+1, r24	; 0x01
    1514:	89 81       	ldd	r24, Y+1	; 0x01
    1516:	9a 81       	ldd	r25, Y+2	; 0x02
    1518:	01 97       	sbiw	r24, 0x01	; 1
    151a:	f1 f7       	brne	.-4      	; 0x1518 <__vector_1+0x116>
    151c:	9a 83       	std	Y+2, r25	; 0x02
    151e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
	DIO_VidSetPinValue(PRTA,PIN7,LOW);
    1520:	80 e0       	ldi	r24, 0x00	; 0
    1522:	67 e0       	ldi	r22, 0x07	; 7
    1524:	40 e0       	ldi	r20, 0x00	; 0
    1526:	0e 94 b7 0c 	call	0x196e	; 0x196e <DIO_VidSetPinValue>
}
    152a:	2e 96       	adiw	r28, 0x0e	; 14
    152c:	de bf       	out	0x3e, r29	; 62
    152e:	cd bf       	out	0x3d, r28	; 61
    1530:	cf 91       	pop	r28
    1532:	df 91       	pop	r29
    1534:	ff 91       	pop	r31
    1536:	ef 91       	pop	r30
    1538:	bf 91       	pop	r27
    153a:	af 91       	pop	r26
    153c:	9f 91       	pop	r25
    153e:	8f 91       	pop	r24
    1540:	7f 91       	pop	r23
    1542:	6f 91       	pop	r22
    1544:	5f 91       	pop	r21
    1546:	4f 91       	pop	r20
    1548:	3f 91       	pop	r19
    154a:	2f 91       	pop	r18
    154c:	0f 90       	pop	r0
    154e:	0f be       	out	0x3f, r0	; 63
    1550:	0f 90       	pop	r0
    1552:	1f 90       	pop	r1
    1554:	18 95       	reti

00001556 <__vector_2>:



void __vector_2(void)

{
    1556:	df 93       	push	r29
    1558:	cf 93       	push	r28
    155a:	cd b7       	in	r28, 0x3d	; 61
    155c:	de b7       	in	r29, 0x3e	; 62
    155e:	6c 97       	sbiw	r28, 0x1c	; 28
    1560:	0f b6       	in	r0, 0x3f	; 63
    1562:	f8 94       	cli
    1564:	de bf       	out	0x3e, r29	; 62
    1566:	0f be       	out	0x3f, r0	; 63
    1568:	cd bf       	out	0x3d, r28	; 61
	static u8 flag =0;
	if (0==flag)
    156a:	80 91 82 01 	lds	r24, 0x0182
    156e:	88 23       	and	r24, r24
    1570:	09 f0       	breq	.+2      	; 0x1574 <__vector_2+0x1e>
    1572:	7b c0       	rjmp	.+246    	; 0x166a <__vector_2+0x114>
	{

	DIO_VidSetPinValue(PRTD,PIN0,HIGH);
    1574:	83 e0       	ldi	r24, 0x03	; 3
    1576:	60 e0       	ldi	r22, 0x00	; 0
    1578:	41 e0       	ldi	r20, 0x01	; 1
    157a:	0e 94 b7 0c 	call	0x196e	; 0x196e <DIO_VidSetPinValue>
    157e:	80 e0       	ldi	r24, 0x00	; 0
    1580:	90 e0       	ldi	r25, 0x00	; 0
    1582:	aa e7       	ldi	r26, 0x7A	; 122
    1584:	b4 e4       	ldi	r27, 0x44	; 68
    1586:	89 8f       	std	Y+25, r24	; 0x19
    1588:	9a 8f       	std	Y+26, r25	; 0x1a
    158a:	ab 8f       	std	Y+27, r26	; 0x1b
    158c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    158e:	69 8d       	ldd	r22, Y+25	; 0x19
    1590:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1592:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1594:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1596:	20 e0       	ldi	r18, 0x00	; 0
    1598:	30 e0       	ldi	r19, 0x00	; 0
    159a:	4a ef       	ldi	r20, 0xFA	; 250
    159c:	54 e4       	ldi	r21, 0x44	; 68
    159e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15a2:	dc 01       	movw	r26, r24
    15a4:	cb 01       	movw	r24, r22
    15a6:	8d 8b       	std	Y+21, r24	; 0x15
    15a8:	9e 8b       	std	Y+22, r25	; 0x16
    15aa:	af 8b       	std	Y+23, r26	; 0x17
    15ac:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    15ae:	6d 89       	ldd	r22, Y+21	; 0x15
    15b0:	7e 89       	ldd	r23, Y+22	; 0x16
    15b2:	8f 89       	ldd	r24, Y+23	; 0x17
    15b4:	98 8d       	ldd	r25, Y+24	; 0x18
    15b6:	20 e0       	ldi	r18, 0x00	; 0
    15b8:	30 e0       	ldi	r19, 0x00	; 0
    15ba:	40 e8       	ldi	r20, 0x80	; 128
    15bc:	5f e3       	ldi	r21, 0x3F	; 63
    15be:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15c2:	88 23       	and	r24, r24
    15c4:	2c f4       	brge	.+10     	; 0x15d0 <__vector_2+0x7a>
		__ticks = 1;
    15c6:	81 e0       	ldi	r24, 0x01	; 1
    15c8:	90 e0       	ldi	r25, 0x00	; 0
    15ca:	9c 8b       	std	Y+20, r25	; 0x14
    15cc:	8b 8b       	std	Y+19, r24	; 0x13
    15ce:	3f c0       	rjmp	.+126    	; 0x164e <__vector_2+0xf8>
	else if (__tmp > 65535)
    15d0:	6d 89       	ldd	r22, Y+21	; 0x15
    15d2:	7e 89       	ldd	r23, Y+22	; 0x16
    15d4:	8f 89       	ldd	r24, Y+23	; 0x17
    15d6:	98 8d       	ldd	r25, Y+24	; 0x18
    15d8:	20 e0       	ldi	r18, 0x00	; 0
    15da:	3f ef       	ldi	r19, 0xFF	; 255
    15dc:	4f e7       	ldi	r20, 0x7F	; 127
    15de:	57 e4       	ldi	r21, 0x47	; 71
    15e0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15e4:	18 16       	cp	r1, r24
    15e6:	4c f5       	brge	.+82     	; 0x163a <__vector_2+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15e8:	69 8d       	ldd	r22, Y+25	; 0x19
    15ea:	7a 8d       	ldd	r23, Y+26	; 0x1a
    15ec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    15ee:	9c 8d       	ldd	r25, Y+28	; 0x1c
    15f0:	20 e0       	ldi	r18, 0x00	; 0
    15f2:	30 e0       	ldi	r19, 0x00	; 0
    15f4:	40 e2       	ldi	r20, 0x20	; 32
    15f6:	51 e4       	ldi	r21, 0x41	; 65
    15f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15fc:	dc 01       	movw	r26, r24
    15fe:	cb 01       	movw	r24, r22
    1600:	bc 01       	movw	r22, r24
    1602:	cd 01       	movw	r24, r26
    1604:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1608:	dc 01       	movw	r26, r24
    160a:	cb 01       	movw	r24, r22
    160c:	9c 8b       	std	Y+20, r25	; 0x14
    160e:	8b 8b       	std	Y+19, r24	; 0x13
    1610:	0f c0       	rjmp	.+30     	; 0x1630 <__vector_2+0xda>
    1612:	88 ec       	ldi	r24, 0xC8	; 200
    1614:	90 e0       	ldi	r25, 0x00	; 0
    1616:	9a 8b       	std	Y+18, r25	; 0x12
    1618:	89 8b       	std	Y+17, r24	; 0x11
    161a:	89 89       	ldd	r24, Y+17	; 0x11
    161c:	9a 89       	ldd	r25, Y+18	; 0x12
    161e:	01 97       	sbiw	r24, 0x01	; 1
    1620:	f1 f7       	brne	.-4      	; 0x161e <__vector_2+0xc8>
    1622:	9a 8b       	std	Y+18, r25	; 0x12
    1624:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1626:	8b 89       	ldd	r24, Y+19	; 0x13
    1628:	9c 89       	ldd	r25, Y+20	; 0x14
    162a:	01 97       	sbiw	r24, 0x01	; 1
    162c:	9c 8b       	std	Y+20, r25	; 0x14
    162e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1630:	8b 89       	ldd	r24, Y+19	; 0x13
    1632:	9c 89       	ldd	r25, Y+20	; 0x14
    1634:	00 97       	sbiw	r24, 0x00	; 0
    1636:	69 f7       	brne	.-38     	; 0x1612 <__vector_2+0xbc>
    1638:	14 c0       	rjmp	.+40     	; 0x1662 <__vector_2+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    163a:	6d 89       	ldd	r22, Y+21	; 0x15
    163c:	7e 89       	ldd	r23, Y+22	; 0x16
    163e:	8f 89       	ldd	r24, Y+23	; 0x17
    1640:	98 8d       	ldd	r25, Y+24	; 0x18
    1642:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1646:	dc 01       	movw	r26, r24
    1648:	cb 01       	movw	r24, r22
    164a:	9c 8b       	std	Y+20, r25	; 0x14
    164c:	8b 8b       	std	Y+19, r24	; 0x13
    164e:	8b 89       	ldd	r24, Y+19	; 0x13
    1650:	9c 89       	ldd	r25, Y+20	; 0x14
    1652:	98 8b       	std	Y+16, r25	; 0x10
    1654:	8f 87       	std	Y+15, r24	; 0x0f
    1656:	8f 85       	ldd	r24, Y+15	; 0x0f
    1658:	98 89       	ldd	r25, Y+16	; 0x10
    165a:	01 97       	sbiw	r24, 0x01	; 1
    165c:	f1 f7       	brne	.-4      	; 0x165a <__vector_2+0x104>
    165e:	98 8b       	std	Y+16, r25	; 0x10
    1660:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1000);
	flag=1;
    1662:	81 e0       	ldi	r24, 0x01	; 1
    1664:	80 93 82 01 	sts	0x0182, r24
    1668:	79 c0       	rjmp	.+242    	; 0x175c <__vector_2+0x206>
	}
	else
	{
		DIO_VidSetPinValue(PRTD,PIN0,LOW);
    166a:	83 e0       	ldi	r24, 0x03	; 3
    166c:	60 e0       	ldi	r22, 0x00	; 0
    166e:	40 e0       	ldi	r20, 0x00	; 0
    1670:	0e 94 b7 0c 	call	0x196e	; 0x196e <DIO_VidSetPinValue>
    1674:	80 e0       	ldi	r24, 0x00	; 0
    1676:	90 e0       	ldi	r25, 0x00	; 0
    1678:	aa e7       	ldi	r26, 0x7A	; 122
    167a:	b4 e4       	ldi	r27, 0x44	; 68
    167c:	8b 87       	std	Y+11, r24	; 0x0b
    167e:	9c 87       	std	Y+12, r25	; 0x0c
    1680:	ad 87       	std	Y+13, r26	; 0x0d
    1682:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1684:	6b 85       	ldd	r22, Y+11	; 0x0b
    1686:	7c 85       	ldd	r23, Y+12	; 0x0c
    1688:	8d 85       	ldd	r24, Y+13	; 0x0d
    168a:	9e 85       	ldd	r25, Y+14	; 0x0e
    168c:	20 e0       	ldi	r18, 0x00	; 0
    168e:	30 e0       	ldi	r19, 0x00	; 0
    1690:	4a ef       	ldi	r20, 0xFA	; 250
    1692:	54 e4       	ldi	r21, 0x44	; 68
    1694:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1698:	dc 01       	movw	r26, r24
    169a:	cb 01       	movw	r24, r22
    169c:	8f 83       	std	Y+7, r24	; 0x07
    169e:	98 87       	std	Y+8, r25	; 0x08
    16a0:	a9 87       	std	Y+9, r26	; 0x09
    16a2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    16a4:	6f 81       	ldd	r22, Y+7	; 0x07
    16a6:	78 85       	ldd	r23, Y+8	; 0x08
    16a8:	89 85       	ldd	r24, Y+9	; 0x09
    16aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    16ac:	20 e0       	ldi	r18, 0x00	; 0
    16ae:	30 e0       	ldi	r19, 0x00	; 0
    16b0:	40 e8       	ldi	r20, 0x80	; 128
    16b2:	5f e3       	ldi	r21, 0x3F	; 63
    16b4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16b8:	88 23       	and	r24, r24
    16ba:	2c f4       	brge	.+10     	; 0x16c6 <__vector_2+0x170>
		__ticks = 1;
    16bc:	81 e0       	ldi	r24, 0x01	; 1
    16be:	90 e0       	ldi	r25, 0x00	; 0
    16c0:	9e 83       	std	Y+6, r25	; 0x06
    16c2:	8d 83       	std	Y+5, r24	; 0x05
    16c4:	3f c0       	rjmp	.+126    	; 0x1744 <__vector_2+0x1ee>
	else if (__tmp > 65535)
    16c6:	6f 81       	ldd	r22, Y+7	; 0x07
    16c8:	78 85       	ldd	r23, Y+8	; 0x08
    16ca:	89 85       	ldd	r24, Y+9	; 0x09
    16cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    16ce:	20 e0       	ldi	r18, 0x00	; 0
    16d0:	3f ef       	ldi	r19, 0xFF	; 255
    16d2:	4f e7       	ldi	r20, 0x7F	; 127
    16d4:	57 e4       	ldi	r21, 0x47	; 71
    16d6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16da:	18 16       	cp	r1, r24
    16dc:	4c f5       	brge	.+82     	; 0x1730 <__vector_2+0x1da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16de:	6b 85       	ldd	r22, Y+11	; 0x0b
    16e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    16e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    16e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    16e6:	20 e0       	ldi	r18, 0x00	; 0
    16e8:	30 e0       	ldi	r19, 0x00	; 0
    16ea:	40 e2       	ldi	r20, 0x20	; 32
    16ec:	51 e4       	ldi	r21, 0x41	; 65
    16ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16f2:	dc 01       	movw	r26, r24
    16f4:	cb 01       	movw	r24, r22
    16f6:	bc 01       	movw	r22, r24
    16f8:	cd 01       	movw	r24, r26
    16fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16fe:	dc 01       	movw	r26, r24
    1700:	cb 01       	movw	r24, r22
    1702:	9e 83       	std	Y+6, r25	; 0x06
    1704:	8d 83       	std	Y+5, r24	; 0x05
    1706:	0f c0       	rjmp	.+30     	; 0x1726 <__vector_2+0x1d0>
    1708:	88 ec       	ldi	r24, 0xC8	; 200
    170a:	90 e0       	ldi	r25, 0x00	; 0
    170c:	9c 83       	std	Y+4, r25	; 0x04
    170e:	8b 83       	std	Y+3, r24	; 0x03
    1710:	8b 81       	ldd	r24, Y+3	; 0x03
    1712:	9c 81       	ldd	r25, Y+4	; 0x04
    1714:	01 97       	sbiw	r24, 0x01	; 1
    1716:	f1 f7       	brne	.-4      	; 0x1714 <__vector_2+0x1be>
    1718:	9c 83       	std	Y+4, r25	; 0x04
    171a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    171c:	8d 81       	ldd	r24, Y+5	; 0x05
    171e:	9e 81       	ldd	r25, Y+6	; 0x06
    1720:	01 97       	sbiw	r24, 0x01	; 1
    1722:	9e 83       	std	Y+6, r25	; 0x06
    1724:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1726:	8d 81       	ldd	r24, Y+5	; 0x05
    1728:	9e 81       	ldd	r25, Y+6	; 0x06
    172a:	00 97       	sbiw	r24, 0x00	; 0
    172c:	69 f7       	brne	.-38     	; 0x1708 <__vector_2+0x1b2>
    172e:	14 c0       	rjmp	.+40     	; 0x1758 <__vector_2+0x202>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1730:	6f 81       	ldd	r22, Y+7	; 0x07
    1732:	78 85       	ldd	r23, Y+8	; 0x08
    1734:	89 85       	ldd	r24, Y+9	; 0x09
    1736:	9a 85       	ldd	r25, Y+10	; 0x0a
    1738:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    173c:	dc 01       	movw	r26, r24
    173e:	cb 01       	movw	r24, r22
    1740:	9e 83       	std	Y+6, r25	; 0x06
    1742:	8d 83       	std	Y+5, r24	; 0x05
    1744:	8d 81       	ldd	r24, Y+5	; 0x05
    1746:	9e 81       	ldd	r25, Y+6	; 0x06
    1748:	9a 83       	std	Y+2, r25	; 0x02
    174a:	89 83       	std	Y+1, r24	; 0x01
    174c:	89 81       	ldd	r24, Y+1	; 0x01
    174e:	9a 81       	ldd	r25, Y+2	; 0x02
    1750:	01 97       	sbiw	r24, 0x01	; 1
    1752:	f1 f7       	brne	.-4      	; 0x1750 <__vector_2+0x1fa>
    1754:	9a 83       	std	Y+2, r25	; 0x02
    1756:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(1000);
			flag=0;
    1758:	10 92 82 01 	sts	0x0182, r1
	}
}
    175c:	6c 96       	adiw	r28, 0x1c	; 28
    175e:	0f b6       	in	r0, 0x3f	; 63
    1760:	f8 94       	cli
    1762:	de bf       	out	0x3e, r29	; 62
    1764:	0f be       	out	0x3f, r0	; 63
    1766:	cd bf       	out	0x3d, r28	; 61
    1768:	cf 91       	pop	r28
    176a:	df 91       	pop	r29
    176c:	08 95       	ret

0000176e <DIO_VidSetPinDirection>:
#include "../../LIB/BIT_MATH.h"
#include "DIO_Register.h"
#include "DIO_Interface.h"

void DIO_VidSetPinDirection (u8 LOC_u8Port, u8 LOC_u8Pin, u8 LOC_u8State )
{
    176e:	df 93       	push	r29
    1770:	cf 93       	push	r28
    1772:	cd b7       	in	r28, 0x3d	; 61
    1774:	de b7       	in	r29, 0x3e	; 62
    1776:	27 97       	sbiw	r28, 0x07	; 7
    1778:	0f b6       	in	r0, 0x3f	; 63
    177a:	f8 94       	cli
    177c:	de bf       	out	0x3e, r29	; 62
    177e:	0f be       	out	0x3f, r0	; 63
    1780:	cd bf       	out	0x3d, r28	; 61
    1782:	89 83       	std	Y+1, r24	; 0x01
    1784:	6a 83       	std	Y+2, r22	; 0x02
    1786:	4b 83       	std	Y+3, r20	; 0x03
	if (OUTPUT == LOC_u8State)
    1788:	8b 81       	ldd	r24, Y+3	; 0x03
    178a:	81 30       	cpi	r24, 0x01	; 1
    178c:	09 f0       	breq	.+2      	; 0x1790 <DIO_VidSetPinDirection+0x22>
    178e:	6f c0       	rjmp	.+222    	; 0x186e <DIO_VidSetPinDirection+0x100>
	{
		switch(LOC_u8Port)
    1790:	89 81       	ldd	r24, Y+1	; 0x01
    1792:	28 2f       	mov	r18, r24
    1794:	30 e0       	ldi	r19, 0x00	; 0
    1796:	3f 83       	std	Y+7, r19	; 0x07
    1798:	2e 83       	std	Y+6, r18	; 0x06
    179a:	8e 81       	ldd	r24, Y+6	; 0x06
    179c:	9f 81       	ldd	r25, Y+7	; 0x07
    179e:	81 30       	cpi	r24, 0x01	; 1
    17a0:	91 05       	cpc	r25, r1
    17a2:	49 f1       	breq	.+82     	; 0x17f6 <DIO_VidSetPinDirection+0x88>
    17a4:	2e 81       	ldd	r18, Y+6	; 0x06
    17a6:	3f 81       	ldd	r19, Y+7	; 0x07
    17a8:	22 30       	cpi	r18, 0x02	; 2
    17aa:	31 05       	cpc	r19, r1
    17ac:	2c f4       	brge	.+10     	; 0x17b8 <DIO_VidSetPinDirection+0x4a>
    17ae:	8e 81       	ldd	r24, Y+6	; 0x06
    17b0:	9f 81       	ldd	r25, Y+7	; 0x07
    17b2:	00 97       	sbiw	r24, 0x00	; 0
    17b4:	61 f0       	breq	.+24     	; 0x17ce <DIO_VidSetPinDirection+0x60>
    17b6:	d2 c0       	rjmp	.+420    	; 0x195c <DIO_VidSetPinDirection+0x1ee>
    17b8:	2e 81       	ldd	r18, Y+6	; 0x06
    17ba:	3f 81       	ldd	r19, Y+7	; 0x07
    17bc:	22 30       	cpi	r18, 0x02	; 2
    17be:	31 05       	cpc	r19, r1
    17c0:	71 f1       	breq	.+92     	; 0x181e <DIO_VidSetPinDirection+0xb0>
    17c2:	8e 81       	ldd	r24, Y+6	; 0x06
    17c4:	9f 81       	ldd	r25, Y+7	; 0x07
    17c6:	83 30       	cpi	r24, 0x03	; 3
    17c8:	91 05       	cpc	r25, r1
    17ca:	e9 f1       	breq	.+122    	; 0x1846 <DIO_VidSetPinDirection+0xd8>
    17cc:	c7 c0       	rjmp	.+398    	; 0x195c <DIO_VidSetPinDirection+0x1ee>
		{
			case 0: SET_BIT(DDRA,LOC_u8Pin); break;
    17ce:	aa e3       	ldi	r26, 0x3A	; 58
    17d0:	b0 e0       	ldi	r27, 0x00	; 0
    17d2:	ea e3       	ldi	r30, 0x3A	; 58
    17d4:	f0 e0       	ldi	r31, 0x00	; 0
    17d6:	80 81       	ld	r24, Z
    17d8:	48 2f       	mov	r20, r24
    17da:	8a 81       	ldd	r24, Y+2	; 0x02
    17dc:	28 2f       	mov	r18, r24
    17de:	30 e0       	ldi	r19, 0x00	; 0
    17e0:	81 e0       	ldi	r24, 0x01	; 1
    17e2:	90 e0       	ldi	r25, 0x00	; 0
    17e4:	02 2e       	mov	r0, r18
    17e6:	02 c0       	rjmp	.+4      	; 0x17ec <DIO_VidSetPinDirection+0x7e>
    17e8:	88 0f       	add	r24, r24
    17ea:	99 1f       	adc	r25, r25
    17ec:	0a 94       	dec	r0
    17ee:	e2 f7       	brpl	.-8      	; 0x17e8 <DIO_VidSetPinDirection+0x7a>
    17f0:	84 2b       	or	r24, r20
    17f2:	8c 93       	st	X, r24
    17f4:	b3 c0       	rjmp	.+358    	; 0x195c <DIO_VidSetPinDirection+0x1ee>
			case 1: SET_BIT(DDRB,LOC_u8Pin); break;
    17f6:	a7 e3       	ldi	r26, 0x37	; 55
    17f8:	b0 e0       	ldi	r27, 0x00	; 0
    17fa:	e7 e3       	ldi	r30, 0x37	; 55
    17fc:	f0 e0       	ldi	r31, 0x00	; 0
    17fe:	80 81       	ld	r24, Z
    1800:	48 2f       	mov	r20, r24
    1802:	8a 81       	ldd	r24, Y+2	; 0x02
    1804:	28 2f       	mov	r18, r24
    1806:	30 e0       	ldi	r19, 0x00	; 0
    1808:	81 e0       	ldi	r24, 0x01	; 1
    180a:	90 e0       	ldi	r25, 0x00	; 0
    180c:	02 2e       	mov	r0, r18
    180e:	02 c0       	rjmp	.+4      	; 0x1814 <DIO_VidSetPinDirection+0xa6>
    1810:	88 0f       	add	r24, r24
    1812:	99 1f       	adc	r25, r25
    1814:	0a 94       	dec	r0
    1816:	e2 f7       	brpl	.-8      	; 0x1810 <DIO_VidSetPinDirection+0xa2>
    1818:	84 2b       	or	r24, r20
    181a:	8c 93       	st	X, r24
    181c:	9f c0       	rjmp	.+318    	; 0x195c <DIO_VidSetPinDirection+0x1ee>
			case 2: SET_BIT(DDRC,LOC_u8Pin); break;
    181e:	a4 e3       	ldi	r26, 0x34	; 52
    1820:	b0 e0       	ldi	r27, 0x00	; 0
    1822:	e4 e3       	ldi	r30, 0x34	; 52
    1824:	f0 e0       	ldi	r31, 0x00	; 0
    1826:	80 81       	ld	r24, Z
    1828:	48 2f       	mov	r20, r24
    182a:	8a 81       	ldd	r24, Y+2	; 0x02
    182c:	28 2f       	mov	r18, r24
    182e:	30 e0       	ldi	r19, 0x00	; 0
    1830:	81 e0       	ldi	r24, 0x01	; 1
    1832:	90 e0       	ldi	r25, 0x00	; 0
    1834:	02 2e       	mov	r0, r18
    1836:	02 c0       	rjmp	.+4      	; 0x183c <DIO_VidSetPinDirection+0xce>
    1838:	88 0f       	add	r24, r24
    183a:	99 1f       	adc	r25, r25
    183c:	0a 94       	dec	r0
    183e:	e2 f7       	brpl	.-8      	; 0x1838 <DIO_VidSetPinDirection+0xca>
    1840:	84 2b       	or	r24, r20
    1842:	8c 93       	st	X, r24
    1844:	8b c0       	rjmp	.+278    	; 0x195c <DIO_VidSetPinDirection+0x1ee>
			case 3: SET_BIT(DDRD,LOC_u8Pin); break;
    1846:	a1 e3       	ldi	r26, 0x31	; 49
    1848:	b0 e0       	ldi	r27, 0x00	; 0
    184a:	e1 e3       	ldi	r30, 0x31	; 49
    184c:	f0 e0       	ldi	r31, 0x00	; 0
    184e:	80 81       	ld	r24, Z
    1850:	48 2f       	mov	r20, r24
    1852:	8a 81       	ldd	r24, Y+2	; 0x02
    1854:	28 2f       	mov	r18, r24
    1856:	30 e0       	ldi	r19, 0x00	; 0
    1858:	81 e0       	ldi	r24, 0x01	; 1
    185a:	90 e0       	ldi	r25, 0x00	; 0
    185c:	02 2e       	mov	r0, r18
    185e:	02 c0       	rjmp	.+4      	; 0x1864 <DIO_VidSetPinDirection+0xf6>
    1860:	88 0f       	add	r24, r24
    1862:	99 1f       	adc	r25, r25
    1864:	0a 94       	dec	r0
    1866:	e2 f7       	brpl	.-8      	; 0x1860 <DIO_VidSetPinDirection+0xf2>
    1868:	84 2b       	or	r24, r20
    186a:	8c 93       	st	X, r24
    186c:	77 c0       	rjmp	.+238    	; 0x195c <DIO_VidSetPinDirection+0x1ee>
		}
	}
	else if (INPUT == LOC_u8State)
    186e:	8b 81       	ldd	r24, Y+3	; 0x03
    1870:	88 23       	and	r24, r24
    1872:	09 f0       	breq	.+2      	; 0x1876 <DIO_VidSetPinDirection+0x108>
    1874:	73 c0       	rjmp	.+230    	; 0x195c <DIO_VidSetPinDirection+0x1ee>
	{
		switch(LOC_u8Port)
    1876:	89 81       	ldd	r24, Y+1	; 0x01
    1878:	28 2f       	mov	r18, r24
    187a:	30 e0       	ldi	r19, 0x00	; 0
    187c:	3d 83       	std	Y+5, r19	; 0x05
    187e:	2c 83       	std	Y+4, r18	; 0x04
    1880:	8c 81       	ldd	r24, Y+4	; 0x04
    1882:	9d 81       	ldd	r25, Y+5	; 0x05
    1884:	81 30       	cpi	r24, 0x01	; 1
    1886:	91 05       	cpc	r25, r1
    1888:	59 f1       	breq	.+86     	; 0x18e0 <DIO_VidSetPinDirection+0x172>
    188a:	2c 81       	ldd	r18, Y+4	; 0x04
    188c:	3d 81       	ldd	r19, Y+5	; 0x05
    188e:	22 30       	cpi	r18, 0x02	; 2
    1890:	31 05       	cpc	r19, r1
    1892:	2c f4       	brge	.+10     	; 0x189e <DIO_VidSetPinDirection+0x130>
    1894:	8c 81       	ldd	r24, Y+4	; 0x04
    1896:	9d 81       	ldd	r25, Y+5	; 0x05
    1898:	00 97       	sbiw	r24, 0x00	; 0
    189a:	69 f0       	breq	.+26     	; 0x18b6 <DIO_VidSetPinDirection+0x148>
    189c:	5f c0       	rjmp	.+190    	; 0x195c <DIO_VidSetPinDirection+0x1ee>
    189e:	2c 81       	ldd	r18, Y+4	; 0x04
    18a0:	3d 81       	ldd	r19, Y+5	; 0x05
    18a2:	22 30       	cpi	r18, 0x02	; 2
    18a4:	31 05       	cpc	r19, r1
    18a6:	89 f1       	breq	.+98     	; 0x190a <DIO_VidSetPinDirection+0x19c>
    18a8:	8c 81       	ldd	r24, Y+4	; 0x04
    18aa:	9d 81       	ldd	r25, Y+5	; 0x05
    18ac:	83 30       	cpi	r24, 0x03	; 3
    18ae:	91 05       	cpc	r25, r1
    18b0:	09 f4       	brne	.+2      	; 0x18b4 <DIO_VidSetPinDirection+0x146>
    18b2:	40 c0       	rjmp	.+128    	; 0x1934 <DIO_VidSetPinDirection+0x1c6>
    18b4:	53 c0       	rjmp	.+166    	; 0x195c <DIO_VidSetPinDirection+0x1ee>
		{
			case 0: CLR_BIT(DDRA, LOC_u8Pin); break;
    18b6:	aa e3       	ldi	r26, 0x3A	; 58
    18b8:	b0 e0       	ldi	r27, 0x00	; 0
    18ba:	ea e3       	ldi	r30, 0x3A	; 58
    18bc:	f0 e0       	ldi	r31, 0x00	; 0
    18be:	80 81       	ld	r24, Z
    18c0:	48 2f       	mov	r20, r24
    18c2:	8a 81       	ldd	r24, Y+2	; 0x02
    18c4:	28 2f       	mov	r18, r24
    18c6:	30 e0       	ldi	r19, 0x00	; 0
    18c8:	81 e0       	ldi	r24, 0x01	; 1
    18ca:	90 e0       	ldi	r25, 0x00	; 0
    18cc:	02 2e       	mov	r0, r18
    18ce:	02 c0       	rjmp	.+4      	; 0x18d4 <DIO_VidSetPinDirection+0x166>
    18d0:	88 0f       	add	r24, r24
    18d2:	99 1f       	adc	r25, r25
    18d4:	0a 94       	dec	r0
    18d6:	e2 f7       	brpl	.-8      	; 0x18d0 <DIO_VidSetPinDirection+0x162>
    18d8:	80 95       	com	r24
    18da:	84 23       	and	r24, r20
    18dc:	8c 93       	st	X, r24
    18de:	3e c0       	rjmp	.+124    	; 0x195c <DIO_VidSetPinDirection+0x1ee>
			case 1: CLR_BIT(DDRB, LOC_u8Pin); break;
    18e0:	a7 e3       	ldi	r26, 0x37	; 55
    18e2:	b0 e0       	ldi	r27, 0x00	; 0
    18e4:	e7 e3       	ldi	r30, 0x37	; 55
    18e6:	f0 e0       	ldi	r31, 0x00	; 0
    18e8:	80 81       	ld	r24, Z
    18ea:	48 2f       	mov	r20, r24
    18ec:	8a 81       	ldd	r24, Y+2	; 0x02
    18ee:	28 2f       	mov	r18, r24
    18f0:	30 e0       	ldi	r19, 0x00	; 0
    18f2:	81 e0       	ldi	r24, 0x01	; 1
    18f4:	90 e0       	ldi	r25, 0x00	; 0
    18f6:	02 2e       	mov	r0, r18
    18f8:	02 c0       	rjmp	.+4      	; 0x18fe <DIO_VidSetPinDirection+0x190>
    18fa:	88 0f       	add	r24, r24
    18fc:	99 1f       	adc	r25, r25
    18fe:	0a 94       	dec	r0
    1900:	e2 f7       	brpl	.-8      	; 0x18fa <DIO_VidSetPinDirection+0x18c>
    1902:	80 95       	com	r24
    1904:	84 23       	and	r24, r20
    1906:	8c 93       	st	X, r24
    1908:	29 c0       	rjmp	.+82     	; 0x195c <DIO_VidSetPinDirection+0x1ee>
			case 2: CLR_BIT(DDRC, LOC_u8Pin); break;
    190a:	a4 e3       	ldi	r26, 0x34	; 52
    190c:	b0 e0       	ldi	r27, 0x00	; 0
    190e:	e4 e3       	ldi	r30, 0x34	; 52
    1910:	f0 e0       	ldi	r31, 0x00	; 0
    1912:	80 81       	ld	r24, Z
    1914:	48 2f       	mov	r20, r24
    1916:	8a 81       	ldd	r24, Y+2	; 0x02
    1918:	28 2f       	mov	r18, r24
    191a:	30 e0       	ldi	r19, 0x00	; 0
    191c:	81 e0       	ldi	r24, 0x01	; 1
    191e:	90 e0       	ldi	r25, 0x00	; 0
    1920:	02 2e       	mov	r0, r18
    1922:	02 c0       	rjmp	.+4      	; 0x1928 <DIO_VidSetPinDirection+0x1ba>
    1924:	88 0f       	add	r24, r24
    1926:	99 1f       	adc	r25, r25
    1928:	0a 94       	dec	r0
    192a:	e2 f7       	brpl	.-8      	; 0x1924 <DIO_VidSetPinDirection+0x1b6>
    192c:	80 95       	com	r24
    192e:	84 23       	and	r24, r20
    1930:	8c 93       	st	X, r24
    1932:	14 c0       	rjmp	.+40     	; 0x195c <DIO_VidSetPinDirection+0x1ee>
			case 3: CLR_BIT(DDRD, LOC_u8Pin); break;
    1934:	a1 e3       	ldi	r26, 0x31	; 49
    1936:	b0 e0       	ldi	r27, 0x00	; 0
    1938:	e1 e3       	ldi	r30, 0x31	; 49
    193a:	f0 e0       	ldi	r31, 0x00	; 0
    193c:	80 81       	ld	r24, Z
    193e:	48 2f       	mov	r20, r24
    1940:	8a 81       	ldd	r24, Y+2	; 0x02
    1942:	28 2f       	mov	r18, r24
    1944:	30 e0       	ldi	r19, 0x00	; 0
    1946:	81 e0       	ldi	r24, 0x01	; 1
    1948:	90 e0       	ldi	r25, 0x00	; 0
    194a:	02 2e       	mov	r0, r18
    194c:	02 c0       	rjmp	.+4      	; 0x1952 <DIO_VidSetPinDirection+0x1e4>
    194e:	88 0f       	add	r24, r24
    1950:	99 1f       	adc	r25, r25
    1952:	0a 94       	dec	r0
    1954:	e2 f7       	brpl	.-8      	; 0x194e <DIO_VidSetPinDirection+0x1e0>
    1956:	80 95       	com	r24
    1958:	84 23       	and	r24, r20
    195a:	8c 93       	st	X, r24
		}
	}
	
	
}
    195c:	27 96       	adiw	r28, 0x07	; 7
    195e:	0f b6       	in	r0, 0x3f	; 63
    1960:	f8 94       	cli
    1962:	de bf       	out	0x3e, r29	; 62
    1964:	0f be       	out	0x3f, r0	; 63
    1966:	cd bf       	out	0x3d, r28	; 61
    1968:	cf 91       	pop	r28
    196a:	df 91       	pop	r29
    196c:	08 95       	ret

0000196e <DIO_VidSetPinValue>:

void DIO_VidSetPinValue (u8 LOC_u8Port, u8 LOC_u8Pin, u8 LOC_u8Value)
{
    196e:	df 93       	push	r29
    1970:	cf 93       	push	r28
    1972:	cd b7       	in	r28, 0x3d	; 61
    1974:	de b7       	in	r29, 0x3e	; 62
    1976:	27 97       	sbiw	r28, 0x07	; 7
    1978:	0f b6       	in	r0, 0x3f	; 63
    197a:	f8 94       	cli
    197c:	de bf       	out	0x3e, r29	; 62
    197e:	0f be       	out	0x3f, r0	; 63
    1980:	cd bf       	out	0x3d, r28	; 61
    1982:	89 83       	std	Y+1, r24	; 0x01
    1984:	6a 83       	std	Y+2, r22	; 0x02
    1986:	4b 83       	std	Y+3, r20	; 0x03
	if (OUTPUT == LOC_u8Value)
    1988:	8b 81       	ldd	r24, Y+3	; 0x03
    198a:	81 30       	cpi	r24, 0x01	; 1
    198c:	09 f0       	breq	.+2      	; 0x1990 <DIO_VidSetPinValue+0x22>
    198e:	6f c0       	rjmp	.+222    	; 0x1a6e <DIO_VidSetPinValue+0x100>
	{
		switch(LOC_u8Port)
    1990:	89 81       	ldd	r24, Y+1	; 0x01
    1992:	28 2f       	mov	r18, r24
    1994:	30 e0       	ldi	r19, 0x00	; 0
    1996:	3f 83       	std	Y+7, r19	; 0x07
    1998:	2e 83       	std	Y+6, r18	; 0x06
    199a:	8e 81       	ldd	r24, Y+6	; 0x06
    199c:	9f 81       	ldd	r25, Y+7	; 0x07
    199e:	81 30       	cpi	r24, 0x01	; 1
    19a0:	91 05       	cpc	r25, r1
    19a2:	49 f1       	breq	.+82     	; 0x19f6 <DIO_VidSetPinValue+0x88>
    19a4:	2e 81       	ldd	r18, Y+6	; 0x06
    19a6:	3f 81       	ldd	r19, Y+7	; 0x07
    19a8:	22 30       	cpi	r18, 0x02	; 2
    19aa:	31 05       	cpc	r19, r1
    19ac:	2c f4       	brge	.+10     	; 0x19b8 <DIO_VidSetPinValue+0x4a>
    19ae:	8e 81       	ldd	r24, Y+6	; 0x06
    19b0:	9f 81       	ldd	r25, Y+7	; 0x07
    19b2:	00 97       	sbiw	r24, 0x00	; 0
    19b4:	61 f0       	breq	.+24     	; 0x19ce <DIO_VidSetPinValue+0x60>
    19b6:	d2 c0       	rjmp	.+420    	; 0x1b5c <DIO_VidSetPinValue+0x1ee>
    19b8:	2e 81       	ldd	r18, Y+6	; 0x06
    19ba:	3f 81       	ldd	r19, Y+7	; 0x07
    19bc:	22 30       	cpi	r18, 0x02	; 2
    19be:	31 05       	cpc	r19, r1
    19c0:	71 f1       	breq	.+92     	; 0x1a1e <DIO_VidSetPinValue+0xb0>
    19c2:	8e 81       	ldd	r24, Y+6	; 0x06
    19c4:	9f 81       	ldd	r25, Y+7	; 0x07
    19c6:	83 30       	cpi	r24, 0x03	; 3
    19c8:	91 05       	cpc	r25, r1
    19ca:	e9 f1       	breq	.+122    	; 0x1a46 <DIO_VidSetPinValue+0xd8>
    19cc:	c7 c0       	rjmp	.+398    	; 0x1b5c <DIO_VidSetPinValue+0x1ee>
		{
			case 0: SET_BIT(PORTA,LOC_u8Pin); break;
    19ce:	ab e3       	ldi	r26, 0x3B	; 59
    19d0:	b0 e0       	ldi	r27, 0x00	; 0
    19d2:	eb e3       	ldi	r30, 0x3B	; 59
    19d4:	f0 e0       	ldi	r31, 0x00	; 0
    19d6:	80 81       	ld	r24, Z
    19d8:	48 2f       	mov	r20, r24
    19da:	8a 81       	ldd	r24, Y+2	; 0x02
    19dc:	28 2f       	mov	r18, r24
    19de:	30 e0       	ldi	r19, 0x00	; 0
    19e0:	81 e0       	ldi	r24, 0x01	; 1
    19e2:	90 e0       	ldi	r25, 0x00	; 0
    19e4:	02 2e       	mov	r0, r18
    19e6:	02 c0       	rjmp	.+4      	; 0x19ec <DIO_VidSetPinValue+0x7e>
    19e8:	88 0f       	add	r24, r24
    19ea:	99 1f       	adc	r25, r25
    19ec:	0a 94       	dec	r0
    19ee:	e2 f7       	brpl	.-8      	; 0x19e8 <DIO_VidSetPinValue+0x7a>
    19f0:	84 2b       	or	r24, r20
    19f2:	8c 93       	st	X, r24
    19f4:	b3 c0       	rjmp	.+358    	; 0x1b5c <DIO_VidSetPinValue+0x1ee>
			case 1: SET_BIT(PORTB,LOC_u8Pin); break;
    19f6:	a8 e3       	ldi	r26, 0x38	; 56
    19f8:	b0 e0       	ldi	r27, 0x00	; 0
    19fa:	e8 e3       	ldi	r30, 0x38	; 56
    19fc:	f0 e0       	ldi	r31, 0x00	; 0
    19fe:	80 81       	ld	r24, Z
    1a00:	48 2f       	mov	r20, r24
    1a02:	8a 81       	ldd	r24, Y+2	; 0x02
    1a04:	28 2f       	mov	r18, r24
    1a06:	30 e0       	ldi	r19, 0x00	; 0
    1a08:	81 e0       	ldi	r24, 0x01	; 1
    1a0a:	90 e0       	ldi	r25, 0x00	; 0
    1a0c:	02 2e       	mov	r0, r18
    1a0e:	02 c0       	rjmp	.+4      	; 0x1a14 <DIO_VidSetPinValue+0xa6>
    1a10:	88 0f       	add	r24, r24
    1a12:	99 1f       	adc	r25, r25
    1a14:	0a 94       	dec	r0
    1a16:	e2 f7       	brpl	.-8      	; 0x1a10 <DIO_VidSetPinValue+0xa2>
    1a18:	84 2b       	or	r24, r20
    1a1a:	8c 93       	st	X, r24
    1a1c:	9f c0       	rjmp	.+318    	; 0x1b5c <DIO_VidSetPinValue+0x1ee>
			case 2: SET_BIT(PORTC,LOC_u8Pin); break;
    1a1e:	a5 e3       	ldi	r26, 0x35	; 53
    1a20:	b0 e0       	ldi	r27, 0x00	; 0
    1a22:	e5 e3       	ldi	r30, 0x35	; 53
    1a24:	f0 e0       	ldi	r31, 0x00	; 0
    1a26:	80 81       	ld	r24, Z
    1a28:	48 2f       	mov	r20, r24
    1a2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a2c:	28 2f       	mov	r18, r24
    1a2e:	30 e0       	ldi	r19, 0x00	; 0
    1a30:	81 e0       	ldi	r24, 0x01	; 1
    1a32:	90 e0       	ldi	r25, 0x00	; 0
    1a34:	02 2e       	mov	r0, r18
    1a36:	02 c0       	rjmp	.+4      	; 0x1a3c <DIO_VidSetPinValue+0xce>
    1a38:	88 0f       	add	r24, r24
    1a3a:	99 1f       	adc	r25, r25
    1a3c:	0a 94       	dec	r0
    1a3e:	e2 f7       	brpl	.-8      	; 0x1a38 <DIO_VidSetPinValue+0xca>
    1a40:	84 2b       	or	r24, r20
    1a42:	8c 93       	st	X, r24
    1a44:	8b c0       	rjmp	.+278    	; 0x1b5c <DIO_VidSetPinValue+0x1ee>
			case 3: SET_BIT(PORTD,LOC_u8Pin); break;
    1a46:	a2 e3       	ldi	r26, 0x32	; 50
    1a48:	b0 e0       	ldi	r27, 0x00	; 0
    1a4a:	e2 e3       	ldi	r30, 0x32	; 50
    1a4c:	f0 e0       	ldi	r31, 0x00	; 0
    1a4e:	80 81       	ld	r24, Z
    1a50:	48 2f       	mov	r20, r24
    1a52:	8a 81       	ldd	r24, Y+2	; 0x02
    1a54:	28 2f       	mov	r18, r24
    1a56:	30 e0       	ldi	r19, 0x00	; 0
    1a58:	81 e0       	ldi	r24, 0x01	; 1
    1a5a:	90 e0       	ldi	r25, 0x00	; 0
    1a5c:	02 2e       	mov	r0, r18
    1a5e:	02 c0       	rjmp	.+4      	; 0x1a64 <DIO_VidSetPinValue+0xf6>
    1a60:	88 0f       	add	r24, r24
    1a62:	99 1f       	adc	r25, r25
    1a64:	0a 94       	dec	r0
    1a66:	e2 f7       	brpl	.-8      	; 0x1a60 <DIO_VidSetPinValue+0xf2>
    1a68:	84 2b       	or	r24, r20
    1a6a:	8c 93       	st	X, r24
    1a6c:	77 c0       	rjmp	.+238    	; 0x1b5c <DIO_VidSetPinValue+0x1ee>
		}
	}
	else if (INPUT == LOC_u8Value)
    1a6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a70:	88 23       	and	r24, r24
    1a72:	09 f0       	breq	.+2      	; 0x1a76 <DIO_VidSetPinValue+0x108>
    1a74:	73 c0       	rjmp	.+230    	; 0x1b5c <DIO_VidSetPinValue+0x1ee>
	{
		switch(LOC_u8Port)
    1a76:	89 81       	ldd	r24, Y+1	; 0x01
    1a78:	28 2f       	mov	r18, r24
    1a7a:	30 e0       	ldi	r19, 0x00	; 0
    1a7c:	3d 83       	std	Y+5, r19	; 0x05
    1a7e:	2c 83       	std	Y+4, r18	; 0x04
    1a80:	8c 81       	ldd	r24, Y+4	; 0x04
    1a82:	9d 81       	ldd	r25, Y+5	; 0x05
    1a84:	81 30       	cpi	r24, 0x01	; 1
    1a86:	91 05       	cpc	r25, r1
    1a88:	59 f1       	breq	.+86     	; 0x1ae0 <DIO_VidSetPinValue+0x172>
    1a8a:	2c 81       	ldd	r18, Y+4	; 0x04
    1a8c:	3d 81       	ldd	r19, Y+5	; 0x05
    1a8e:	22 30       	cpi	r18, 0x02	; 2
    1a90:	31 05       	cpc	r19, r1
    1a92:	2c f4       	brge	.+10     	; 0x1a9e <DIO_VidSetPinValue+0x130>
    1a94:	8c 81       	ldd	r24, Y+4	; 0x04
    1a96:	9d 81       	ldd	r25, Y+5	; 0x05
    1a98:	00 97       	sbiw	r24, 0x00	; 0
    1a9a:	69 f0       	breq	.+26     	; 0x1ab6 <DIO_VidSetPinValue+0x148>
    1a9c:	5f c0       	rjmp	.+190    	; 0x1b5c <DIO_VidSetPinValue+0x1ee>
    1a9e:	2c 81       	ldd	r18, Y+4	; 0x04
    1aa0:	3d 81       	ldd	r19, Y+5	; 0x05
    1aa2:	22 30       	cpi	r18, 0x02	; 2
    1aa4:	31 05       	cpc	r19, r1
    1aa6:	89 f1       	breq	.+98     	; 0x1b0a <DIO_VidSetPinValue+0x19c>
    1aa8:	8c 81       	ldd	r24, Y+4	; 0x04
    1aaa:	9d 81       	ldd	r25, Y+5	; 0x05
    1aac:	83 30       	cpi	r24, 0x03	; 3
    1aae:	91 05       	cpc	r25, r1
    1ab0:	09 f4       	brne	.+2      	; 0x1ab4 <DIO_VidSetPinValue+0x146>
    1ab2:	40 c0       	rjmp	.+128    	; 0x1b34 <DIO_VidSetPinValue+0x1c6>
    1ab4:	53 c0       	rjmp	.+166    	; 0x1b5c <DIO_VidSetPinValue+0x1ee>
		{
			case 0: CLR_BIT(PORTA, LOC_u8Pin); break;
    1ab6:	ab e3       	ldi	r26, 0x3B	; 59
    1ab8:	b0 e0       	ldi	r27, 0x00	; 0
    1aba:	eb e3       	ldi	r30, 0x3B	; 59
    1abc:	f0 e0       	ldi	r31, 0x00	; 0
    1abe:	80 81       	ld	r24, Z
    1ac0:	48 2f       	mov	r20, r24
    1ac2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac4:	28 2f       	mov	r18, r24
    1ac6:	30 e0       	ldi	r19, 0x00	; 0
    1ac8:	81 e0       	ldi	r24, 0x01	; 1
    1aca:	90 e0       	ldi	r25, 0x00	; 0
    1acc:	02 2e       	mov	r0, r18
    1ace:	02 c0       	rjmp	.+4      	; 0x1ad4 <DIO_VidSetPinValue+0x166>
    1ad0:	88 0f       	add	r24, r24
    1ad2:	99 1f       	adc	r25, r25
    1ad4:	0a 94       	dec	r0
    1ad6:	e2 f7       	brpl	.-8      	; 0x1ad0 <DIO_VidSetPinValue+0x162>
    1ad8:	80 95       	com	r24
    1ada:	84 23       	and	r24, r20
    1adc:	8c 93       	st	X, r24
    1ade:	3e c0       	rjmp	.+124    	; 0x1b5c <DIO_VidSetPinValue+0x1ee>
			case 1: CLR_BIT(PORTB, LOC_u8Pin); break;
    1ae0:	a8 e3       	ldi	r26, 0x38	; 56
    1ae2:	b0 e0       	ldi	r27, 0x00	; 0
    1ae4:	e8 e3       	ldi	r30, 0x38	; 56
    1ae6:	f0 e0       	ldi	r31, 0x00	; 0
    1ae8:	80 81       	ld	r24, Z
    1aea:	48 2f       	mov	r20, r24
    1aec:	8a 81       	ldd	r24, Y+2	; 0x02
    1aee:	28 2f       	mov	r18, r24
    1af0:	30 e0       	ldi	r19, 0x00	; 0
    1af2:	81 e0       	ldi	r24, 0x01	; 1
    1af4:	90 e0       	ldi	r25, 0x00	; 0
    1af6:	02 2e       	mov	r0, r18
    1af8:	02 c0       	rjmp	.+4      	; 0x1afe <DIO_VidSetPinValue+0x190>
    1afa:	88 0f       	add	r24, r24
    1afc:	99 1f       	adc	r25, r25
    1afe:	0a 94       	dec	r0
    1b00:	e2 f7       	brpl	.-8      	; 0x1afa <DIO_VidSetPinValue+0x18c>
    1b02:	80 95       	com	r24
    1b04:	84 23       	and	r24, r20
    1b06:	8c 93       	st	X, r24
    1b08:	29 c0       	rjmp	.+82     	; 0x1b5c <DIO_VidSetPinValue+0x1ee>
			case 2: CLR_BIT(PORTC, LOC_u8Pin); break;
    1b0a:	a5 e3       	ldi	r26, 0x35	; 53
    1b0c:	b0 e0       	ldi	r27, 0x00	; 0
    1b0e:	e5 e3       	ldi	r30, 0x35	; 53
    1b10:	f0 e0       	ldi	r31, 0x00	; 0
    1b12:	80 81       	ld	r24, Z
    1b14:	48 2f       	mov	r20, r24
    1b16:	8a 81       	ldd	r24, Y+2	; 0x02
    1b18:	28 2f       	mov	r18, r24
    1b1a:	30 e0       	ldi	r19, 0x00	; 0
    1b1c:	81 e0       	ldi	r24, 0x01	; 1
    1b1e:	90 e0       	ldi	r25, 0x00	; 0
    1b20:	02 2e       	mov	r0, r18
    1b22:	02 c0       	rjmp	.+4      	; 0x1b28 <DIO_VidSetPinValue+0x1ba>
    1b24:	88 0f       	add	r24, r24
    1b26:	99 1f       	adc	r25, r25
    1b28:	0a 94       	dec	r0
    1b2a:	e2 f7       	brpl	.-8      	; 0x1b24 <DIO_VidSetPinValue+0x1b6>
    1b2c:	80 95       	com	r24
    1b2e:	84 23       	and	r24, r20
    1b30:	8c 93       	st	X, r24
    1b32:	14 c0       	rjmp	.+40     	; 0x1b5c <DIO_VidSetPinValue+0x1ee>
			case 3: CLR_BIT(PORTD, LOC_u8Pin); break;
    1b34:	a2 e3       	ldi	r26, 0x32	; 50
    1b36:	b0 e0       	ldi	r27, 0x00	; 0
    1b38:	e2 e3       	ldi	r30, 0x32	; 50
    1b3a:	f0 e0       	ldi	r31, 0x00	; 0
    1b3c:	80 81       	ld	r24, Z
    1b3e:	48 2f       	mov	r20, r24
    1b40:	8a 81       	ldd	r24, Y+2	; 0x02
    1b42:	28 2f       	mov	r18, r24
    1b44:	30 e0       	ldi	r19, 0x00	; 0
    1b46:	81 e0       	ldi	r24, 0x01	; 1
    1b48:	90 e0       	ldi	r25, 0x00	; 0
    1b4a:	02 2e       	mov	r0, r18
    1b4c:	02 c0       	rjmp	.+4      	; 0x1b52 <DIO_VidSetPinValue+0x1e4>
    1b4e:	88 0f       	add	r24, r24
    1b50:	99 1f       	adc	r25, r25
    1b52:	0a 94       	dec	r0
    1b54:	e2 f7       	brpl	.-8      	; 0x1b4e <DIO_VidSetPinValue+0x1e0>
    1b56:	80 95       	com	r24
    1b58:	84 23       	and	r24, r20
    1b5a:	8c 93       	st	X, r24
		}
	}
}
    1b5c:	27 96       	adiw	r28, 0x07	; 7
    1b5e:	0f b6       	in	r0, 0x3f	; 63
    1b60:	f8 94       	cli
    1b62:	de bf       	out	0x3e, r29	; 62
    1b64:	0f be       	out	0x3f, r0	; 63
    1b66:	cd bf       	out	0x3d, r28	; 61
    1b68:	cf 91       	pop	r28
    1b6a:	df 91       	pop	r29
    1b6c:	08 95       	ret

00001b6e <DIO_VidSetPortDirection>:


void DIO_VidSetPortDirection (u8 LOC_u8Port, u8 LOC_u8value )
{
    1b6e:	df 93       	push	r29
    1b70:	cf 93       	push	r28
    1b72:	00 d0       	rcall	.+0      	; 0x1b74 <DIO_VidSetPortDirection+0x6>
    1b74:	00 d0       	rcall	.+0      	; 0x1b76 <DIO_VidSetPortDirection+0x8>
    1b76:	cd b7       	in	r28, 0x3d	; 61
    1b78:	de b7       	in	r29, 0x3e	; 62
    1b7a:	89 83       	std	Y+1, r24	; 0x01
    1b7c:	6a 83       	std	Y+2, r22	; 0x02
			switch(LOC_u8Port)
    1b7e:	89 81       	ldd	r24, Y+1	; 0x01
    1b80:	28 2f       	mov	r18, r24
    1b82:	30 e0       	ldi	r19, 0x00	; 0
    1b84:	3c 83       	std	Y+4, r19	; 0x04
    1b86:	2b 83       	std	Y+3, r18	; 0x03
    1b88:	8b 81       	ldd	r24, Y+3	; 0x03
    1b8a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b8c:	81 30       	cpi	r24, 0x01	; 1
    1b8e:	91 05       	cpc	r25, r1
    1b90:	d1 f0       	breq	.+52     	; 0x1bc6 <DIO_VidSetPortDirection+0x58>
    1b92:	2b 81       	ldd	r18, Y+3	; 0x03
    1b94:	3c 81       	ldd	r19, Y+4	; 0x04
    1b96:	22 30       	cpi	r18, 0x02	; 2
    1b98:	31 05       	cpc	r19, r1
    1b9a:	2c f4       	brge	.+10     	; 0x1ba6 <DIO_VidSetPortDirection+0x38>
    1b9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b9e:	9c 81       	ldd	r25, Y+4	; 0x04
    1ba0:	00 97       	sbiw	r24, 0x00	; 0
    1ba2:	61 f0       	breq	.+24     	; 0x1bbc <DIO_VidSetPortDirection+0x4e>
    1ba4:	1e c0       	rjmp	.+60     	; 0x1be2 <DIO_VidSetPortDirection+0x74>
    1ba6:	2b 81       	ldd	r18, Y+3	; 0x03
    1ba8:	3c 81       	ldd	r19, Y+4	; 0x04
    1baa:	22 30       	cpi	r18, 0x02	; 2
    1bac:	31 05       	cpc	r19, r1
    1bae:	81 f0       	breq	.+32     	; 0x1bd0 <DIO_VidSetPortDirection+0x62>
    1bb0:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb2:	9c 81       	ldd	r25, Y+4	; 0x04
    1bb4:	83 30       	cpi	r24, 0x03	; 3
    1bb6:	91 05       	cpc	r25, r1
    1bb8:	81 f0       	breq	.+32     	; 0x1bda <DIO_VidSetPortDirection+0x6c>
    1bba:	13 c0       	rjmp	.+38     	; 0x1be2 <DIO_VidSetPortDirection+0x74>
			{
				case 0: DDRA=LOC_u8value; break;
    1bbc:	ea e3       	ldi	r30, 0x3A	; 58
    1bbe:	f0 e0       	ldi	r31, 0x00	; 0
    1bc0:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc2:	80 83       	st	Z, r24
    1bc4:	0e c0       	rjmp	.+28     	; 0x1be2 <DIO_VidSetPortDirection+0x74>
				case 1: DDRB=LOC_u8value; break;
    1bc6:	e7 e3       	ldi	r30, 0x37	; 55
    1bc8:	f0 e0       	ldi	r31, 0x00	; 0
    1bca:	8a 81       	ldd	r24, Y+2	; 0x02
    1bcc:	80 83       	st	Z, r24
    1bce:	09 c0       	rjmp	.+18     	; 0x1be2 <DIO_VidSetPortDirection+0x74>
				case 2: DDRC=LOC_u8value; break;
    1bd0:	e4 e3       	ldi	r30, 0x34	; 52
    1bd2:	f0 e0       	ldi	r31, 0x00	; 0
    1bd4:	8a 81       	ldd	r24, Y+2	; 0x02
    1bd6:	80 83       	st	Z, r24
    1bd8:	04 c0       	rjmp	.+8      	; 0x1be2 <DIO_VidSetPortDirection+0x74>
				case 3: DDRD=LOC_u8value; break;
    1bda:	e1 e3       	ldi	r30, 0x31	; 49
    1bdc:	f0 e0       	ldi	r31, 0x00	; 0
    1bde:	8a 81       	ldd	r24, Y+2	; 0x02
    1be0:	80 83       	st	Z, r24
			}

}
    1be2:	0f 90       	pop	r0
    1be4:	0f 90       	pop	r0
    1be6:	0f 90       	pop	r0
    1be8:	0f 90       	pop	r0
    1bea:	cf 91       	pop	r28
    1bec:	df 91       	pop	r29
    1bee:	08 95       	ret

00001bf0 <DIO_VidSetPortValue>:


void DIO_VidSetPortValue (u8 LOC_u8Port, u8 LOC_u8value)
{
    1bf0:	df 93       	push	r29
    1bf2:	cf 93       	push	r28
    1bf4:	00 d0       	rcall	.+0      	; 0x1bf6 <DIO_VidSetPortValue+0x6>
    1bf6:	00 d0       	rcall	.+0      	; 0x1bf8 <DIO_VidSetPortValue+0x8>
    1bf8:	cd b7       	in	r28, 0x3d	; 61
    1bfa:	de b7       	in	r29, 0x3e	; 62
    1bfc:	89 83       	std	Y+1, r24	; 0x01
    1bfe:	6a 83       	std	Y+2, r22	; 0x02
	switch(LOC_u8Port)
    1c00:	89 81       	ldd	r24, Y+1	; 0x01
    1c02:	28 2f       	mov	r18, r24
    1c04:	30 e0       	ldi	r19, 0x00	; 0
    1c06:	3c 83       	std	Y+4, r19	; 0x04
    1c08:	2b 83       	std	Y+3, r18	; 0x03
    1c0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c0c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c0e:	81 30       	cpi	r24, 0x01	; 1
    1c10:	91 05       	cpc	r25, r1
    1c12:	d1 f0       	breq	.+52     	; 0x1c48 <DIO_VidSetPortValue+0x58>
    1c14:	2b 81       	ldd	r18, Y+3	; 0x03
    1c16:	3c 81       	ldd	r19, Y+4	; 0x04
    1c18:	22 30       	cpi	r18, 0x02	; 2
    1c1a:	31 05       	cpc	r19, r1
    1c1c:	2c f4       	brge	.+10     	; 0x1c28 <DIO_VidSetPortValue+0x38>
    1c1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c20:	9c 81       	ldd	r25, Y+4	; 0x04
    1c22:	00 97       	sbiw	r24, 0x00	; 0
    1c24:	61 f0       	breq	.+24     	; 0x1c3e <DIO_VidSetPortValue+0x4e>
    1c26:	1e c0       	rjmp	.+60     	; 0x1c64 <DIO_VidSetPortValue+0x74>
    1c28:	2b 81       	ldd	r18, Y+3	; 0x03
    1c2a:	3c 81       	ldd	r19, Y+4	; 0x04
    1c2c:	22 30       	cpi	r18, 0x02	; 2
    1c2e:	31 05       	cpc	r19, r1
    1c30:	81 f0       	breq	.+32     	; 0x1c52 <DIO_VidSetPortValue+0x62>
    1c32:	8b 81       	ldd	r24, Y+3	; 0x03
    1c34:	9c 81       	ldd	r25, Y+4	; 0x04
    1c36:	83 30       	cpi	r24, 0x03	; 3
    1c38:	91 05       	cpc	r25, r1
    1c3a:	81 f0       	breq	.+32     	; 0x1c5c <DIO_VidSetPortValue+0x6c>
    1c3c:	13 c0       	rjmp	.+38     	; 0x1c64 <DIO_VidSetPortValue+0x74>
				{
					case 0: PORTA=LOC_u8value; break;
    1c3e:	eb e3       	ldi	r30, 0x3B	; 59
    1c40:	f0 e0       	ldi	r31, 0x00	; 0
    1c42:	8a 81       	ldd	r24, Y+2	; 0x02
    1c44:	80 83       	st	Z, r24
    1c46:	0e c0       	rjmp	.+28     	; 0x1c64 <DIO_VidSetPortValue+0x74>
					case 1: PORTB=LOC_u8value; break;
    1c48:	e8 e3       	ldi	r30, 0x38	; 56
    1c4a:	f0 e0       	ldi	r31, 0x00	; 0
    1c4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c4e:	80 83       	st	Z, r24
    1c50:	09 c0       	rjmp	.+18     	; 0x1c64 <DIO_VidSetPortValue+0x74>
					case 2: PORTC=LOC_u8value; break;
    1c52:	e5 e3       	ldi	r30, 0x35	; 53
    1c54:	f0 e0       	ldi	r31, 0x00	; 0
    1c56:	8a 81       	ldd	r24, Y+2	; 0x02
    1c58:	80 83       	st	Z, r24
    1c5a:	04 c0       	rjmp	.+8      	; 0x1c64 <DIO_VidSetPortValue+0x74>
					case 3: PORTD=LOC_u8value; break;
    1c5c:	e2 e3       	ldi	r30, 0x32	; 50
    1c5e:	f0 e0       	ldi	r31, 0x00	; 0
    1c60:	8a 81       	ldd	r24, Y+2	; 0x02
    1c62:	80 83       	st	Z, r24
				}
}
    1c64:	0f 90       	pop	r0
    1c66:	0f 90       	pop	r0
    1c68:	0f 90       	pop	r0
    1c6a:	0f 90       	pop	r0
    1c6c:	cf 91       	pop	r28
    1c6e:	df 91       	pop	r29
    1c70:	08 95       	ret

00001c72 <DIO_u8GitPinValue>:


u8   DIO_u8GitPinValue (u8 LOC_u8Port, u8 LOC_u8Pin)
{
    1c72:	df 93       	push	r29
    1c74:	cf 93       	push	r28
    1c76:	00 d0       	rcall	.+0      	; 0x1c78 <DIO_u8GitPinValue+0x6>
    1c78:	00 d0       	rcall	.+0      	; 0x1c7a <DIO_u8GitPinValue+0x8>
    1c7a:	0f 92       	push	r0
    1c7c:	cd b7       	in	r28, 0x3d	; 61
    1c7e:	de b7       	in	r29, 0x3e	; 62
    1c80:	8a 83       	std	Y+2, r24	; 0x02
    1c82:	6b 83       	std	Y+3, r22	; 0x03
		u8 Pin_Value=0;
    1c84:	19 82       	std	Y+1, r1	; 0x01

		switch(LOC_u8Port)
    1c86:	8a 81       	ldd	r24, Y+2	; 0x02
    1c88:	28 2f       	mov	r18, r24
    1c8a:	30 e0       	ldi	r19, 0x00	; 0
    1c8c:	3d 83       	std	Y+5, r19	; 0x05
    1c8e:	2c 83       	std	Y+4, r18	; 0x04
    1c90:	4c 81       	ldd	r20, Y+4	; 0x04
    1c92:	5d 81       	ldd	r21, Y+5	; 0x05
    1c94:	41 30       	cpi	r20, 0x01	; 1
    1c96:	51 05       	cpc	r21, r1
    1c98:	41 f1       	breq	.+80     	; 0x1cea <DIO_u8GitPinValue+0x78>
    1c9a:	8c 81       	ldd	r24, Y+4	; 0x04
    1c9c:	9d 81       	ldd	r25, Y+5	; 0x05
    1c9e:	82 30       	cpi	r24, 0x02	; 2
    1ca0:	91 05       	cpc	r25, r1
    1ca2:	34 f4       	brge	.+12     	; 0x1cb0 <DIO_u8GitPinValue+0x3e>
    1ca4:	2c 81       	ldd	r18, Y+4	; 0x04
    1ca6:	3d 81       	ldd	r19, Y+5	; 0x05
    1ca8:	21 15       	cp	r18, r1
    1caa:	31 05       	cpc	r19, r1
    1cac:	61 f0       	breq	.+24     	; 0x1cc6 <DIO_u8GitPinValue+0x54>
    1cae:	52 c0       	rjmp	.+164    	; 0x1d54 <DIO_u8GitPinValue+0xe2>
    1cb0:	4c 81       	ldd	r20, Y+4	; 0x04
    1cb2:	5d 81       	ldd	r21, Y+5	; 0x05
    1cb4:	42 30       	cpi	r20, 0x02	; 2
    1cb6:	51 05       	cpc	r21, r1
    1cb8:	51 f1       	breq	.+84     	; 0x1d0e <DIO_u8GitPinValue+0x9c>
    1cba:	8c 81       	ldd	r24, Y+4	; 0x04
    1cbc:	9d 81       	ldd	r25, Y+5	; 0x05
    1cbe:	83 30       	cpi	r24, 0x03	; 3
    1cc0:	91 05       	cpc	r25, r1
    1cc2:	b9 f1       	breq	.+110    	; 0x1d32 <DIO_u8GitPinValue+0xc0>
    1cc4:	47 c0       	rjmp	.+142    	; 0x1d54 <DIO_u8GitPinValue+0xe2>
						{
							case 0: Pin_Value=GET_BIT(PINA,LOC_u8Pin); break;
    1cc6:	e9 e3       	ldi	r30, 0x39	; 57
    1cc8:	f0 e0       	ldi	r31, 0x00	; 0
    1cca:	80 81       	ld	r24, Z
    1ccc:	28 2f       	mov	r18, r24
    1cce:	30 e0       	ldi	r19, 0x00	; 0
    1cd0:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd2:	88 2f       	mov	r24, r24
    1cd4:	90 e0       	ldi	r25, 0x00	; 0
    1cd6:	a9 01       	movw	r20, r18
    1cd8:	02 c0       	rjmp	.+4      	; 0x1cde <DIO_u8GitPinValue+0x6c>
    1cda:	55 95       	asr	r21
    1cdc:	47 95       	ror	r20
    1cde:	8a 95       	dec	r24
    1ce0:	e2 f7       	brpl	.-8      	; 0x1cda <DIO_u8GitPinValue+0x68>
    1ce2:	ca 01       	movw	r24, r20
    1ce4:	81 70       	andi	r24, 0x01	; 1
    1ce6:	89 83       	std	Y+1, r24	; 0x01
    1ce8:	35 c0       	rjmp	.+106    	; 0x1d54 <DIO_u8GitPinValue+0xe2>
							case 1: Pin_Value=GET_BIT(PINB,LOC_u8Pin); break;
    1cea:	e6 e3       	ldi	r30, 0x36	; 54
    1cec:	f0 e0       	ldi	r31, 0x00	; 0
    1cee:	80 81       	ld	r24, Z
    1cf0:	28 2f       	mov	r18, r24
    1cf2:	30 e0       	ldi	r19, 0x00	; 0
    1cf4:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf6:	88 2f       	mov	r24, r24
    1cf8:	90 e0       	ldi	r25, 0x00	; 0
    1cfa:	a9 01       	movw	r20, r18
    1cfc:	02 c0       	rjmp	.+4      	; 0x1d02 <DIO_u8GitPinValue+0x90>
    1cfe:	55 95       	asr	r21
    1d00:	47 95       	ror	r20
    1d02:	8a 95       	dec	r24
    1d04:	e2 f7       	brpl	.-8      	; 0x1cfe <DIO_u8GitPinValue+0x8c>
    1d06:	ca 01       	movw	r24, r20
    1d08:	81 70       	andi	r24, 0x01	; 1
    1d0a:	89 83       	std	Y+1, r24	; 0x01
    1d0c:	23 c0       	rjmp	.+70     	; 0x1d54 <DIO_u8GitPinValue+0xe2>
							case 2: Pin_Value=GET_BIT(PINC,LOC_u8Pin); break;
    1d0e:	e3 e3       	ldi	r30, 0x33	; 51
    1d10:	f0 e0       	ldi	r31, 0x00	; 0
    1d12:	80 81       	ld	r24, Z
    1d14:	28 2f       	mov	r18, r24
    1d16:	30 e0       	ldi	r19, 0x00	; 0
    1d18:	8b 81       	ldd	r24, Y+3	; 0x03
    1d1a:	88 2f       	mov	r24, r24
    1d1c:	90 e0       	ldi	r25, 0x00	; 0
    1d1e:	a9 01       	movw	r20, r18
    1d20:	02 c0       	rjmp	.+4      	; 0x1d26 <DIO_u8GitPinValue+0xb4>
    1d22:	55 95       	asr	r21
    1d24:	47 95       	ror	r20
    1d26:	8a 95       	dec	r24
    1d28:	e2 f7       	brpl	.-8      	; 0x1d22 <DIO_u8GitPinValue+0xb0>
    1d2a:	ca 01       	movw	r24, r20
    1d2c:	81 70       	andi	r24, 0x01	; 1
    1d2e:	89 83       	std	Y+1, r24	; 0x01
    1d30:	11 c0       	rjmp	.+34     	; 0x1d54 <DIO_u8GitPinValue+0xe2>
							case 3: Pin_Value=GET_BIT(PIND,LOC_u8Pin); break;
    1d32:	e0 e3       	ldi	r30, 0x30	; 48
    1d34:	f0 e0       	ldi	r31, 0x00	; 0
    1d36:	80 81       	ld	r24, Z
    1d38:	28 2f       	mov	r18, r24
    1d3a:	30 e0       	ldi	r19, 0x00	; 0
    1d3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d3e:	88 2f       	mov	r24, r24
    1d40:	90 e0       	ldi	r25, 0x00	; 0
    1d42:	a9 01       	movw	r20, r18
    1d44:	02 c0       	rjmp	.+4      	; 0x1d4a <DIO_u8GitPinValue+0xd8>
    1d46:	55 95       	asr	r21
    1d48:	47 95       	ror	r20
    1d4a:	8a 95       	dec	r24
    1d4c:	e2 f7       	brpl	.-8      	; 0x1d46 <DIO_u8GitPinValue+0xd4>
    1d4e:	ca 01       	movw	r24, r20
    1d50:	81 70       	andi	r24, 0x01	; 1
    1d52:	89 83       	std	Y+1, r24	; 0x01
						}

	return Pin_Value;
    1d54:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d56:	0f 90       	pop	r0
    1d58:	0f 90       	pop	r0
    1d5a:	0f 90       	pop	r0
    1d5c:	0f 90       	pop	r0
    1d5e:	0f 90       	pop	r0
    1d60:	cf 91       	pop	r28
    1d62:	df 91       	pop	r29
    1d64:	08 95       	ret

00001d66 <ADC_VidInit>:
#include "ADC_Interface.h"
#include "ADC_Register.h"


void ADC_VidInit(void)
{
    1d66:	df 93       	push	r29
    1d68:	cf 93       	push	r28
    1d6a:	cd b7       	in	r28, 0x3d	; 61
    1d6c:	de b7       	in	r29, 0x3e	; 62
	//Set Interrupt Enable
#if ADC_INT_En==1
	SET_BIT(ADCSRA,3);
    1d6e:	a6 e2       	ldi	r26, 0x26	; 38
    1d70:	b0 e0       	ldi	r27, 0x00	; 0
    1d72:	e6 e2       	ldi	r30, 0x26	; 38
    1d74:	f0 e0       	ldi	r31, 0x00	; 0
    1d76:	80 81       	ld	r24, Z
    1d78:	88 60       	ori	r24, 0x08	; 8
    1d7a:	8c 93       	st	X, r24
		//Set Voltage Referance
#if InternVCC==0
		CLR_BIT(ADMUX,7);
		CLR_BIT(ADMUX,6);
#elif InternVCC==1
		CLR_BIT(ADMUX,7);
    1d7c:	a7 e2       	ldi	r26, 0x27	; 39
    1d7e:	b0 e0       	ldi	r27, 0x00	; 0
    1d80:	e7 e2       	ldi	r30, 0x27	; 39
    1d82:	f0 e0       	ldi	r31, 0x00	; 0
    1d84:	80 81       	ld	r24, Z
    1d86:	8f 77       	andi	r24, 0x7F	; 127
    1d88:	8c 93       	st	X, r24
		SET_BIT(ADMUX,6);
    1d8a:	a7 e2       	ldi	r26, 0x27	; 39
    1d8c:	b0 e0       	ldi	r27, 0x00	; 0
    1d8e:	e7 e2       	ldi	r30, 0x27	; 39
    1d90:	f0 e0       	ldi	r31, 0x00	; 0
    1d92:	80 81       	ld	r24, Z
    1d94:	80 64       	ori	r24, 0x40	; 64
    1d96:	8c 93       	st	X, r24
		#error "Wrong Choose Voltage Referance ! "
#endif
	
	// Set Left adjustment 
	#if ADC_LeftAdj==0
		CLR_BIT(ADMUX,5);
    1d98:	a7 e2       	ldi	r26, 0x27	; 39
    1d9a:	b0 e0       	ldi	r27, 0x00	; 0
    1d9c:	e7 e2       	ldi	r30, 0x27	; 39
    1d9e:	f0 e0       	ldi	r31, 0x00	; 0
    1da0:	80 81       	ld	r24, Z
    1da2:	8f 7d       	andi	r24, 0xDF	; 223
    1da4:	8c 93       	st	X, r24
	#elif Prescaler==32
		SET_BIT(ADCSRA,2);
		CLR_BIT(ADCSRA,1);
		SET_BIT(ADCSRA,0);
	#elif Prescaler==64
		SET_BIT(ADCSRA,2);
    1da6:	a6 e2       	ldi	r26, 0x26	; 38
    1da8:	b0 e0       	ldi	r27, 0x00	; 0
    1daa:	e6 e2       	ldi	r30, 0x26	; 38
    1dac:	f0 e0       	ldi	r31, 0x00	; 0
    1dae:	80 81       	ld	r24, Z
    1db0:	84 60       	ori	r24, 0x04	; 4
    1db2:	8c 93       	st	X, r24
		SET_BIT(ADCSRA,1);
    1db4:	a6 e2       	ldi	r26, 0x26	; 38
    1db6:	b0 e0       	ldi	r27, 0x00	; 0
    1db8:	e6 e2       	ldi	r30, 0x26	; 38
    1dba:	f0 e0       	ldi	r31, 0x00	; 0
    1dbc:	80 81       	ld	r24, Z
    1dbe:	82 60       	ori	r24, 0x02	; 2
    1dc0:	8c 93       	st	X, r24
		CLR_BIT(ADCSRA,0);
    1dc2:	a6 e2       	ldi	r26, 0x26	; 38
    1dc4:	b0 e0       	ldi	r27, 0x00	; 0
    1dc6:	e6 e2       	ldi	r30, 0x26	; 38
    1dc8:	f0 e0       	ldi	r31, 0x00	; 0
    1dca:	80 81       	ld	r24, Z
    1dcc:	8e 7f       	andi	r24, 0xFE	; 254
    1dce:	8c 93       	st	X, r24
		SET_BIT(ADCSRA,1);
		SET_BIT(ADCSRA,0);
	#else
		#error "Wrong Choose Prescaler!"
	#endif
}
    1dd0:	cf 91       	pop	r28
    1dd2:	df 91       	pop	r29
    1dd4:	08 95       	ret

00001dd6 <ADC_VidEnable>:


void ADC_VidEnable(void)
{
    1dd6:	df 93       	push	r29
    1dd8:	cf 93       	push	r28
    1dda:	cd b7       	in	r28, 0x3d	; 61
    1ddc:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADCSRA,7);
    1dde:	a6 e2       	ldi	r26, 0x26	; 38
    1de0:	b0 e0       	ldi	r27, 0x00	; 0
    1de2:	e6 e2       	ldi	r30, 0x26	; 38
    1de4:	f0 e0       	ldi	r31, 0x00	; 0
    1de6:	80 81       	ld	r24, Z
    1de8:	80 68       	ori	r24, 0x80	; 128
    1dea:	8c 93       	st	X, r24
}
    1dec:	cf 91       	pop	r28
    1dee:	df 91       	pop	r29
    1df0:	08 95       	ret

00001df2 <ADC_VidSingleEnded>:
	
	
void ADC_VidSingleEnded(void)
{
    1df2:	df 93       	push	r29
    1df4:	cf 93       	push	r28
    1df6:	cd b7       	in	r28, 0x3d	; 61
    1df8:	de b7       	in	r29, 0x3e	; 62
	#if SingleEndedCh==0
	
		CLR_BIT(ADMUX,4);
    1dfa:	a7 e2       	ldi	r26, 0x27	; 39
    1dfc:	b0 e0       	ldi	r27, 0x00	; 0
    1dfe:	e7 e2       	ldi	r30, 0x27	; 39
    1e00:	f0 e0       	ldi	r31, 0x00	; 0
    1e02:	80 81       	ld	r24, Z
    1e04:	8f 7e       	andi	r24, 0xEF	; 239
    1e06:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,3);
    1e08:	a7 e2       	ldi	r26, 0x27	; 39
    1e0a:	b0 e0       	ldi	r27, 0x00	; 0
    1e0c:	e7 e2       	ldi	r30, 0x27	; 39
    1e0e:	f0 e0       	ldi	r31, 0x00	; 0
    1e10:	80 81       	ld	r24, Z
    1e12:	87 7f       	andi	r24, 0xF7	; 247
    1e14:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,2);
    1e16:	a7 e2       	ldi	r26, 0x27	; 39
    1e18:	b0 e0       	ldi	r27, 0x00	; 0
    1e1a:	e7 e2       	ldi	r30, 0x27	; 39
    1e1c:	f0 e0       	ldi	r31, 0x00	; 0
    1e1e:	80 81       	ld	r24, Z
    1e20:	8b 7f       	andi	r24, 0xFB	; 251
    1e22:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,1);
    1e24:	a7 e2       	ldi	r26, 0x27	; 39
    1e26:	b0 e0       	ldi	r27, 0x00	; 0
    1e28:	e7 e2       	ldi	r30, 0x27	; 39
    1e2a:	f0 e0       	ldi	r31, 0x00	; 0
    1e2c:	80 81       	ld	r24, Z
    1e2e:	8d 7f       	andi	r24, 0xFD	; 253
    1e30:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,0);
    1e32:	a7 e2       	ldi	r26, 0x27	; 39
    1e34:	b0 e0       	ldi	r27, 0x00	; 0
    1e36:	e7 e2       	ldi	r30, 0x27	; 39
    1e38:	f0 e0       	ldi	r31, 0x00	; 0
    1e3a:	80 81       	ld	r24, Z
    1e3c:	8e 7f       	andi	r24, 0xFE	; 254
    1e3e:	8c 93       	st	X, r24
	#else
	
		#error "Wrong Choose Channal Single Ended!"
	#endif
	
}
    1e40:	cf 91       	pop	r28
    1e42:	df 91       	pop	r29
    1e44:	08 95       	ret

00001e46 <ADC_u16GetDataSingleEnded>:

u16  ADC_u16GetDataSingleEnded(void)
{
    1e46:	df 93       	push	r29
    1e48:	cf 93       	push	r28
    1e4a:	cd b7       	in	r28, 0x3d	; 61
    1e4c:	de b7       	in	r29, 0x3e	; 62
	
	
	SET_BIT(ADCSRA,PIN6);
    1e4e:	a6 e2       	ldi	r26, 0x26	; 38
    1e50:	b0 e0       	ldi	r27, 0x00	; 0
    1e52:	e6 e2       	ldi	r30, 0x26	; 38
    1e54:	f0 e0       	ldi	r31, 0x00	; 0
    1e56:	80 81       	ld	r24, Z
    1e58:	80 64       	ori	r24, 0x40	; 64
    1e5a:	8c 93       	st	X, r24
	while(0==GET_BIT(ADCSRA, PIN4));
    1e5c:	e6 e2       	ldi	r30, 0x26	; 38
    1e5e:	f0 e0       	ldi	r31, 0x00	; 0
    1e60:	80 81       	ld	r24, Z
    1e62:	82 95       	swap	r24
    1e64:	8f 70       	andi	r24, 0x0F	; 15
    1e66:	88 2f       	mov	r24, r24
    1e68:	90 e0       	ldi	r25, 0x00	; 0
    1e6a:	81 70       	andi	r24, 0x01	; 1
    1e6c:	90 70       	andi	r25, 0x00	; 0
    1e6e:	00 97       	sbiw	r24, 0x00	; 0
    1e70:	a9 f3       	breq	.-22     	; 0x1e5c <ADC_u16GetDataSingleEnded+0x16>
	
	return ((ADC*5000UL)/1023);
    1e72:	e4 e2       	ldi	r30, 0x24	; 36
    1e74:	f0 e0       	ldi	r31, 0x00	; 0
    1e76:	80 81       	ld	r24, Z
    1e78:	91 81       	ldd	r25, Z+1	; 0x01
    1e7a:	cc 01       	movw	r24, r24
    1e7c:	a0 e0       	ldi	r26, 0x00	; 0
    1e7e:	b0 e0       	ldi	r27, 0x00	; 0
    1e80:	28 e8       	ldi	r18, 0x88	; 136
    1e82:	33 e1       	ldi	r19, 0x13	; 19
    1e84:	40 e0       	ldi	r20, 0x00	; 0
    1e86:	50 e0       	ldi	r21, 0x00	; 0
    1e88:	bc 01       	movw	r22, r24
    1e8a:	cd 01       	movw	r24, r26
    1e8c:	0e 94 4c 1a 	call	0x3498	; 0x3498 <__mulsi3>
    1e90:	dc 01       	movw	r26, r24
    1e92:	cb 01       	movw	r24, r22
    1e94:	2f ef       	ldi	r18, 0xFF	; 255
    1e96:	33 e0       	ldi	r19, 0x03	; 3
    1e98:	40 e0       	ldi	r20, 0x00	; 0
    1e9a:	50 e0       	ldi	r21, 0x00	; 0
    1e9c:	bc 01       	movw	r22, r24
    1e9e:	cd 01       	movw	r24, r26
    1ea0:	0e 94 6b 1a 	call	0x34d6	; 0x34d6 <__udivmodsi4>
    1ea4:	da 01       	movw	r26, r20
    1ea6:	c9 01       	movw	r24, r18
}
    1ea8:	cf 91       	pop	r28
    1eaa:	df 91       	pop	r29
    1eac:	08 95       	ret

00001eae <ADC_VidDifferential>:

void ADC_VidDifferential(void)
{
    1eae:	df 93       	push	r29
    1eb0:	cf 93       	push	r28
    1eb2:	cd b7       	in	r28, 0x3d	; 61
    1eb4:	de b7       	in	r29, 0x3e	; 62
		SET_BIT(ADMUX,3);
		CLR_BIT(ADMUX,2);
		CLR_BIT(ADMUX,1);
		CLR_BIT(ADMUX,0);
	#elif DifferentialCh==9
		CLR_BIT(ADMUX,4);
    1eb6:	a7 e2       	ldi	r26, 0x27	; 39
    1eb8:	b0 e0       	ldi	r27, 0x00	; 0
    1eba:	e7 e2       	ldi	r30, 0x27	; 39
    1ebc:	f0 e0       	ldi	r31, 0x00	; 0
    1ebe:	80 81       	ld	r24, Z
    1ec0:	8f 7e       	andi	r24, 0xEF	; 239
    1ec2:	8c 93       	st	X, r24
		SET_BIT(ADMUX,3);
    1ec4:	a7 e2       	ldi	r26, 0x27	; 39
    1ec6:	b0 e0       	ldi	r27, 0x00	; 0
    1ec8:	e7 e2       	ldi	r30, 0x27	; 39
    1eca:	f0 e0       	ldi	r31, 0x00	; 0
    1ecc:	80 81       	ld	r24, Z
    1ece:	88 60       	ori	r24, 0x08	; 8
    1ed0:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,2);
    1ed2:	a7 e2       	ldi	r26, 0x27	; 39
    1ed4:	b0 e0       	ldi	r27, 0x00	; 0
    1ed6:	e7 e2       	ldi	r30, 0x27	; 39
    1ed8:	f0 e0       	ldi	r31, 0x00	; 0
    1eda:	80 81       	ld	r24, Z
    1edc:	8b 7f       	andi	r24, 0xFB	; 251
    1ede:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,1);
    1ee0:	a7 e2       	ldi	r26, 0x27	; 39
    1ee2:	b0 e0       	ldi	r27, 0x00	; 0
    1ee4:	e7 e2       	ldi	r30, 0x27	; 39
    1ee6:	f0 e0       	ldi	r31, 0x00	; 0
    1ee8:	80 81       	ld	r24, Z
    1eea:	8d 7f       	andi	r24, 0xFD	; 253
    1eec:	8c 93       	st	X, r24
		SET_BIT(ADMUX,0);
    1eee:	a7 e2       	ldi	r26, 0x27	; 39
    1ef0:	b0 e0       	ldi	r27, 0x00	; 0
    1ef2:	e7 e2       	ldi	r30, 0x27	; 39
    1ef4:	f0 e0       	ldi	r31, 0x00	; 0
    1ef6:	80 81       	ld	r24, Z
    1ef8:	81 60       	ori	r24, 0x01	; 1
    1efa:	8c 93       	st	X, r24
		
	#else
		#error "Wrong Choose Differential Mode Channel"
	#endif
	
}
    1efc:	cf 91       	pop	r28
    1efe:	df 91       	pop	r29
    1f00:	08 95       	ret

00001f02 <ADC_u16GetDataDifferential>:


u16  ADC_u16GetDataDifferential(u8 LOC_u8Gain)
{
    1f02:	ef 92       	push	r14
    1f04:	ff 92       	push	r15
    1f06:	0f 93       	push	r16
    1f08:	1f 93       	push	r17
    1f0a:	df 93       	push	r29
    1f0c:	cf 93       	push	r28
    1f0e:	0f 92       	push	r0
    1f10:	cd b7       	in	r28, 0x3d	; 61
    1f12:	de b7       	in	r29, 0x3e	; 62
    1f14:	89 83       	std	Y+1, r24	; 0x01
		SET_BIT(ADCSRA,PIN6);
    1f16:	a6 e2       	ldi	r26, 0x26	; 38
    1f18:	b0 e0       	ldi	r27, 0x00	; 0
    1f1a:	e6 e2       	ldi	r30, 0x26	; 38
    1f1c:	f0 e0       	ldi	r31, 0x00	; 0
    1f1e:	80 81       	ld	r24, Z
    1f20:	80 64       	ori	r24, 0x40	; 64
    1f22:	8c 93       	st	X, r24
		while(0==GET_BIT (ADCSRA, PIN4));
    1f24:	e6 e2       	ldi	r30, 0x26	; 38
    1f26:	f0 e0       	ldi	r31, 0x00	; 0
    1f28:	80 81       	ld	r24, Z
    1f2a:	82 95       	swap	r24
    1f2c:	8f 70       	andi	r24, 0x0F	; 15
    1f2e:	88 2f       	mov	r24, r24
    1f30:	90 e0       	ldi	r25, 0x00	; 0
    1f32:	81 70       	andi	r24, 0x01	; 1
    1f34:	90 70       	andi	r25, 0x00	; 0
    1f36:	00 97       	sbiw	r24, 0x00	; 0
    1f38:	a9 f3       	breq	.-22     	; 0x1f24 <ADC_u16GetDataDifferential+0x22>
		SET_BIT(ADCSRA,PIN4);
    1f3a:	a6 e2       	ldi	r26, 0x26	; 38
    1f3c:	b0 e0       	ldi	r27, 0x00	; 0
    1f3e:	e6 e2       	ldi	r30, 0x26	; 38
    1f40:	f0 e0       	ldi	r31, 0x00	; 0
    1f42:	80 81       	ld	r24, Z
    1f44:	80 61       	ori	r24, 0x10	; 16
    1f46:	8c 93       	st	X, r24
		return ((ADC*5000UL)/(512*LOC_u8Gain));
    1f48:	e4 e2       	ldi	r30, 0x24	; 36
    1f4a:	f0 e0       	ldi	r31, 0x00	; 0
    1f4c:	80 81       	ld	r24, Z
    1f4e:	91 81       	ldd	r25, Z+1	; 0x01
    1f50:	cc 01       	movw	r24, r24
    1f52:	a0 e0       	ldi	r26, 0x00	; 0
    1f54:	b0 e0       	ldi	r27, 0x00	; 0
    1f56:	28 e8       	ldi	r18, 0x88	; 136
    1f58:	33 e1       	ldi	r19, 0x13	; 19
    1f5a:	40 e0       	ldi	r20, 0x00	; 0
    1f5c:	50 e0       	ldi	r21, 0x00	; 0
    1f5e:	bc 01       	movw	r22, r24
    1f60:	cd 01       	movw	r24, r26
    1f62:	0e 94 4c 1a 	call	0x3498	; 0x3498 <__mulsi3>
    1f66:	7b 01       	movw	r14, r22
    1f68:	8c 01       	movw	r16, r24
    1f6a:	89 81       	ldd	r24, Y+1	; 0x01
    1f6c:	88 2f       	mov	r24, r24
    1f6e:	90 e0       	ldi	r25, 0x00	; 0
    1f70:	98 2f       	mov	r25, r24
    1f72:	88 27       	eor	r24, r24
    1f74:	99 0f       	add	r25, r25
    1f76:	9c 01       	movw	r18, r24
    1f78:	44 27       	eor	r20, r20
    1f7a:	37 fd       	sbrc	r19, 7
    1f7c:	40 95       	com	r20
    1f7e:	54 2f       	mov	r21, r20
    1f80:	c8 01       	movw	r24, r16
    1f82:	b7 01       	movw	r22, r14
    1f84:	0e 94 6b 1a 	call	0x34d6	; 0x34d6 <__udivmodsi4>
    1f88:	da 01       	movw	r26, r20
    1f8a:	c9 01       	movw	r24, r18
}
    1f8c:	0f 90       	pop	r0
    1f8e:	cf 91       	pop	r28
    1f90:	df 91       	pop	r29
    1f92:	1f 91       	pop	r17
    1f94:	0f 91       	pop	r16
    1f96:	ff 90       	pop	r15
    1f98:	ef 90       	pop	r14
    1f9a:	08 95       	ret

00001f9c <ADC_VidAutoTriggerSource>:

void ADC_VidAutoTriggerSource(void)
{
    1f9c:	df 93       	push	r29
    1f9e:	cf 93       	push	r28
    1fa0:	cd b7       	in	r28, 0x3d	; 61
    1fa2:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADCSRA,5);
	SET_BIT(SFIOR,7);
	SET_BIT(SFIOR,6);
	SET_BIT(SFIOR,5);
#endif
}
    1fa4:	cf 91       	pop	r28
    1fa6:	df 91       	pop	r29
    1fa8:	08 95       	ret

00001faa <__vector_16>:


void __vector_16(void)

{
    1faa:	1f 92       	push	r1
    1fac:	0f 92       	push	r0
    1fae:	0f b6       	in	r0, 0x3f	; 63
    1fb0:	0f 92       	push	r0
    1fb2:	11 24       	eor	r1, r1
    1fb4:	2f 93       	push	r18
    1fb6:	3f 93       	push	r19
    1fb8:	4f 93       	push	r20
    1fba:	5f 93       	push	r21
    1fbc:	6f 93       	push	r22
    1fbe:	7f 93       	push	r23
    1fc0:	8f 93       	push	r24
    1fc2:	9f 93       	push	r25
    1fc4:	af 93       	push	r26
    1fc6:	bf 93       	push	r27
    1fc8:	ef 93       	push	r30
    1fca:	ff 93       	push	r31
    1fcc:	df 93       	push	r29
    1fce:	cf 93       	push	r28
    1fd0:	cd b7       	in	r28, 0x3d	; 61
    1fd2:	de b7       	in	r29, 0x3e	; 62
    1fd4:	2e 97       	sbiw	r28, 0x0e	; 14
    1fd6:	de bf       	out	0x3e, r29	; 62
    1fd8:	cd bf       	out	0x3d, r28	; 61
	DIO_VidSetPinValue(PRTD,PIN0,HIGH);
    1fda:	83 e0       	ldi	r24, 0x03	; 3
    1fdc:	60 e0       	ldi	r22, 0x00	; 0
    1fde:	41 e0       	ldi	r20, 0x01	; 1
    1fe0:	0e 94 b7 0c 	call	0x196e	; 0x196e <DIO_VidSetPinValue>
    1fe4:	80 e0       	ldi	r24, 0x00	; 0
    1fe6:	90 e0       	ldi	r25, 0x00	; 0
    1fe8:	aa e7       	ldi	r26, 0x7A	; 122
    1fea:	b4 e4       	ldi	r27, 0x44	; 68
    1fec:	8b 87       	std	Y+11, r24	; 0x0b
    1fee:	9c 87       	std	Y+12, r25	; 0x0c
    1ff0:	ad 87       	std	Y+13, r26	; 0x0d
    1ff2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ff4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ff6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ff8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ffa:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ffc:	20 e0       	ldi	r18, 0x00	; 0
    1ffe:	30 e0       	ldi	r19, 0x00	; 0
    2000:	4a ef       	ldi	r20, 0xFA	; 250
    2002:	54 e4       	ldi	r21, 0x44	; 68
    2004:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2008:	dc 01       	movw	r26, r24
    200a:	cb 01       	movw	r24, r22
    200c:	8f 83       	std	Y+7, r24	; 0x07
    200e:	98 87       	std	Y+8, r25	; 0x08
    2010:	a9 87       	std	Y+9, r26	; 0x09
    2012:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2014:	6f 81       	ldd	r22, Y+7	; 0x07
    2016:	78 85       	ldd	r23, Y+8	; 0x08
    2018:	89 85       	ldd	r24, Y+9	; 0x09
    201a:	9a 85       	ldd	r25, Y+10	; 0x0a
    201c:	20 e0       	ldi	r18, 0x00	; 0
    201e:	30 e0       	ldi	r19, 0x00	; 0
    2020:	40 e8       	ldi	r20, 0x80	; 128
    2022:	5f e3       	ldi	r21, 0x3F	; 63
    2024:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2028:	88 23       	and	r24, r24
    202a:	2c f4       	brge	.+10     	; 0x2036 <__vector_16+0x8c>
		__ticks = 1;
    202c:	81 e0       	ldi	r24, 0x01	; 1
    202e:	90 e0       	ldi	r25, 0x00	; 0
    2030:	9e 83       	std	Y+6, r25	; 0x06
    2032:	8d 83       	std	Y+5, r24	; 0x05
    2034:	3f c0       	rjmp	.+126    	; 0x20b4 <__vector_16+0x10a>
	else if (__tmp > 65535)
    2036:	6f 81       	ldd	r22, Y+7	; 0x07
    2038:	78 85       	ldd	r23, Y+8	; 0x08
    203a:	89 85       	ldd	r24, Y+9	; 0x09
    203c:	9a 85       	ldd	r25, Y+10	; 0x0a
    203e:	20 e0       	ldi	r18, 0x00	; 0
    2040:	3f ef       	ldi	r19, 0xFF	; 255
    2042:	4f e7       	ldi	r20, 0x7F	; 127
    2044:	57 e4       	ldi	r21, 0x47	; 71
    2046:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    204a:	18 16       	cp	r1, r24
    204c:	4c f5       	brge	.+82     	; 0x20a0 <__vector_16+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    204e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2050:	7c 85       	ldd	r23, Y+12	; 0x0c
    2052:	8d 85       	ldd	r24, Y+13	; 0x0d
    2054:	9e 85       	ldd	r25, Y+14	; 0x0e
    2056:	20 e0       	ldi	r18, 0x00	; 0
    2058:	30 e0       	ldi	r19, 0x00	; 0
    205a:	40 e2       	ldi	r20, 0x20	; 32
    205c:	51 e4       	ldi	r21, 0x41	; 65
    205e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2062:	dc 01       	movw	r26, r24
    2064:	cb 01       	movw	r24, r22
    2066:	bc 01       	movw	r22, r24
    2068:	cd 01       	movw	r24, r26
    206a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    206e:	dc 01       	movw	r26, r24
    2070:	cb 01       	movw	r24, r22
    2072:	9e 83       	std	Y+6, r25	; 0x06
    2074:	8d 83       	std	Y+5, r24	; 0x05
    2076:	0f c0       	rjmp	.+30     	; 0x2096 <__vector_16+0xec>
    2078:	88 ec       	ldi	r24, 0xC8	; 200
    207a:	90 e0       	ldi	r25, 0x00	; 0
    207c:	9c 83       	std	Y+4, r25	; 0x04
    207e:	8b 83       	std	Y+3, r24	; 0x03
    2080:	8b 81       	ldd	r24, Y+3	; 0x03
    2082:	9c 81       	ldd	r25, Y+4	; 0x04
    2084:	01 97       	sbiw	r24, 0x01	; 1
    2086:	f1 f7       	brne	.-4      	; 0x2084 <__vector_16+0xda>
    2088:	9c 83       	std	Y+4, r25	; 0x04
    208a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    208c:	8d 81       	ldd	r24, Y+5	; 0x05
    208e:	9e 81       	ldd	r25, Y+6	; 0x06
    2090:	01 97       	sbiw	r24, 0x01	; 1
    2092:	9e 83       	std	Y+6, r25	; 0x06
    2094:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2096:	8d 81       	ldd	r24, Y+5	; 0x05
    2098:	9e 81       	ldd	r25, Y+6	; 0x06
    209a:	00 97       	sbiw	r24, 0x00	; 0
    209c:	69 f7       	brne	.-38     	; 0x2078 <__vector_16+0xce>
    209e:	14 c0       	rjmp	.+40     	; 0x20c8 <__vector_16+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20a0:	6f 81       	ldd	r22, Y+7	; 0x07
    20a2:	78 85       	ldd	r23, Y+8	; 0x08
    20a4:	89 85       	ldd	r24, Y+9	; 0x09
    20a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    20a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20ac:	dc 01       	movw	r26, r24
    20ae:	cb 01       	movw	r24, r22
    20b0:	9e 83       	std	Y+6, r25	; 0x06
    20b2:	8d 83       	std	Y+5, r24	; 0x05
    20b4:	8d 81       	ldd	r24, Y+5	; 0x05
    20b6:	9e 81       	ldd	r25, Y+6	; 0x06
    20b8:	9a 83       	std	Y+2, r25	; 0x02
    20ba:	89 83       	std	Y+1, r24	; 0x01
    20bc:	89 81       	ldd	r24, Y+1	; 0x01
    20be:	9a 81       	ldd	r25, Y+2	; 0x02
    20c0:	01 97       	sbiw	r24, 0x01	; 1
    20c2:	f1 f7       	brne	.-4      	; 0x20c0 <__vector_16+0x116>
    20c4:	9a 83       	std	Y+2, r25	; 0x02
    20c6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
	DIO_VidSetPinValue(PRTD,PIN0,LOW);
    20c8:	83 e0       	ldi	r24, 0x03	; 3
    20ca:	60 e0       	ldi	r22, 0x00	; 0
    20cc:	40 e0       	ldi	r20, 0x00	; 0
    20ce:	0e 94 b7 0c 	call	0x196e	; 0x196e <DIO_VidSetPinValue>

}
    20d2:	2e 96       	adiw	r28, 0x0e	; 14
    20d4:	de bf       	out	0x3e, r29	; 62
    20d6:	cd bf       	out	0x3d, r28	; 61
    20d8:	cf 91       	pop	r28
    20da:	df 91       	pop	r29
    20dc:	ff 91       	pop	r31
    20de:	ef 91       	pop	r30
    20e0:	bf 91       	pop	r27
    20e2:	af 91       	pop	r26
    20e4:	9f 91       	pop	r25
    20e6:	8f 91       	pop	r24
    20e8:	7f 91       	pop	r23
    20ea:	6f 91       	pop	r22
    20ec:	5f 91       	pop	r21
    20ee:	4f 91       	pop	r20
    20f0:	3f 91       	pop	r19
    20f2:	2f 91       	pop	r18
    20f4:	0f 90       	pop	r0
    20f6:	0f be       	out	0x3f, r0	; 63
    20f8:	0f 90       	pop	r0
    20fa:	1f 90       	pop	r1
    20fc:	18 95       	reti

000020fe <Sensors>:



void Sensors(void)
{
    20fe:	df 93       	push	r29
    2100:	cf 93       	push	r28
    2102:	cd b7       	in	r28, 0x3d	; 61
    2104:	de b7       	in	r29, 0x3e	; 62

}
    2106:	cf 91       	pop	r28
    2108:	df 91       	pop	r29
    210a:	08 95       	ret

0000210c <Motors>:


void Motors(void)
{
    210c:	df 93       	push	r29
    210e:	cf 93       	push	r28
    2110:	cd b7       	in	r28, 0x3d	; 61
    2112:	de b7       	in	r29, 0x3e	; 62

}
    2114:	cf 91       	pop	r28
    2116:	df 91       	pop	r29
    2118:	08 95       	ret

0000211a <LCD_Vid4Initialization>:
#include "LCD_4BIT_Interface.h"

static u8 InitStepFinishid= 0;

void LCD_Vid4Initialization(void)
{
    211a:	df 93       	push	r29
    211c:	cf 93       	push	r28
    211e:	cd b7       	in	r28, 0x3d	; 61
    2120:	de b7       	in	r29, 0x3e	; 62
    2122:	e8 97       	sbiw	r28, 0x38	; 56
    2124:	0f b6       	in	r0, 0x3f	; 63
    2126:	f8 94       	cli
    2128:	de bf       	out	0x3e, r29	; 62
    212a:	0f be       	out	0x3f, r0	; 63
    212c:	cd bf       	out	0x3d, r28	; 61
	DIO_VidSetPinDirection(LCD_PORT,PIN4,HIGH);
    212e:	81 e0       	ldi	r24, 0x01	; 1
    2130:	64 e0       	ldi	r22, 0x04	; 4
    2132:	41 e0       	ldi	r20, 0x01	; 1
    2134:	0e 94 b7 0b 	call	0x176e	; 0x176e <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(LCD_PORT,PIN5,HIGH);
    2138:	81 e0       	ldi	r24, 0x01	; 1
    213a:	65 e0       	ldi	r22, 0x05	; 5
    213c:	41 e0       	ldi	r20, 0x01	; 1
    213e:	0e 94 b7 0b 	call	0x176e	; 0x176e <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(LCD_PORT,PIN6,HIGH);
    2142:	81 e0       	ldi	r24, 0x01	; 1
    2144:	66 e0       	ldi	r22, 0x06	; 6
    2146:	41 e0       	ldi	r20, 0x01	; 1
    2148:	0e 94 b7 0b 	call	0x176e	; 0x176e <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(LCD_PORT,PIN7,HIGH);
    214c:	81 e0       	ldi	r24, 0x01	; 1
    214e:	67 e0       	ldi	r22, 0x07	; 7
    2150:	41 e0       	ldi	r20, 0x01	; 1
    2152:	0e 94 b7 0b 	call	0x176e	; 0x176e <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(LCD_INIT,LCD_RS,HIGH);   //RS
    2156:	81 e0       	ldi	r24, 0x01	; 1
    2158:	63 e0       	ldi	r22, 0x03	; 3
    215a:	41 e0       	ldi	r20, 0x01	; 1
    215c:	0e 94 b7 0b 	call	0x176e	; 0x176e <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(LCD_INIT,LCD_RW,HIGH);   //RW
    2160:	81 e0       	ldi	r24, 0x01	; 1
    2162:	64 e0       	ldi	r22, 0x04	; 4
    2164:	41 e0       	ldi	r20, 0x01	; 1
    2166:	0e 94 b7 0b 	call	0x176e	; 0x176e <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(LCD_INIT,LCD_EN,HIGH);   //EN
    216a:	81 e0       	ldi	r24, 0x01	; 1
    216c:	65 e0       	ldi	r22, 0x05	; 5
    216e:	41 e0       	ldi	r20, 0x01	; 1
    2170:	0e 94 b7 0b 	call	0x176e	; 0x176e <DIO_VidSetPinDirection>
    2174:	80 e0       	ldi	r24, 0x00	; 0
    2176:	90 e0       	ldi	r25, 0x00	; 0
    2178:	a8 e4       	ldi	r26, 0x48	; 72
    217a:	b2 e4       	ldi	r27, 0x42	; 66
    217c:	8d ab       	std	Y+53, r24	; 0x35
    217e:	9e ab       	std	Y+54, r25	; 0x36
    2180:	af ab       	std	Y+55, r26	; 0x37
    2182:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2184:	6d a9       	ldd	r22, Y+53	; 0x35
    2186:	7e a9       	ldd	r23, Y+54	; 0x36
    2188:	8f a9       	ldd	r24, Y+55	; 0x37
    218a:	98 ad       	ldd	r25, Y+56	; 0x38
    218c:	20 e0       	ldi	r18, 0x00	; 0
    218e:	30 e0       	ldi	r19, 0x00	; 0
    2190:	4a ef       	ldi	r20, 0xFA	; 250
    2192:	54 e4       	ldi	r21, 0x44	; 68
    2194:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2198:	dc 01       	movw	r26, r24
    219a:	cb 01       	movw	r24, r22
    219c:	89 ab       	std	Y+49, r24	; 0x31
    219e:	9a ab       	std	Y+50, r25	; 0x32
    21a0:	ab ab       	std	Y+51, r26	; 0x33
    21a2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    21a4:	69 a9       	ldd	r22, Y+49	; 0x31
    21a6:	7a a9       	ldd	r23, Y+50	; 0x32
    21a8:	8b a9       	ldd	r24, Y+51	; 0x33
    21aa:	9c a9       	ldd	r25, Y+52	; 0x34
    21ac:	20 e0       	ldi	r18, 0x00	; 0
    21ae:	30 e0       	ldi	r19, 0x00	; 0
    21b0:	40 e8       	ldi	r20, 0x80	; 128
    21b2:	5f e3       	ldi	r21, 0x3F	; 63
    21b4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21b8:	88 23       	and	r24, r24
    21ba:	2c f4       	brge	.+10     	; 0x21c6 <LCD_Vid4Initialization+0xac>
		__ticks = 1;
    21bc:	81 e0       	ldi	r24, 0x01	; 1
    21be:	90 e0       	ldi	r25, 0x00	; 0
    21c0:	98 ab       	std	Y+48, r25	; 0x30
    21c2:	8f a7       	std	Y+47, r24	; 0x2f
    21c4:	3f c0       	rjmp	.+126    	; 0x2244 <LCD_Vid4Initialization+0x12a>
	else if (__tmp > 65535)
    21c6:	69 a9       	ldd	r22, Y+49	; 0x31
    21c8:	7a a9       	ldd	r23, Y+50	; 0x32
    21ca:	8b a9       	ldd	r24, Y+51	; 0x33
    21cc:	9c a9       	ldd	r25, Y+52	; 0x34
    21ce:	20 e0       	ldi	r18, 0x00	; 0
    21d0:	3f ef       	ldi	r19, 0xFF	; 255
    21d2:	4f e7       	ldi	r20, 0x7F	; 127
    21d4:	57 e4       	ldi	r21, 0x47	; 71
    21d6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21da:	18 16       	cp	r1, r24
    21dc:	4c f5       	brge	.+82     	; 0x2230 <LCD_Vid4Initialization+0x116>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21de:	6d a9       	ldd	r22, Y+53	; 0x35
    21e0:	7e a9       	ldd	r23, Y+54	; 0x36
    21e2:	8f a9       	ldd	r24, Y+55	; 0x37
    21e4:	98 ad       	ldd	r25, Y+56	; 0x38
    21e6:	20 e0       	ldi	r18, 0x00	; 0
    21e8:	30 e0       	ldi	r19, 0x00	; 0
    21ea:	40 e2       	ldi	r20, 0x20	; 32
    21ec:	51 e4       	ldi	r21, 0x41	; 65
    21ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21f2:	dc 01       	movw	r26, r24
    21f4:	cb 01       	movw	r24, r22
    21f6:	bc 01       	movw	r22, r24
    21f8:	cd 01       	movw	r24, r26
    21fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21fe:	dc 01       	movw	r26, r24
    2200:	cb 01       	movw	r24, r22
    2202:	98 ab       	std	Y+48, r25	; 0x30
    2204:	8f a7       	std	Y+47, r24	; 0x2f
    2206:	0f c0       	rjmp	.+30     	; 0x2226 <LCD_Vid4Initialization+0x10c>
    2208:	88 ec       	ldi	r24, 0xC8	; 200
    220a:	90 e0       	ldi	r25, 0x00	; 0
    220c:	9e a7       	std	Y+46, r25	; 0x2e
    220e:	8d a7       	std	Y+45, r24	; 0x2d
    2210:	8d a5       	ldd	r24, Y+45	; 0x2d
    2212:	9e a5       	ldd	r25, Y+46	; 0x2e
    2214:	01 97       	sbiw	r24, 0x01	; 1
    2216:	f1 f7       	brne	.-4      	; 0x2214 <LCD_Vid4Initialization+0xfa>
    2218:	9e a7       	std	Y+46, r25	; 0x2e
    221a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    221c:	8f a5       	ldd	r24, Y+47	; 0x2f
    221e:	98 a9       	ldd	r25, Y+48	; 0x30
    2220:	01 97       	sbiw	r24, 0x01	; 1
    2222:	98 ab       	std	Y+48, r25	; 0x30
    2224:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2226:	8f a5       	ldd	r24, Y+47	; 0x2f
    2228:	98 a9       	ldd	r25, Y+48	; 0x30
    222a:	00 97       	sbiw	r24, 0x00	; 0
    222c:	69 f7       	brne	.-38     	; 0x2208 <LCD_Vid4Initialization+0xee>
    222e:	14 c0       	rjmp	.+40     	; 0x2258 <LCD_Vid4Initialization+0x13e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2230:	69 a9       	ldd	r22, Y+49	; 0x31
    2232:	7a a9       	ldd	r23, Y+50	; 0x32
    2234:	8b a9       	ldd	r24, Y+51	; 0x33
    2236:	9c a9       	ldd	r25, Y+52	; 0x34
    2238:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    223c:	dc 01       	movw	r26, r24
    223e:	cb 01       	movw	r24, r22
    2240:	98 ab       	std	Y+48, r25	; 0x30
    2242:	8f a7       	std	Y+47, r24	; 0x2f
    2244:	8f a5       	ldd	r24, Y+47	; 0x2f
    2246:	98 a9       	ldd	r25, Y+48	; 0x30
    2248:	9c a7       	std	Y+44, r25	; 0x2c
    224a:	8b a7       	std	Y+43, r24	; 0x2b
    224c:	8b a5       	ldd	r24, Y+43	; 0x2b
    224e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2250:	01 97       	sbiw	r24, 0x01	; 1
    2252:	f1 f7       	brne	.-4      	; 0x2250 <LCD_Vid4Initialization+0x136>
    2254:	9c a7       	std	Y+44, r25	; 0x2c
    2256:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(50); // wait for LCD to initialize

	LCD_VidWrite4Cmd(0x20);
    2258:	80 e2       	ldi	r24, 0x20	; 32
    225a:	0e 94 a3 12 	call	0x2546	; 0x2546 <LCD_VidWrite4Cmd>
	LCD_VidWrite4Cmd(0x20);
    225e:	80 e2       	ldi	r24, 0x20	; 32
    2260:	0e 94 a3 12 	call	0x2546	; 0x2546 <LCD_VidWrite4Cmd>
	LCD_VidWrite4Cmd(0x80);
    2264:	80 e8       	ldi	r24, 0x80	; 128
    2266:	0e 94 a3 12 	call	0x2546	; 0x2546 <LCD_VidWrite4Cmd>
    226a:	80 e0       	ldi	r24, 0x00	; 0
    226c:	90 e0       	ldi	r25, 0x00	; 0
    226e:	a0 e0       	ldi	r26, 0x00	; 0
    2270:	b0 e4       	ldi	r27, 0x40	; 64
    2272:	8f a3       	std	Y+39, r24	; 0x27
    2274:	98 a7       	std	Y+40, r25	; 0x28
    2276:	a9 a7       	std	Y+41, r26	; 0x29
    2278:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    227a:	6f a1       	ldd	r22, Y+39	; 0x27
    227c:	78 a5       	ldd	r23, Y+40	; 0x28
    227e:	89 a5       	ldd	r24, Y+41	; 0x29
    2280:	9a a5       	ldd	r25, Y+42	; 0x2a
    2282:	20 e0       	ldi	r18, 0x00	; 0
    2284:	30 e0       	ldi	r19, 0x00	; 0
    2286:	4a ef       	ldi	r20, 0xFA	; 250
    2288:	54 e4       	ldi	r21, 0x44	; 68
    228a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    228e:	dc 01       	movw	r26, r24
    2290:	cb 01       	movw	r24, r22
    2292:	8b a3       	std	Y+35, r24	; 0x23
    2294:	9c a3       	std	Y+36, r25	; 0x24
    2296:	ad a3       	std	Y+37, r26	; 0x25
    2298:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    229a:	6b a1       	ldd	r22, Y+35	; 0x23
    229c:	7c a1       	ldd	r23, Y+36	; 0x24
    229e:	8d a1       	ldd	r24, Y+37	; 0x25
    22a0:	9e a1       	ldd	r25, Y+38	; 0x26
    22a2:	20 e0       	ldi	r18, 0x00	; 0
    22a4:	30 e0       	ldi	r19, 0x00	; 0
    22a6:	40 e8       	ldi	r20, 0x80	; 128
    22a8:	5f e3       	ldi	r21, 0x3F	; 63
    22aa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22ae:	88 23       	and	r24, r24
    22b0:	2c f4       	brge	.+10     	; 0x22bc <LCD_Vid4Initialization+0x1a2>
		__ticks = 1;
    22b2:	81 e0       	ldi	r24, 0x01	; 1
    22b4:	90 e0       	ldi	r25, 0x00	; 0
    22b6:	9a a3       	std	Y+34, r25	; 0x22
    22b8:	89 a3       	std	Y+33, r24	; 0x21
    22ba:	3f c0       	rjmp	.+126    	; 0x233a <LCD_Vid4Initialization+0x220>
	else if (__tmp > 65535)
    22bc:	6b a1       	ldd	r22, Y+35	; 0x23
    22be:	7c a1       	ldd	r23, Y+36	; 0x24
    22c0:	8d a1       	ldd	r24, Y+37	; 0x25
    22c2:	9e a1       	ldd	r25, Y+38	; 0x26
    22c4:	20 e0       	ldi	r18, 0x00	; 0
    22c6:	3f ef       	ldi	r19, 0xFF	; 255
    22c8:	4f e7       	ldi	r20, 0x7F	; 127
    22ca:	57 e4       	ldi	r21, 0x47	; 71
    22cc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22d0:	18 16       	cp	r1, r24
    22d2:	4c f5       	brge	.+82     	; 0x2326 <LCD_Vid4Initialization+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22d4:	6f a1       	ldd	r22, Y+39	; 0x27
    22d6:	78 a5       	ldd	r23, Y+40	; 0x28
    22d8:	89 a5       	ldd	r24, Y+41	; 0x29
    22da:	9a a5       	ldd	r25, Y+42	; 0x2a
    22dc:	20 e0       	ldi	r18, 0x00	; 0
    22de:	30 e0       	ldi	r19, 0x00	; 0
    22e0:	40 e2       	ldi	r20, 0x20	; 32
    22e2:	51 e4       	ldi	r21, 0x41	; 65
    22e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22e8:	dc 01       	movw	r26, r24
    22ea:	cb 01       	movw	r24, r22
    22ec:	bc 01       	movw	r22, r24
    22ee:	cd 01       	movw	r24, r26
    22f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22f4:	dc 01       	movw	r26, r24
    22f6:	cb 01       	movw	r24, r22
    22f8:	9a a3       	std	Y+34, r25	; 0x22
    22fa:	89 a3       	std	Y+33, r24	; 0x21
    22fc:	0f c0       	rjmp	.+30     	; 0x231c <LCD_Vid4Initialization+0x202>
    22fe:	88 ec       	ldi	r24, 0xC8	; 200
    2300:	90 e0       	ldi	r25, 0x00	; 0
    2302:	98 a3       	std	Y+32, r25	; 0x20
    2304:	8f 8f       	std	Y+31, r24	; 0x1f
    2306:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2308:	98 a1       	ldd	r25, Y+32	; 0x20
    230a:	01 97       	sbiw	r24, 0x01	; 1
    230c:	f1 f7       	brne	.-4      	; 0x230a <LCD_Vid4Initialization+0x1f0>
    230e:	98 a3       	std	Y+32, r25	; 0x20
    2310:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2312:	89 a1       	ldd	r24, Y+33	; 0x21
    2314:	9a a1       	ldd	r25, Y+34	; 0x22
    2316:	01 97       	sbiw	r24, 0x01	; 1
    2318:	9a a3       	std	Y+34, r25	; 0x22
    231a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    231c:	89 a1       	ldd	r24, Y+33	; 0x21
    231e:	9a a1       	ldd	r25, Y+34	; 0x22
    2320:	00 97       	sbiw	r24, 0x00	; 0
    2322:	69 f7       	brne	.-38     	; 0x22fe <LCD_Vid4Initialization+0x1e4>
    2324:	14 c0       	rjmp	.+40     	; 0x234e <LCD_Vid4Initialization+0x234>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2326:	6b a1       	ldd	r22, Y+35	; 0x23
    2328:	7c a1       	ldd	r23, Y+36	; 0x24
    232a:	8d a1       	ldd	r24, Y+37	; 0x25
    232c:	9e a1       	ldd	r25, Y+38	; 0x26
    232e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2332:	dc 01       	movw	r26, r24
    2334:	cb 01       	movw	r24, r22
    2336:	9a a3       	std	Y+34, r25	; 0x22
    2338:	89 a3       	std	Y+33, r24	; 0x21
    233a:	89 a1       	ldd	r24, Y+33	; 0x21
    233c:	9a a1       	ldd	r25, Y+34	; 0x22
    233e:	9e 8f       	std	Y+30, r25	; 0x1e
    2340:	8d 8f       	std	Y+29, r24	; 0x1d
    2342:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2344:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2346:	01 97       	sbiw	r24, 0x01	; 1
    2348:	f1 f7       	brne	.-4      	; 0x2346 <LCD_Vid4Initialization+0x22c>
    234a:	9e 8f       	std	Y+30, r25	; 0x1e
    234c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);
	LCD_VidWrite4Cmd(0x00);
    234e:	80 e0       	ldi	r24, 0x00	; 0
    2350:	0e 94 a3 12 	call	0x2546	; 0x2546 <LCD_VidWrite4Cmd>
	LCD_VidWrite4Cmd(0xC0);
    2354:	80 ec       	ldi	r24, 0xC0	; 192
    2356:	0e 94 a3 12 	call	0x2546	; 0x2546 <LCD_VidWrite4Cmd>
    235a:	80 e0       	ldi	r24, 0x00	; 0
    235c:	90 e0       	ldi	r25, 0x00	; 0
    235e:	a0 e8       	ldi	r26, 0x80	; 128
    2360:	bf e3       	ldi	r27, 0x3F	; 63
    2362:	89 8f       	std	Y+25, r24	; 0x19
    2364:	9a 8f       	std	Y+26, r25	; 0x1a
    2366:	ab 8f       	std	Y+27, r26	; 0x1b
    2368:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    236a:	69 8d       	ldd	r22, Y+25	; 0x19
    236c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    236e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2370:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2372:	20 e0       	ldi	r18, 0x00	; 0
    2374:	30 e0       	ldi	r19, 0x00	; 0
    2376:	4a ef       	ldi	r20, 0xFA	; 250
    2378:	54 e4       	ldi	r21, 0x44	; 68
    237a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    237e:	dc 01       	movw	r26, r24
    2380:	cb 01       	movw	r24, r22
    2382:	8d 8b       	std	Y+21, r24	; 0x15
    2384:	9e 8b       	std	Y+22, r25	; 0x16
    2386:	af 8b       	std	Y+23, r26	; 0x17
    2388:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    238a:	6d 89       	ldd	r22, Y+21	; 0x15
    238c:	7e 89       	ldd	r23, Y+22	; 0x16
    238e:	8f 89       	ldd	r24, Y+23	; 0x17
    2390:	98 8d       	ldd	r25, Y+24	; 0x18
    2392:	20 e0       	ldi	r18, 0x00	; 0
    2394:	30 e0       	ldi	r19, 0x00	; 0
    2396:	40 e8       	ldi	r20, 0x80	; 128
    2398:	5f e3       	ldi	r21, 0x3F	; 63
    239a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    239e:	88 23       	and	r24, r24
    23a0:	2c f4       	brge	.+10     	; 0x23ac <LCD_Vid4Initialization+0x292>
		__ticks = 1;
    23a2:	81 e0       	ldi	r24, 0x01	; 1
    23a4:	90 e0       	ldi	r25, 0x00	; 0
    23a6:	9c 8b       	std	Y+20, r25	; 0x14
    23a8:	8b 8b       	std	Y+19, r24	; 0x13
    23aa:	3f c0       	rjmp	.+126    	; 0x242a <LCD_Vid4Initialization+0x310>
	else if (__tmp > 65535)
    23ac:	6d 89       	ldd	r22, Y+21	; 0x15
    23ae:	7e 89       	ldd	r23, Y+22	; 0x16
    23b0:	8f 89       	ldd	r24, Y+23	; 0x17
    23b2:	98 8d       	ldd	r25, Y+24	; 0x18
    23b4:	20 e0       	ldi	r18, 0x00	; 0
    23b6:	3f ef       	ldi	r19, 0xFF	; 255
    23b8:	4f e7       	ldi	r20, 0x7F	; 127
    23ba:	57 e4       	ldi	r21, 0x47	; 71
    23bc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23c0:	18 16       	cp	r1, r24
    23c2:	4c f5       	brge	.+82     	; 0x2416 <LCD_Vid4Initialization+0x2fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23c4:	69 8d       	ldd	r22, Y+25	; 0x19
    23c6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23c8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23ca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23cc:	20 e0       	ldi	r18, 0x00	; 0
    23ce:	30 e0       	ldi	r19, 0x00	; 0
    23d0:	40 e2       	ldi	r20, 0x20	; 32
    23d2:	51 e4       	ldi	r21, 0x41	; 65
    23d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23d8:	dc 01       	movw	r26, r24
    23da:	cb 01       	movw	r24, r22
    23dc:	bc 01       	movw	r22, r24
    23de:	cd 01       	movw	r24, r26
    23e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23e4:	dc 01       	movw	r26, r24
    23e6:	cb 01       	movw	r24, r22
    23e8:	9c 8b       	std	Y+20, r25	; 0x14
    23ea:	8b 8b       	std	Y+19, r24	; 0x13
    23ec:	0f c0       	rjmp	.+30     	; 0x240c <LCD_Vid4Initialization+0x2f2>
    23ee:	88 ec       	ldi	r24, 0xC8	; 200
    23f0:	90 e0       	ldi	r25, 0x00	; 0
    23f2:	9a 8b       	std	Y+18, r25	; 0x12
    23f4:	89 8b       	std	Y+17, r24	; 0x11
    23f6:	89 89       	ldd	r24, Y+17	; 0x11
    23f8:	9a 89       	ldd	r25, Y+18	; 0x12
    23fa:	01 97       	sbiw	r24, 0x01	; 1
    23fc:	f1 f7       	brne	.-4      	; 0x23fa <LCD_Vid4Initialization+0x2e0>
    23fe:	9a 8b       	std	Y+18, r25	; 0x12
    2400:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2402:	8b 89       	ldd	r24, Y+19	; 0x13
    2404:	9c 89       	ldd	r25, Y+20	; 0x14
    2406:	01 97       	sbiw	r24, 0x01	; 1
    2408:	9c 8b       	std	Y+20, r25	; 0x14
    240a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    240c:	8b 89       	ldd	r24, Y+19	; 0x13
    240e:	9c 89       	ldd	r25, Y+20	; 0x14
    2410:	00 97       	sbiw	r24, 0x00	; 0
    2412:	69 f7       	brne	.-38     	; 0x23ee <LCD_Vid4Initialization+0x2d4>
    2414:	14 c0       	rjmp	.+40     	; 0x243e <LCD_Vid4Initialization+0x324>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2416:	6d 89       	ldd	r22, Y+21	; 0x15
    2418:	7e 89       	ldd	r23, Y+22	; 0x16
    241a:	8f 89       	ldd	r24, Y+23	; 0x17
    241c:	98 8d       	ldd	r25, Y+24	; 0x18
    241e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2422:	dc 01       	movw	r26, r24
    2424:	cb 01       	movw	r24, r22
    2426:	9c 8b       	std	Y+20, r25	; 0x14
    2428:	8b 8b       	std	Y+19, r24	; 0x13
    242a:	8b 89       	ldd	r24, Y+19	; 0x13
    242c:	9c 89       	ldd	r25, Y+20	; 0x14
    242e:	98 8b       	std	Y+16, r25	; 0x10
    2430:	8f 87       	std	Y+15, r24	; 0x0f
    2432:	8f 85       	ldd	r24, Y+15	; 0x0f
    2434:	98 89       	ldd	r25, Y+16	; 0x10
    2436:	01 97       	sbiw	r24, 0x01	; 1
    2438:	f1 f7       	brne	.-4      	; 0x2436 <LCD_Vid4Initialization+0x31c>
    243a:	98 8b       	std	Y+16, r25	; 0x10
    243c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_VidWrite4Cmd(0x00);
    243e:	80 e0       	ldi	r24, 0x00	; 0
    2440:	0e 94 a3 12 	call	0x2546	; 0x2546 <LCD_VidWrite4Cmd>
	LCD_VidWrite4Cmd(0x10);
    2444:	80 e1       	ldi	r24, 0x10	; 16
    2446:	0e 94 a3 12 	call	0x2546	; 0x2546 <LCD_VidWrite4Cmd>
    244a:	80 e0       	ldi	r24, 0x00	; 0
    244c:	90 e0       	ldi	r25, 0x00	; 0
    244e:	a0 e0       	ldi	r26, 0x00	; 0
    2450:	b0 e4       	ldi	r27, 0x40	; 64
    2452:	8b 87       	std	Y+11, r24	; 0x0b
    2454:	9c 87       	std	Y+12, r25	; 0x0c
    2456:	ad 87       	std	Y+13, r26	; 0x0d
    2458:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    245a:	6b 85       	ldd	r22, Y+11	; 0x0b
    245c:	7c 85       	ldd	r23, Y+12	; 0x0c
    245e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2460:	9e 85       	ldd	r25, Y+14	; 0x0e
    2462:	20 e0       	ldi	r18, 0x00	; 0
    2464:	30 e0       	ldi	r19, 0x00	; 0
    2466:	4a ef       	ldi	r20, 0xFA	; 250
    2468:	54 e4       	ldi	r21, 0x44	; 68
    246a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    246e:	dc 01       	movw	r26, r24
    2470:	cb 01       	movw	r24, r22
    2472:	8f 83       	std	Y+7, r24	; 0x07
    2474:	98 87       	std	Y+8, r25	; 0x08
    2476:	a9 87       	std	Y+9, r26	; 0x09
    2478:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    247a:	6f 81       	ldd	r22, Y+7	; 0x07
    247c:	78 85       	ldd	r23, Y+8	; 0x08
    247e:	89 85       	ldd	r24, Y+9	; 0x09
    2480:	9a 85       	ldd	r25, Y+10	; 0x0a
    2482:	20 e0       	ldi	r18, 0x00	; 0
    2484:	30 e0       	ldi	r19, 0x00	; 0
    2486:	40 e8       	ldi	r20, 0x80	; 128
    2488:	5f e3       	ldi	r21, 0x3F	; 63
    248a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    248e:	88 23       	and	r24, r24
    2490:	2c f4       	brge	.+10     	; 0x249c <LCD_Vid4Initialization+0x382>
		__ticks = 1;
    2492:	81 e0       	ldi	r24, 0x01	; 1
    2494:	90 e0       	ldi	r25, 0x00	; 0
    2496:	9e 83       	std	Y+6, r25	; 0x06
    2498:	8d 83       	std	Y+5, r24	; 0x05
    249a:	3f c0       	rjmp	.+126    	; 0x251a <LCD_Vid4Initialization+0x400>
	else if (__tmp > 65535)
    249c:	6f 81       	ldd	r22, Y+7	; 0x07
    249e:	78 85       	ldd	r23, Y+8	; 0x08
    24a0:	89 85       	ldd	r24, Y+9	; 0x09
    24a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    24a4:	20 e0       	ldi	r18, 0x00	; 0
    24a6:	3f ef       	ldi	r19, 0xFF	; 255
    24a8:	4f e7       	ldi	r20, 0x7F	; 127
    24aa:	57 e4       	ldi	r21, 0x47	; 71
    24ac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24b0:	18 16       	cp	r1, r24
    24b2:	4c f5       	brge	.+82     	; 0x2506 <LCD_Vid4Initialization+0x3ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    24b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    24b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    24ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    24bc:	20 e0       	ldi	r18, 0x00	; 0
    24be:	30 e0       	ldi	r19, 0x00	; 0
    24c0:	40 e2       	ldi	r20, 0x20	; 32
    24c2:	51 e4       	ldi	r21, 0x41	; 65
    24c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24c8:	dc 01       	movw	r26, r24
    24ca:	cb 01       	movw	r24, r22
    24cc:	bc 01       	movw	r22, r24
    24ce:	cd 01       	movw	r24, r26
    24d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24d4:	dc 01       	movw	r26, r24
    24d6:	cb 01       	movw	r24, r22
    24d8:	9e 83       	std	Y+6, r25	; 0x06
    24da:	8d 83       	std	Y+5, r24	; 0x05
    24dc:	0f c0       	rjmp	.+30     	; 0x24fc <LCD_Vid4Initialization+0x3e2>
    24de:	88 ec       	ldi	r24, 0xC8	; 200
    24e0:	90 e0       	ldi	r25, 0x00	; 0
    24e2:	9c 83       	std	Y+4, r25	; 0x04
    24e4:	8b 83       	std	Y+3, r24	; 0x03
    24e6:	8b 81       	ldd	r24, Y+3	; 0x03
    24e8:	9c 81       	ldd	r25, Y+4	; 0x04
    24ea:	01 97       	sbiw	r24, 0x01	; 1
    24ec:	f1 f7       	brne	.-4      	; 0x24ea <LCD_Vid4Initialization+0x3d0>
    24ee:	9c 83       	std	Y+4, r25	; 0x04
    24f0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24f2:	8d 81       	ldd	r24, Y+5	; 0x05
    24f4:	9e 81       	ldd	r25, Y+6	; 0x06
    24f6:	01 97       	sbiw	r24, 0x01	; 1
    24f8:	9e 83       	std	Y+6, r25	; 0x06
    24fa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24fc:	8d 81       	ldd	r24, Y+5	; 0x05
    24fe:	9e 81       	ldd	r25, Y+6	; 0x06
    2500:	00 97       	sbiw	r24, 0x00	; 0
    2502:	69 f7       	brne	.-38     	; 0x24de <LCD_Vid4Initialization+0x3c4>
    2504:	14 c0       	rjmp	.+40     	; 0x252e <LCD_Vid4Initialization+0x414>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2506:	6f 81       	ldd	r22, Y+7	; 0x07
    2508:	78 85       	ldd	r23, Y+8	; 0x08
    250a:	89 85       	ldd	r24, Y+9	; 0x09
    250c:	9a 85       	ldd	r25, Y+10	; 0x0a
    250e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2512:	dc 01       	movw	r26, r24
    2514:	cb 01       	movw	r24, r22
    2516:	9e 83       	std	Y+6, r25	; 0x06
    2518:	8d 83       	std	Y+5, r24	; 0x05
    251a:	8d 81       	ldd	r24, Y+5	; 0x05
    251c:	9e 81       	ldd	r25, Y+6	; 0x06
    251e:	9a 83       	std	Y+2, r25	; 0x02
    2520:	89 83       	std	Y+1, r24	; 0x01
    2522:	89 81       	ldd	r24, Y+1	; 0x01
    2524:	9a 81       	ldd	r25, Y+2	; 0x02
    2526:	01 97       	sbiw	r24, 0x01	; 1
    2528:	f1 f7       	brne	.-4      	; 0x2526 <LCD_Vid4Initialization+0x40c>
    252a:	9a 83       	std	Y+2, r25	; 0x02
    252c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	InitStepFinishid=1;
    252e:	81 e0       	ldi	r24, 0x01	; 1
    2530:	80 93 83 01 	sts	0x0183, r24
}
    2534:	e8 96       	adiw	r28, 0x38	; 56
    2536:	0f b6       	in	r0, 0x3f	; 63
    2538:	f8 94       	cli
    253a:	de bf       	out	0x3e, r29	; 62
    253c:	0f be       	out	0x3f, r0	; 63
    253e:	cd bf       	out	0x3d, r28	; 61
    2540:	cf 91       	pop	r28
    2542:	df 91       	pop	r29
    2544:	08 95       	ret

00002546 <LCD_VidWrite4Cmd>:

void LCD_VidWrite4Cmd(u8 LOC_Cmd)
{
    2546:	0f 93       	push	r16
    2548:	1f 93       	push	r17
    254a:	df 93       	push	r29
    254c:	cf 93       	push	r28
    254e:	cd b7       	in	r28, 0x3d	; 61
    2550:	de b7       	in	r29, 0x3e	; 62
    2552:	c7 54       	subi	r28, 0x47	; 71
    2554:	d0 40       	sbci	r29, 0x00	; 0
    2556:	0f b6       	in	r0, 0x3f	; 63
    2558:	f8 94       	cli
    255a:	de bf       	out	0x3e, r29	; 62
    255c:	0f be       	out	0x3f, r0	; 63
    255e:	cd bf       	out	0x3d, r28	; 61
    2560:	fe 01       	movw	r30, r28
    2562:	e9 5b       	subi	r30, 0xB9	; 185
    2564:	ff 4f       	sbci	r31, 0xFF	; 255
    2566:	80 83       	st	Z, r24
	DIO_VidSetPinValue(LCD_INIT,LCD_RS,LOW);
    2568:	81 e0       	ldi	r24, 0x01	; 1
    256a:	63 e0       	ldi	r22, 0x03	; 3
    256c:	40 e0       	ldi	r20, 0x00	; 0
    256e:	0e 94 b7 0c 	call	0x196e	; 0x196e <DIO_VidSetPinValue>
	DIO_VidSetPinValue(LCD_INIT,LCD_RW,LOW);
    2572:	81 e0       	ldi	r24, 0x01	; 1
    2574:	64 e0       	ldi	r22, 0x04	; 4
    2576:	40 e0       	ldi	r20, 0x00	; 0
    2578:	0e 94 b7 0c 	call	0x196e	; 0x196e <DIO_VidSetPinValue>

	DIO_VidSetPinValue(LCD_PORT,PIN4,GET_BIT(LOC_Cmd,4));
    257c:	fe 01       	movw	r30, r28
    257e:	e9 5b       	subi	r30, 0xB9	; 185
    2580:	ff 4f       	sbci	r31, 0xFF	; 255
    2582:	80 81       	ld	r24, Z
    2584:	82 95       	swap	r24
    2586:	8f 70       	andi	r24, 0x0F	; 15
    2588:	98 2f       	mov	r25, r24
    258a:	91 70       	andi	r25, 0x01	; 1
    258c:	81 e0       	ldi	r24, 0x01	; 1
    258e:	64 e0       	ldi	r22, 0x04	; 4
    2590:	49 2f       	mov	r20, r25
    2592:	0e 94 b7 0c 	call	0x196e	; 0x196e <DIO_VidSetPinValue>
	DIO_VidSetPinValue(LCD_PORT,PIN5,GET_BIT(LOC_Cmd,5));
    2596:	fe 01       	movw	r30, r28
    2598:	e9 5b       	subi	r30, 0xB9	; 185
    259a:	ff 4f       	sbci	r31, 0xFF	; 255
    259c:	80 81       	ld	r24, Z
    259e:	82 95       	swap	r24
    25a0:	86 95       	lsr	r24
    25a2:	87 70       	andi	r24, 0x07	; 7
    25a4:	98 2f       	mov	r25, r24
    25a6:	91 70       	andi	r25, 0x01	; 1
    25a8:	81 e0       	ldi	r24, 0x01	; 1
    25aa:	65 e0       	ldi	r22, 0x05	; 5
    25ac:	49 2f       	mov	r20, r25
    25ae:	0e 94 b7 0c 	call	0x196e	; 0x196e <DIO_VidSetPinValue>
	DIO_VidSetPinValue(LCD_PORT,PIN6,GET_BIT(LOC_Cmd,6));
    25b2:	fe 01       	movw	r30, r28
    25b4:	e9 5b       	subi	r30, 0xB9	; 185
    25b6:	ff 4f       	sbci	r31, 0xFF	; 255
    25b8:	80 81       	ld	r24, Z
    25ba:	82 95       	swap	r24
    25bc:	86 95       	lsr	r24
    25be:	86 95       	lsr	r24
    25c0:	83 70       	andi	r24, 0x03	; 3
    25c2:	98 2f       	mov	r25, r24
    25c4:	91 70       	andi	r25, 0x01	; 1
    25c6:	81 e0       	ldi	r24, 0x01	; 1
    25c8:	66 e0       	ldi	r22, 0x06	; 6
    25ca:	49 2f       	mov	r20, r25
    25cc:	0e 94 b7 0c 	call	0x196e	; 0x196e <DIO_VidSetPinValue>
	DIO_VidSetPinValue(LCD_PORT,PIN7,GET_BIT(LOC_Cmd,7));
    25d0:	fe 01       	movw	r30, r28
    25d2:	e9 5b       	subi	r30, 0xB9	; 185
    25d4:	ff 4f       	sbci	r31, 0xFF	; 255
    25d6:	80 81       	ld	r24, Z
    25d8:	98 2f       	mov	r25, r24
    25da:	99 1f       	adc	r25, r25
    25dc:	99 27       	eor	r25, r25
    25de:	99 1f       	adc	r25, r25
    25e0:	81 e0       	ldi	r24, 0x01	; 1
    25e2:	67 e0       	ldi	r22, 0x07	; 7
    25e4:	49 2f       	mov	r20, r25
    25e6:	0e 94 b7 0c 	call	0x196e	; 0x196e <DIO_VidSetPinValue>

	DIO_VidSetPinValue(LCD_INIT,LCD_EN,HIGH);
    25ea:	81 e0       	ldi	r24, 0x01	; 1
    25ec:	65 e0       	ldi	r22, 0x05	; 5
    25ee:	41 e0       	ldi	r20, 0x01	; 1
    25f0:	0e 94 b7 0c 	call	0x196e	; 0x196e <DIO_VidSetPinValue>
    25f4:	fe 01       	movw	r30, r28
    25f6:	ed 5b       	subi	r30, 0xBD	; 189
    25f8:	ff 4f       	sbci	r31, 0xFF	; 255
    25fa:	80 e0       	ldi	r24, 0x00	; 0
    25fc:	90 e0       	ldi	r25, 0x00	; 0
    25fe:	a0 e8       	ldi	r26, 0x80	; 128
    2600:	bf e3       	ldi	r27, 0x3F	; 63
    2602:	80 83       	st	Z, r24
    2604:	91 83       	std	Z+1, r25	; 0x01
    2606:	a2 83       	std	Z+2, r26	; 0x02
    2608:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    260a:	8e 01       	movw	r16, r28
    260c:	01 5c       	subi	r16, 0xC1	; 193
    260e:	1f 4f       	sbci	r17, 0xFF	; 255
    2610:	fe 01       	movw	r30, r28
    2612:	ed 5b       	subi	r30, 0xBD	; 189
    2614:	ff 4f       	sbci	r31, 0xFF	; 255
    2616:	60 81       	ld	r22, Z
    2618:	71 81       	ldd	r23, Z+1	; 0x01
    261a:	82 81       	ldd	r24, Z+2	; 0x02
    261c:	93 81       	ldd	r25, Z+3	; 0x03
    261e:	20 e0       	ldi	r18, 0x00	; 0
    2620:	30 e0       	ldi	r19, 0x00	; 0
    2622:	4a ef       	ldi	r20, 0xFA	; 250
    2624:	54 e4       	ldi	r21, 0x44	; 68
    2626:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    262a:	dc 01       	movw	r26, r24
    262c:	cb 01       	movw	r24, r22
    262e:	f8 01       	movw	r30, r16
    2630:	80 83       	st	Z, r24
    2632:	91 83       	std	Z+1, r25	; 0x01
    2634:	a2 83       	std	Z+2, r26	; 0x02
    2636:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2638:	fe 01       	movw	r30, r28
    263a:	ff 96       	adiw	r30, 0x3f	; 63
    263c:	60 81       	ld	r22, Z
    263e:	71 81       	ldd	r23, Z+1	; 0x01
    2640:	82 81       	ldd	r24, Z+2	; 0x02
    2642:	93 81       	ldd	r25, Z+3	; 0x03
    2644:	20 e0       	ldi	r18, 0x00	; 0
    2646:	30 e0       	ldi	r19, 0x00	; 0
    2648:	40 e8       	ldi	r20, 0x80	; 128
    264a:	5f e3       	ldi	r21, 0x3F	; 63
    264c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2650:	88 23       	and	r24, r24
    2652:	2c f4       	brge	.+10     	; 0x265e <LCD_VidWrite4Cmd+0x118>
		__ticks = 1;
    2654:	81 e0       	ldi	r24, 0x01	; 1
    2656:	90 e0       	ldi	r25, 0x00	; 0
    2658:	9e af       	std	Y+62, r25	; 0x3e
    265a:	8d af       	std	Y+61, r24	; 0x3d
    265c:	46 c0       	rjmp	.+140    	; 0x26ea <LCD_VidWrite4Cmd+0x1a4>
	else if (__tmp > 65535)
    265e:	fe 01       	movw	r30, r28
    2660:	ff 96       	adiw	r30, 0x3f	; 63
    2662:	60 81       	ld	r22, Z
    2664:	71 81       	ldd	r23, Z+1	; 0x01
    2666:	82 81       	ldd	r24, Z+2	; 0x02
    2668:	93 81       	ldd	r25, Z+3	; 0x03
    266a:	20 e0       	ldi	r18, 0x00	; 0
    266c:	3f ef       	ldi	r19, 0xFF	; 255
    266e:	4f e7       	ldi	r20, 0x7F	; 127
    2670:	57 e4       	ldi	r21, 0x47	; 71
    2672:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2676:	18 16       	cp	r1, r24
    2678:	64 f5       	brge	.+88     	; 0x26d2 <LCD_VidWrite4Cmd+0x18c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    267a:	fe 01       	movw	r30, r28
    267c:	ed 5b       	subi	r30, 0xBD	; 189
    267e:	ff 4f       	sbci	r31, 0xFF	; 255
    2680:	60 81       	ld	r22, Z
    2682:	71 81       	ldd	r23, Z+1	; 0x01
    2684:	82 81       	ldd	r24, Z+2	; 0x02
    2686:	93 81       	ldd	r25, Z+3	; 0x03
    2688:	20 e0       	ldi	r18, 0x00	; 0
    268a:	30 e0       	ldi	r19, 0x00	; 0
    268c:	40 e2       	ldi	r20, 0x20	; 32
    268e:	51 e4       	ldi	r21, 0x41	; 65
    2690:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2694:	dc 01       	movw	r26, r24
    2696:	cb 01       	movw	r24, r22
    2698:	bc 01       	movw	r22, r24
    269a:	cd 01       	movw	r24, r26
    269c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26a0:	dc 01       	movw	r26, r24
    26a2:	cb 01       	movw	r24, r22
    26a4:	9e af       	std	Y+62, r25	; 0x3e
    26a6:	8d af       	std	Y+61, r24	; 0x3d
    26a8:	0f c0       	rjmp	.+30     	; 0x26c8 <LCD_VidWrite4Cmd+0x182>
    26aa:	88 ec       	ldi	r24, 0xC8	; 200
    26ac:	90 e0       	ldi	r25, 0x00	; 0
    26ae:	9c af       	std	Y+60, r25	; 0x3c
    26b0:	8b af       	std	Y+59, r24	; 0x3b
    26b2:	8b ad       	ldd	r24, Y+59	; 0x3b
    26b4:	9c ad       	ldd	r25, Y+60	; 0x3c
    26b6:	01 97       	sbiw	r24, 0x01	; 1
    26b8:	f1 f7       	brne	.-4      	; 0x26b6 <LCD_VidWrite4Cmd+0x170>
    26ba:	9c af       	std	Y+60, r25	; 0x3c
    26bc:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26be:	8d ad       	ldd	r24, Y+61	; 0x3d
    26c0:	9e ad       	ldd	r25, Y+62	; 0x3e
    26c2:	01 97       	sbiw	r24, 0x01	; 1
    26c4:	9e af       	std	Y+62, r25	; 0x3e
    26c6:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26c8:	8d ad       	ldd	r24, Y+61	; 0x3d
    26ca:	9e ad       	ldd	r25, Y+62	; 0x3e
    26cc:	00 97       	sbiw	r24, 0x00	; 0
    26ce:	69 f7       	brne	.-38     	; 0x26aa <LCD_VidWrite4Cmd+0x164>
    26d0:	16 c0       	rjmp	.+44     	; 0x26fe <LCD_VidWrite4Cmd+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26d2:	fe 01       	movw	r30, r28
    26d4:	ff 96       	adiw	r30, 0x3f	; 63
    26d6:	60 81       	ld	r22, Z
    26d8:	71 81       	ldd	r23, Z+1	; 0x01
    26da:	82 81       	ldd	r24, Z+2	; 0x02
    26dc:	93 81       	ldd	r25, Z+3	; 0x03
    26de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26e2:	dc 01       	movw	r26, r24
    26e4:	cb 01       	movw	r24, r22
    26e6:	9e af       	std	Y+62, r25	; 0x3e
    26e8:	8d af       	std	Y+61, r24	; 0x3d
    26ea:	8d ad       	ldd	r24, Y+61	; 0x3d
    26ec:	9e ad       	ldd	r25, Y+62	; 0x3e
    26ee:	9a af       	std	Y+58, r25	; 0x3a
    26f0:	89 af       	std	Y+57, r24	; 0x39
    26f2:	89 ad       	ldd	r24, Y+57	; 0x39
    26f4:	9a ad       	ldd	r25, Y+58	; 0x3a
    26f6:	01 97       	sbiw	r24, 0x01	; 1
    26f8:	f1 f7       	brne	.-4      	; 0x26f6 <LCD_VidWrite4Cmd+0x1b0>
    26fa:	9a af       	std	Y+58, r25	; 0x3a
    26fc:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);
	DIO_VidSetPinValue(LCD_INIT,LCD_EN,LOW);
    26fe:	81 e0       	ldi	r24, 0x01	; 1
    2700:	65 e0       	ldi	r22, 0x05	; 5
    2702:	40 e0       	ldi	r20, 0x00	; 0
    2704:	0e 94 b7 0c 	call	0x196e	; 0x196e <DIO_VidSetPinValue>
    2708:	80 e0       	ldi	r24, 0x00	; 0
    270a:	90 e0       	ldi	r25, 0x00	; 0
    270c:	a0 e8       	ldi	r26, 0x80	; 128
    270e:	bf e3       	ldi	r27, 0x3F	; 63
    2710:	8d ab       	std	Y+53, r24	; 0x35
    2712:	9e ab       	std	Y+54, r25	; 0x36
    2714:	af ab       	std	Y+55, r26	; 0x37
    2716:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2718:	6d a9       	ldd	r22, Y+53	; 0x35
    271a:	7e a9       	ldd	r23, Y+54	; 0x36
    271c:	8f a9       	ldd	r24, Y+55	; 0x37
    271e:	98 ad       	ldd	r25, Y+56	; 0x38
    2720:	20 e0       	ldi	r18, 0x00	; 0
    2722:	30 e0       	ldi	r19, 0x00	; 0
    2724:	4a ef       	ldi	r20, 0xFA	; 250
    2726:	54 e4       	ldi	r21, 0x44	; 68
    2728:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    272c:	dc 01       	movw	r26, r24
    272e:	cb 01       	movw	r24, r22
    2730:	89 ab       	std	Y+49, r24	; 0x31
    2732:	9a ab       	std	Y+50, r25	; 0x32
    2734:	ab ab       	std	Y+51, r26	; 0x33
    2736:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2738:	69 a9       	ldd	r22, Y+49	; 0x31
    273a:	7a a9       	ldd	r23, Y+50	; 0x32
    273c:	8b a9       	ldd	r24, Y+51	; 0x33
    273e:	9c a9       	ldd	r25, Y+52	; 0x34
    2740:	20 e0       	ldi	r18, 0x00	; 0
    2742:	30 e0       	ldi	r19, 0x00	; 0
    2744:	40 e8       	ldi	r20, 0x80	; 128
    2746:	5f e3       	ldi	r21, 0x3F	; 63
    2748:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    274c:	88 23       	and	r24, r24
    274e:	2c f4       	brge	.+10     	; 0x275a <LCD_VidWrite4Cmd+0x214>
		__ticks = 1;
    2750:	81 e0       	ldi	r24, 0x01	; 1
    2752:	90 e0       	ldi	r25, 0x00	; 0
    2754:	98 ab       	std	Y+48, r25	; 0x30
    2756:	8f a7       	std	Y+47, r24	; 0x2f
    2758:	3f c0       	rjmp	.+126    	; 0x27d8 <LCD_VidWrite4Cmd+0x292>
	else if (__tmp > 65535)
    275a:	69 a9       	ldd	r22, Y+49	; 0x31
    275c:	7a a9       	ldd	r23, Y+50	; 0x32
    275e:	8b a9       	ldd	r24, Y+51	; 0x33
    2760:	9c a9       	ldd	r25, Y+52	; 0x34
    2762:	20 e0       	ldi	r18, 0x00	; 0
    2764:	3f ef       	ldi	r19, 0xFF	; 255
    2766:	4f e7       	ldi	r20, 0x7F	; 127
    2768:	57 e4       	ldi	r21, 0x47	; 71
    276a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    276e:	18 16       	cp	r1, r24
    2770:	4c f5       	brge	.+82     	; 0x27c4 <LCD_VidWrite4Cmd+0x27e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2772:	6d a9       	ldd	r22, Y+53	; 0x35
    2774:	7e a9       	ldd	r23, Y+54	; 0x36
    2776:	8f a9       	ldd	r24, Y+55	; 0x37
    2778:	98 ad       	ldd	r25, Y+56	; 0x38
    277a:	20 e0       	ldi	r18, 0x00	; 0
    277c:	30 e0       	ldi	r19, 0x00	; 0
    277e:	40 e2       	ldi	r20, 0x20	; 32
    2780:	51 e4       	ldi	r21, 0x41	; 65
    2782:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2786:	dc 01       	movw	r26, r24
    2788:	cb 01       	movw	r24, r22
    278a:	bc 01       	movw	r22, r24
    278c:	cd 01       	movw	r24, r26
    278e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2792:	dc 01       	movw	r26, r24
    2794:	cb 01       	movw	r24, r22
    2796:	98 ab       	std	Y+48, r25	; 0x30
    2798:	8f a7       	std	Y+47, r24	; 0x2f
    279a:	0f c0       	rjmp	.+30     	; 0x27ba <LCD_VidWrite4Cmd+0x274>
    279c:	88 ec       	ldi	r24, 0xC8	; 200
    279e:	90 e0       	ldi	r25, 0x00	; 0
    27a0:	9e a7       	std	Y+46, r25	; 0x2e
    27a2:	8d a7       	std	Y+45, r24	; 0x2d
    27a4:	8d a5       	ldd	r24, Y+45	; 0x2d
    27a6:	9e a5       	ldd	r25, Y+46	; 0x2e
    27a8:	01 97       	sbiw	r24, 0x01	; 1
    27aa:	f1 f7       	brne	.-4      	; 0x27a8 <LCD_VidWrite4Cmd+0x262>
    27ac:	9e a7       	std	Y+46, r25	; 0x2e
    27ae:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27b0:	8f a5       	ldd	r24, Y+47	; 0x2f
    27b2:	98 a9       	ldd	r25, Y+48	; 0x30
    27b4:	01 97       	sbiw	r24, 0x01	; 1
    27b6:	98 ab       	std	Y+48, r25	; 0x30
    27b8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27ba:	8f a5       	ldd	r24, Y+47	; 0x2f
    27bc:	98 a9       	ldd	r25, Y+48	; 0x30
    27be:	00 97       	sbiw	r24, 0x00	; 0
    27c0:	69 f7       	brne	.-38     	; 0x279c <LCD_VidWrite4Cmd+0x256>
    27c2:	14 c0       	rjmp	.+40     	; 0x27ec <LCD_VidWrite4Cmd+0x2a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27c4:	69 a9       	ldd	r22, Y+49	; 0x31
    27c6:	7a a9       	ldd	r23, Y+50	; 0x32
    27c8:	8b a9       	ldd	r24, Y+51	; 0x33
    27ca:	9c a9       	ldd	r25, Y+52	; 0x34
    27cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27d0:	dc 01       	movw	r26, r24
    27d2:	cb 01       	movw	r24, r22
    27d4:	98 ab       	std	Y+48, r25	; 0x30
    27d6:	8f a7       	std	Y+47, r24	; 0x2f
    27d8:	8f a5       	ldd	r24, Y+47	; 0x2f
    27da:	98 a9       	ldd	r25, Y+48	; 0x30
    27dc:	9c a7       	std	Y+44, r25	; 0x2c
    27de:	8b a7       	std	Y+43, r24	; 0x2b
    27e0:	8b a5       	ldd	r24, Y+43	; 0x2b
    27e2:	9c a5       	ldd	r25, Y+44	; 0x2c
    27e4:	01 97       	sbiw	r24, 0x01	; 1
    27e6:	f1 f7       	brne	.-4      	; 0x27e4 <LCD_VidWrite4Cmd+0x29e>
    27e8:	9c a7       	std	Y+44, r25	; 0x2c
    27ea:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);

	if(InitStepFinishid)
    27ec:	80 91 83 01 	lds	r24, 0x0183
    27f0:	88 23       	and	r24, r24
    27f2:	09 f4       	brne	.+2      	; 0x27f6 <LCD_VidWrite4Cmd+0x2b0>
    27f4:	20 c1       	rjmp	.+576    	; 0x2a36 <LCD_VidWrite4Cmd+0x4f0>
	{
		DIO_VidSetPinValue(LCD_PORT,PIN4,GET_BIT(LOC_Cmd,0));
    27f6:	fe 01       	movw	r30, r28
    27f8:	e9 5b       	subi	r30, 0xB9	; 185
    27fa:	ff 4f       	sbci	r31, 0xFF	; 255
    27fc:	80 81       	ld	r24, Z
    27fe:	98 2f       	mov	r25, r24
    2800:	91 70       	andi	r25, 0x01	; 1
    2802:	81 e0       	ldi	r24, 0x01	; 1
    2804:	64 e0       	ldi	r22, 0x04	; 4
    2806:	49 2f       	mov	r20, r25
    2808:	0e 94 b7 0c 	call	0x196e	; 0x196e <DIO_VidSetPinValue>
		DIO_VidSetPinValue(LCD_PORT,PIN5,GET_BIT(LOC_Cmd,1));
    280c:	fe 01       	movw	r30, r28
    280e:	e9 5b       	subi	r30, 0xB9	; 185
    2810:	ff 4f       	sbci	r31, 0xFF	; 255
    2812:	80 81       	ld	r24, Z
    2814:	86 95       	lsr	r24
    2816:	98 2f       	mov	r25, r24
    2818:	91 70       	andi	r25, 0x01	; 1
    281a:	81 e0       	ldi	r24, 0x01	; 1
    281c:	65 e0       	ldi	r22, 0x05	; 5
    281e:	49 2f       	mov	r20, r25
    2820:	0e 94 b7 0c 	call	0x196e	; 0x196e <DIO_VidSetPinValue>
		DIO_VidSetPinValue(LCD_PORT,PIN6,GET_BIT(LOC_Cmd,2));
    2824:	fe 01       	movw	r30, r28
    2826:	e9 5b       	subi	r30, 0xB9	; 185
    2828:	ff 4f       	sbci	r31, 0xFF	; 255
    282a:	80 81       	ld	r24, Z
    282c:	86 95       	lsr	r24
    282e:	86 95       	lsr	r24
    2830:	98 2f       	mov	r25, r24
    2832:	91 70       	andi	r25, 0x01	; 1
    2834:	81 e0       	ldi	r24, 0x01	; 1
    2836:	66 e0       	ldi	r22, 0x06	; 6
    2838:	49 2f       	mov	r20, r25
    283a:	0e 94 b7 0c 	call	0x196e	; 0x196e <DIO_VidSetPinValue>
		DIO_VidSetPinValue(LCD_PORT,PIN7,GET_BIT(LOC_Cmd,3));
    283e:	fe 01       	movw	r30, r28
    2840:	e9 5b       	subi	r30, 0xB9	; 185
    2842:	ff 4f       	sbci	r31, 0xFF	; 255
    2844:	80 81       	ld	r24, Z
    2846:	86 95       	lsr	r24
    2848:	86 95       	lsr	r24
    284a:	86 95       	lsr	r24
    284c:	98 2f       	mov	r25, r24
    284e:	91 70       	andi	r25, 0x01	; 1
    2850:	81 e0       	ldi	r24, 0x01	; 1
    2852:	67 e0       	ldi	r22, 0x07	; 7
    2854:	49 2f       	mov	r20, r25
    2856:	0e 94 b7 0c 	call	0x196e	; 0x196e <DIO_VidSetPinValue>

		DIO_VidSetPinValue(LCD_INIT,LCD_EN,HIGH);
    285a:	81 e0       	ldi	r24, 0x01	; 1
    285c:	65 e0       	ldi	r22, 0x05	; 5
    285e:	41 e0       	ldi	r20, 0x01	; 1
    2860:	0e 94 b7 0c 	call	0x196e	; 0x196e <DIO_VidSetPinValue>
    2864:	80 e0       	ldi	r24, 0x00	; 0
    2866:	90 e0       	ldi	r25, 0x00	; 0
    2868:	a0 e8       	ldi	r26, 0x80	; 128
    286a:	bf e3       	ldi	r27, 0x3F	; 63
    286c:	8f a3       	std	Y+39, r24	; 0x27
    286e:	98 a7       	std	Y+40, r25	; 0x28
    2870:	a9 a7       	std	Y+41, r26	; 0x29
    2872:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2874:	6f a1       	ldd	r22, Y+39	; 0x27
    2876:	78 a5       	ldd	r23, Y+40	; 0x28
    2878:	89 a5       	ldd	r24, Y+41	; 0x29
    287a:	9a a5       	ldd	r25, Y+42	; 0x2a
    287c:	20 e0       	ldi	r18, 0x00	; 0
    287e:	30 e0       	ldi	r19, 0x00	; 0
    2880:	4a ef       	ldi	r20, 0xFA	; 250
    2882:	54 e4       	ldi	r21, 0x44	; 68
    2884:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2888:	dc 01       	movw	r26, r24
    288a:	cb 01       	movw	r24, r22
    288c:	8b a3       	std	Y+35, r24	; 0x23
    288e:	9c a3       	std	Y+36, r25	; 0x24
    2890:	ad a3       	std	Y+37, r26	; 0x25
    2892:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2894:	6b a1       	ldd	r22, Y+35	; 0x23
    2896:	7c a1       	ldd	r23, Y+36	; 0x24
    2898:	8d a1       	ldd	r24, Y+37	; 0x25
    289a:	9e a1       	ldd	r25, Y+38	; 0x26
    289c:	20 e0       	ldi	r18, 0x00	; 0
    289e:	30 e0       	ldi	r19, 0x00	; 0
    28a0:	40 e8       	ldi	r20, 0x80	; 128
    28a2:	5f e3       	ldi	r21, 0x3F	; 63
    28a4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28a8:	88 23       	and	r24, r24
    28aa:	2c f4       	brge	.+10     	; 0x28b6 <LCD_VidWrite4Cmd+0x370>
		__ticks = 1;
    28ac:	81 e0       	ldi	r24, 0x01	; 1
    28ae:	90 e0       	ldi	r25, 0x00	; 0
    28b0:	9a a3       	std	Y+34, r25	; 0x22
    28b2:	89 a3       	std	Y+33, r24	; 0x21
    28b4:	3f c0       	rjmp	.+126    	; 0x2934 <LCD_VidWrite4Cmd+0x3ee>
	else if (__tmp > 65535)
    28b6:	6b a1       	ldd	r22, Y+35	; 0x23
    28b8:	7c a1       	ldd	r23, Y+36	; 0x24
    28ba:	8d a1       	ldd	r24, Y+37	; 0x25
    28bc:	9e a1       	ldd	r25, Y+38	; 0x26
    28be:	20 e0       	ldi	r18, 0x00	; 0
    28c0:	3f ef       	ldi	r19, 0xFF	; 255
    28c2:	4f e7       	ldi	r20, 0x7F	; 127
    28c4:	57 e4       	ldi	r21, 0x47	; 71
    28c6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28ca:	18 16       	cp	r1, r24
    28cc:	4c f5       	brge	.+82     	; 0x2920 <LCD_VidWrite4Cmd+0x3da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28ce:	6f a1       	ldd	r22, Y+39	; 0x27
    28d0:	78 a5       	ldd	r23, Y+40	; 0x28
    28d2:	89 a5       	ldd	r24, Y+41	; 0x29
    28d4:	9a a5       	ldd	r25, Y+42	; 0x2a
    28d6:	20 e0       	ldi	r18, 0x00	; 0
    28d8:	30 e0       	ldi	r19, 0x00	; 0
    28da:	40 e2       	ldi	r20, 0x20	; 32
    28dc:	51 e4       	ldi	r21, 0x41	; 65
    28de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28e2:	dc 01       	movw	r26, r24
    28e4:	cb 01       	movw	r24, r22
    28e6:	bc 01       	movw	r22, r24
    28e8:	cd 01       	movw	r24, r26
    28ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28ee:	dc 01       	movw	r26, r24
    28f0:	cb 01       	movw	r24, r22
    28f2:	9a a3       	std	Y+34, r25	; 0x22
    28f4:	89 a3       	std	Y+33, r24	; 0x21
    28f6:	0f c0       	rjmp	.+30     	; 0x2916 <LCD_VidWrite4Cmd+0x3d0>
    28f8:	88 ec       	ldi	r24, 0xC8	; 200
    28fa:	90 e0       	ldi	r25, 0x00	; 0
    28fc:	98 a3       	std	Y+32, r25	; 0x20
    28fe:	8f 8f       	std	Y+31, r24	; 0x1f
    2900:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2902:	98 a1       	ldd	r25, Y+32	; 0x20
    2904:	01 97       	sbiw	r24, 0x01	; 1
    2906:	f1 f7       	brne	.-4      	; 0x2904 <LCD_VidWrite4Cmd+0x3be>
    2908:	98 a3       	std	Y+32, r25	; 0x20
    290a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    290c:	89 a1       	ldd	r24, Y+33	; 0x21
    290e:	9a a1       	ldd	r25, Y+34	; 0x22
    2910:	01 97       	sbiw	r24, 0x01	; 1
    2912:	9a a3       	std	Y+34, r25	; 0x22
    2914:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2916:	89 a1       	ldd	r24, Y+33	; 0x21
    2918:	9a a1       	ldd	r25, Y+34	; 0x22
    291a:	00 97       	sbiw	r24, 0x00	; 0
    291c:	69 f7       	brne	.-38     	; 0x28f8 <LCD_VidWrite4Cmd+0x3b2>
    291e:	14 c0       	rjmp	.+40     	; 0x2948 <LCD_VidWrite4Cmd+0x402>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2920:	6b a1       	ldd	r22, Y+35	; 0x23
    2922:	7c a1       	ldd	r23, Y+36	; 0x24
    2924:	8d a1       	ldd	r24, Y+37	; 0x25
    2926:	9e a1       	ldd	r25, Y+38	; 0x26
    2928:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    292c:	dc 01       	movw	r26, r24
    292e:	cb 01       	movw	r24, r22
    2930:	9a a3       	std	Y+34, r25	; 0x22
    2932:	89 a3       	std	Y+33, r24	; 0x21
    2934:	89 a1       	ldd	r24, Y+33	; 0x21
    2936:	9a a1       	ldd	r25, Y+34	; 0x22
    2938:	9e 8f       	std	Y+30, r25	; 0x1e
    293a:	8d 8f       	std	Y+29, r24	; 0x1d
    293c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    293e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2940:	01 97       	sbiw	r24, 0x01	; 1
    2942:	f1 f7       	brne	.-4      	; 0x2940 <LCD_VidWrite4Cmd+0x3fa>
    2944:	9e 8f       	std	Y+30, r25	; 0x1e
    2946:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1);
		DIO_VidSetPinValue(LCD_INIT,LCD_EN,LOW);
    2948:	81 e0       	ldi	r24, 0x01	; 1
    294a:	65 e0       	ldi	r22, 0x05	; 5
    294c:	40 e0       	ldi	r20, 0x00	; 0
    294e:	0e 94 b7 0c 	call	0x196e	; 0x196e <DIO_VidSetPinValue>
    2952:	80 e0       	ldi	r24, 0x00	; 0
    2954:	90 e0       	ldi	r25, 0x00	; 0
    2956:	a0 e8       	ldi	r26, 0x80	; 128
    2958:	bf e3       	ldi	r27, 0x3F	; 63
    295a:	89 8f       	std	Y+25, r24	; 0x19
    295c:	9a 8f       	std	Y+26, r25	; 0x1a
    295e:	ab 8f       	std	Y+27, r26	; 0x1b
    2960:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2962:	69 8d       	ldd	r22, Y+25	; 0x19
    2964:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2966:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2968:	9c 8d       	ldd	r25, Y+28	; 0x1c
    296a:	20 e0       	ldi	r18, 0x00	; 0
    296c:	30 e0       	ldi	r19, 0x00	; 0
    296e:	4a ef       	ldi	r20, 0xFA	; 250
    2970:	54 e4       	ldi	r21, 0x44	; 68
    2972:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2976:	dc 01       	movw	r26, r24
    2978:	cb 01       	movw	r24, r22
    297a:	8d 8b       	std	Y+21, r24	; 0x15
    297c:	9e 8b       	std	Y+22, r25	; 0x16
    297e:	af 8b       	std	Y+23, r26	; 0x17
    2980:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2982:	6d 89       	ldd	r22, Y+21	; 0x15
    2984:	7e 89       	ldd	r23, Y+22	; 0x16
    2986:	8f 89       	ldd	r24, Y+23	; 0x17
    2988:	98 8d       	ldd	r25, Y+24	; 0x18
    298a:	20 e0       	ldi	r18, 0x00	; 0
    298c:	30 e0       	ldi	r19, 0x00	; 0
    298e:	40 e8       	ldi	r20, 0x80	; 128
    2990:	5f e3       	ldi	r21, 0x3F	; 63
    2992:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2996:	88 23       	and	r24, r24
    2998:	2c f4       	brge	.+10     	; 0x29a4 <LCD_VidWrite4Cmd+0x45e>
		__ticks = 1;
    299a:	81 e0       	ldi	r24, 0x01	; 1
    299c:	90 e0       	ldi	r25, 0x00	; 0
    299e:	9c 8b       	std	Y+20, r25	; 0x14
    29a0:	8b 8b       	std	Y+19, r24	; 0x13
    29a2:	3f c0       	rjmp	.+126    	; 0x2a22 <LCD_VidWrite4Cmd+0x4dc>
	else if (__tmp > 65535)
    29a4:	6d 89       	ldd	r22, Y+21	; 0x15
    29a6:	7e 89       	ldd	r23, Y+22	; 0x16
    29a8:	8f 89       	ldd	r24, Y+23	; 0x17
    29aa:	98 8d       	ldd	r25, Y+24	; 0x18
    29ac:	20 e0       	ldi	r18, 0x00	; 0
    29ae:	3f ef       	ldi	r19, 0xFF	; 255
    29b0:	4f e7       	ldi	r20, 0x7F	; 127
    29b2:	57 e4       	ldi	r21, 0x47	; 71
    29b4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29b8:	18 16       	cp	r1, r24
    29ba:	4c f5       	brge	.+82     	; 0x2a0e <LCD_VidWrite4Cmd+0x4c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29bc:	69 8d       	ldd	r22, Y+25	; 0x19
    29be:	7a 8d       	ldd	r23, Y+26	; 0x1a
    29c0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    29c2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    29c4:	20 e0       	ldi	r18, 0x00	; 0
    29c6:	30 e0       	ldi	r19, 0x00	; 0
    29c8:	40 e2       	ldi	r20, 0x20	; 32
    29ca:	51 e4       	ldi	r21, 0x41	; 65
    29cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29d0:	dc 01       	movw	r26, r24
    29d2:	cb 01       	movw	r24, r22
    29d4:	bc 01       	movw	r22, r24
    29d6:	cd 01       	movw	r24, r26
    29d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29dc:	dc 01       	movw	r26, r24
    29de:	cb 01       	movw	r24, r22
    29e0:	9c 8b       	std	Y+20, r25	; 0x14
    29e2:	8b 8b       	std	Y+19, r24	; 0x13
    29e4:	0f c0       	rjmp	.+30     	; 0x2a04 <LCD_VidWrite4Cmd+0x4be>
    29e6:	88 ec       	ldi	r24, 0xC8	; 200
    29e8:	90 e0       	ldi	r25, 0x00	; 0
    29ea:	9a 8b       	std	Y+18, r25	; 0x12
    29ec:	89 8b       	std	Y+17, r24	; 0x11
    29ee:	89 89       	ldd	r24, Y+17	; 0x11
    29f0:	9a 89       	ldd	r25, Y+18	; 0x12
    29f2:	01 97       	sbiw	r24, 0x01	; 1
    29f4:	f1 f7       	brne	.-4      	; 0x29f2 <LCD_VidWrite4Cmd+0x4ac>
    29f6:	9a 8b       	std	Y+18, r25	; 0x12
    29f8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29fa:	8b 89       	ldd	r24, Y+19	; 0x13
    29fc:	9c 89       	ldd	r25, Y+20	; 0x14
    29fe:	01 97       	sbiw	r24, 0x01	; 1
    2a00:	9c 8b       	std	Y+20, r25	; 0x14
    2a02:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a04:	8b 89       	ldd	r24, Y+19	; 0x13
    2a06:	9c 89       	ldd	r25, Y+20	; 0x14
    2a08:	00 97       	sbiw	r24, 0x00	; 0
    2a0a:	69 f7       	brne	.-38     	; 0x29e6 <LCD_VidWrite4Cmd+0x4a0>
    2a0c:	14 c0       	rjmp	.+40     	; 0x2a36 <LCD_VidWrite4Cmd+0x4f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a0e:	6d 89       	ldd	r22, Y+21	; 0x15
    2a10:	7e 89       	ldd	r23, Y+22	; 0x16
    2a12:	8f 89       	ldd	r24, Y+23	; 0x17
    2a14:	98 8d       	ldd	r25, Y+24	; 0x18
    2a16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a1a:	dc 01       	movw	r26, r24
    2a1c:	cb 01       	movw	r24, r22
    2a1e:	9c 8b       	std	Y+20, r25	; 0x14
    2a20:	8b 8b       	std	Y+19, r24	; 0x13
    2a22:	8b 89       	ldd	r24, Y+19	; 0x13
    2a24:	9c 89       	ldd	r25, Y+20	; 0x14
    2a26:	98 8b       	std	Y+16, r25	; 0x10
    2a28:	8f 87       	std	Y+15, r24	; 0x0f
    2a2a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a2c:	98 89       	ldd	r25, Y+16	; 0x10
    2a2e:	01 97       	sbiw	r24, 0x01	; 1
    2a30:	f1 f7       	brne	.-4      	; 0x2a2e <LCD_VidWrite4Cmd+0x4e8>
    2a32:	98 8b       	std	Y+16, r25	; 0x10
    2a34:	8f 87       	std	Y+15, r24	; 0x0f
    2a36:	80 e0       	ldi	r24, 0x00	; 0
    2a38:	90 e0       	ldi	r25, 0x00	; 0
    2a3a:	a0 e0       	ldi	r26, 0x00	; 0
    2a3c:	b0 e4       	ldi	r27, 0x40	; 64
    2a3e:	8b 87       	std	Y+11, r24	; 0x0b
    2a40:	9c 87       	std	Y+12, r25	; 0x0c
    2a42:	ad 87       	std	Y+13, r26	; 0x0d
    2a44:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a46:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a48:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a4a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a4c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a4e:	20 e0       	ldi	r18, 0x00	; 0
    2a50:	30 e0       	ldi	r19, 0x00	; 0
    2a52:	4a ef       	ldi	r20, 0xFA	; 250
    2a54:	54 e4       	ldi	r21, 0x44	; 68
    2a56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a5a:	dc 01       	movw	r26, r24
    2a5c:	cb 01       	movw	r24, r22
    2a5e:	8f 83       	std	Y+7, r24	; 0x07
    2a60:	98 87       	std	Y+8, r25	; 0x08
    2a62:	a9 87       	std	Y+9, r26	; 0x09
    2a64:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a66:	6f 81       	ldd	r22, Y+7	; 0x07
    2a68:	78 85       	ldd	r23, Y+8	; 0x08
    2a6a:	89 85       	ldd	r24, Y+9	; 0x09
    2a6c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a6e:	20 e0       	ldi	r18, 0x00	; 0
    2a70:	30 e0       	ldi	r19, 0x00	; 0
    2a72:	40 e8       	ldi	r20, 0x80	; 128
    2a74:	5f e3       	ldi	r21, 0x3F	; 63
    2a76:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a7a:	88 23       	and	r24, r24
    2a7c:	2c f4       	brge	.+10     	; 0x2a88 <LCD_VidWrite4Cmd+0x542>
		__ticks = 1;
    2a7e:	81 e0       	ldi	r24, 0x01	; 1
    2a80:	90 e0       	ldi	r25, 0x00	; 0
    2a82:	9e 83       	std	Y+6, r25	; 0x06
    2a84:	8d 83       	std	Y+5, r24	; 0x05
    2a86:	3f c0       	rjmp	.+126    	; 0x2b06 <LCD_VidWrite4Cmd+0x5c0>
	else if (__tmp > 65535)
    2a88:	6f 81       	ldd	r22, Y+7	; 0x07
    2a8a:	78 85       	ldd	r23, Y+8	; 0x08
    2a8c:	89 85       	ldd	r24, Y+9	; 0x09
    2a8e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a90:	20 e0       	ldi	r18, 0x00	; 0
    2a92:	3f ef       	ldi	r19, 0xFF	; 255
    2a94:	4f e7       	ldi	r20, 0x7F	; 127
    2a96:	57 e4       	ldi	r21, 0x47	; 71
    2a98:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a9c:	18 16       	cp	r1, r24
    2a9e:	4c f5       	brge	.+82     	; 0x2af2 <LCD_VidWrite4Cmd+0x5ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2aa0:	6b 85       	ldd	r22, Y+11	; 0x0b
    2aa2:	7c 85       	ldd	r23, Y+12	; 0x0c
    2aa4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2aa6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2aa8:	20 e0       	ldi	r18, 0x00	; 0
    2aaa:	30 e0       	ldi	r19, 0x00	; 0
    2aac:	40 e2       	ldi	r20, 0x20	; 32
    2aae:	51 e4       	ldi	r21, 0x41	; 65
    2ab0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ab4:	dc 01       	movw	r26, r24
    2ab6:	cb 01       	movw	r24, r22
    2ab8:	bc 01       	movw	r22, r24
    2aba:	cd 01       	movw	r24, r26
    2abc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ac0:	dc 01       	movw	r26, r24
    2ac2:	cb 01       	movw	r24, r22
    2ac4:	9e 83       	std	Y+6, r25	; 0x06
    2ac6:	8d 83       	std	Y+5, r24	; 0x05
    2ac8:	0f c0       	rjmp	.+30     	; 0x2ae8 <LCD_VidWrite4Cmd+0x5a2>
    2aca:	88 ec       	ldi	r24, 0xC8	; 200
    2acc:	90 e0       	ldi	r25, 0x00	; 0
    2ace:	9c 83       	std	Y+4, r25	; 0x04
    2ad0:	8b 83       	std	Y+3, r24	; 0x03
    2ad2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ad4:	9c 81       	ldd	r25, Y+4	; 0x04
    2ad6:	01 97       	sbiw	r24, 0x01	; 1
    2ad8:	f1 f7       	brne	.-4      	; 0x2ad6 <LCD_VidWrite4Cmd+0x590>
    2ada:	9c 83       	std	Y+4, r25	; 0x04
    2adc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ade:	8d 81       	ldd	r24, Y+5	; 0x05
    2ae0:	9e 81       	ldd	r25, Y+6	; 0x06
    2ae2:	01 97       	sbiw	r24, 0x01	; 1
    2ae4:	9e 83       	std	Y+6, r25	; 0x06
    2ae6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ae8:	8d 81       	ldd	r24, Y+5	; 0x05
    2aea:	9e 81       	ldd	r25, Y+6	; 0x06
    2aec:	00 97       	sbiw	r24, 0x00	; 0
    2aee:	69 f7       	brne	.-38     	; 0x2aca <LCD_VidWrite4Cmd+0x584>
    2af0:	14 c0       	rjmp	.+40     	; 0x2b1a <LCD_VidWrite4Cmd+0x5d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2af2:	6f 81       	ldd	r22, Y+7	; 0x07
    2af4:	78 85       	ldd	r23, Y+8	; 0x08
    2af6:	89 85       	ldd	r24, Y+9	; 0x09
    2af8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2afa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2afe:	dc 01       	movw	r26, r24
    2b00:	cb 01       	movw	r24, r22
    2b02:	9e 83       	std	Y+6, r25	; 0x06
    2b04:	8d 83       	std	Y+5, r24	; 0x05
    2b06:	8d 81       	ldd	r24, Y+5	; 0x05
    2b08:	9e 81       	ldd	r25, Y+6	; 0x06
    2b0a:	9a 83       	std	Y+2, r25	; 0x02
    2b0c:	89 83       	std	Y+1, r24	; 0x01
    2b0e:	89 81       	ldd	r24, Y+1	; 0x01
    2b10:	9a 81       	ldd	r25, Y+2	; 0x02
    2b12:	01 97       	sbiw	r24, 0x01	; 1
    2b14:	f1 f7       	brne	.-4      	; 0x2b12 <LCD_VidWrite4Cmd+0x5cc>
    2b16:	9a 83       	std	Y+2, r25	; 0x02
    2b18:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1);
	}
	_delay_ms(2);
}
    2b1a:	c9 5b       	subi	r28, 0xB9	; 185
    2b1c:	df 4f       	sbci	r29, 0xFF	; 255
    2b1e:	0f b6       	in	r0, 0x3f	; 63
    2b20:	f8 94       	cli
    2b22:	de bf       	out	0x3e, r29	; 62
    2b24:	0f be       	out	0x3f, r0	; 63
    2b26:	cd bf       	out	0x3d, r28	; 61
    2b28:	cf 91       	pop	r28
    2b2a:	df 91       	pop	r29
    2b2c:	1f 91       	pop	r17
    2b2e:	0f 91       	pop	r16
    2b30:	08 95       	ret

00002b32 <LCD_VidWrite4Data>:


void LCD_VidWrite4Data(u8 LOC_Data)
{
    2b32:	df 93       	push	r29
    2b34:	cf 93       	push	r28
    2b36:	cd b7       	in	r28, 0x3d	; 61
    2b38:	de b7       	in	r29, 0x3e	; 62
    2b3a:	ab 97       	sbiw	r28, 0x2b	; 43
    2b3c:	0f b6       	in	r0, 0x3f	; 63
    2b3e:	f8 94       	cli
    2b40:	de bf       	out	0x3e, r29	; 62
    2b42:	0f be       	out	0x3f, r0	; 63
    2b44:	cd bf       	out	0x3d, r28	; 61
    2b46:	8b a7       	std	Y+43, r24	; 0x2b
	DIO_VidSetPinValue(LCD_INIT,LCD_RS,HIGH);
    2b48:	81 e0       	ldi	r24, 0x01	; 1
    2b4a:	63 e0       	ldi	r22, 0x03	; 3
    2b4c:	41 e0       	ldi	r20, 0x01	; 1
    2b4e:	0e 94 b7 0c 	call	0x196e	; 0x196e <DIO_VidSetPinValue>
	DIO_VidSetPinValue(LCD_INIT,LCD_RW,LOW);
    2b52:	81 e0       	ldi	r24, 0x01	; 1
    2b54:	64 e0       	ldi	r22, 0x04	; 4
    2b56:	40 e0       	ldi	r20, 0x00	; 0
    2b58:	0e 94 b7 0c 	call	0x196e	; 0x196e <DIO_VidSetPinValue>

	DIO_VidSetPinValue(LCD_PORT,PIN4,GET_BIT(LOC_Data,4));
    2b5c:	8b a5       	ldd	r24, Y+43	; 0x2b
    2b5e:	82 95       	swap	r24
    2b60:	8f 70       	andi	r24, 0x0F	; 15
    2b62:	98 2f       	mov	r25, r24
    2b64:	91 70       	andi	r25, 0x01	; 1
    2b66:	81 e0       	ldi	r24, 0x01	; 1
    2b68:	64 e0       	ldi	r22, 0x04	; 4
    2b6a:	49 2f       	mov	r20, r25
    2b6c:	0e 94 b7 0c 	call	0x196e	; 0x196e <DIO_VidSetPinValue>
	DIO_VidSetPinValue(LCD_PORT,PIN5,GET_BIT(LOC_Data,5));
    2b70:	8b a5       	ldd	r24, Y+43	; 0x2b
    2b72:	82 95       	swap	r24
    2b74:	86 95       	lsr	r24
    2b76:	87 70       	andi	r24, 0x07	; 7
    2b78:	98 2f       	mov	r25, r24
    2b7a:	91 70       	andi	r25, 0x01	; 1
    2b7c:	81 e0       	ldi	r24, 0x01	; 1
    2b7e:	65 e0       	ldi	r22, 0x05	; 5
    2b80:	49 2f       	mov	r20, r25
    2b82:	0e 94 b7 0c 	call	0x196e	; 0x196e <DIO_VidSetPinValue>
	DIO_VidSetPinValue(LCD_PORT,PIN6,GET_BIT(LOC_Data,6));
    2b86:	8b a5       	ldd	r24, Y+43	; 0x2b
    2b88:	82 95       	swap	r24
    2b8a:	86 95       	lsr	r24
    2b8c:	86 95       	lsr	r24
    2b8e:	83 70       	andi	r24, 0x03	; 3
    2b90:	98 2f       	mov	r25, r24
    2b92:	91 70       	andi	r25, 0x01	; 1
    2b94:	81 e0       	ldi	r24, 0x01	; 1
    2b96:	66 e0       	ldi	r22, 0x06	; 6
    2b98:	49 2f       	mov	r20, r25
    2b9a:	0e 94 b7 0c 	call	0x196e	; 0x196e <DIO_VidSetPinValue>
	DIO_VidSetPinValue(LCD_PORT,PIN7,GET_BIT(LOC_Data,7));
    2b9e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2ba0:	98 2f       	mov	r25, r24
    2ba2:	99 1f       	adc	r25, r25
    2ba4:	99 27       	eor	r25, r25
    2ba6:	99 1f       	adc	r25, r25
    2ba8:	81 e0       	ldi	r24, 0x01	; 1
    2baa:	67 e0       	ldi	r22, 0x07	; 7
    2bac:	49 2f       	mov	r20, r25
    2bae:	0e 94 b7 0c 	call	0x196e	; 0x196e <DIO_VidSetPinValue>

	DIO_VidSetPinValue(LCD_INIT,LCD_EN,HIGH);
    2bb2:	81 e0       	ldi	r24, 0x01	; 1
    2bb4:	65 e0       	ldi	r22, 0x05	; 5
    2bb6:	41 e0       	ldi	r20, 0x01	; 1
    2bb8:	0e 94 b7 0c 	call	0x196e	; 0x196e <DIO_VidSetPinValue>
    2bbc:	80 e0       	ldi	r24, 0x00	; 0
    2bbe:	90 e0       	ldi	r25, 0x00	; 0
    2bc0:	a0 e8       	ldi	r26, 0x80	; 128
    2bc2:	bf e3       	ldi	r27, 0x3F	; 63
    2bc4:	8f a3       	std	Y+39, r24	; 0x27
    2bc6:	98 a7       	std	Y+40, r25	; 0x28
    2bc8:	a9 a7       	std	Y+41, r26	; 0x29
    2bca:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bcc:	6f a1       	ldd	r22, Y+39	; 0x27
    2bce:	78 a5       	ldd	r23, Y+40	; 0x28
    2bd0:	89 a5       	ldd	r24, Y+41	; 0x29
    2bd2:	9a a5       	ldd	r25, Y+42	; 0x2a
    2bd4:	20 e0       	ldi	r18, 0x00	; 0
    2bd6:	30 e0       	ldi	r19, 0x00	; 0
    2bd8:	4a ef       	ldi	r20, 0xFA	; 250
    2bda:	54 e4       	ldi	r21, 0x44	; 68
    2bdc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2be0:	dc 01       	movw	r26, r24
    2be2:	cb 01       	movw	r24, r22
    2be4:	8b a3       	std	Y+35, r24	; 0x23
    2be6:	9c a3       	std	Y+36, r25	; 0x24
    2be8:	ad a3       	std	Y+37, r26	; 0x25
    2bea:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2bec:	6b a1       	ldd	r22, Y+35	; 0x23
    2bee:	7c a1       	ldd	r23, Y+36	; 0x24
    2bf0:	8d a1       	ldd	r24, Y+37	; 0x25
    2bf2:	9e a1       	ldd	r25, Y+38	; 0x26
    2bf4:	20 e0       	ldi	r18, 0x00	; 0
    2bf6:	30 e0       	ldi	r19, 0x00	; 0
    2bf8:	40 e8       	ldi	r20, 0x80	; 128
    2bfa:	5f e3       	ldi	r21, 0x3F	; 63
    2bfc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c00:	88 23       	and	r24, r24
    2c02:	2c f4       	brge	.+10     	; 0x2c0e <LCD_VidWrite4Data+0xdc>
		__ticks = 1;
    2c04:	81 e0       	ldi	r24, 0x01	; 1
    2c06:	90 e0       	ldi	r25, 0x00	; 0
    2c08:	9a a3       	std	Y+34, r25	; 0x22
    2c0a:	89 a3       	std	Y+33, r24	; 0x21
    2c0c:	3f c0       	rjmp	.+126    	; 0x2c8c <LCD_VidWrite4Data+0x15a>
	else if (__tmp > 65535)
    2c0e:	6b a1       	ldd	r22, Y+35	; 0x23
    2c10:	7c a1       	ldd	r23, Y+36	; 0x24
    2c12:	8d a1       	ldd	r24, Y+37	; 0x25
    2c14:	9e a1       	ldd	r25, Y+38	; 0x26
    2c16:	20 e0       	ldi	r18, 0x00	; 0
    2c18:	3f ef       	ldi	r19, 0xFF	; 255
    2c1a:	4f e7       	ldi	r20, 0x7F	; 127
    2c1c:	57 e4       	ldi	r21, 0x47	; 71
    2c1e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c22:	18 16       	cp	r1, r24
    2c24:	4c f5       	brge	.+82     	; 0x2c78 <LCD_VidWrite4Data+0x146>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c26:	6f a1       	ldd	r22, Y+39	; 0x27
    2c28:	78 a5       	ldd	r23, Y+40	; 0x28
    2c2a:	89 a5       	ldd	r24, Y+41	; 0x29
    2c2c:	9a a5       	ldd	r25, Y+42	; 0x2a
    2c2e:	20 e0       	ldi	r18, 0x00	; 0
    2c30:	30 e0       	ldi	r19, 0x00	; 0
    2c32:	40 e2       	ldi	r20, 0x20	; 32
    2c34:	51 e4       	ldi	r21, 0x41	; 65
    2c36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c3a:	dc 01       	movw	r26, r24
    2c3c:	cb 01       	movw	r24, r22
    2c3e:	bc 01       	movw	r22, r24
    2c40:	cd 01       	movw	r24, r26
    2c42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c46:	dc 01       	movw	r26, r24
    2c48:	cb 01       	movw	r24, r22
    2c4a:	9a a3       	std	Y+34, r25	; 0x22
    2c4c:	89 a3       	std	Y+33, r24	; 0x21
    2c4e:	0f c0       	rjmp	.+30     	; 0x2c6e <LCD_VidWrite4Data+0x13c>
    2c50:	88 ec       	ldi	r24, 0xC8	; 200
    2c52:	90 e0       	ldi	r25, 0x00	; 0
    2c54:	98 a3       	std	Y+32, r25	; 0x20
    2c56:	8f 8f       	std	Y+31, r24	; 0x1f
    2c58:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2c5a:	98 a1       	ldd	r25, Y+32	; 0x20
    2c5c:	01 97       	sbiw	r24, 0x01	; 1
    2c5e:	f1 f7       	brne	.-4      	; 0x2c5c <LCD_VidWrite4Data+0x12a>
    2c60:	98 a3       	std	Y+32, r25	; 0x20
    2c62:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c64:	89 a1       	ldd	r24, Y+33	; 0x21
    2c66:	9a a1       	ldd	r25, Y+34	; 0x22
    2c68:	01 97       	sbiw	r24, 0x01	; 1
    2c6a:	9a a3       	std	Y+34, r25	; 0x22
    2c6c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c6e:	89 a1       	ldd	r24, Y+33	; 0x21
    2c70:	9a a1       	ldd	r25, Y+34	; 0x22
    2c72:	00 97       	sbiw	r24, 0x00	; 0
    2c74:	69 f7       	brne	.-38     	; 0x2c50 <LCD_VidWrite4Data+0x11e>
    2c76:	14 c0       	rjmp	.+40     	; 0x2ca0 <LCD_VidWrite4Data+0x16e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c78:	6b a1       	ldd	r22, Y+35	; 0x23
    2c7a:	7c a1       	ldd	r23, Y+36	; 0x24
    2c7c:	8d a1       	ldd	r24, Y+37	; 0x25
    2c7e:	9e a1       	ldd	r25, Y+38	; 0x26
    2c80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c84:	dc 01       	movw	r26, r24
    2c86:	cb 01       	movw	r24, r22
    2c88:	9a a3       	std	Y+34, r25	; 0x22
    2c8a:	89 a3       	std	Y+33, r24	; 0x21
    2c8c:	89 a1       	ldd	r24, Y+33	; 0x21
    2c8e:	9a a1       	ldd	r25, Y+34	; 0x22
    2c90:	9e 8f       	std	Y+30, r25	; 0x1e
    2c92:	8d 8f       	std	Y+29, r24	; 0x1d
    2c94:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c96:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2c98:	01 97       	sbiw	r24, 0x01	; 1
    2c9a:	f1 f7       	brne	.-4      	; 0x2c98 <LCD_VidWrite4Data+0x166>
    2c9c:	9e 8f       	std	Y+30, r25	; 0x1e
    2c9e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	DIO_VidSetPinValue(LCD_INIT,LCD_EN,LOW);
    2ca0:	81 e0       	ldi	r24, 0x01	; 1
    2ca2:	65 e0       	ldi	r22, 0x05	; 5
    2ca4:	40 e0       	ldi	r20, 0x00	; 0
    2ca6:	0e 94 b7 0c 	call	0x196e	; 0x196e <DIO_VidSetPinValue>

	DIO_VidSetPinValue(LCD_PORT,PIN4,GET_BIT(LOC_Data,0));
    2caa:	8b a5       	ldd	r24, Y+43	; 0x2b
    2cac:	98 2f       	mov	r25, r24
    2cae:	91 70       	andi	r25, 0x01	; 1
    2cb0:	81 e0       	ldi	r24, 0x01	; 1
    2cb2:	64 e0       	ldi	r22, 0x04	; 4
    2cb4:	49 2f       	mov	r20, r25
    2cb6:	0e 94 b7 0c 	call	0x196e	; 0x196e <DIO_VidSetPinValue>
	DIO_VidSetPinValue(LCD_PORT,PIN5,GET_BIT(LOC_Data,1));
    2cba:	8b a5       	ldd	r24, Y+43	; 0x2b
    2cbc:	86 95       	lsr	r24
    2cbe:	98 2f       	mov	r25, r24
    2cc0:	91 70       	andi	r25, 0x01	; 1
    2cc2:	81 e0       	ldi	r24, 0x01	; 1
    2cc4:	65 e0       	ldi	r22, 0x05	; 5
    2cc6:	49 2f       	mov	r20, r25
    2cc8:	0e 94 b7 0c 	call	0x196e	; 0x196e <DIO_VidSetPinValue>
	DIO_VidSetPinValue(LCD_PORT,PIN6,GET_BIT(LOC_Data,2));
    2ccc:	8b a5       	ldd	r24, Y+43	; 0x2b
    2cce:	86 95       	lsr	r24
    2cd0:	86 95       	lsr	r24
    2cd2:	98 2f       	mov	r25, r24
    2cd4:	91 70       	andi	r25, 0x01	; 1
    2cd6:	81 e0       	ldi	r24, 0x01	; 1
    2cd8:	66 e0       	ldi	r22, 0x06	; 6
    2cda:	49 2f       	mov	r20, r25
    2cdc:	0e 94 b7 0c 	call	0x196e	; 0x196e <DIO_VidSetPinValue>
	DIO_VidSetPinValue(LCD_PORT,PIN7,GET_BIT(LOC_Data,3));
    2ce0:	8b a5       	ldd	r24, Y+43	; 0x2b
    2ce2:	86 95       	lsr	r24
    2ce4:	86 95       	lsr	r24
    2ce6:	86 95       	lsr	r24
    2ce8:	98 2f       	mov	r25, r24
    2cea:	91 70       	andi	r25, 0x01	; 1
    2cec:	81 e0       	ldi	r24, 0x01	; 1
    2cee:	67 e0       	ldi	r22, 0x07	; 7
    2cf0:	49 2f       	mov	r20, r25
    2cf2:	0e 94 b7 0c 	call	0x196e	; 0x196e <DIO_VidSetPinValue>

	DIO_VidSetPinValue(LCD_INIT,LCD_EN,HIGH);
    2cf6:	81 e0       	ldi	r24, 0x01	; 1
    2cf8:	65 e0       	ldi	r22, 0x05	; 5
    2cfa:	41 e0       	ldi	r20, 0x01	; 1
    2cfc:	0e 94 b7 0c 	call	0x196e	; 0x196e <DIO_VidSetPinValue>
    2d00:	80 e0       	ldi	r24, 0x00	; 0
    2d02:	90 e0       	ldi	r25, 0x00	; 0
    2d04:	a0 e8       	ldi	r26, 0x80	; 128
    2d06:	bf e3       	ldi	r27, 0x3F	; 63
    2d08:	89 8f       	std	Y+25, r24	; 0x19
    2d0a:	9a 8f       	std	Y+26, r25	; 0x1a
    2d0c:	ab 8f       	std	Y+27, r26	; 0x1b
    2d0e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d10:	69 8d       	ldd	r22, Y+25	; 0x19
    2d12:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d14:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d16:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d18:	20 e0       	ldi	r18, 0x00	; 0
    2d1a:	30 e0       	ldi	r19, 0x00	; 0
    2d1c:	4a ef       	ldi	r20, 0xFA	; 250
    2d1e:	54 e4       	ldi	r21, 0x44	; 68
    2d20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d24:	dc 01       	movw	r26, r24
    2d26:	cb 01       	movw	r24, r22
    2d28:	8d 8b       	std	Y+21, r24	; 0x15
    2d2a:	9e 8b       	std	Y+22, r25	; 0x16
    2d2c:	af 8b       	std	Y+23, r26	; 0x17
    2d2e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2d30:	6d 89       	ldd	r22, Y+21	; 0x15
    2d32:	7e 89       	ldd	r23, Y+22	; 0x16
    2d34:	8f 89       	ldd	r24, Y+23	; 0x17
    2d36:	98 8d       	ldd	r25, Y+24	; 0x18
    2d38:	20 e0       	ldi	r18, 0x00	; 0
    2d3a:	30 e0       	ldi	r19, 0x00	; 0
    2d3c:	40 e8       	ldi	r20, 0x80	; 128
    2d3e:	5f e3       	ldi	r21, 0x3F	; 63
    2d40:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d44:	88 23       	and	r24, r24
    2d46:	2c f4       	brge	.+10     	; 0x2d52 <LCD_VidWrite4Data+0x220>
		__ticks = 1;
    2d48:	81 e0       	ldi	r24, 0x01	; 1
    2d4a:	90 e0       	ldi	r25, 0x00	; 0
    2d4c:	9c 8b       	std	Y+20, r25	; 0x14
    2d4e:	8b 8b       	std	Y+19, r24	; 0x13
    2d50:	3f c0       	rjmp	.+126    	; 0x2dd0 <LCD_VidWrite4Data+0x29e>
	else if (__tmp > 65535)
    2d52:	6d 89       	ldd	r22, Y+21	; 0x15
    2d54:	7e 89       	ldd	r23, Y+22	; 0x16
    2d56:	8f 89       	ldd	r24, Y+23	; 0x17
    2d58:	98 8d       	ldd	r25, Y+24	; 0x18
    2d5a:	20 e0       	ldi	r18, 0x00	; 0
    2d5c:	3f ef       	ldi	r19, 0xFF	; 255
    2d5e:	4f e7       	ldi	r20, 0x7F	; 127
    2d60:	57 e4       	ldi	r21, 0x47	; 71
    2d62:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d66:	18 16       	cp	r1, r24
    2d68:	4c f5       	brge	.+82     	; 0x2dbc <LCD_VidWrite4Data+0x28a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d6a:	69 8d       	ldd	r22, Y+25	; 0x19
    2d6c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d6e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d70:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d72:	20 e0       	ldi	r18, 0x00	; 0
    2d74:	30 e0       	ldi	r19, 0x00	; 0
    2d76:	40 e2       	ldi	r20, 0x20	; 32
    2d78:	51 e4       	ldi	r21, 0x41	; 65
    2d7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d7e:	dc 01       	movw	r26, r24
    2d80:	cb 01       	movw	r24, r22
    2d82:	bc 01       	movw	r22, r24
    2d84:	cd 01       	movw	r24, r26
    2d86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d8a:	dc 01       	movw	r26, r24
    2d8c:	cb 01       	movw	r24, r22
    2d8e:	9c 8b       	std	Y+20, r25	; 0x14
    2d90:	8b 8b       	std	Y+19, r24	; 0x13
    2d92:	0f c0       	rjmp	.+30     	; 0x2db2 <LCD_VidWrite4Data+0x280>
    2d94:	88 ec       	ldi	r24, 0xC8	; 200
    2d96:	90 e0       	ldi	r25, 0x00	; 0
    2d98:	9a 8b       	std	Y+18, r25	; 0x12
    2d9a:	89 8b       	std	Y+17, r24	; 0x11
    2d9c:	89 89       	ldd	r24, Y+17	; 0x11
    2d9e:	9a 89       	ldd	r25, Y+18	; 0x12
    2da0:	01 97       	sbiw	r24, 0x01	; 1
    2da2:	f1 f7       	brne	.-4      	; 0x2da0 <LCD_VidWrite4Data+0x26e>
    2da4:	9a 8b       	std	Y+18, r25	; 0x12
    2da6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2da8:	8b 89       	ldd	r24, Y+19	; 0x13
    2daa:	9c 89       	ldd	r25, Y+20	; 0x14
    2dac:	01 97       	sbiw	r24, 0x01	; 1
    2dae:	9c 8b       	std	Y+20, r25	; 0x14
    2db0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2db2:	8b 89       	ldd	r24, Y+19	; 0x13
    2db4:	9c 89       	ldd	r25, Y+20	; 0x14
    2db6:	00 97       	sbiw	r24, 0x00	; 0
    2db8:	69 f7       	brne	.-38     	; 0x2d94 <LCD_VidWrite4Data+0x262>
    2dba:	14 c0       	rjmp	.+40     	; 0x2de4 <LCD_VidWrite4Data+0x2b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dbc:	6d 89       	ldd	r22, Y+21	; 0x15
    2dbe:	7e 89       	ldd	r23, Y+22	; 0x16
    2dc0:	8f 89       	ldd	r24, Y+23	; 0x17
    2dc2:	98 8d       	ldd	r25, Y+24	; 0x18
    2dc4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dc8:	dc 01       	movw	r26, r24
    2dca:	cb 01       	movw	r24, r22
    2dcc:	9c 8b       	std	Y+20, r25	; 0x14
    2dce:	8b 8b       	std	Y+19, r24	; 0x13
    2dd0:	8b 89       	ldd	r24, Y+19	; 0x13
    2dd2:	9c 89       	ldd	r25, Y+20	; 0x14
    2dd4:	98 8b       	std	Y+16, r25	; 0x10
    2dd6:	8f 87       	std	Y+15, r24	; 0x0f
    2dd8:	8f 85       	ldd	r24, Y+15	; 0x0f
    2dda:	98 89       	ldd	r25, Y+16	; 0x10
    2ddc:	01 97       	sbiw	r24, 0x01	; 1
    2dde:	f1 f7       	brne	.-4      	; 0x2ddc <LCD_VidWrite4Data+0x2aa>
    2de0:	98 8b       	std	Y+16, r25	; 0x10
    2de2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_VidSetPinValue(LCD_INIT,LCD_EN,LOW);
    2de4:	81 e0       	ldi	r24, 0x01	; 1
    2de6:	65 e0       	ldi	r22, 0x05	; 5
    2de8:	40 e0       	ldi	r20, 0x00	; 0
    2dea:	0e 94 b7 0c 	call	0x196e	; 0x196e <DIO_VidSetPinValue>
    2dee:	80 e0       	ldi	r24, 0x00	; 0
    2df0:	90 e0       	ldi	r25, 0x00	; 0
    2df2:	a0 e0       	ldi	r26, 0x00	; 0
    2df4:	b0 e4       	ldi	r27, 0x40	; 64
    2df6:	8b 87       	std	Y+11, r24	; 0x0b
    2df8:	9c 87       	std	Y+12, r25	; 0x0c
    2dfa:	ad 87       	std	Y+13, r26	; 0x0d
    2dfc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dfe:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e00:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e02:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e04:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e06:	20 e0       	ldi	r18, 0x00	; 0
    2e08:	30 e0       	ldi	r19, 0x00	; 0
    2e0a:	4a ef       	ldi	r20, 0xFA	; 250
    2e0c:	54 e4       	ldi	r21, 0x44	; 68
    2e0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e12:	dc 01       	movw	r26, r24
    2e14:	cb 01       	movw	r24, r22
    2e16:	8f 83       	std	Y+7, r24	; 0x07
    2e18:	98 87       	std	Y+8, r25	; 0x08
    2e1a:	a9 87       	std	Y+9, r26	; 0x09
    2e1c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e1e:	6f 81       	ldd	r22, Y+7	; 0x07
    2e20:	78 85       	ldd	r23, Y+8	; 0x08
    2e22:	89 85       	ldd	r24, Y+9	; 0x09
    2e24:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e26:	20 e0       	ldi	r18, 0x00	; 0
    2e28:	30 e0       	ldi	r19, 0x00	; 0
    2e2a:	40 e8       	ldi	r20, 0x80	; 128
    2e2c:	5f e3       	ldi	r21, 0x3F	; 63
    2e2e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e32:	88 23       	and	r24, r24
    2e34:	2c f4       	brge	.+10     	; 0x2e40 <LCD_VidWrite4Data+0x30e>
		__ticks = 1;
    2e36:	81 e0       	ldi	r24, 0x01	; 1
    2e38:	90 e0       	ldi	r25, 0x00	; 0
    2e3a:	9e 83       	std	Y+6, r25	; 0x06
    2e3c:	8d 83       	std	Y+5, r24	; 0x05
    2e3e:	3f c0       	rjmp	.+126    	; 0x2ebe <LCD_VidWrite4Data+0x38c>
	else if (__tmp > 65535)
    2e40:	6f 81       	ldd	r22, Y+7	; 0x07
    2e42:	78 85       	ldd	r23, Y+8	; 0x08
    2e44:	89 85       	ldd	r24, Y+9	; 0x09
    2e46:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e48:	20 e0       	ldi	r18, 0x00	; 0
    2e4a:	3f ef       	ldi	r19, 0xFF	; 255
    2e4c:	4f e7       	ldi	r20, 0x7F	; 127
    2e4e:	57 e4       	ldi	r21, 0x47	; 71
    2e50:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e54:	18 16       	cp	r1, r24
    2e56:	4c f5       	brge	.+82     	; 0x2eaa <LCD_VidWrite4Data+0x378>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e58:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e5a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e5c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e5e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e60:	20 e0       	ldi	r18, 0x00	; 0
    2e62:	30 e0       	ldi	r19, 0x00	; 0
    2e64:	40 e2       	ldi	r20, 0x20	; 32
    2e66:	51 e4       	ldi	r21, 0x41	; 65
    2e68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e6c:	dc 01       	movw	r26, r24
    2e6e:	cb 01       	movw	r24, r22
    2e70:	bc 01       	movw	r22, r24
    2e72:	cd 01       	movw	r24, r26
    2e74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e78:	dc 01       	movw	r26, r24
    2e7a:	cb 01       	movw	r24, r22
    2e7c:	9e 83       	std	Y+6, r25	; 0x06
    2e7e:	8d 83       	std	Y+5, r24	; 0x05
    2e80:	0f c0       	rjmp	.+30     	; 0x2ea0 <LCD_VidWrite4Data+0x36e>
    2e82:	88 ec       	ldi	r24, 0xC8	; 200
    2e84:	90 e0       	ldi	r25, 0x00	; 0
    2e86:	9c 83       	std	Y+4, r25	; 0x04
    2e88:	8b 83       	std	Y+3, r24	; 0x03
    2e8a:	8b 81       	ldd	r24, Y+3	; 0x03
    2e8c:	9c 81       	ldd	r25, Y+4	; 0x04
    2e8e:	01 97       	sbiw	r24, 0x01	; 1
    2e90:	f1 f7       	brne	.-4      	; 0x2e8e <LCD_VidWrite4Data+0x35c>
    2e92:	9c 83       	std	Y+4, r25	; 0x04
    2e94:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e96:	8d 81       	ldd	r24, Y+5	; 0x05
    2e98:	9e 81       	ldd	r25, Y+6	; 0x06
    2e9a:	01 97       	sbiw	r24, 0x01	; 1
    2e9c:	9e 83       	std	Y+6, r25	; 0x06
    2e9e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ea0:	8d 81       	ldd	r24, Y+5	; 0x05
    2ea2:	9e 81       	ldd	r25, Y+6	; 0x06
    2ea4:	00 97       	sbiw	r24, 0x00	; 0
    2ea6:	69 f7       	brne	.-38     	; 0x2e82 <LCD_VidWrite4Data+0x350>
    2ea8:	14 c0       	rjmp	.+40     	; 0x2ed2 <LCD_VidWrite4Data+0x3a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2eaa:	6f 81       	ldd	r22, Y+7	; 0x07
    2eac:	78 85       	ldd	r23, Y+8	; 0x08
    2eae:	89 85       	ldd	r24, Y+9	; 0x09
    2eb0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2eb2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eb6:	dc 01       	movw	r26, r24
    2eb8:	cb 01       	movw	r24, r22
    2eba:	9e 83       	std	Y+6, r25	; 0x06
    2ebc:	8d 83       	std	Y+5, r24	; 0x05
    2ebe:	8d 81       	ldd	r24, Y+5	; 0x05
    2ec0:	9e 81       	ldd	r25, Y+6	; 0x06
    2ec2:	9a 83       	std	Y+2, r25	; 0x02
    2ec4:	89 83       	std	Y+1, r24	; 0x01
    2ec6:	89 81       	ldd	r24, Y+1	; 0x01
    2ec8:	9a 81       	ldd	r25, Y+2	; 0x02
    2eca:	01 97       	sbiw	r24, 0x01	; 1
    2ecc:	f1 f7       	brne	.-4      	; 0x2eca <LCD_VidWrite4Data+0x398>
    2ece:	9a 83       	std	Y+2, r25	; 0x02
    2ed0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    2ed2:	ab 96       	adiw	r28, 0x2b	; 43
    2ed4:	0f b6       	in	r0, 0x3f	; 63
    2ed6:	f8 94       	cli
    2ed8:	de bf       	out	0x3e, r29	; 62
    2eda:	0f be       	out	0x3f, r0	; 63
    2edc:	cd bf       	out	0x3d, r28	; 61
    2ede:	cf 91       	pop	r28
    2ee0:	df 91       	pop	r29
    2ee2:	08 95       	ret

00002ee4 <LCD_Write4String>:

void LCD_Write4String(u8* str,u8 row,u8 col)
{
    2ee4:	df 93       	push	r29
    2ee6:	cf 93       	push	r28
    2ee8:	00 d0       	rcall	.+0      	; 0x2eea <LCD_Write4String+0x6>
    2eea:	00 d0       	rcall	.+0      	; 0x2eec <LCD_Write4String+0x8>
    2eec:	00 d0       	rcall	.+0      	; 0x2eee <LCD_Write4String+0xa>
    2eee:	cd b7       	in	r28, 0x3d	; 61
    2ef0:	de b7       	in	r29, 0x3e	; 62
    2ef2:	9c 83       	std	Y+4, r25	; 0x04
    2ef4:	8b 83       	std	Y+3, r24	; 0x03
    2ef6:	6d 83       	std	Y+5, r22	; 0x05
    2ef8:	4e 83       	std	Y+6, r20	; 0x06
	LCD_GoToPosition(row,col);
    2efa:	8d 81       	ldd	r24, Y+5	; 0x05
    2efc:	6e 81       	ldd	r22, Y+6	; 0x06
    2efe:	0e 94 3a 18 	call	0x3074	; 0x3074 <LCD_GoToPosition>
	u8 index=0;
    2f02:	1a 82       	std	Y+2, r1	; 0x02
	u8 line0=0;
    2f04:	19 82       	std	Y+1, r1	; 0x01
    2f06:	8a c0       	rjmp	.+276    	; 0x301c <LCD_Write4String+0x138>
	while (str[index] !='\0' && ((row*16)+(col+index))<32)
	{
		if (((row*16)+(col+index))<16&&(line0==0))
    2f08:	8d 81       	ldd	r24, Y+5	; 0x05
    2f0a:	88 2f       	mov	r24, r24
    2f0c:	90 e0       	ldi	r25, 0x00	; 0
    2f0e:	ac 01       	movw	r20, r24
    2f10:	42 95       	swap	r20
    2f12:	52 95       	swap	r21
    2f14:	50 7f       	andi	r21, 0xF0	; 240
    2f16:	54 27       	eor	r21, r20
    2f18:	40 7f       	andi	r20, 0xF0	; 240
    2f1a:	54 27       	eor	r21, r20
    2f1c:	8e 81       	ldd	r24, Y+6	; 0x06
    2f1e:	28 2f       	mov	r18, r24
    2f20:	30 e0       	ldi	r19, 0x00	; 0
    2f22:	8a 81       	ldd	r24, Y+2	; 0x02
    2f24:	88 2f       	mov	r24, r24
    2f26:	90 e0       	ldi	r25, 0x00	; 0
    2f28:	82 0f       	add	r24, r18
    2f2a:	93 1f       	adc	r25, r19
    2f2c:	84 0f       	add	r24, r20
    2f2e:	95 1f       	adc	r25, r21
    2f30:	80 31       	cpi	r24, 0x10	; 16
    2f32:	91 05       	cpc	r25, r1
    2f34:	94 f4       	brge	.+36     	; 0x2f5a <LCD_Write4String+0x76>
    2f36:	89 81       	ldd	r24, Y+1	; 0x01
    2f38:	88 23       	and	r24, r24
    2f3a:	79 f4       	brne	.+30     	; 0x2f5a <LCD_Write4String+0x76>
		{
			LCD_VidWrite4Data(str[index]);
    2f3c:	8a 81       	ldd	r24, Y+2	; 0x02
    2f3e:	28 2f       	mov	r18, r24
    2f40:	30 e0       	ldi	r19, 0x00	; 0
    2f42:	8b 81       	ldd	r24, Y+3	; 0x03
    2f44:	9c 81       	ldd	r25, Y+4	; 0x04
    2f46:	fc 01       	movw	r30, r24
    2f48:	e2 0f       	add	r30, r18
    2f4a:	f3 1f       	adc	r31, r19
    2f4c:	80 81       	ld	r24, Z
    2f4e:	0e 94 99 15 	call	0x2b32	; 0x2b32 <LCD_VidWrite4Data>
			index++;
    2f52:	8a 81       	ldd	r24, Y+2	; 0x02
    2f54:	8f 5f       	subi	r24, 0xFF	; 255
    2f56:	8a 83       	std	Y+2, r24	; 0x02
    2f58:	61 c0       	rjmp	.+194    	; 0x301c <LCD_Write4String+0x138>
		}
		else if (((row*16)+(col+index))>=16&& ((row*16)+(col+index))<32 &&(line0==0))
    2f5a:	8d 81       	ldd	r24, Y+5	; 0x05
    2f5c:	88 2f       	mov	r24, r24
    2f5e:	90 e0       	ldi	r25, 0x00	; 0
    2f60:	ac 01       	movw	r20, r24
    2f62:	42 95       	swap	r20
    2f64:	52 95       	swap	r21
    2f66:	50 7f       	andi	r21, 0xF0	; 240
    2f68:	54 27       	eor	r21, r20
    2f6a:	40 7f       	andi	r20, 0xF0	; 240
    2f6c:	54 27       	eor	r21, r20
    2f6e:	8e 81       	ldd	r24, Y+6	; 0x06
    2f70:	28 2f       	mov	r18, r24
    2f72:	30 e0       	ldi	r19, 0x00	; 0
    2f74:	8a 81       	ldd	r24, Y+2	; 0x02
    2f76:	88 2f       	mov	r24, r24
    2f78:	90 e0       	ldi	r25, 0x00	; 0
    2f7a:	82 0f       	add	r24, r18
    2f7c:	93 1f       	adc	r25, r19
    2f7e:	84 0f       	add	r24, r20
    2f80:	95 1f       	adc	r25, r21
    2f82:	80 31       	cpi	r24, 0x10	; 16
    2f84:	91 05       	cpc	r25, r1
    2f86:	14 f1       	brlt	.+68     	; 0x2fcc <LCD_Write4String+0xe8>
    2f88:	8d 81       	ldd	r24, Y+5	; 0x05
    2f8a:	88 2f       	mov	r24, r24
    2f8c:	90 e0       	ldi	r25, 0x00	; 0
    2f8e:	ac 01       	movw	r20, r24
    2f90:	42 95       	swap	r20
    2f92:	52 95       	swap	r21
    2f94:	50 7f       	andi	r21, 0xF0	; 240
    2f96:	54 27       	eor	r21, r20
    2f98:	40 7f       	andi	r20, 0xF0	; 240
    2f9a:	54 27       	eor	r21, r20
    2f9c:	8e 81       	ldd	r24, Y+6	; 0x06
    2f9e:	28 2f       	mov	r18, r24
    2fa0:	30 e0       	ldi	r19, 0x00	; 0
    2fa2:	8a 81       	ldd	r24, Y+2	; 0x02
    2fa4:	88 2f       	mov	r24, r24
    2fa6:	90 e0       	ldi	r25, 0x00	; 0
    2fa8:	82 0f       	add	r24, r18
    2faa:	93 1f       	adc	r25, r19
    2fac:	84 0f       	add	r24, r20
    2fae:	95 1f       	adc	r25, r21
    2fb0:	80 32       	cpi	r24, 0x20	; 32
    2fb2:	91 05       	cpc	r25, r1
    2fb4:	5c f4       	brge	.+22     	; 0x2fcc <LCD_Write4String+0xe8>
    2fb6:	89 81       	ldd	r24, Y+1	; 0x01
    2fb8:	88 23       	and	r24, r24
    2fba:	41 f4       	brne	.+16     	; 0x2fcc <LCD_Write4String+0xe8>
		{
			LCD_GoToPosition(1,col);
    2fbc:	81 e0       	ldi	r24, 0x01	; 1
    2fbe:	6e 81       	ldd	r22, Y+6	; 0x06
    2fc0:	0e 94 3a 18 	call	0x3074	; 0x3074 <LCD_GoToPosition>
			line0++;
    2fc4:	89 81       	ldd	r24, Y+1	; 0x01
    2fc6:	8f 5f       	subi	r24, 0xFF	; 255
    2fc8:	89 83       	std	Y+1, r24	; 0x01
    2fca:	28 c0       	rjmp	.+80     	; 0x301c <LCD_Write4String+0x138>
		}
		else if (((row*16)+(col+index))<32&&(line0==1))
    2fcc:	8d 81       	ldd	r24, Y+5	; 0x05
    2fce:	88 2f       	mov	r24, r24
    2fd0:	90 e0       	ldi	r25, 0x00	; 0
    2fd2:	ac 01       	movw	r20, r24
    2fd4:	42 95       	swap	r20
    2fd6:	52 95       	swap	r21
    2fd8:	50 7f       	andi	r21, 0xF0	; 240
    2fda:	54 27       	eor	r21, r20
    2fdc:	40 7f       	andi	r20, 0xF0	; 240
    2fde:	54 27       	eor	r21, r20
    2fe0:	8e 81       	ldd	r24, Y+6	; 0x06
    2fe2:	28 2f       	mov	r18, r24
    2fe4:	30 e0       	ldi	r19, 0x00	; 0
    2fe6:	8a 81       	ldd	r24, Y+2	; 0x02
    2fe8:	88 2f       	mov	r24, r24
    2fea:	90 e0       	ldi	r25, 0x00	; 0
    2fec:	82 0f       	add	r24, r18
    2fee:	93 1f       	adc	r25, r19
    2ff0:	84 0f       	add	r24, r20
    2ff2:	95 1f       	adc	r25, r21
    2ff4:	80 32       	cpi	r24, 0x20	; 32
    2ff6:	91 05       	cpc	r25, r1
    2ff8:	8c f4       	brge	.+34     	; 0x301c <LCD_Write4String+0x138>
    2ffa:	89 81       	ldd	r24, Y+1	; 0x01
    2ffc:	81 30       	cpi	r24, 0x01	; 1
    2ffe:	71 f4       	brne	.+28     	; 0x301c <LCD_Write4String+0x138>
		{
			LCD_VidWrite4Data(str[index]);
    3000:	8a 81       	ldd	r24, Y+2	; 0x02
    3002:	28 2f       	mov	r18, r24
    3004:	30 e0       	ldi	r19, 0x00	; 0
    3006:	8b 81       	ldd	r24, Y+3	; 0x03
    3008:	9c 81       	ldd	r25, Y+4	; 0x04
    300a:	fc 01       	movw	r30, r24
    300c:	e2 0f       	add	r30, r18
    300e:	f3 1f       	adc	r31, r19
    3010:	80 81       	ld	r24, Z
    3012:	0e 94 99 15 	call	0x2b32	; 0x2b32 <LCD_VidWrite4Data>
			index++;
    3016:	8a 81       	ldd	r24, Y+2	; 0x02
    3018:	8f 5f       	subi	r24, 0xFF	; 255
    301a:	8a 83       	std	Y+2, r24	; 0x02
void LCD_Write4String(u8* str,u8 row,u8 col)
{
	LCD_GoToPosition(row,col);
	u8 index=0;
	u8 line0=0;
	while (str[index] !='\0' && ((row*16)+(col+index))<32)
    301c:	8a 81       	ldd	r24, Y+2	; 0x02
    301e:	28 2f       	mov	r18, r24
    3020:	30 e0       	ldi	r19, 0x00	; 0
    3022:	8b 81       	ldd	r24, Y+3	; 0x03
    3024:	9c 81       	ldd	r25, Y+4	; 0x04
    3026:	fc 01       	movw	r30, r24
    3028:	e2 0f       	add	r30, r18
    302a:	f3 1f       	adc	r31, r19
    302c:	80 81       	ld	r24, Z
    302e:	88 23       	and	r24, r24
    3030:	c1 f0       	breq	.+48     	; 0x3062 <LCD_Write4String+0x17e>
    3032:	8d 81       	ldd	r24, Y+5	; 0x05
    3034:	88 2f       	mov	r24, r24
    3036:	90 e0       	ldi	r25, 0x00	; 0
    3038:	ac 01       	movw	r20, r24
    303a:	42 95       	swap	r20
    303c:	52 95       	swap	r21
    303e:	50 7f       	andi	r21, 0xF0	; 240
    3040:	54 27       	eor	r21, r20
    3042:	40 7f       	andi	r20, 0xF0	; 240
    3044:	54 27       	eor	r21, r20
    3046:	8e 81       	ldd	r24, Y+6	; 0x06
    3048:	28 2f       	mov	r18, r24
    304a:	30 e0       	ldi	r19, 0x00	; 0
    304c:	8a 81       	ldd	r24, Y+2	; 0x02
    304e:	88 2f       	mov	r24, r24
    3050:	90 e0       	ldi	r25, 0x00	; 0
    3052:	82 0f       	add	r24, r18
    3054:	93 1f       	adc	r25, r19
    3056:	84 0f       	add	r24, r20
    3058:	95 1f       	adc	r25, r21
    305a:	80 32       	cpi	r24, 0x20	; 32
    305c:	91 05       	cpc	r25, r1
    305e:	0c f4       	brge	.+2      	; 0x3062 <LCD_Write4String+0x17e>
    3060:	53 cf       	rjmp	.-346    	; 0x2f08 <LCD_Write4String+0x24>
			LCD_VidWrite4Data(str[index]);
			index++;
		}
	}

}
    3062:	26 96       	adiw	r28, 0x06	; 6
    3064:	0f b6       	in	r0, 0x3f	; 63
    3066:	f8 94       	cli
    3068:	de bf       	out	0x3e, r29	; 62
    306a:	0f be       	out	0x3f, r0	; 63
    306c:	cd bf       	out	0x3d, r28	; 61
    306e:	cf 91       	pop	r28
    3070:	df 91       	pop	r29
    3072:	08 95       	ret

00003074 <LCD_GoToPosition>:

void LCD_GoToPosition(u8 row,u8 col)
{
    3074:	df 93       	push	r29
    3076:	cf 93       	push	r28
    3078:	00 d0       	rcall	.+0      	; 0x307a <LCD_GoToPosition+0x6>
    307a:	0f 92       	push	r0
    307c:	cd b7       	in	r28, 0x3d	; 61
    307e:	de b7       	in	r29, 0x3e	; 62
    3080:	8a 83       	std	Y+2, r24	; 0x02
    3082:	6b 83       	std	Y+3, r22	; 0x03
	u8 adress;
	adress= (row*0x40)+col;
    3084:	8a 81       	ldd	r24, Y+2	; 0x02
    3086:	88 2f       	mov	r24, r24
    3088:	90 e0       	ldi	r25, 0x00	; 0
    308a:	00 24       	eor	r0, r0
    308c:	96 95       	lsr	r25
    308e:	87 95       	ror	r24
    3090:	07 94       	ror	r0
    3092:	96 95       	lsr	r25
    3094:	87 95       	ror	r24
    3096:	07 94       	ror	r0
    3098:	98 2f       	mov	r25, r24
    309a:	80 2d       	mov	r24, r0
    309c:	98 2f       	mov	r25, r24
    309e:	8b 81       	ldd	r24, Y+3	; 0x03
    30a0:	89 0f       	add	r24, r25
    30a2:	89 83       	std	Y+1, r24	; 0x01
	adress =SET_BIT(adress,7);
    30a4:	89 81       	ldd	r24, Y+1	; 0x01
    30a6:	80 68       	ori	r24, 0x80	; 128
    30a8:	89 83       	std	Y+1, r24	; 0x01
	LCD_VidWrite4Cmd(adress);
    30aa:	89 81       	ldd	r24, Y+1	; 0x01
    30ac:	0e 94 a3 12 	call	0x2546	; 0x2546 <LCD_VidWrite4Cmd>
}
    30b0:	0f 90       	pop	r0
    30b2:	0f 90       	pop	r0
    30b4:	0f 90       	pop	r0
    30b6:	cf 91       	pop	r28
    30b8:	df 91       	pop	r29
    30ba:	08 95       	ret

000030bc <LCD_VidDisp4Number>:

void LCD_VidDisp4Number(u32 number)
{
    30bc:	df 93       	push	r29
    30be:	cf 93       	push	r28
    30c0:	cd b7       	in	r28, 0x3d	; 61
    30c2:	de b7       	in	r29, 0x3e	; 62
    30c4:	68 97       	sbiw	r28, 0x18	; 24
    30c6:	0f b6       	in	r0, 0x3f	; 63
    30c8:	f8 94       	cli
    30ca:	de bf       	out	0x3e, r29	; 62
    30cc:	0f be       	out	0x3f, r0	; 63
    30ce:	cd bf       	out	0x3d, r28	; 61
    30d0:	6d 8b       	std	Y+21, r22	; 0x15
    30d2:	7e 8b       	std	Y+22, r23	; 0x16
    30d4:	8f 8b       	std	Y+23, r24	; 0x17
    30d6:	98 8f       	std	Y+24, r25	; 0x18

	u32 digit=0;
    30d8:	1f 82       	std	Y+7, r1	; 0x07
    30da:	18 86       	std	Y+8, r1	; 0x08
    30dc:	19 86       	std	Y+9, r1	; 0x09
    30de:	1a 86       	std	Y+10, r1	; 0x0a
	u16 i=0;
    30e0:	1e 82       	std	Y+6, r1	; 0x06
    30e2:	1d 82       	std	Y+5, r1	; 0x05
	u32 f=0;
    30e4:	19 82       	std	Y+1, r1	; 0x01
    30e6:	1a 82       	std	Y+2, r1	; 0x02
    30e8:	1b 82       	std	Y+3, r1	; 0x03
    30ea:	1c 82       	std	Y+4, r1	; 0x04
    30ec:	45 c0       	rjmp	.+138    	; 0x3178 <LCD_VidDisp4Number+0xbc>
	u8 number_holder[10];

	while(number>0)
	{
		f=number%10;
    30ee:	8d 89       	ldd	r24, Y+21	; 0x15
    30f0:	9e 89       	ldd	r25, Y+22	; 0x16
    30f2:	af 89       	ldd	r26, Y+23	; 0x17
    30f4:	b8 8d       	ldd	r27, Y+24	; 0x18
    30f6:	2a e0       	ldi	r18, 0x0A	; 10
    30f8:	30 e0       	ldi	r19, 0x00	; 0
    30fa:	40 e0       	ldi	r20, 0x00	; 0
    30fc:	50 e0       	ldi	r21, 0x00	; 0
    30fe:	bc 01       	movw	r22, r24
    3100:	cd 01       	movw	r24, r26
    3102:	0e 94 6b 1a 	call	0x34d6	; 0x34d6 <__udivmodsi4>
    3106:	dc 01       	movw	r26, r24
    3108:	cb 01       	movw	r24, r22
    310a:	89 83       	std	Y+1, r24	; 0x01
    310c:	9a 83       	std	Y+2, r25	; 0x02
    310e:	ab 83       	std	Y+3, r26	; 0x03
    3110:	bc 83       	std	Y+4, r27	; 0x04
		number_holder[i]=f;
    3112:	2d 81       	ldd	r18, Y+5	; 0x05
    3114:	3e 81       	ldd	r19, Y+6	; 0x06
    3116:	49 81       	ldd	r20, Y+1	; 0x01
    3118:	ce 01       	movw	r24, r28
    311a:	0b 96       	adiw	r24, 0x0b	; 11
    311c:	fc 01       	movw	r30, r24
    311e:	e2 0f       	add	r30, r18
    3120:	f3 1f       	adc	r31, r19
    3122:	40 83       	st	Z, r20
		number=number/10;
    3124:	8d 89       	ldd	r24, Y+21	; 0x15
    3126:	9e 89       	ldd	r25, Y+22	; 0x16
    3128:	af 89       	ldd	r26, Y+23	; 0x17
    312a:	b8 8d       	ldd	r27, Y+24	; 0x18
    312c:	2a e0       	ldi	r18, 0x0A	; 10
    312e:	30 e0       	ldi	r19, 0x00	; 0
    3130:	40 e0       	ldi	r20, 0x00	; 0
    3132:	50 e0       	ldi	r21, 0x00	; 0
    3134:	bc 01       	movw	r22, r24
    3136:	cd 01       	movw	r24, r26
    3138:	0e 94 6b 1a 	call	0x34d6	; 0x34d6 <__udivmodsi4>
    313c:	da 01       	movw	r26, r20
    313e:	c9 01       	movw	r24, r18
    3140:	8d 8b       	std	Y+21, r24	; 0x15
    3142:	9e 8b       	std	Y+22, r25	; 0x16
    3144:	af 8b       	std	Y+23, r26	; 0x17
    3146:	b8 8f       	std	Y+24, r27	; 0x18
		i++;
    3148:	8d 81       	ldd	r24, Y+5	; 0x05
    314a:	9e 81       	ldd	r25, Y+6	; 0x06
    314c:	01 96       	adiw	r24, 0x01	; 1
    314e:	9e 83       	std	Y+6, r25	; 0x06
    3150:	8d 83       	std	Y+5, r24	; 0x05
		digit++;
    3152:	8f 81       	ldd	r24, Y+7	; 0x07
    3154:	98 85       	ldd	r25, Y+8	; 0x08
    3156:	a9 85       	ldd	r26, Y+9	; 0x09
    3158:	ba 85       	ldd	r27, Y+10	; 0x0a
    315a:	01 96       	adiw	r24, 0x01	; 1
    315c:	a1 1d       	adc	r26, r1
    315e:	b1 1d       	adc	r27, r1
    3160:	8f 83       	std	Y+7, r24	; 0x07
    3162:	98 87       	std	Y+8, r25	; 0x08
    3164:	a9 87       	std	Y+9, r26	; 0x09
    3166:	ba 87       	std	Y+10, r27	; 0x0a
		if(number==0)
    3168:	8d 89       	ldd	r24, Y+21	; 0x15
    316a:	9e 89       	ldd	r25, Y+22	; 0x16
    316c:	af 89       	ldd	r26, Y+23	; 0x17
    316e:	b8 8d       	ldd	r27, Y+24	; 0x18
    3170:	00 97       	sbiw	r24, 0x00	; 0
    3172:	a1 05       	cpc	r26, r1
    3174:	b1 05       	cpc	r27, r1
    3176:	49 f0       	breq	.+18     	; 0x318a <LCD_VidDisp4Number+0xce>
	u32 digit=0;
	u16 i=0;
	u32 f=0;
	u8 number_holder[10];

	while(number>0)
    3178:	8d 89       	ldd	r24, Y+21	; 0x15
    317a:	9e 89       	ldd	r25, Y+22	; 0x16
    317c:	af 89       	ldd	r26, Y+23	; 0x17
    317e:	b8 8d       	ldd	r27, Y+24	; 0x18
    3180:	00 97       	sbiw	r24, 0x00	; 0
    3182:	a1 05       	cpc	r26, r1
    3184:	b1 05       	cpc	r27, r1
    3186:	09 f0       	breq	.+2      	; 0x318a <LCD_VidDisp4Number+0xce>
    3188:	b2 cf       	rjmp	.-156    	; 0x30ee <LCD_VidDisp4Number+0x32>
		i++;
		digit++;
		if(number==0)
		{break;}
	}
	for(i=digit;i>0;i--)
    318a:	8f 81       	ldd	r24, Y+7	; 0x07
    318c:	98 85       	ldd	r25, Y+8	; 0x08
    318e:	9e 83       	std	Y+6, r25	; 0x06
    3190:	8d 83       	std	Y+5, r24	; 0x05
    3192:	13 c0       	rjmp	.+38     	; 0x31ba <LCD_VidDisp4Number+0xfe>
	{
		LCD_VidWrite4Data(number_holder[i-1]+48);
    3194:	8d 81       	ldd	r24, Y+5	; 0x05
    3196:	9e 81       	ldd	r25, Y+6	; 0x06
    3198:	9c 01       	movw	r18, r24
    319a:	21 50       	subi	r18, 0x01	; 1
    319c:	30 40       	sbci	r19, 0x00	; 0
    319e:	ce 01       	movw	r24, r28
    31a0:	0b 96       	adiw	r24, 0x0b	; 11
    31a2:	fc 01       	movw	r30, r24
    31a4:	e2 0f       	add	r30, r18
    31a6:	f3 1f       	adc	r31, r19
    31a8:	80 81       	ld	r24, Z
    31aa:	80 5d       	subi	r24, 0xD0	; 208
    31ac:	0e 94 99 15 	call	0x2b32	; 0x2b32 <LCD_VidWrite4Data>
		i++;
		digit++;
		if(number==0)
		{break;}
	}
	for(i=digit;i>0;i--)
    31b0:	8d 81       	ldd	r24, Y+5	; 0x05
    31b2:	9e 81       	ldd	r25, Y+6	; 0x06
    31b4:	01 97       	sbiw	r24, 0x01	; 1
    31b6:	9e 83       	std	Y+6, r25	; 0x06
    31b8:	8d 83       	std	Y+5, r24	; 0x05
    31ba:	8d 81       	ldd	r24, Y+5	; 0x05
    31bc:	9e 81       	ldd	r25, Y+6	; 0x06
    31be:	00 97       	sbiw	r24, 0x00	; 0
    31c0:	49 f7       	brne	.-46     	; 0x3194 <LCD_VidDisp4Number+0xd8>
	{
		LCD_VidWrite4Data(number_holder[i-1]+48);
	}

}
    31c2:	68 96       	adiw	r28, 0x18	; 24
    31c4:	0f b6       	in	r0, 0x3f	; 63
    31c6:	f8 94       	cli
    31c8:	de bf       	out	0x3e, r29	; 62
    31ca:	0f be       	out	0x3f, r0	; 63
    31cc:	cd bf       	out	0x3d, r28	; 61
    31ce:	cf 91       	pop	r28
    31d0:	df 91       	pop	r29
    31d2:	08 95       	ret

000031d4 <LCD_StoreCustomChr>:


void LCD_StoreCustomChr(u8* LOC_pattern, u8 LOC_CGRAM_Index)
{
    31d4:	df 93       	push	r29
    31d6:	cf 93       	push	r28
    31d8:	00 d0       	rcall	.+0      	; 0x31da <LCD_StoreCustomChr+0x6>
    31da:	00 d0       	rcall	.+0      	; 0x31dc <LCD_StoreCustomChr+0x8>
    31dc:	0f 92       	push	r0
    31de:	cd b7       	in	r28, 0x3d	; 61
    31e0:	de b7       	in	r29, 0x3e	; 62
    31e2:	9c 83       	std	Y+4, r25	; 0x04
    31e4:	8b 83       	std	Y+3, r24	; 0x03
    31e6:	6d 83       	std	Y+5, r22	; 0x05
	u8 LOC_Adress;
	u8 LOC_Adress_Index;
	if(LOC_CGRAM_Index < 8)
    31e8:	8d 81       	ldd	r24, Y+5	; 0x05
    31ea:	88 30       	cpi	r24, 0x08	; 8
    31ec:	18 f5       	brcc	.+70     	; 0x3234 <LCD_StoreCustomChr+0x60>
	{
		LOC_Adress = LOC_CGRAM_Index *8;
    31ee:	8d 81       	ldd	r24, Y+5	; 0x05
    31f0:	88 2f       	mov	r24, r24
    31f2:	90 e0       	ldi	r25, 0x00	; 0
    31f4:	88 0f       	add	r24, r24
    31f6:	99 1f       	adc	r25, r25
    31f8:	88 0f       	add	r24, r24
    31fa:	99 1f       	adc	r25, r25
    31fc:	88 0f       	add	r24, r24
    31fe:	99 1f       	adc	r25, r25
    3200:	8a 83       	std	Y+2, r24	; 0x02
		LOC_Adress = SET_BIT(LOC_Adress,6);
    3202:	8a 81       	ldd	r24, Y+2	; 0x02
    3204:	80 64       	ori	r24, 0x40	; 64
    3206:	8a 83       	std	Y+2, r24	; 0x02
		LCD_VidWrite4Cmd(LOC_Adress);
    3208:	8a 81       	ldd	r24, Y+2	; 0x02
    320a:	0e 94 a3 12 	call	0x2546	; 0x2546 <LCD_VidWrite4Cmd>
		for(LOC_Adress_Index=0;LOC_Adress_Index<8;LOC_Adress_Index++)
    320e:	19 82       	std	Y+1, r1	; 0x01
    3210:	0e c0       	rjmp	.+28     	; 0x322e <LCD_StoreCustomChr+0x5a>
		{
			LCD_VidWrite4Data(LOC_pattern[LOC_Adress_Index]);
    3212:	89 81       	ldd	r24, Y+1	; 0x01
    3214:	28 2f       	mov	r18, r24
    3216:	30 e0       	ldi	r19, 0x00	; 0
    3218:	8b 81       	ldd	r24, Y+3	; 0x03
    321a:	9c 81       	ldd	r25, Y+4	; 0x04
    321c:	fc 01       	movw	r30, r24
    321e:	e2 0f       	add	r30, r18
    3220:	f3 1f       	adc	r31, r19
    3222:	80 81       	ld	r24, Z
    3224:	0e 94 99 15 	call	0x2b32	; 0x2b32 <LCD_VidWrite4Data>
	if(LOC_CGRAM_Index < 8)
	{
		LOC_Adress = LOC_CGRAM_Index *8;
		LOC_Adress = SET_BIT(LOC_Adress,6);
		LCD_VidWrite4Cmd(LOC_Adress);
		for(LOC_Adress_Index=0;LOC_Adress_Index<8;LOC_Adress_Index++)
    3228:	89 81       	ldd	r24, Y+1	; 0x01
    322a:	8f 5f       	subi	r24, 0xFF	; 255
    322c:	89 83       	std	Y+1, r24	; 0x01
    322e:	89 81       	ldd	r24, Y+1	; 0x01
    3230:	88 30       	cpi	r24, 0x08	; 8
    3232:	78 f3       	brcs	.-34     	; 0x3212 <LCD_StoreCustomChr+0x3e>
		{
			LCD_VidWrite4Data(LOC_pattern[LOC_Adress_Index]);
		}
	}

	LCD_VidWrite4Cmd(RETURN_HOME);
    3234:	82 e0       	ldi	r24, 0x02	; 2
    3236:	0e 94 a3 12 	call	0x2546	; 0x2546 <LCD_VidWrite4Cmd>

}
    323a:	0f 90       	pop	r0
    323c:	0f 90       	pop	r0
    323e:	0f 90       	pop	r0
    3240:	0f 90       	pop	r0
    3242:	0f 90       	pop	r0
    3244:	cf 91       	pop	r28
    3246:	df 91       	pop	r29
    3248:	08 95       	ret

0000324a <LCD_Disply>:

void LCD_Disply(u8 LOC_CGRAM_Index,u8 LOC_row,u8 LOC_col)
{
    324a:	df 93       	push	r29
    324c:	cf 93       	push	r28
    324e:	00 d0       	rcall	.+0      	; 0x3250 <LCD_Disply+0x6>
    3250:	0f 92       	push	r0
    3252:	cd b7       	in	r28, 0x3d	; 61
    3254:	de b7       	in	r29, 0x3e	; 62
    3256:	89 83       	std	Y+1, r24	; 0x01
    3258:	6a 83       	std	Y+2, r22	; 0x02
    325a:	4b 83       	std	Y+3, r20	; 0x03
	LCD_GoToPosition(LOC_row,LOC_col);
    325c:	8a 81       	ldd	r24, Y+2	; 0x02
    325e:	6b 81       	ldd	r22, Y+3	; 0x03
    3260:	0e 94 3a 18 	call	0x3074	; 0x3074 <LCD_GoToPosition>

	LCD_VidWrite4Data(LOC_CGRAM_Index);
    3264:	89 81       	ldd	r24, Y+1	; 0x01
    3266:	0e 94 99 15 	call	0x2b32	; 0x2b32 <LCD_VidWrite4Data>

}
    326a:	0f 90       	pop	r0
    326c:	0f 90       	pop	r0
    326e:	0f 90       	pop	r0
    3270:	cf 91       	pop	r28
    3272:	df 91       	pop	r29
    3274:	08 95       	ret

00003276 <KeyPad_VidInit>:
#include "../../MCAL/DIO/DIO_Interface.h"
#include "../../MCAL/DIO/DIO_Register.h"


void KeyPad_VidInit(u8 LOC_u8Port)
{
    3276:	df 93       	push	r29
    3278:	cf 93       	push	r28
    327a:	0f 92       	push	r0
    327c:	cd b7       	in	r28, 0x3d	; 61
    327e:	de b7       	in	r29, 0x3e	; 62
    3280:	89 83       	std	Y+1, r24	; 0x01
	DIO_VidSetPortDirection(LOC_u8Port,0x0f);
    3282:	89 81       	ldd	r24, Y+1	; 0x01
    3284:	6f e0       	ldi	r22, 0x0F	; 15
    3286:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <DIO_VidSetPortDirection>
	DIO_VidSetPortValue(LOC_u8Port,0xff);
    328a:	89 81       	ldd	r24, Y+1	; 0x01
    328c:	6f ef       	ldi	r22, 0xFF	; 255
    328e:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <DIO_VidSetPortValue>
}
    3292:	0f 90       	pop	r0
    3294:	cf 91       	pop	r28
    3296:	df 91       	pop	r29
    3298:	08 95       	ret

0000329a <GetPressedKey>:

u8 GetPressedKey(u8 LOC_u8Port)
{
    329a:	df 93       	push	r29
    329c:	cf 93       	push	r28
    329e:	cd b7       	in	r28, 0x3d	; 61
    32a0:	de b7       	in	r29, 0x3e	; 62
    32a2:	a7 97       	sbiw	r28, 0x27	; 39
    32a4:	0f b6       	in	r0, 0x3f	; 63
    32a6:	f8 94       	cli
    32a8:	de bf       	out	0x3e, r29	; 62
    32aa:	0f be       	out	0x3f, r0	; 63
    32ac:	cd bf       	out	0x3d, r28	; 61
    32ae:	8a a3       	std	Y+34, r24	; 0x22
	u8 KeyOut=-1;
    32b0:	8f ef       	ldi	r24, 0xFF	; 255
    32b2:	89 8b       	std	Y+17, r24	; 0x11
	u8 COL;
	u8 KEY_NUM[4][4]={			{1 ,2 ,3 ,11 },
								{4 ,5 ,6 ,12 },
								{7 ,8 ,9 ,13 },
								{16,0 ,15,14 }
					 };
    32b4:	ce 01       	movw	r24, r28
    32b6:	42 96       	adiw	r24, 0x12	; 18
    32b8:	9c a3       	std	Y+36, r25	; 0x24
    32ba:	8b a3       	std	Y+35, r24	; 0x23
    32bc:	e8 e6       	ldi	r30, 0x68	; 104
    32be:	f1 e0       	ldi	r31, 0x01	; 1
    32c0:	fe a3       	std	Y+38, r31	; 0x26
    32c2:	ed a3       	std	Y+37, r30	; 0x25
    32c4:	f0 e1       	ldi	r31, 0x10	; 16
    32c6:	ff a3       	std	Y+39, r31	; 0x27
    32c8:	ed a1       	ldd	r30, Y+37	; 0x25
    32ca:	fe a1       	ldd	r31, Y+38	; 0x26
    32cc:	00 80       	ld	r0, Z
    32ce:	8d a1       	ldd	r24, Y+37	; 0x25
    32d0:	9e a1       	ldd	r25, Y+38	; 0x26
    32d2:	01 96       	adiw	r24, 0x01	; 1
    32d4:	9e a3       	std	Y+38, r25	; 0x26
    32d6:	8d a3       	std	Y+37, r24	; 0x25
    32d8:	eb a1       	ldd	r30, Y+35	; 0x23
    32da:	fc a1       	ldd	r31, Y+36	; 0x24
    32dc:	00 82       	st	Z, r0
    32de:	8b a1       	ldd	r24, Y+35	; 0x23
    32e0:	9c a1       	ldd	r25, Y+36	; 0x24
    32e2:	01 96       	adiw	r24, 0x01	; 1
    32e4:	9c a3       	std	Y+36, r25	; 0x24
    32e6:	8b a3       	std	Y+35, r24	; 0x23
    32e8:	9f a1       	ldd	r25, Y+39	; 0x27
    32ea:	91 50       	subi	r25, 0x01	; 1
    32ec:	9f a3       	std	Y+39, r25	; 0x27
    32ee:	ef a1       	ldd	r30, Y+39	; 0x27
    32f0:	ee 23       	and	r30, r30
    32f2:	51 f7       	brne	.-44     	; 0x32c8 <GetPressedKey+0x2e>
	
	
	for (COL=0;COL<4;COL++)
    32f4:	1f 86       	std	Y+15, r1	; 0x0f
    32f6:	ad c0       	rjmp	.+346    	; 0x3452 <GetPressedKey+0x1b8>
	{
		DIO_VidSetPinValue(LOC_u8Port,COL,LOW);
    32f8:	8a a1       	ldd	r24, Y+34	; 0x22
    32fa:	6f 85       	ldd	r22, Y+15	; 0x0f
    32fc:	40 e0       	ldi	r20, 0x00	; 0
    32fe:	0e 94 b7 0c 	call	0x196e	; 0x196e <DIO_VidSetPinValue>
		for (ROW=4;ROW<8;ROW++)
    3302:	84 e0       	ldi	r24, 0x04	; 4
    3304:	88 8b       	std	Y+16, r24	; 0x10
    3306:	99 c0       	rjmp	.+306    	; 0x343a <GetPressedKey+0x1a0>
		{
			if (DIO_u8GitPinValue(LOC_u8Port,ROW)==0)
    3308:	8a a1       	ldd	r24, Y+34	; 0x22
    330a:	68 89       	ldd	r22, Y+16	; 0x10
    330c:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <DIO_u8GitPinValue>
    3310:	88 23       	and	r24, r24
    3312:	09 f0       	breq	.+2      	; 0x3316 <GetPressedKey+0x7c>
    3314:	8f c0       	rjmp	.+286    	; 0x3434 <GetPressedKey+0x19a>
			{
				KeyOut=KEY_NUM[ROW-4][COL];
    3316:	88 89       	ldd	r24, Y+16	; 0x10
    3318:	88 2f       	mov	r24, r24
    331a:	90 e0       	ldi	r25, 0x00	; 0
    331c:	9c 01       	movw	r18, r24
    331e:	24 50       	subi	r18, 0x04	; 4
    3320:	30 40       	sbci	r19, 0x00	; 0
    3322:	8f 85       	ldd	r24, Y+15	; 0x0f
    3324:	48 2f       	mov	r20, r24
    3326:	50 e0       	ldi	r21, 0x00	; 0
    3328:	22 0f       	add	r18, r18
    332a:	33 1f       	adc	r19, r19
    332c:	22 0f       	add	r18, r18
    332e:	33 1f       	adc	r19, r19
    3330:	ce 01       	movw	r24, r28
    3332:	01 96       	adiw	r24, 0x01	; 1
    3334:	82 0f       	add	r24, r18
    3336:	93 1f       	adc	r25, r19
    3338:	84 0f       	add	r24, r20
    333a:	95 1f       	adc	r25, r21
    333c:	fc 01       	movw	r30, r24
    333e:	71 96       	adiw	r30, 0x11	; 17
    3340:	80 81       	ld	r24, Z
    3342:	89 8b       	std	Y+17, r24	; 0x11
				while (DIO_u8GitPinValue(LOC_u8Port,ROW)==0){}
    3344:	8a a1       	ldd	r24, Y+34	; 0x22
    3346:	68 89       	ldd	r22, Y+16	; 0x10
    3348:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <DIO_u8GitPinValue>
    334c:	88 23       	and	r24, r24
    334e:	d1 f3       	breq	.-12     	; 0x3344 <GetPressedKey+0xaa>
    3350:	80 e0       	ldi	r24, 0x00	; 0
    3352:	90 e0       	ldi	r25, 0x00	; 0
    3354:	a8 e4       	ldi	r26, 0x48	; 72
    3356:	b2 e4       	ldi	r27, 0x42	; 66
    3358:	8b 87       	std	Y+11, r24	; 0x0b
    335a:	9c 87       	std	Y+12, r25	; 0x0c
    335c:	ad 87       	std	Y+13, r26	; 0x0d
    335e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3360:	6b 85       	ldd	r22, Y+11	; 0x0b
    3362:	7c 85       	ldd	r23, Y+12	; 0x0c
    3364:	8d 85       	ldd	r24, Y+13	; 0x0d
    3366:	9e 85       	ldd	r25, Y+14	; 0x0e
    3368:	20 e0       	ldi	r18, 0x00	; 0
    336a:	30 e0       	ldi	r19, 0x00	; 0
    336c:	4a ef       	ldi	r20, 0xFA	; 250
    336e:	54 e4       	ldi	r21, 0x44	; 68
    3370:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3374:	dc 01       	movw	r26, r24
    3376:	cb 01       	movw	r24, r22
    3378:	8f 83       	std	Y+7, r24	; 0x07
    337a:	98 87       	std	Y+8, r25	; 0x08
    337c:	a9 87       	std	Y+9, r26	; 0x09
    337e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3380:	6f 81       	ldd	r22, Y+7	; 0x07
    3382:	78 85       	ldd	r23, Y+8	; 0x08
    3384:	89 85       	ldd	r24, Y+9	; 0x09
    3386:	9a 85       	ldd	r25, Y+10	; 0x0a
    3388:	20 e0       	ldi	r18, 0x00	; 0
    338a:	30 e0       	ldi	r19, 0x00	; 0
    338c:	40 e8       	ldi	r20, 0x80	; 128
    338e:	5f e3       	ldi	r21, 0x3F	; 63
    3390:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3394:	88 23       	and	r24, r24
    3396:	2c f4       	brge	.+10     	; 0x33a2 <GetPressedKey+0x108>
		__ticks = 1;
    3398:	81 e0       	ldi	r24, 0x01	; 1
    339a:	90 e0       	ldi	r25, 0x00	; 0
    339c:	9e 83       	std	Y+6, r25	; 0x06
    339e:	8d 83       	std	Y+5, r24	; 0x05
    33a0:	3f c0       	rjmp	.+126    	; 0x3420 <GetPressedKey+0x186>
	else if (__tmp > 65535)
    33a2:	6f 81       	ldd	r22, Y+7	; 0x07
    33a4:	78 85       	ldd	r23, Y+8	; 0x08
    33a6:	89 85       	ldd	r24, Y+9	; 0x09
    33a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    33aa:	20 e0       	ldi	r18, 0x00	; 0
    33ac:	3f ef       	ldi	r19, 0xFF	; 255
    33ae:	4f e7       	ldi	r20, 0x7F	; 127
    33b0:	57 e4       	ldi	r21, 0x47	; 71
    33b2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    33b6:	18 16       	cp	r1, r24
    33b8:	4c f5       	brge	.+82     	; 0x340c <GetPressedKey+0x172>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    33bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    33be:	8d 85       	ldd	r24, Y+13	; 0x0d
    33c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    33c2:	20 e0       	ldi	r18, 0x00	; 0
    33c4:	30 e0       	ldi	r19, 0x00	; 0
    33c6:	40 e2       	ldi	r20, 0x20	; 32
    33c8:	51 e4       	ldi	r21, 0x41	; 65
    33ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33ce:	dc 01       	movw	r26, r24
    33d0:	cb 01       	movw	r24, r22
    33d2:	bc 01       	movw	r22, r24
    33d4:	cd 01       	movw	r24, r26
    33d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33da:	dc 01       	movw	r26, r24
    33dc:	cb 01       	movw	r24, r22
    33de:	9e 83       	std	Y+6, r25	; 0x06
    33e0:	8d 83       	std	Y+5, r24	; 0x05
    33e2:	0f c0       	rjmp	.+30     	; 0x3402 <GetPressedKey+0x168>
    33e4:	88 ec       	ldi	r24, 0xC8	; 200
    33e6:	90 e0       	ldi	r25, 0x00	; 0
    33e8:	9c 83       	std	Y+4, r25	; 0x04
    33ea:	8b 83       	std	Y+3, r24	; 0x03
    33ec:	8b 81       	ldd	r24, Y+3	; 0x03
    33ee:	9c 81       	ldd	r25, Y+4	; 0x04
    33f0:	01 97       	sbiw	r24, 0x01	; 1
    33f2:	f1 f7       	brne	.-4      	; 0x33f0 <GetPressedKey+0x156>
    33f4:	9c 83       	std	Y+4, r25	; 0x04
    33f6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33f8:	8d 81       	ldd	r24, Y+5	; 0x05
    33fa:	9e 81       	ldd	r25, Y+6	; 0x06
    33fc:	01 97       	sbiw	r24, 0x01	; 1
    33fe:	9e 83       	std	Y+6, r25	; 0x06
    3400:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3402:	8d 81       	ldd	r24, Y+5	; 0x05
    3404:	9e 81       	ldd	r25, Y+6	; 0x06
    3406:	00 97       	sbiw	r24, 0x00	; 0
    3408:	69 f7       	brne	.-38     	; 0x33e4 <GetPressedKey+0x14a>
    340a:	14 c0       	rjmp	.+40     	; 0x3434 <GetPressedKey+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    340c:	6f 81       	ldd	r22, Y+7	; 0x07
    340e:	78 85       	ldd	r23, Y+8	; 0x08
    3410:	89 85       	ldd	r24, Y+9	; 0x09
    3412:	9a 85       	ldd	r25, Y+10	; 0x0a
    3414:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3418:	dc 01       	movw	r26, r24
    341a:	cb 01       	movw	r24, r22
    341c:	9e 83       	std	Y+6, r25	; 0x06
    341e:	8d 83       	std	Y+5, r24	; 0x05
    3420:	8d 81       	ldd	r24, Y+5	; 0x05
    3422:	9e 81       	ldd	r25, Y+6	; 0x06
    3424:	9a 83       	std	Y+2, r25	; 0x02
    3426:	89 83       	std	Y+1, r24	; 0x01
    3428:	89 81       	ldd	r24, Y+1	; 0x01
    342a:	9a 81       	ldd	r25, Y+2	; 0x02
    342c:	01 97       	sbiw	r24, 0x01	; 1
    342e:	f1 f7       	brne	.-4      	; 0x342c <GetPressedKey+0x192>
    3430:	9a 83       	std	Y+2, r25	; 0x02
    3432:	89 83       	std	Y+1, r24	; 0x01
	
	
	for (COL=0;COL<4;COL++)
	{
		DIO_VidSetPinValue(LOC_u8Port,COL,LOW);
		for (ROW=4;ROW<8;ROW++)
    3434:	88 89       	ldd	r24, Y+16	; 0x10
    3436:	8f 5f       	subi	r24, 0xFF	; 255
    3438:	88 8b       	std	Y+16, r24	; 0x10
    343a:	88 89       	ldd	r24, Y+16	; 0x10
    343c:	88 30       	cpi	r24, 0x08	; 8
    343e:	08 f4       	brcc	.+2      	; 0x3442 <GetPressedKey+0x1a8>
    3440:	63 cf       	rjmp	.-314    	; 0x3308 <GetPressedKey+0x6e>
				KeyOut=KEY_NUM[ROW-4][COL];
				while (DIO_u8GitPinValue(LOC_u8Port,ROW)==0){}
				_delay_ms(50);
			}
		}
		DIO_VidSetPinValue(LOC_u8Port,COL,HIGH);
    3442:	8a a1       	ldd	r24, Y+34	; 0x22
    3444:	6f 85       	ldd	r22, Y+15	; 0x0f
    3446:	41 e0       	ldi	r20, 0x01	; 1
    3448:	0e 94 b7 0c 	call	0x196e	; 0x196e <DIO_VidSetPinValue>
								{7 ,8 ,9 ,13 },
								{16,0 ,15,14 }
					 };
	
	
	for (COL=0;COL<4;COL++)
    344c:	8f 85       	ldd	r24, Y+15	; 0x0f
    344e:	8f 5f       	subi	r24, 0xFF	; 255
    3450:	8f 87       	std	Y+15, r24	; 0x0f
    3452:	8f 85       	ldd	r24, Y+15	; 0x0f
    3454:	84 30       	cpi	r24, 0x04	; 4
    3456:	08 f4       	brcc	.+2      	; 0x345a <GetPressedKey+0x1c0>
    3458:	4f cf       	rjmp	.-354    	; 0x32f8 <GetPressedKey+0x5e>
				_delay_ms(50);
			}
		}
		DIO_VidSetPinValue(LOC_u8Port,COL,HIGH);
	}
	return KeyOut;
    345a:	89 89       	ldd	r24, Y+17	; 0x11
}
    345c:	a7 96       	adiw	r28, 0x27	; 39
    345e:	0f b6       	in	r0, 0x3f	; 63
    3460:	f8 94       	cli
    3462:	de bf       	out	0x3e, r29	; 62
    3464:	0f be       	out	0x3f, r0	; 63
    3466:	cd bf       	out	0x3d, r28	; 61
    3468:	cf 91       	pop	r28
    346a:	df 91       	pop	r29
    346c:	08 95       	ret

0000346e <Display>:



void Display(void)
{
    346e:	df 93       	push	r29
    3470:	cf 93       	push	r28
    3472:	cd b7       	in	r28, 0x3d	; 61
    3474:	de b7       	in	r29, 0x3e	; 62

}
    3476:	cf 91       	pop	r28
    3478:	df 91       	pop	r29
    347a:	08 95       	ret

0000347c <smarthome>:


void smarthome(void)
{
    347c:	df 93       	push	r29
    347e:	cf 93       	push	r28
    3480:	cd b7       	in	r28, 0x3d	; 61
    3482:	de b7       	in	r29, 0x3e	; 62

}
    3484:	cf 91       	pop	r28
    3486:	df 91       	pop	r29
    3488:	08 95       	ret

0000348a <main>:
 */


void main(void)

{
    348a:	df 93       	push	r29
    348c:	cf 93       	push	r28
    348e:	cd b7       	in	r28, 0x3d	; 61
    3490:	de b7       	in	r29, 0x3e	; 62

}
    3492:	cf 91       	pop	r28
    3494:	df 91       	pop	r29
    3496:	08 95       	ret

00003498 <__mulsi3>:
    3498:	62 9f       	mul	r22, r18
    349a:	d0 01       	movw	r26, r0
    349c:	73 9f       	mul	r23, r19
    349e:	f0 01       	movw	r30, r0
    34a0:	82 9f       	mul	r24, r18
    34a2:	e0 0d       	add	r30, r0
    34a4:	f1 1d       	adc	r31, r1
    34a6:	64 9f       	mul	r22, r20
    34a8:	e0 0d       	add	r30, r0
    34aa:	f1 1d       	adc	r31, r1
    34ac:	92 9f       	mul	r25, r18
    34ae:	f0 0d       	add	r31, r0
    34b0:	83 9f       	mul	r24, r19
    34b2:	f0 0d       	add	r31, r0
    34b4:	74 9f       	mul	r23, r20
    34b6:	f0 0d       	add	r31, r0
    34b8:	65 9f       	mul	r22, r21
    34ba:	f0 0d       	add	r31, r0
    34bc:	99 27       	eor	r25, r25
    34be:	72 9f       	mul	r23, r18
    34c0:	b0 0d       	add	r27, r0
    34c2:	e1 1d       	adc	r30, r1
    34c4:	f9 1f       	adc	r31, r25
    34c6:	63 9f       	mul	r22, r19
    34c8:	b0 0d       	add	r27, r0
    34ca:	e1 1d       	adc	r30, r1
    34cc:	f9 1f       	adc	r31, r25
    34ce:	bd 01       	movw	r22, r26
    34d0:	cf 01       	movw	r24, r30
    34d2:	11 24       	eor	r1, r1
    34d4:	08 95       	ret

000034d6 <__udivmodsi4>:
    34d6:	a1 e2       	ldi	r26, 0x21	; 33
    34d8:	1a 2e       	mov	r1, r26
    34da:	aa 1b       	sub	r26, r26
    34dc:	bb 1b       	sub	r27, r27
    34de:	fd 01       	movw	r30, r26
    34e0:	0d c0       	rjmp	.+26     	; 0x34fc <__udivmodsi4_ep>

000034e2 <__udivmodsi4_loop>:
    34e2:	aa 1f       	adc	r26, r26
    34e4:	bb 1f       	adc	r27, r27
    34e6:	ee 1f       	adc	r30, r30
    34e8:	ff 1f       	adc	r31, r31
    34ea:	a2 17       	cp	r26, r18
    34ec:	b3 07       	cpc	r27, r19
    34ee:	e4 07       	cpc	r30, r20
    34f0:	f5 07       	cpc	r31, r21
    34f2:	20 f0       	brcs	.+8      	; 0x34fc <__udivmodsi4_ep>
    34f4:	a2 1b       	sub	r26, r18
    34f6:	b3 0b       	sbc	r27, r19
    34f8:	e4 0b       	sbc	r30, r20
    34fa:	f5 0b       	sbc	r31, r21

000034fc <__udivmodsi4_ep>:
    34fc:	66 1f       	adc	r22, r22
    34fe:	77 1f       	adc	r23, r23
    3500:	88 1f       	adc	r24, r24
    3502:	99 1f       	adc	r25, r25
    3504:	1a 94       	dec	r1
    3506:	69 f7       	brne	.-38     	; 0x34e2 <__udivmodsi4_loop>
    3508:	60 95       	com	r22
    350a:	70 95       	com	r23
    350c:	80 95       	com	r24
    350e:	90 95       	com	r25
    3510:	9b 01       	movw	r18, r22
    3512:	ac 01       	movw	r20, r24
    3514:	bd 01       	movw	r22, r26
    3516:	cf 01       	movw	r24, r30
    3518:	08 95       	ret

0000351a <__prologue_saves__>:
    351a:	2f 92       	push	r2
    351c:	3f 92       	push	r3
    351e:	4f 92       	push	r4
    3520:	5f 92       	push	r5
    3522:	6f 92       	push	r6
    3524:	7f 92       	push	r7
    3526:	8f 92       	push	r8
    3528:	9f 92       	push	r9
    352a:	af 92       	push	r10
    352c:	bf 92       	push	r11
    352e:	cf 92       	push	r12
    3530:	df 92       	push	r13
    3532:	ef 92       	push	r14
    3534:	ff 92       	push	r15
    3536:	0f 93       	push	r16
    3538:	1f 93       	push	r17
    353a:	cf 93       	push	r28
    353c:	df 93       	push	r29
    353e:	cd b7       	in	r28, 0x3d	; 61
    3540:	de b7       	in	r29, 0x3e	; 62
    3542:	ca 1b       	sub	r28, r26
    3544:	db 0b       	sbc	r29, r27
    3546:	0f b6       	in	r0, 0x3f	; 63
    3548:	f8 94       	cli
    354a:	de bf       	out	0x3e, r29	; 62
    354c:	0f be       	out	0x3f, r0	; 63
    354e:	cd bf       	out	0x3d, r28	; 61
    3550:	09 94       	ijmp

00003552 <__epilogue_restores__>:
    3552:	2a 88       	ldd	r2, Y+18	; 0x12
    3554:	39 88       	ldd	r3, Y+17	; 0x11
    3556:	48 88       	ldd	r4, Y+16	; 0x10
    3558:	5f 84       	ldd	r5, Y+15	; 0x0f
    355a:	6e 84       	ldd	r6, Y+14	; 0x0e
    355c:	7d 84       	ldd	r7, Y+13	; 0x0d
    355e:	8c 84       	ldd	r8, Y+12	; 0x0c
    3560:	9b 84       	ldd	r9, Y+11	; 0x0b
    3562:	aa 84       	ldd	r10, Y+10	; 0x0a
    3564:	b9 84       	ldd	r11, Y+9	; 0x09
    3566:	c8 84       	ldd	r12, Y+8	; 0x08
    3568:	df 80       	ldd	r13, Y+7	; 0x07
    356a:	ee 80       	ldd	r14, Y+6	; 0x06
    356c:	fd 80       	ldd	r15, Y+5	; 0x05
    356e:	0c 81       	ldd	r16, Y+4	; 0x04
    3570:	1b 81       	ldd	r17, Y+3	; 0x03
    3572:	aa 81       	ldd	r26, Y+2	; 0x02
    3574:	b9 81       	ldd	r27, Y+1	; 0x01
    3576:	ce 0f       	add	r28, r30
    3578:	d1 1d       	adc	r29, r1
    357a:	0f b6       	in	r0, 0x3f	; 63
    357c:	f8 94       	cli
    357e:	de bf       	out	0x3e, r29	; 62
    3580:	0f be       	out	0x3f, r0	; 63
    3582:	cd bf       	out	0x3d, r28	; 61
    3584:	ed 01       	movw	r28, r26
    3586:	08 95       	ret

00003588 <_exit>:
    3588:	f8 94       	cli

0000358a <__stop_program>:
    358a:	ff cf       	rjmp	.-2      	; 0x358a <__stop_program>
