
interfacing.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000071c0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000cc  00800060  000071c0  00007254  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  0080012c  0080012c  00007320  2**0
                  ALLOC
  3 .stab         00007f38  00000000  00000000  00007320  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001e87  00000000  00000000  0000f258  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000110df  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0001121f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0001138f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00012fd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00013ec3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00014c70  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00014dd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0001505d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0001582b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 53 07 	jmp	0xea6	; 0xea6 <__vector_1>
       8:	0c 94 fd 07 	jmp	0xffa	; 0xffa <__vector_2>
       c:	0c 94 a8 08 	jmp	0x1150	; 0x1150 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 1b 0d 	jmp	0x1a36	; 0x1a36 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 ec       	ldi	r30, 0xC0	; 192
      68:	f1 e7       	ldi	r31, 0x71	; 113
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 32       	cpi	r26, 0x2C	; 44
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac e2       	ldi	r26, 0x2C	; 44
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 32       	cpi	r26, 0x2D	; 45
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 5d 38 	call	0x70ba	; 0x70ba <main>
      8a:	0c 94 de 38 	jmp	0x71bc	; 0x71bc <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 a7 38 	jmp	0x714e	; 0x714e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a1 ea       	ldi	r26, 0xA1	; 161
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 c3 38 	jmp	0x7186	; 0x7186 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 b3 38 	jmp	0x7166	; 0x7166 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 cf 38 	jmp	0x719e	; 0x719e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 b3 38 	jmp	0x7166	; 0x7166 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 cf 38 	jmp	0x719e	; 0x719e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 a7 38 	jmp	0x714e	; 0x714e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	81 ea       	ldi	r24, 0xA1	; 161
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 c3 38 	jmp	0x7186	; 0x7186 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 b3 38 	jmp	0x7166	; 0x7166 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 cf 38 	jmp	0x719e	; 0x719e <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 b3 38 	jmp	0x7166	; 0x7166 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 cf 38 	jmp	0x719e	; 0x719e <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 b3 38 	jmp	0x7166	; 0x7166 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 cf 38 	jmp	0x719e	; 0x719e <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 b7 38 	jmp	0x716e	; 0x716e <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 d3 38 	jmp	0x71a6	; 0x71a6 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <GIE_VidEnable>:
#include "../../LIB/BIT_MATH.h"
#include "GIE_Regster.h"


void GIE_VidEnable(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,INTF0);
     b4e:	af e5       	ldi	r26, 0x5F	; 95
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	ef e5       	ldi	r30, 0x5F	; 95
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	80 68       	ori	r24, 0x80	; 128
     b5a:	8c 93       	st	X, r24
		break;
		case EXGIE_INT2:
			SET_BIT(SREG,INTF0);
		break;
	}*/
}
     b5c:	cf 91       	pop	r28
     b5e:	df 91       	pop	r29
     b60:	08 95       	ret

00000b62 <GIE_VidDisable>:
void GIE_VidDisable(void)
{
     b62:	df 93       	push	r29
     b64:	cf 93       	push	r28
     b66:	cd b7       	in	r28, 0x3d	; 61
     b68:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,INTF0);
     b6a:	af e5       	ldi	r26, 0x5F	; 95
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	ef e5       	ldi	r30, 0x5F	; 95
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	8f 77       	andi	r24, 0x7F	; 127
     b76:	8c 93       	st	X, r24
    		break;
    		case EXGIE_INT2:
    			CLR_BIT(SREG,INTF0);
    		break;
    	}*/
}
     b78:	cf 91       	pop	r28
     b7a:	df 91       	pop	r29
     b7c:	08 95       	ret

00000b7e <EXI_VidEnable>:
#include "../DIO/DIO_Interface.h"
#include <avr/delay.h>

void EXI_VidEnable(ExInteruptSource LOC_Interupt)

{
     b7e:	df 93       	push	r29
     b80:	cf 93       	push	r28
     b82:	00 d0       	rcall	.+0      	; 0xb84 <EXI_VidEnable+0x6>
     b84:	0f 92       	push	r0
     b86:	cd b7       	in	r28, 0x3d	; 61
     b88:	de b7       	in	r29, 0x3e	; 62
     b8a:	89 83       	std	Y+1, r24	; 0x01
	switch (LOC_Interupt)
     b8c:	89 81       	ldd	r24, Y+1	; 0x01
     b8e:	28 2f       	mov	r18, r24
     b90:	30 e0       	ldi	r19, 0x00	; 0
     b92:	3b 83       	std	Y+3, r19	; 0x03
     b94:	2a 83       	std	Y+2, r18	; 0x02
     b96:	8a 81       	ldd	r24, Y+2	; 0x02
     b98:	9b 81       	ldd	r25, Y+3	; 0x03
     b9a:	81 30       	cpi	r24, 0x01	; 1
     b9c:	91 05       	cpc	r25, r1
     b9e:	89 f0       	breq	.+34     	; 0xbc2 <EXI_VidEnable+0x44>
     ba0:	2a 81       	ldd	r18, Y+2	; 0x02
     ba2:	3b 81       	ldd	r19, Y+3	; 0x03
     ba4:	22 30       	cpi	r18, 0x02	; 2
     ba6:	31 05       	cpc	r19, r1
     ba8:	a1 f0       	breq	.+40     	; 0xbd2 <EXI_VidEnable+0x54>
     baa:	8a 81       	ldd	r24, Y+2	; 0x02
     bac:	9b 81       	ldd	r25, Y+3	; 0x03
     bae:	00 97       	sbiw	r24, 0x00	; 0
     bb0:	b9 f4       	brne	.+46     	; 0xbe0 <EXI_VidEnable+0x62>
	{
		case EX_INT0:
			SET_BIT(GICR,INT0);
     bb2:	ab e5       	ldi	r26, 0x5B	; 91
     bb4:	b0 e0       	ldi	r27, 0x00	; 0
     bb6:	eb e5       	ldi	r30, 0x5B	; 91
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	80 81       	ld	r24, Z
     bbc:	80 64       	ori	r24, 0x40	; 64
     bbe:	8c 93       	st	X, r24
     bc0:	0f c0       	rjmp	.+30     	; 0xbe0 <EXI_VidEnable+0x62>
		break;
		case EX_INT1:
			SET_BIT(GICR,INT1);
     bc2:	ab e5       	ldi	r26, 0x5B	; 91
     bc4:	b0 e0       	ldi	r27, 0x00	; 0
     bc6:	eb e5       	ldi	r30, 0x5B	; 91
     bc8:	f0 e0       	ldi	r31, 0x00	; 0
     bca:	80 81       	ld	r24, Z
     bcc:	80 68       	ori	r24, 0x80	; 128
     bce:	8c 93       	st	X, r24
     bd0:	07 c0       	rjmp	.+14     	; 0xbe0 <EXI_VidEnable+0x62>
		break;
		case EX_INT2:
			SET_BIT(GICR,INT2);
     bd2:	ab e5       	ldi	r26, 0x5B	; 91
     bd4:	b0 e0       	ldi	r27, 0x00	; 0
     bd6:	eb e5       	ldi	r30, 0x5B	; 91
     bd8:	f0 e0       	ldi	r31, 0x00	; 0
     bda:	80 81       	ld	r24, Z
     bdc:	80 62       	ori	r24, 0x20	; 32
     bde:	8c 93       	st	X, r24
		break;
	}
}
     be0:	0f 90       	pop	r0
     be2:	0f 90       	pop	r0
     be4:	0f 90       	pop	r0
     be6:	cf 91       	pop	r28
     be8:	df 91       	pop	r29
     bea:	08 95       	ret

00000bec <EXI_VidDisable>:

void EXI_VidDisable(ExInteruptSource LOC_Interupt)
{
     bec:	df 93       	push	r29
     bee:	cf 93       	push	r28
     bf0:	00 d0       	rcall	.+0      	; 0xbf2 <EXI_VidDisable+0x6>
     bf2:	0f 92       	push	r0
     bf4:	cd b7       	in	r28, 0x3d	; 61
     bf6:	de b7       	in	r29, 0x3e	; 62
     bf8:	89 83       	std	Y+1, r24	; 0x01
	switch (LOC_Interupt)
     bfa:	89 81       	ldd	r24, Y+1	; 0x01
     bfc:	28 2f       	mov	r18, r24
     bfe:	30 e0       	ldi	r19, 0x00	; 0
     c00:	3b 83       	std	Y+3, r19	; 0x03
     c02:	2a 83       	std	Y+2, r18	; 0x02
     c04:	8a 81       	ldd	r24, Y+2	; 0x02
     c06:	9b 81       	ldd	r25, Y+3	; 0x03
     c08:	81 30       	cpi	r24, 0x01	; 1
     c0a:	91 05       	cpc	r25, r1
     c0c:	89 f0       	breq	.+34     	; 0xc30 <EXI_VidDisable+0x44>
     c0e:	2a 81       	ldd	r18, Y+2	; 0x02
     c10:	3b 81       	ldd	r19, Y+3	; 0x03
     c12:	22 30       	cpi	r18, 0x02	; 2
     c14:	31 05       	cpc	r19, r1
     c16:	a1 f0       	breq	.+40     	; 0xc40 <EXI_VidDisable+0x54>
     c18:	8a 81       	ldd	r24, Y+2	; 0x02
     c1a:	9b 81       	ldd	r25, Y+3	; 0x03
     c1c:	00 97       	sbiw	r24, 0x00	; 0
     c1e:	b9 f4       	brne	.+46     	; 0xc4e <EXI_VidDisable+0x62>
	{
		case EX_INT0: CLR_BIT(GICR,INT0); break;
     c20:	ab e5       	ldi	r26, 0x5B	; 91
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	eb e5       	ldi	r30, 0x5B	; 91
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	80 81       	ld	r24, Z
     c2a:	8f 7b       	andi	r24, 0xBF	; 191
     c2c:	8c 93       	st	X, r24
     c2e:	0f c0       	rjmp	.+30     	; 0xc4e <EXI_VidDisable+0x62>
		case EX_INT1: CLR_BIT(GICR,INT1); break;
     c30:	ab e5       	ldi	r26, 0x5B	; 91
     c32:	b0 e0       	ldi	r27, 0x00	; 0
     c34:	eb e5       	ldi	r30, 0x5B	; 91
     c36:	f0 e0       	ldi	r31, 0x00	; 0
     c38:	80 81       	ld	r24, Z
     c3a:	8f 77       	andi	r24, 0x7F	; 127
     c3c:	8c 93       	st	X, r24
     c3e:	07 c0       	rjmp	.+14     	; 0xc4e <EXI_VidDisable+0x62>
		case EX_INT2: CLR_BIT(GICR,INT2); break;
     c40:	ab e5       	ldi	r26, 0x5B	; 91
     c42:	b0 e0       	ldi	r27, 0x00	; 0
     c44:	eb e5       	ldi	r30, 0x5B	; 91
     c46:	f0 e0       	ldi	r31, 0x00	; 0
     c48:	80 81       	ld	r24, Z
     c4a:	8f 7d       	andi	r24, 0xDF	; 223
     c4c:	8c 93       	st	X, r24
	}
}
     c4e:	0f 90       	pop	r0
     c50:	0f 90       	pop	r0
     c52:	0f 90       	pop	r0
     c54:	cf 91       	pop	r28
     c56:	df 91       	pop	r29
     c58:	08 95       	ret

00000c5a <EXI_VidTrigerEdge>:

void EXI_VidTrigerEdge(ExInteruptSource LOC_Interupt,TriggerEdge_Type LOC_Edge)
{
     c5a:	df 93       	push	r29
     c5c:	cf 93       	push	r28
     c5e:	cd b7       	in	r28, 0x3d	; 61
     c60:	de b7       	in	r29, 0x3e	; 62
     c62:	2a 97       	sbiw	r28, 0x0a	; 10
     c64:	0f b6       	in	r0, 0x3f	; 63
     c66:	f8 94       	cli
     c68:	de bf       	out	0x3e, r29	; 62
     c6a:	0f be       	out	0x3f, r0	; 63
     c6c:	cd bf       	out	0x3d, r28	; 61
     c6e:	89 83       	std	Y+1, r24	; 0x01
     c70:	6a 83       	std	Y+2, r22	; 0x02
	switch (LOC_Interupt)
     c72:	89 81       	ldd	r24, Y+1	; 0x01
     c74:	28 2f       	mov	r18, r24
     c76:	30 e0       	ldi	r19, 0x00	; 0
     c78:	3a 87       	std	Y+10, r19	; 0x0a
     c7a:	29 87       	std	Y+9, r18	; 0x09
     c7c:	89 85       	ldd	r24, Y+9	; 0x09
     c7e:	9a 85       	ldd	r25, Y+10	; 0x0a
     c80:	81 30       	cpi	r24, 0x01	; 1
     c82:	91 05       	cpc	r25, r1
     c84:	09 f4       	brne	.+2      	; 0xc88 <EXI_VidTrigerEdge+0x2e>
     c86:	70 c0       	rjmp	.+224    	; 0xd68 <EXI_VidTrigerEdge+0x10e>
     c88:	29 85       	ldd	r18, Y+9	; 0x09
     c8a:	3a 85       	ldd	r19, Y+10	; 0x0a
     c8c:	22 30       	cpi	r18, 0x02	; 2
     c8e:	31 05       	cpc	r19, r1
     c90:	09 f4       	brne	.+2      	; 0xc94 <EXI_VidTrigerEdge+0x3a>
     c92:	cf c0       	rjmp	.+414    	; 0xe32 <EXI_VidTrigerEdge+0x1d8>
     c94:	89 85       	ldd	r24, Y+9	; 0x09
     c96:	9a 85       	ldd	r25, Y+10	; 0x0a
     c98:	00 97       	sbiw	r24, 0x00	; 0
     c9a:	09 f0       	breq	.+2      	; 0xc9e <EXI_VidTrigerEdge+0x44>
     c9c:	fb c0       	rjmp	.+502    	; 0xe94 <EXI_VidTrigerEdge+0x23a>
	{
	case EX_INT0:
		DIO_VidSitPintDirection(PORTD,PIN2, INPUT);
     c9e:	83 e0       	ldi	r24, 0x03	; 3
     ca0:	62 e0       	ldi	r22, 0x02	; 2
     ca2:	40 e0       	ldi	r20, 0x00	; 0
     ca4:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <DIO_VidSitPintDirection>
		DIO_VidSitPintValue(PORTD,PIN2, HIGH);
     ca8:	83 e0       	ldi	r24, 0x03	; 3
     caa:	62 e0       	ldi	r22, 0x02	; 2
     cac:	41 e0       	ldi	r20, 0x01	; 1
     cae:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <DIO_VidSitPintValue>
		switch (LOC_Edge)
     cb2:	8a 81       	ldd	r24, Y+2	; 0x02
     cb4:	28 2f       	mov	r18, r24
     cb6:	30 e0       	ldi	r19, 0x00	; 0
     cb8:	38 87       	std	Y+8, r19	; 0x08
     cba:	2f 83       	std	Y+7, r18	; 0x07
     cbc:	8f 81       	ldd	r24, Y+7	; 0x07
     cbe:	98 85       	ldd	r25, Y+8	; 0x08
     cc0:	81 30       	cpi	r24, 0x01	; 1
     cc2:	91 05       	cpc	r25, r1
     cc4:	21 f1       	breq	.+72     	; 0xd0e <EXI_VidTrigerEdge+0xb4>
     cc6:	2f 81       	ldd	r18, Y+7	; 0x07
     cc8:	38 85       	ldd	r19, Y+8	; 0x08
     cca:	22 30       	cpi	r18, 0x02	; 2
     ccc:	31 05       	cpc	r19, r1
     cce:	2c f4       	brge	.+10     	; 0xcda <EXI_VidTrigerEdge+0x80>
     cd0:	8f 81       	ldd	r24, Y+7	; 0x07
     cd2:	98 85       	ldd	r25, Y+8	; 0x08
     cd4:	00 97       	sbiw	r24, 0x00	; 0
     cd6:	61 f0       	breq	.+24     	; 0xcf0 <EXI_VidTrigerEdge+0x96>
     cd8:	dd c0       	rjmp	.+442    	; 0xe94 <EXI_VidTrigerEdge+0x23a>
     cda:	2f 81       	ldd	r18, Y+7	; 0x07
     cdc:	38 85       	ldd	r19, Y+8	; 0x08
     cde:	22 30       	cpi	r18, 0x02	; 2
     ce0:	31 05       	cpc	r19, r1
     ce2:	21 f1       	breq	.+72     	; 0xd2c <EXI_VidTrigerEdge+0xd2>
     ce4:	8f 81       	ldd	r24, Y+7	; 0x07
     ce6:	98 85       	ldd	r25, Y+8	; 0x08
     ce8:	83 30       	cpi	r24, 0x03	; 3
     cea:	91 05       	cpc	r25, r1
     cec:	71 f1       	breq	.+92     	; 0xd4a <EXI_VidTrigerEdge+0xf0>
     cee:	d2 c0       	rjmp	.+420    	; 0xe94 <EXI_VidTrigerEdge+0x23a>
		{
		case LOW_LVEL:
			CLR_BIT(MCUCR,ISC00);
     cf0:	a5 e5       	ldi	r26, 0x55	; 85
     cf2:	b0 e0       	ldi	r27, 0x00	; 0
     cf4:	e5 e5       	ldi	r30, 0x55	; 85
     cf6:	f0 e0       	ldi	r31, 0x00	; 0
     cf8:	80 81       	ld	r24, Z
     cfa:	8e 7f       	andi	r24, 0xFE	; 254
     cfc:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,ISC01);
     cfe:	a5 e5       	ldi	r26, 0x55	; 85
     d00:	b0 e0       	ldi	r27, 0x00	; 0
     d02:	e5 e5       	ldi	r30, 0x55	; 85
     d04:	f0 e0       	ldi	r31, 0x00	; 0
     d06:	80 81       	ld	r24, Z
     d08:	8d 7f       	andi	r24, 0xFD	; 253
     d0a:	8c 93       	st	X, r24
     d0c:	c3 c0       	rjmp	.+390    	; 0xe94 <EXI_VidTrigerEdge+0x23a>
			break;
		case ANY_LOGIC_EDGE:
			SET_BIT(MCUCR,ISC00);
     d0e:	a5 e5       	ldi	r26, 0x55	; 85
     d10:	b0 e0       	ldi	r27, 0x00	; 0
     d12:	e5 e5       	ldi	r30, 0x55	; 85
     d14:	f0 e0       	ldi	r31, 0x00	; 0
     d16:	80 81       	ld	r24, Z
     d18:	81 60       	ori	r24, 0x01	; 1
     d1a:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,ISC01);
     d1c:	a5 e5       	ldi	r26, 0x55	; 85
     d1e:	b0 e0       	ldi	r27, 0x00	; 0
     d20:	e5 e5       	ldi	r30, 0x55	; 85
     d22:	f0 e0       	ldi	r31, 0x00	; 0
     d24:	80 81       	ld	r24, Z
     d26:	8d 7f       	andi	r24, 0xFD	; 253
     d28:	8c 93       	st	X, r24
     d2a:	b4 c0       	rjmp	.+360    	; 0xe94 <EXI_VidTrigerEdge+0x23a>
			break;
		case FALLING_EDGE:
			CLR_BIT(MCUCR,ISC00);
     d2c:	a5 e5       	ldi	r26, 0x55	; 85
     d2e:	b0 e0       	ldi	r27, 0x00	; 0
     d30:	e5 e5       	ldi	r30, 0x55	; 85
     d32:	f0 e0       	ldi	r31, 0x00	; 0
     d34:	80 81       	ld	r24, Z
     d36:	8e 7f       	andi	r24, 0xFE	; 254
     d38:	8c 93       	st	X, r24
			SET_BIT(MCUCR,ISC01);
     d3a:	a5 e5       	ldi	r26, 0x55	; 85
     d3c:	b0 e0       	ldi	r27, 0x00	; 0
     d3e:	e5 e5       	ldi	r30, 0x55	; 85
     d40:	f0 e0       	ldi	r31, 0x00	; 0
     d42:	80 81       	ld	r24, Z
     d44:	82 60       	ori	r24, 0x02	; 2
     d46:	8c 93       	st	X, r24
     d48:	a5 c0       	rjmp	.+330    	; 0xe94 <EXI_VidTrigerEdge+0x23a>
			break;
		case RISING_EDGE:
			SET_BIT(MCUCR,ISC00);
     d4a:	a5 e5       	ldi	r26, 0x55	; 85
     d4c:	b0 e0       	ldi	r27, 0x00	; 0
     d4e:	e5 e5       	ldi	r30, 0x55	; 85
     d50:	f0 e0       	ldi	r31, 0x00	; 0
     d52:	80 81       	ld	r24, Z
     d54:	81 60       	ori	r24, 0x01	; 1
     d56:	8c 93       	st	X, r24
			SET_BIT(MCUCR,ISC01);
     d58:	a5 e5       	ldi	r26, 0x55	; 85
     d5a:	b0 e0       	ldi	r27, 0x00	; 0
     d5c:	e5 e5       	ldi	r30, 0x55	; 85
     d5e:	f0 e0       	ldi	r31, 0x00	; 0
     d60:	80 81       	ld	r24, Z
     d62:	82 60       	ori	r24, 0x02	; 2
     d64:	8c 93       	st	X, r24
     d66:	96 c0       	rjmp	.+300    	; 0xe94 <EXI_VidTrigerEdge+0x23a>
			break;
		}
		break;
	case EX_INT1:
			DIO_VidSitPintDirection(PORTD,PIN3, INPUT);
     d68:	83 e0       	ldi	r24, 0x03	; 3
     d6a:	63 e0       	ldi	r22, 0x03	; 3
     d6c:	40 e0       	ldi	r20, 0x00	; 0
     d6e:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <DIO_VidSitPintDirection>
			DIO_VidSitPintValue(PORTD,PIN3, HIGH);
     d72:	83 e0       	ldi	r24, 0x03	; 3
     d74:	63 e0       	ldi	r22, 0x03	; 3
     d76:	41 e0       	ldi	r20, 0x01	; 1
     d78:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <DIO_VidSitPintValue>
			switch (LOC_Edge)
     d7c:	8a 81       	ldd	r24, Y+2	; 0x02
     d7e:	28 2f       	mov	r18, r24
     d80:	30 e0       	ldi	r19, 0x00	; 0
     d82:	3e 83       	std	Y+6, r19	; 0x06
     d84:	2d 83       	std	Y+5, r18	; 0x05
     d86:	8d 81       	ldd	r24, Y+5	; 0x05
     d88:	9e 81       	ldd	r25, Y+6	; 0x06
     d8a:	81 30       	cpi	r24, 0x01	; 1
     d8c:	91 05       	cpc	r25, r1
     d8e:	21 f1       	breq	.+72     	; 0xdd8 <EXI_VidTrigerEdge+0x17e>
     d90:	2d 81       	ldd	r18, Y+5	; 0x05
     d92:	3e 81       	ldd	r19, Y+6	; 0x06
     d94:	22 30       	cpi	r18, 0x02	; 2
     d96:	31 05       	cpc	r19, r1
     d98:	2c f4       	brge	.+10     	; 0xda4 <EXI_VidTrigerEdge+0x14a>
     d9a:	8d 81       	ldd	r24, Y+5	; 0x05
     d9c:	9e 81       	ldd	r25, Y+6	; 0x06
     d9e:	00 97       	sbiw	r24, 0x00	; 0
     da0:	61 f0       	breq	.+24     	; 0xdba <EXI_VidTrigerEdge+0x160>
     da2:	78 c0       	rjmp	.+240    	; 0xe94 <EXI_VidTrigerEdge+0x23a>
     da4:	2d 81       	ldd	r18, Y+5	; 0x05
     da6:	3e 81       	ldd	r19, Y+6	; 0x06
     da8:	22 30       	cpi	r18, 0x02	; 2
     daa:	31 05       	cpc	r19, r1
     dac:	21 f1       	breq	.+72     	; 0xdf6 <EXI_VidTrigerEdge+0x19c>
     dae:	8d 81       	ldd	r24, Y+5	; 0x05
     db0:	9e 81       	ldd	r25, Y+6	; 0x06
     db2:	83 30       	cpi	r24, 0x03	; 3
     db4:	91 05       	cpc	r25, r1
     db6:	71 f1       	breq	.+92     	; 0xe14 <EXI_VidTrigerEdge+0x1ba>
     db8:	6d c0       	rjmp	.+218    	; 0xe94 <EXI_VidTrigerEdge+0x23a>
			{
			case LOW_LVEL:
				CLR_BIT(MCUCR,ISC00);
     dba:	a5 e5       	ldi	r26, 0x55	; 85
     dbc:	b0 e0       	ldi	r27, 0x00	; 0
     dbe:	e5 e5       	ldi	r30, 0x55	; 85
     dc0:	f0 e0       	ldi	r31, 0x00	; 0
     dc2:	80 81       	ld	r24, Z
     dc4:	8e 7f       	andi	r24, 0xFE	; 254
     dc6:	8c 93       	st	X, r24
				CLR_BIT(MCUCR,ISC01);
     dc8:	a5 e5       	ldi	r26, 0x55	; 85
     dca:	b0 e0       	ldi	r27, 0x00	; 0
     dcc:	e5 e5       	ldi	r30, 0x55	; 85
     dce:	f0 e0       	ldi	r31, 0x00	; 0
     dd0:	80 81       	ld	r24, Z
     dd2:	8d 7f       	andi	r24, 0xFD	; 253
     dd4:	8c 93       	st	X, r24
     dd6:	5e c0       	rjmp	.+188    	; 0xe94 <EXI_VidTrigerEdge+0x23a>
				break;
			case ANY_LOGIC_EDGE:
				SET_BIT(MCUCR,ISC00);
     dd8:	a5 e5       	ldi	r26, 0x55	; 85
     dda:	b0 e0       	ldi	r27, 0x00	; 0
     ddc:	e5 e5       	ldi	r30, 0x55	; 85
     dde:	f0 e0       	ldi	r31, 0x00	; 0
     de0:	80 81       	ld	r24, Z
     de2:	81 60       	ori	r24, 0x01	; 1
     de4:	8c 93       	st	X, r24
				CLR_BIT(MCUCR,ISC01);
     de6:	a5 e5       	ldi	r26, 0x55	; 85
     de8:	b0 e0       	ldi	r27, 0x00	; 0
     dea:	e5 e5       	ldi	r30, 0x55	; 85
     dec:	f0 e0       	ldi	r31, 0x00	; 0
     dee:	80 81       	ld	r24, Z
     df0:	8d 7f       	andi	r24, 0xFD	; 253
     df2:	8c 93       	st	X, r24
     df4:	4f c0       	rjmp	.+158    	; 0xe94 <EXI_VidTrigerEdge+0x23a>
				break;
			case FALLING_EDGE:
				CLR_BIT(MCUCR,ISC00);
     df6:	a5 e5       	ldi	r26, 0x55	; 85
     df8:	b0 e0       	ldi	r27, 0x00	; 0
     dfa:	e5 e5       	ldi	r30, 0x55	; 85
     dfc:	f0 e0       	ldi	r31, 0x00	; 0
     dfe:	80 81       	ld	r24, Z
     e00:	8e 7f       	andi	r24, 0xFE	; 254
     e02:	8c 93       	st	X, r24
				SET_BIT(MCUCR,ISC01);
     e04:	a5 e5       	ldi	r26, 0x55	; 85
     e06:	b0 e0       	ldi	r27, 0x00	; 0
     e08:	e5 e5       	ldi	r30, 0x55	; 85
     e0a:	f0 e0       	ldi	r31, 0x00	; 0
     e0c:	80 81       	ld	r24, Z
     e0e:	82 60       	ori	r24, 0x02	; 2
     e10:	8c 93       	st	X, r24
     e12:	40 c0       	rjmp	.+128    	; 0xe94 <EXI_VidTrigerEdge+0x23a>
				break;
			case RISING_EDGE:
				SET_BIT(MCUCR,ISC00);
     e14:	a5 e5       	ldi	r26, 0x55	; 85
     e16:	b0 e0       	ldi	r27, 0x00	; 0
     e18:	e5 e5       	ldi	r30, 0x55	; 85
     e1a:	f0 e0       	ldi	r31, 0x00	; 0
     e1c:	80 81       	ld	r24, Z
     e1e:	81 60       	ori	r24, 0x01	; 1
     e20:	8c 93       	st	X, r24
				SET_BIT(MCUCR,ISC01);
     e22:	a5 e5       	ldi	r26, 0x55	; 85
     e24:	b0 e0       	ldi	r27, 0x00	; 0
     e26:	e5 e5       	ldi	r30, 0x55	; 85
     e28:	f0 e0       	ldi	r31, 0x00	; 0
     e2a:	80 81       	ld	r24, Z
     e2c:	82 60       	ori	r24, 0x02	; 2
     e2e:	8c 93       	st	X, r24
     e30:	31 c0       	rjmp	.+98     	; 0xe94 <EXI_VidTrigerEdge+0x23a>
				break;
			}
			break;
	case EX_INT2:
			DIO_VidSitPintDirection(PORTB,PIN2, INPUT);
     e32:	81 e0       	ldi	r24, 0x01	; 1
     e34:	62 e0       	ldi	r22, 0x02	; 2
     e36:	40 e0       	ldi	r20, 0x00	; 0
     e38:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <DIO_VidSitPintDirection>
			DIO_VidSitPintValue(PORTB,PIN2, HIGH);
     e3c:	81 e0       	ldi	r24, 0x01	; 1
     e3e:	62 e0       	ldi	r22, 0x02	; 2
     e40:	41 e0       	ldi	r20, 0x01	; 1
     e42:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <DIO_VidSitPintValue>
				switch (LOC_Edge)
     e46:	8a 81       	ldd	r24, Y+2	; 0x02
     e48:	28 2f       	mov	r18, r24
     e4a:	30 e0       	ldi	r19, 0x00	; 0
     e4c:	3c 83       	std	Y+4, r19	; 0x04
     e4e:	2b 83       	std	Y+3, r18	; 0x03
     e50:	8b 81       	ldd	r24, Y+3	; 0x03
     e52:	9c 81       	ldd	r25, Y+4	; 0x04
     e54:	82 30       	cpi	r24, 0x02	; 2
     e56:	91 05       	cpc	r25, r1
     e58:	31 f0       	breq	.+12     	; 0xe66 <EXI_VidTrigerEdge+0x20c>
     e5a:	2b 81       	ldd	r18, Y+3	; 0x03
     e5c:	3c 81       	ldd	r19, Y+4	; 0x04
     e5e:	23 30       	cpi	r18, 0x03	; 3
     e60:	31 05       	cpc	r19, r1
     e62:	49 f0       	breq	.+18     	; 0xe76 <EXI_VidTrigerEdge+0x21c>
     e64:	10 c0       	rjmp	.+32     	; 0xe86 <EXI_VidTrigerEdge+0x22c>
				{
				case FALLING_EDGE:
					CLR_BIT(MCUCR,ISC2);
     e66:	a5 e5       	ldi	r26, 0x55	; 85
     e68:	b0 e0       	ldi	r27, 0x00	; 0
     e6a:	e5 e5       	ldi	r30, 0x55	; 85
     e6c:	f0 e0       	ldi	r31, 0x00	; 0
     e6e:	80 81       	ld	r24, Z
     e70:	8f 7b       	andi	r24, 0xBF	; 191
     e72:	8c 93       	st	X, r24
     e74:	0f c0       	rjmp	.+30     	; 0xe94 <EXI_VidTrigerEdge+0x23a>
					break;
				case RISING_EDGE:
					SET_BIT(MCUCR,ISC2);
     e76:	a5 e5       	ldi	r26, 0x55	; 85
     e78:	b0 e0       	ldi	r27, 0x00	; 0
     e7a:	e5 e5       	ldi	r30, 0x55	; 85
     e7c:	f0 e0       	ldi	r31, 0x00	; 0
     e7e:	80 81       	ld	r24, Z
     e80:	80 64       	ori	r24, 0x40	; 64
     e82:	8c 93       	st	X, r24
     e84:	07 c0       	rjmp	.+14     	; 0xe94 <EXI_VidTrigerEdge+0x23a>
					break;
				default:
					CLR_BIT(MCUCR,ISC2);
     e86:	a5 e5       	ldi	r26, 0x55	; 85
     e88:	b0 e0       	ldi	r27, 0x00	; 0
     e8a:	e5 e5       	ldi	r30, 0x55	; 85
     e8c:	f0 e0       	ldi	r31, 0x00	; 0
     e8e:	80 81       	ld	r24, Z
     e90:	8f 7b       	andi	r24, 0xBF	; 191
     e92:	8c 93       	st	X, r24
					break;
				}
				break;
	}

}
     e94:	2a 96       	adiw	r28, 0x0a	; 10
     e96:	0f b6       	in	r0, 0x3f	; 63
     e98:	f8 94       	cli
     e9a:	de bf       	out	0x3e, r29	; 62
     e9c:	0f be       	out	0x3f, r0	; 63
     e9e:	cd bf       	out	0x3d, r28	; 61
     ea0:	cf 91       	pop	r28
     ea2:	df 91       	pop	r29
     ea4:	08 95       	ret

00000ea6 <__vector_1>:
ISR(INT0_VECT)
{
     ea6:	1f 92       	push	r1
     ea8:	0f 92       	push	r0
     eaa:	0f b6       	in	r0, 0x3f	; 63
     eac:	0f 92       	push	r0
     eae:	11 24       	eor	r1, r1
     eb0:	2f 93       	push	r18
     eb2:	3f 93       	push	r19
     eb4:	4f 93       	push	r20
     eb6:	5f 93       	push	r21
     eb8:	6f 93       	push	r22
     eba:	7f 93       	push	r23
     ebc:	8f 93       	push	r24
     ebe:	9f 93       	push	r25
     ec0:	af 93       	push	r26
     ec2:	bf 93       	push	r27
     ec4:	ef 93       	push	r30
     ec6:	ff 93       	push	r31
     ec8:	df 93       	push	r29
     eca:	cf 93       	push	r28
     ecc:	cd b7       	in	r28, 0x3d	; 61
     ece:	de b7       	in	r29, 0x3e	; 62
     ed0:	2e 97       	sbiw	r28, 0x0e	; 14
     ed2:	de bf       	out	0x3e, r29	; 62
     ed4:	cd bf       	out	0x3d, r28	; 61
	DIO_VidSitPintValue(PORTB,PIN0, HIGH);
     ed6:	81 e0       	ldi	r24, 0x01	; 1
     ed8:	60 e0       	ldi	r22, 0x00	; 0
     eda:	41 e0       	ldi	r20, 0x01	; 1
     edc:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <DIO_VidSitPintValue>
     ee0:	80 e0       	ldi	r24, 0x00	; 0
     ee2:	90 e0       	ldi	r25, 0x00	; 0
     ee4:	aa ef       	ldi	r26, 0xFA	; 250
     ee6:	b4 e4       	ldi	r27, 0x44	; 68
     ee8:	8b 87       	std	Y+11, r24	; 0x0b
     eea:	9c 87       	std	Y+12, r25	; 0x0c
     eec:	ad 87       	std	Y+13, r26	; 0x0d
     eee:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ef0:	6b 85       	ldd	r22, Y+11	; 0x0b
     ef2:	7c 85       	ldd	r23, Y+12	; 0x0c
     ef4:	8d 85       	ldd	r24, Y+13	; 0x0d
     ef6:	9e 85       	ldd	r25, Y+14	; 0x0e
     ef8:	20 e0       	ldi	r18, 0x00	; 0
     efa:	30 e0       	ldi	r19, 0x00	; 0
     efc:	4a ef       	ldi	r20, 0xFA	; 250
     efe:	54 e4       	ldi	r21, 0x44	; 68
     f00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f04:	dc 01       	movw	r26, r24
     f06:	cb 01       	movw	r24, r22
     f08:	8f 83       	std	Y+7, r24	; 0x07
     f0a:	98 87       	std	Y+8, r25	; 0x08
     f0c:	a9 87       	std	Y+9, r26	; 0x09
     f0e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     f10:	6f 81       	ldd	r22, Y+7	; 0x07
     f12:	78 85       	ldd	r23, Y+8	; 0x08
     f14:	89 85       	ldd	r24, Y+9	; 0x09
     f16:	9a 85       	ldd	r25, Y+10	; 0x0a
     f18:	20 e0       	ldi	r18, 0x00	; 0
     f1a:	30 e0       	ldi	r19, 0x00	; 0
     f1c:	40 e8       	ldi	r20, 0x80	; 128
     f1e:	5f e3       	ldi	r21, 0x3F	; 63
     f20:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f24:	88 23       	and	r24, r24
     f26:	2c f4       	brge	.+10     	; 0xf32 <__vector_1+0x8c>
		__ticks = 1;
     f28:	81 e0       	ldi	r24, 0x01	; 1
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	9e 83       	std	Y+6, r25	; 0x06
     f2e:	8d 83       	std	Y+5, r24	; 0x05
     f30:	3f c0       	rjmp	.+126    	; 0xfb0 <__vector_1+0x10a>
	else if (__tmp > 65535)
     f32:	6f 81       	ldd	r22, Y+7	; 0x07
     f34:	78 85       	ldd	r23, Y+8	; 0x08
     f36:	89 85       	ldd	r24, Y+9	; 0x09
     f38:	9a 85       	ldd	r25, Y+10	; 0x0a
     f3a:	20 e0       	ldi	r18, 0x00	; 0
     f3c:	3f ef       	ldi	r19, 0xFF	; 255
     f3e:	4f e7       	ldi	r20, 0x7F	; 127
     f40:	57 e4       	ldi	r21, 0x47	; 71
     f42:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f46:	18 16       	cp	r1, r24
     f48:	4c f5       	brge	.+82     	; 0xf9c <__vector_1+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f4a:	6b 85       	ldd	r22, Y+11	; 0x0b
     f4c:	7c 85       	ldd	r23, Y+12	; 0x0c
     f4e:	8d 85       	ldd	r24, Y+13	; 0x0d
     f50:	9e 85       	ldd	r25, Y+14	; 0x0e
     f52:	20 e0       	ldi	r18, 0x00	; 0
     f54:	30 e0       	ldi	r19, 0x00	; 0
     f56:	40 e2       	ldi	r20, 0x20	; 32
     f58:	51 e4       	ldi	r21, 0x41	; 65
     f5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f5e:	dc 01       	movw	r26, r24
     f60:	cb 01       	movw	r24, r22
     f62:	bc 01       	movw	r22, r24
     f64:	cd 01       	movw	r24, r26
     f66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f6a:	dc 01       	movw	r26, r24
     f6c:	cb 01       	movw	r24, r22
     f6e:	9e 83       	std	Y+6, r25	; 0x06
     f70:	8d 83       	std	Y+5, r24	; 0x05
     f72:	0f c0       	rjmp	.+30     	; 0xf92 <__vector_1+0xec>
     f74:	88 ec       	ldi	r24, 0xC8	; 200
     f76:	90 e0       	ldi	r25, 0x00	; 0
     f78:	9c 83       	std	Y+4, r25	; 0x04
     f7a:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     f7c:	8b 81       	ldd	r24, Y+3	; 0x03
     f7e:	9c 81       	ldd	r25, Y+4	; 0x04
     f80:	01 97       	sbiw	r24, 0x01	; 1
     f82:	f1 f7       	brne	.-4      	; 0xf80 <__vector_1+0xda>
     f84:	9c 83       	std	Y+4, r25	; 0x04
     f86:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f88:	8d 81       	ldd	r24, Y+5	; 0x05
     f8a:	9e 81       	ldd	r25, Y+6	; 0x06
     f8c:	01 97       	sbiw	r24, 0x01	; 1
     f8e:	9e 83       	std	Y+6, r25	; 0x06
     f90:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f92:	8d 81       	ldd	r24, Y+5	; 0x05
     f94:	9e 81       	ldd	r25, Y+6	; 0x06
     f96:	00 97       	sbiw	r24, 0x00	; 0
     f98:	69 f7       	brne	.-38     	; 0xf74 <__vector_1+0xce>
     f9a:	14 c0       	rjmp	.+40     	; 0xfc4 <__vector_1+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f9c:	6f 81       	ldd	r22, Y+7	; 0x07
     f9e:	78 85       	ldd	r23, Y+8	; 0x08
     fa0:	89 85       	ldd	r24, Y+9	; 0x09
     fa2:	9a 85       	ldd	r25, Y+10	; 0x0a
     fa4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fa8:	dc 01       	movw	r26, r24
     faa:	cb 01       	movw	r24, r22
     fac:	9e 83       	std	Y+6, r25	; 0x06
     fae:	8d 83       	std	Y+5, r24	; 0x05
     fb0:	8d 81       	ldd	r24, Y+5	; 0x05
     fb2:	9e 81       	ldd	r25, Y+6	; 0x06
     fb4:	9a 83       	std	Y+2, r25	; 0x02
     fb6:	89 83       	std	Y+1, r24	; 0x01
     fb8:	89 81       	ldd	r24, Y+1	; 0x01
     fba:	9a 81       	ldd	r25, Y+2	; 0x02
     fbc:	01 97       	sbiw	r24, 0x01	; 1
     fbe:	f1 f7       	brne	.-4      	; 0xfbc <__vector_1+0x116>
     fc0:	9a 83       	std	Y+2, r25	; 0x02
     fc2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2000);
	DIO_VidSitPintValue(PORTB,PIN0, LOW);
     fc4:	81 e0       	ldi	r24, 0x01	; 1
     fc6:	60 e0       	ldi	r22, 0x00	; 0
     fc8:	40 e0       	ldi	r20, 0x00	; 0
     fca:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <DIO_VidSitPintValue>
}
     fce:	2e 96       	adiw	r28, 0x0e	; 14
     fd0:	de bf       	out	0x3e, r29	; 62
     fd2:	cd bf       	out	0x3d, r28	; 61
     fd4:	cf 91       	pop	r28
     fd6:	df 91       	pop	r29
     fd8:	ff 91       	pop	r31
     fda:	ef 91       	pop	r30
     fdc:	bf 91       	pop	r27
     fde:	af 91       	pop	r26
     fe0:	9f 91       	pop	r25
     fe2:	8f 91       	pop	r24
     fe4:	7f 91       	pop	r23
     fe6:	6f 91       	pop	r22
     fe8:	5f 91       	pop	r21
     fea:	4f 91       	pop	r20
     fec:	3f 91       	pop	r19
     fee:	2f 91       	pop	r18
     ff0:	0f 90       	pop	r0
     ff2:	0f be       	out	0x3f, r0	; 63
     ff4:	0f 90       	pop	r0
     ff6:	1f 90       	pop	r1
     ff8:	18 95       	reti

00000ffa <__vector_2>:
ISR(INT1_VECT,ISR_NoBlock)
{
     ffa:	78 94       	sei
     ffc:	1f 92       	push	r1
     ffe:	0f 92       	push	r0
    1000:	0f b6       	in	r0, 0x3f	; 63
    1002:	0f 92       	push	r0
    1004:	11 24       	eor	r1, r1
    1006:	2f 93       	push	r18
    1008:	3f 93       	push	r19
    100a:	4f 93       	push	r20
    100c:	5f 93       	push	r21
    100e:	6f 93       	push	r22
    1010:	7f 93       	push	r23
    1012:	8f 93       	push	r24
    1014:	9f 93       	push	r25
    1016:	af 93       	push	r26
    1018:	bf 93       	push	r27
    101a:	ef 93       	push	r30
    101c:	ff 93       	push	r31
    101e:	df 93       	push	r29
    1020:	cf 93       	push	r28
    1022:	cd b7       	in	r28, 0x3d	; 61
    1024:	de b7       	in	r29, 0x3e	; 62
    1026:	2e 97       	sbiw	r28, 0x0e	; 14
    1028:	de bf       	out	0x3e, r29	; 62
    102a:	cd bf       	out	0x3d, r28	; 61
	DIO_VidSitPintValue(PORTB,PIN1, HIGH);
    102c:	81 e0       	ldi	r24, 0x01	; 1
    102e:	61 e0       	ldi	r22, 0x01	; 1
    1030:	41 e0       	ldi	r20, 0x01	; 1
    1032:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <DIO_VidSitPintValue>
    1036:	80 e0       	ldi	r24, 0x00	; 0
    1038:	90 e0       	ldi	r25, 0x00	; 0
    103a:	aa ef       	ldi	r26, 0xFA	; 250
    103c:	b4 e4       	ldi	r27, 0x44	; 68
    103e:	8b 87       	std	Y+11, r24	; 0x0b
    1040:	9c 87       	std	Y+12, r25	; 0x0c
    1042:	ad 87       	std	Y+13, r26	; 0x0d
    1044:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1046:	6b 85       	ldd	r22, Y+11	; 0x0b
    1048:	7c 85       	ldd	r23, Y+12	; 0x0c
    104a:	8d 85       	ldd	r24, Y+13	; 0x0d
    104c:	9e 85       	ldd	r25, Y+14	; 0x0e
    104e:	20 e0       	ldi	r18, 0x00	; 0
    1050:	30 e0       	ldi	r19, 0x00	; 0
    1052:	4a ef       	ldi	r20, 0xFA	; 250
    1054:	54 e4       	ldi	r21, 0x44	; 68
    1056:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    105a:	dc 01       	movw	r26, r24
    105c:	cb 01       	movw	r24, r22
    105e:	8f 83       	std	Y+7, r24	; 0x07
    1060:	98 87       	std	Y+8, r25	; 0x08
    1062:	a9 87       	std	Y+9, r26	; 0x09
    1064:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1066:	6f 81       	ldd	r22, Y+7	; 0x07
    1068:	78 85       	ldd	r23, Y+8	; 0x08
    106a:	89 85       	ldd	r24, Y+9	; 0x09
    106c:	9a 85       	ldd	r25, Y+10	; 0x0a
    106e:	20 e0       	ldi	r18, 0x00	; 0
    1070:	30 e0       	ldi	r19, 0x00	; 0
    1072:	40 e8       	ldi	r20, 0x80	; 128
    1074:	5f e3       	ldi	r21, 0x3F	; 63
    1076:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    107a:	88 23       	and	r24, r24
    107c:	2c f4       	brge	.+10     	; 0x1088 <__vector_2+0x8e>
		__ticks = 1;
    107e:	81 e0       	ldi	r24, 0x01	; 1
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	9e 83       	std	Y+6, r25	; 0x06
    1084:	8d 83       	std	Y+5, r24	; 0x05
    1086:	3f c0       	rjmp	.+126    	; 0x1106 <__vector_2+0x10c>
	else if (__tmp > 65535)
    1088:	6f 81       	ldd	r22, Y+7	; 0x07
    108a:	78 85       	ldd	r23, Y+8	; 0x08
    108c:	89 85       	ldd	r24, Y+9	; 0x09
    108e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1090:	20 e0       	ldi	r18, 0x00	; 0
    1092:	3f ef       	ldi	r19, 0xFF	; 255
    1094:	4f e7       	ldi	r20, 0x7F	; 127
    1096:	57 e4       	ldi	r21, 0x47	; 71
    1098:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    109c:	18 16       	cp	r1, r24
    109e:	4c f5       	brge	.+82     	; 0x10f2 <__vector_2+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    10a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    10a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    10a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    10a8:	20 e0       	ldi	r18, 0x00	; 0
    10aa:	30 e0       	ldi	r19, 0x00	; 0
    10ac:	40 e2       	ldi	r20, 0x20	; 32
    10ae:	51 e4       	ldi	r21, 0x41	; 65
    10b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10b4:	dc 01       	movw	r26, r24
    10b6:	cb 01       	movw	r24, r22
    10b8:	bc 01       	movw	r22, r24
    10ba:	cd 01       	movw	r24, r26
    10bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10c0:	dc 01       	movw	r26, r24
    10c2:	cb 01       	movw	r24, r22
    10c4:	9e 83       	std	Y+6, r25	; 0x06
    10c6:	8d 83       	std	Y+5, r24	; 0x05
    10c8:	0f c0       	rjmp	.+30     	; 0x10e8 <__vector_2+0xee>
    10ca:	88 ec       	ldi	r24, 0xC8	; 200
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	9c 83       	std	Y+4, r25	; 0x04
    10d0:	8b 83       	std	Y+3, r24	; 0x03
    10d2:	8b 81       	ldd	r24, Y+3	; 0x03
    10d4:	9c 81       	ldd	r25, Y+4	; 0x04
    10d6:	01 97       	sbiw	r24, 0x01	; 1
    10d8:	f1 f7       	brne	.-4      	; 0x10d6 <__vector_2+0xdc>
    10da:	9c 83       	std	Y+4, r25	; 0x04
    10dc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10de:	8d 81       	ldd	r24, Y+5	; 0x05
    10e0:	9e 81       	ldd	r25, Y+6	; 0x06
    10e2:	01 97       	sbiw	r24, 0x01	; 1
    10e4:	9e 83       	std	Y+6, r25	; 0x06
    10e6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10e8:	8d 81       	ldd	r24, Y+5	; 0x05
    10ea:	9e 81       	ldd	r25, Y+6	; 0x06
    10ec:	00 97       	sbiw	r24, 0x00	; 0
    10ee:	69 f7       	brne	.-38     	; 0x10ca <__vector_2+0xd0>
    10f0:	14 c0       	rjmp	.+40     	; 0x111a <__vector_2+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10f2:	6f 81       	ldd	r22, Y+7	; 0x07
    10f4:	78 85       	ldd	r23, Y+8	; 0x08
    10f6:	89 85       	ldd	r24, Y+9	; 0x09
    10f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    10fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10fe:	dc 01       	movw	r26, r24
    1100:	cb 01       	movw	r24, r22
    1102:	9e 83       	std	Y+6, r25	; 0x06
    1104:	8d 83       	std	Y+5, r24	; 0x05
    1106:	8d 81       	ldd	r24, Y+5	; 0x05
    1108:	9e 81       	ldd	r25, Y+6	; 0x06
    110a:	9a 83       	std	Y+2, r25	; 0x02
    110c:	89 83       	std	Y+1, r24	; 0x01
    110e:	89 81       	ldd	r24, Y+1	; 0x01
    1110:	9a 81       	ldd	r25, Y+2	; 0x02
    1112:	01 97       	sbiw	r24, 0x01	; 1
    1114:	f1 f7       	brne	.-4      	; 0x1112 <__vector_2+0x118>
    1116:	9a 83       	std	Y+2, r25	; 0x02
    1118:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2000);
	DIO_VidSitPintValue(PORTB,PIN1, LOW);
    111a:	81 e0       	ldi	r24, 0x01	; 1
    111c:	61 e0       	ldi	r22, 0x01	; 1
    111e:	40 e0       	ldi	r20, 0x00	; 0
    1120:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <DIO_VidSitPintValue>

}
    1124:	2e 96       	adiw	r28, 0x0e	; 14
    1126:	de bf       	out	0x3e, r29	; 62
    1128:	cd bf       	out	0x3d, r28	; 61
    112a:	cf 91       	pop	r28
    112c:	df 91       	pop	r29
    112e:	ff 91       	pop	r31
    1130:	ef 91       	pop	r30
    1132:	bf 91       	pop	r27
    1134:	af 91       	pop	r26
    1136:	9f 91       	pop	r25
    1138:	8f 91       	pop	r24
    113a:	7f 91       	pop	r23
    113c:	6f 91       	pop	r22
    113e:	5f 91       	pop	r21
    1140:	4f 91       	pop	r20
    1142:	3f 91       	pop	r19
    1144:	2f 91       	pop	r18
    1146:	0f 90       	pop	r0
    1148:	0f be       	out	0x3f, r0	; 63
    114a:	0f 90       	pop	r0
    114c:	1f 90       	pop	r1
    114e:	18 95       	reti

00001150 <__vector_3>:
ISR(INT2_VECT)
{
    1150:	1f 92       	push	r1
    1152:	0f 92       	push	r0
    1154:	0f b6       	in	r0, 0x3f	; 63
    1156:	0f 92       	push	r0
    1158:	11 24       	eor	r1, r1
    115a:	2f 93       	push	r18
    115c:	3f 93       	push	r19
    115e:	4f 93       	push	r20
    1160:	5f 93       	push	r21
    1162:	6f 93       	push	r22
    1164:	7f 93       	push	r23
    1166:	8f 93       	push	r24
    1168:	9f 93       	push	r25
    116a:	af 93       	push	r26
    116c:	bf 93       	push	r27
    116e:	ef 93       	push	r30
    1170:	ff 93       	push	r31
    1172:	df 93       	push	r29
    1174:	cf 93       	push	r28
    1176:	cd b7       	in	r28, 0x3d	; 61
    1178:	de b7       	in	r29, 0x3e	; 62
    117a:	2e 97       	sbiw	r28, 0x0e	; 14
    117c:	de bf       	out	0x3e, r29	; 62
    117e:	cd bf       	out	0x3d, r28	; 61
	DIO_VidSitPintValue(PORTB,PIN7, HIGH);
    1180:	81 e0       	ldi	r24, 0x01	; 1
    1182:	67 e0       	ldi	r22, 0x07	; 7
    1184:	41 e0       	ldi	r20, 0x01	; 1
    1186:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <DIO_VidSitPintValue>
    118a:	80 e0       	ldi	r24, 0x00	; 0
    118c:	90 e0       	ldi	r25, 0x00	; 0
    118e:	aa ef       	ldi	r26, 0xFA	; 250
    1190:	b4 e4       	ldi	r27, 0x44	; 68
    1192:	8b 87       	std	Y+11, r24	; 0x0b
    1194:	9c 87       	std	Y+12, r25	; 0x0c
    1196:	ad 87       	std	Y+13, r26	; 0x0d
    1198:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    119a:	6b 85       	ldd	r22, Y+11	; 0x0b
    119c:	7c 85       	ldd	r23, Y+12	; 0x0c
    119e:	8d 85       	ldd	r24, Y+13	; 0x0d
    11a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    11a2:	20 e0       	ldi	r18, 0x00	; 0
    11a4:	30 e0       	ldi	r19, 0x00	; 0
    11a6:	4a ef       	ldi	r20, 0xFA	; 250
    11a8:	54 e4       	ldi	r21, 0x44	; 68
    11aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11ae:	dc 01       	movw	r26, r24
    11b0:	cb 01       	movw	r24, r22
    11b2:	8f 83       	std	Y+7, r24	; 0x07
    11b4:	98 87       	std	Y+8, r25	; 0x08
    11b6:	a9 87       	std	Y+9, r26	; 0x09
    11b8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    11ba:	6f 81       	ldd	r22, Y+7	; 0x07
    11bc:	78 85       	ldd	r23, Y+8	; 0x08
    11be:	89 85       	ldd	r24, Y+9	; 0x09
    11c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    11c2:	20 e0       	ldi	r18, 0x00	; 0
    11c4:	30 e0       	ldi	r19, 0x00	; 0
    11c6:	40 e8       	ldi	r20, 0x80	; 128
    11c8:	5f e3       	ldi	r21, 0x3F	; 63
    11ca:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    11ce:	88 23       	and	r24, r24
    11d0:	2c f4       	brge	.+10     	; 0x11dc <__vector_3+0x8c>
		__ticks = 1;
    11d2:	81 e0       	ldi	r24, 0x01	; 1
    11d4:	90 e0       	ldi	r25, 0x00	; 0
    11d6:	9e 83       	std	Y+6, r25	; 0x06
    11d8:	8d 83       	std	Y+5, r24	; 0x05
    11da:	3f c0       	rjmp	.+126    	; 0x125a <__vector_3+0x10a>
	else if (__tmp > 65535)
    11dc:	6f 81       	ldd	r22, Y+7	; 0x07
    11de:	78 85       	ldd	r23, Y+8	; 0x08
    11e0:	89 85       	ldd	r24, Y+9	; 0x09
    11e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    11e4:	20 e0       	ldi	r18, 0x00	; 0
    11e6:	3f ef       	ldi	r19, 0xFF	; 255
    11e8:	4f e7       	ldi	r20, 0x7F	; 127
    11ea:	57 e4       	ldi	r21, 0x47	; 71
    11ec:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    11f0:	18 16       	cp	r1, r24
    11f2:	4c f5       	brge	.+82     	; 0x1246 <__vector_3+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    11f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    11f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    11fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    11fc:	20 e0       	ldi	r18, 0x00	; 0
    11fe:	30 e0       	ldi	r19, 0x00	; 0
    1200:	40 e2       	ldi	r20, 0x20	; 32
    1202:	51 e4       	ldi	r21, 0x41	; 65
    1204:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1208:	dc 01       	movw	r26, r24
    120a:	cb 01       	movw	r24, r22
    120c:	bc 01       	movw	r22, r24
    120e:	cd 01       	movw	r24, r26
    1210:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1214:	dc 01       	movw	r26, r24
    1216:	cb 01       	movw	r24, r22
    1218:	9e 83       	std	Y+6, r25	; 0x06
    121a:	8d 83       	std	Y+5, r24	; 0x05
    121c:	0f c0       	rjmp	.+30     	; 0x123c <__vector_3+0xec>
    121e:	88 ec       	ldi	r24, 0xC8	; 200
    1220:	90 e0       	ldi	r25, 0x00	; 0
    1222:	9c 83       	std	Y+4, r25	; 0x04
    1224:	8b 83       	std	Y+3, r24	; 0x03
    1226:	8b 81       	ldd	r24, Y+3	; 0x03
    1228:	9c 81       	ldd	r25, Y+4	; 0x04
    122a:	01 97       	sbiw	r24, 0x01	; 1
    122c:	f1 f7       	brne	.-4      	; 0x122a <__vector_3+0xda>
    122e:	9c 83       	std	Y+4, r25	; 0x04
    1230:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1232:	8d 81       	ldd	r24, Y+5	; 0x05
    1234:	9e 81       	ldd	r25, Y+6	; 0x06
    1236:	01 97       	sbiw	r24, 0x01	; 1
    1238:	9e 83       	std	Y+6, r25	; 0x06
    123a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    123c:	8d 81       	ldd	r24, Y+5	; 0x05
    123e:	9e 81       	ldd	r25, Y+6	; 0x06
    1240:	00 97       	sbiw	r24, 0x00	; 0
    1242:	69 f7       	brne	.-38     	; 0x121e <__vector_3+0xce>
    1244:	14 c0       	rjmp	.+40     	; 0x126e <__vector_3+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1246:	6f 81       	ldd	r22, Y+7	; 0x07
    1248:	78 85       	ldd	r23, Y+8	; 0x08
    124a:	89 85       	ldd	r24, Y+9	; 0x09
    124c:	9a 85       	ldd	r25, Y+10	; 0x0a
    124e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1252:	dc 01       	movw	r26, r24
    1254:	cb 01       	movw	r24, r22
    1256:	9e 83       	std	Y+6, r25	; 0x06
    1258:	8d 83       	std	Y+5, r24	; 0x05
    125a:	8d 81       	ldd	r24, Y+5	; 0x05
    125c:	9e 81       	ldd	r25, Y+6	; 0x06
    125e:	9a 83       	std	Y+2, r25	; 0x02
    1260:	89 83       	std	Y+1, r24	; 0x01
    1262:	89 81       	ldd	r24, Y+1	; 0x01
    1264:	9a 81       	ldd	r25, Y+2	; 0x02
    1266:	01 97       	sbiw	r24, 0x01	; 1
    1268:	f1 f7       	brne	.-4      	; 0x1266 <__vector_3+0x116>
    126a:	9a 83       	std	Y+2, r25	; 0x02
    126c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2000);
	DIO_VidSitPintValue(PORTB,PIN7, LOW);
    126e:	81 e0       	ldi	r24, 0x01	; 1
    1270:	67 e0       	ldi	r22, 0x07	; 7
    1272:	40 e0       	ldi	r20, 0x00	; 0
    1274:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <DIO_VidSitPintValue>

}
    1278:	2e 96       	adiw	r28, 0x0e	; 14
    127a:	de bf       	out	0x3e, r29	; 62
    127c:	cd bf       	out	0x3d, r28	; 61
    127e:	cf 91       	pop	r28
    1280:	df 91       	pop	r29
    1282:	ff 91       	pop	r31
    1284:	ef 91       	pop	r30
    1286:	bf 91       	pop	r27
    1288:	af 91       	pop	r26
    128a:	9f 91       	pop	r25
    128c:	8f 91       	pop	r24
    128e:	7f 91       	pop	r23
    1290:	6f 91       	pop	r22
    1292:	5f 91       	pop	r21
    1294:	4f 91       	pop	r20
    1296:	3f 91       	pop	r19
    1298:	2f 91       	pop	r18
    129a:	0f 90       	pop	r0
    129c:	0f be       	out	0x3f, r0	; 63
    129e:	0f 90       	pop	r0
    12a0:	1f 90       	pop	r1
    12a2:	18 95       	reti

000012a4 <DIO_VidSitPortDirection>:
#include "../../LIB/BIT_MATH.h"
#include "DIO_Regster.h"
#include "DIO_TYPE.h"

void DIO_VidSitPortDirection(DIO_PORT_ID LOC_Port_ID,DIO_Direction LOC_Port_Direction)
{
    12a4:	df 93       	push	r29
    12a6:	cf 93       	push	r28
    12a8:	00 d0       	rcall	.+0      	; 0x12aa <DIO_VidSitPortDirection+0x6>
    12aa:	00 d0       	rcall	.+0      	; 0x12ac <DIO_VidSitPortDirection+0x8>
    12ac:	cd b7       	in	r28, 0x3d	; 61
    12ae:	de b7       	in	r29, 0x3e	; 62
    12b0:	89 83       	std	Y+1, r24	; 0x01
    12b2:	6a 83       	std	Y+2, r22	; 0x02
			case PORTC: DDRC_Reg=0x00; break;
			case PORTD: DDRD_Reg=0x00; break;
		}
	}
}*/
	switch (LOC_Port_ID)
    12b4:	89 81       	ldd	r24, Y+1	; 0x01
    12b6:	28 2f       	mov	r18, r24
    12b8:	30 e0       	ldi	r19, 0x00	; 0
    12ba:	3c 83       	std	Y+4, r19	; 0x04
    12bc:	2b 83       	std	Y+3, r18	; 0x03
    12be:	8b 81       	ldd	r24, Y+3	; 0x03
    12c0:	9c 81       	ldd	r25, Y+4	; 0x04
    12c2:	81 30       	cpi	r24, 0x01	; 1
    12c4:	91 05       	cpc	r25, r1
    12c6:	d1 f0       	breq	.+52     	; 0x12fc <DIO_VidSitPortDirection+0x58>
    12c8:	2b 81       	ldd	r18, Y+3	; 0x03
    12ca:	3c 81       	ldd	r19, Y+4	; 0x04
    12cc:	22 30       	cpi	r18, 0x02	; 2
    12ce:	31 05       	cpc	r19, r1
    12d0:	2c f4       	brge	.+10     	; 0x12dc <DIO_VidSitPortDirection+0x38>
    12d2:	8b 81       	ldd	r24, Y+3	; 0x03
    12d4:	9c 81       	ldd	r25, Y+4	; 0x04
    12d6:	00 97       	sbiw	r24, 0x00	; 0
    12d8:	61 f0       	breq	.+24     	; 0x12f2 <DIO_VidSitPortDirection+0x4e>
    12da:	1e c0       	rjmp	.+60     	; 0x1318 <DIO_VidSitPortDirection+0x74>
    12dc:	2b 81       	ldd	r18, Y+3	; 0x03
    12de:	3c 81       	ldd	r19, Y+4	; 0x04
    12e0:	22 30       	cpi	r18, 0x02	; 2
    12e2:	31 05       	cpc	r19, r1
    12e4:	81 f0       	breq	.+32     	; 0x1306 <DIO_VidSitPortDirection+0x62>
    12e6:	8b 81       	ldd	r24, Y+3	; 0x03
    12e8:	9c 81       	ldd	r25, Y+4	; 0x04
    12ea:	83 30       	cpi	r24, 0x03	; 3
    12ec:	91 05       	cpc	r25, r1
    12ee:	81 f0       	breq	.+32     	; 0x1310 <DIO_VidSitPortDirection+0x6c>
    12f0:	13 c0       	rjmp	.+38     	; 0x1318 <DIO_VidSitPortDirection+0x74>
	{
	case 0: DDRA_Reg = LOC_Port_Direction; break;
    12f2:	ea e3       	ldi	r30, 0x3A	; 58
    12f4:	f0 e0       	ldi	r31, 0x00	; 0
    12f6:	8a 81       	ldd	r24, Y+2	; 0x02
    12f8:	80 83       	st	Z, r24
    12fa:	0e c0       	rjmp	.+28     	; 0x1318 <DIO_VidSitPortDirection+0x74>
	case 1: DDRB_Reg = LOC_Port_Direction; break;
    12fc:	e7 e3       	ldi	r30, 0x37	; 55
    12fe:	f0 e0       	ldi	r31, 0x00	; 0
    1300:	8a 81       	ldd	r24, Y+2	; 0x02
    1302:	80 83       	st	Z, r24
    1304:	09 c0       	rjmp	.+18     	; 0x1318 <DIO_VidSitPortDirection+0x74>
	case 2: DDRC_Reg = LOC_Port_Direction; break;
    1306:	e4 e3       	ldi	r30, 0x34	; 52
    1308:	f0 e0       	ldi	r31, 0x00	; 0
    130a:	8a 81       	ldd	r24, Y+2	; 0x02
    130c:	80 83       	st	Z, r24
    130e:	04 c0       	rjmp	.+8      	; 0x1318 <DIO_VidSitPortDirection+0x74>
	case 3: DDRD_Reg = LOC_Port_Direction; break;
    1310:	e1 e3       	ldi	r30, 0x31	; 49
    1312:	f0 e0       	ldi	r31, 0x00	; 0
    1314:	8a 81       	ldd	r24, Y+2	; 0x02
    1316:	80 83       	st	Z, r24
	}
}
    1318:	0f 90       	pop	r0
    131a:	0f 90       	pop	r0
    131c:	0f 90       	pop	r0
    131e:	0f 90       	pop	r0
    1320:	cf 91       	pop	r28
    1322:	df 91       	pop	r29
    1324:	08 95       	ret

00001326 <DIO_VidSitPortValue>:

void DIO_VidSitPortValue(DIO_PORT_ID LOC_Port_ID,u8 LOC_Port_Value)
{
    1326:	df 93       	push	r29
    1328:	cf 93       	push	r28
    132a:	00 d0       	rcall	.+0      	; 0x132c <DIO_VidSitPortValue+0x6>
    132c:	00 d0       	rcall	.+0      	; 0x132e <DIO_VidSitPortValue+0x8>
    132e:	cd b7       	in	r28, 0x3d	; 61
    1330:	de b7       	in	r29, 0x3e	; 62
    1332:	89 83       	std	Y+1, r24	; 0x01
    1334:	6a 83       	std	Y+2, r22	; 0x02

			switch (LOC_Port_ID)
    1336:	89 81       	ldd	r24, Y+1	; 0x01
    1338:	28 2f       	mov	r18, r24
    133a:	30 e0       	ldi	r19, 0x00	; 0
    133c:	3c 83       	std	Y+4, r19	; 0x04
    133e:	2b 83       	std	Y+3, r18	; 0x03
    1340:	8b 81       	ldd	r24, Y+3	; 0x03
    1342:	9c 81       	ldd	r25, Y+4	; 0x04
    1344:	81 30       	cpi	r24, 0x01	; 1
    1346:	91 05       	cpc	r25, r1
    1348:	d1 f0       	breq	.+52     	; 0x137e <DIO_VidSitPortValue+0x58>
    134a:	2b 81       	ldd	r18, Y+3	; 0x03
    134c:	3c 81       	ldd	r19, Y+4	; 0x04
    134e:	22 30       	cpi	r18, 0x02	; 2
    1350:	31 05       	cpc	r19, r1
    1352:	2c f4       	brge	.+10     	; 0x135e <DIO_VidSitPortValue+0x38>
    1354:	8b 81       	ldd	r24, Y+3	; 0x03
    1356:	9c 81       	ldd	r25, Y+4	; 0x04
    1358:	00 97       	sbiw	r24, 0x00	; 0
    135a:	61 f0       	breq	.+24     	; 0x1374 <DIO_VidSitPortValue+0x4e>
    135c:	1e c0       	rjmp	.+60     	; 0x139a <DIO_VidSitPortValue+0x74>
    135e:	2b 81       	ldd	r18, Y+3	; 0x03
    1360:	3c 81       	ldd	r19, Y+4	; 0x04
    1362:	22 30       	cpi	r18, 0x02	; 2
    1364:	31 05       	cpc	r19, r1
    1366:	81 f0       	breq	.+32     	; 0x1388 <DIO_VidSitPortValue+0x62>
    1368:	8b 81       	ldd	r24, Y+3	; 0x03
    136a:	9c 81       	ldd	r25, Y+4	; 0x04
    136c:	83 30       	cpi	r24, 0x03	; 3
    136e:	91 05       	cpc	r25, r1
    1370:	81 f0       	breq	.+32     	; 0x1392 <DIO_VidSitPortValue+0x6c>
    1372:	13 c0       	rjmp	.+38     	; 0x139a <DIO_VidSitPortValue+0x74>
			{
				case PORTA: PORTA_Reg=LOC_Port_Value; break;
    1374:	eb e3       	ldi	r30, 0x3B	; 59
    1376:	f0 e0       	ldi	r31, 0x00	; 0
    1378:	8a 81       	ldd	r24, Y+2	; 0x02
    137a:	80 83       	st	Z, r24
    137c:	0e c0       	rjmp	.+28     	; 0x139a <DIO_VidSitPortValue+0x74>
				case PORTB: PORTB_Reg=LOC_Port_Value; break;
    137e:	e8 e3       	ldi	r30, 0x38	; 56
    1380:	f0 e0       	ldi	r31, 0x00	; 0
    1382:	8a 81       	ldd	r24, Y+2	; 0x02
    1384:	80 83       	st	Z, r24
    1386:	09 c0       	rjmp	.+18     	; 0x139a <DIO_VidSitPortValue+0x74>
				case PORTC: PORTC_Reg=LOC_Port_Value; break;
    1388:	e5 e3       	ldi	r30, 0x35	; 53
    138a:	f0 e0       	ldi	r31, 0x00	; 0
    138c:	8a 81       	ldd	r24, Y+2	; 0x02
    138e:	80 83       	st	Z, r24
    1390:	04 c0       	rjmp	.+8      	; 0x139a <DIO_VidSitPortValue+0x74>
				case PORTD: PORTD_Reg=LOC_Port_Value; break;
    1392:	e2 e3       	ldi	r30, 0x32	; 50
    1394:	f0 e0       	ldi	r31, 0x00	; 0
    1396:	8a 81       	ldd	r24, Y+2	; 0x02
    1398:	80 83       	st	Z, r24
			}

}
    139a:	0f 90       	pop	r0
    139c:	0f 90       	pop	r0
    139e:	0f 90       	pop	r0
    13a0:	0f 90       	pop	r0
    13a2:	cf 91       	pop	r28
    13a4:	df 91       	pop	r29
    13a6:	08 95       	ret

000013a8 <DIO_VidSitPintDirection>:

void DIO_VidSitPintDirection(DIO_PORT_ID LOC_Port_ID,DIO_PIN_ID  LOC_Pin_ID,DIO_Direction LOC_Pin_Direction)
{
    13a8:	df 93       	push	r29
    13aa:	cf 93       	push	r28
    13ac:	cd b7       	in	r28, 0x3d	; 61
    13ae:	de b7       	in	r29, 0x3e	; 62
    13b0:	27 97       	sbiw	r28, 0x07	; 7
    13b2:	0f b6       	in	r0, 0x3f	; 63
    13b4:	f8 94       	cli
    13b6:	de bf       	out	0x3e, r29	; 62
    13b8:	0f be       	out	0x3f, r0	; 63
    13ba:	cd bf       	out	0x3d, r28	; 61
    13bc:	89 83       	std	Y+1, r24	; 0x01
    13be:	6a 83       	std	Y+2, r22	; 0x02
    13c0:	4b 83       	std	Y+3, r20	; 0x03
	if (LOC_Port_ID <=PORTD &&LOC_Pin_ID <= PIN7)
    13c2:	89 81       	ldd	r24, Y+1	; 0x01
    13c4:	84 30       	cpi	r24, 0x04	; 4
    13c6:	08 f0       	brcs	.+2      	; 0x13ca <DIO_VidSitPintDirection+0x22>
    13c8:	ed c0       	rjmp	.+474    	; 0x15a4 <DIO_VidSitPintDirection+0x1fc>
    13ca:	8a 81       	ldd	r24, Y+2	; 0x02
    13cc:	88 30       	cpi	r24, 0x08	; 8
    13ce:	08 f0       	brcs	.+2      	; 0x13d2 <DIO_VidSitPintDirection+0x2a>
    13d0:	e9 c0       	rjmp	.+466    	; 0x15a4 <DIO_VidSitPintDirection+0x1fc>
	{
		if(OUTPUT ==LOC_Pin_Direction)
    13d2:	8b 81       	ldd	r24, Y+3	; 0x03
    13d4:	81 30       	cpi	r24, 0x01	; 1
    13d6:	09 f0       	breq	.+2      	; 0x13da <DIO_VidSitPintDirection+0x32>
    13d8:	6e c0       	rjmp	.+220    	; 0x14b6 <DIO_VidSitPintDirection+0x10e>
		{
			switch(LOC_Port_ID)
    13da:	89 81       	ldd	r24, Y+1	; 0x01
    13dc:	28 2f       	mov	r18, r24
    13de:	30 e0       	ldi	r19, 0x00	; 0
    13e0:	3f 83       	std	Y+7, r19	; 0x07
    13e2:	2e 83       	std	Y+6, r18	; 0x06
    13e4:	8e 81       	ldd	r24, Y+6	; 0x06
    13e6:	9f 81       	ldd	r25, Y+7	; 0x07
    13e8:	81 30       	cpi	r24, 0x01	; 1
    13ea:	91 05       	cpc	r25, r1
    13ec:	49 f1       	breq	.+82     	; 0x1440 <DIO_VidSitPintDirection+0x98>
    13ee:	2e 81       	ldd	r18, Y+6	; 0x06
    13f0:	3f 81       	ldd	r19, Y+7	; 0x07
    13f2:	22 30       	cpi	r18, 0x02	; 2
    13f4:	31 05       	cpc	r19, r1
    13f6:	2c f4       	brge	.+10     	; 0x1402 <DIO_VidSitPintDirection+0x5a>
    13f8:	8e 81       	ldd	r24, Y+6	; 0x06
    13fa:	9f 81       	ldd	r25, Y+7	; 0x07
    13fc:	00 97       	sbiw	r24, 0x00	; 0
    13fe:	61 f0       	breq	.+24     	; 0x1418 <DIO_VidSitPintDirection+0x70>
    1400:	5a c0       	rjmp	.+180    	; 0x14b6 <DIO_VidSitPintDirection+0x10e>
    1402:	2e 81       	ldd	r18, Y+6	; 0x06
    1404:	3f 81       	ldd	r19, Y+7	; 0x07
    1406:	22 30       	cpi	r18, 0x02	; 2
    1408:	31 05       	cpc	r19, r1
    140a:	71 f1       	breq	.+92     	; 0x1468 <DIO_VidSitPintDirection+0xc0>
    140c:	8e 81       	ldd	r24, Y+6	; 0x06
    140e:	9f 81       	ldd	r25, Y+7	; 0x07
    1410:	83 30       	cpi	r24, 0x03	; 3
    1412:	91 05       	cpc	r25, r1
    1414:	e9 f1       	breq	.+122    	; 0x1490 <DIO_VidSitPintDirection+0xe8>
    1416:	4f c0       	rjmp	.+158    	; 0x14b6 <DIO_VidSitPintDirection+0x10e>
			{
				case PORTA: SET_BIT(DDRA_Reg,LOC_Pin_ID); break;
    1418:	aa e3       	ldi	r26, 0x3A	; 58
    141a:	b0 e0       	ldi	r27, 0x00	; 0
    141c:	ea e3       	ldi	r30, 0x3A	; 58
    141e:	f0 e0       	ldi	r31, 0x00	; 0
    1420:	80 81       	ld	r24, Z
    1422:	48 2f       	mov	r20, r24
    1424:	8a 81       	ldd	r24, Y+2	; 0x02
    1426:	28 2f       	mov	r18, r24
    1428:	30 e0       	ldi	r19, 0x00	; 0
    142a:	81 e0       	ldi	r24, 0x01	; 1
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	02 2e       	mov	r0, r18
    1430:	02 c0       	rjmp	.+4      	; 0x1436 <DIO_VidSitPintDirection+0x8e>
    1432:	88 0f       	add	r24, r24
    1434:	99 1f       	adc	r25, r25
    1436:	0a 94       	dec	r0
    1438:	e2 f7       	brpl	.-8      	; 0x1432 <DIO_VidSitPintDirection+0x8a>
    143a:	84 2b       	or	r24, r20
    143c:	8c 93       	st	X, r24
    143e:	3b c0       	rjmp	.+118    	; 0x14b6 <DIO_VidSitPintDirection+0x10e>
				case PORTB: SET_BIT(DDRB_Reg,LOC_Pin_ID); break;
    1440:	a7 e3       	ldi	r26, 0x37	; 55
    1442:	b0 e0       	ldi	r27, 0x00	; 0
    1444:	e7 e3       	ldi	r30, 0x37	; 55
    1446:	f0 e0       	ldi	r31, 0x00	; 0
    1448:	80 81       	ld	r24, Z
    144a:	48 2f       	mov	r20, r24
    144c:	8a 81       	ldd	r24, Y+2	; 0x02
    144e:	28 2f       	mov	r18, r24
    1450:	30 e0       	ldi	r19, 0x00	; 0
    1452:	81 e0       	ldi	r24, 0x01	; 1
    1454:	90 e0       	ldi	r25, 0x00	; 0
    1456:	02 2e       	mov	r0, r18
    1458:	02 c0       	rjmp	.+4      	; 0x145e <DIO_VidSitPintDirection+0xb6>
    145a:	88 0f       	add	r24, r24
    145c:	99 1f       	adc	r25, r25
    145e:	0a 94       	dec	r0
    1460:	e2 f7       	brpl	.-8      	; 0x145a <DIO_VidSitPintDirection+0xb2>
    1462:	84 2b       	or	r24, r20
    1464:	8c 93       	st	X, r24
    1466:	27 c0       	rjmp	.+78     	; 0x14b6 <DIO_VidSitPintDirection+0x10e>
				case PORTC: SET_BIT(DDRC_Reg,LOC_Pin_ID); break;
    1468:	a4 e3       	ldi	r26, 0x34	; 52
    146a:	b0 e0       	ldi	r27, 0x00	; 0
    146c:	e4 e3       	ldi	r30, 0x34	; 52
    146e:	f0 e0       	ldi	r31, 0x00	; 0
    1470:	80 81       	ld	r24, Z
    1472:	48 2f       	mov	r20, r24
    1474:	8a 81       	ldd	r24, Y+2	; 0x02
    1476:	28 2f       	mov	r18, r24
    1478:	30 e0       	ldi	r19, 0x00	; 0
    147a:	81 e0       	ldi	r24, 0x01	; 1
    147c:	90 e0       	ldi	r25, 0x00	; 0
    147e:	02 2e       	mov	r0, r18
    1480:	02 c0       	rjmp	.+4      	; 0x1486 <DIO_VidSitPintDirection+0xde>
    1482:	88 0f       	add	r24, r24
    1484:	99 1f       	adc	r25, r25
    1486:	0a 94       	dec	r0
    1488:	e2 f7       	brpl	.-8      	; 0x1482 <DIO_VidSitPintDirection+0xda>
    148a:	84 2b       	or	r24, r20
    148c:	8c 93       	st	X, r24
    148e:	13 c0       	rjmp	.+38     	; 0x14b6 <DIO_VidSitPintDirection+0x10e>
				case PORTD: SET_BIT(DDRD_Reg,LOC_Pin_ID); break;
    1490:	a1 e3       	ldi	r26, 0x31	; 49
    1492:	b0 e0       	ldi	r27, 0x00	; 0
    1494:	e1 e3       	ldi	r30, 0x31	; 49
    1496:	f0 e0       	ldi	r31, 0x00	; 0
    1498:	80 81       	ld	r24, Z
    149a:	48 2f       	mov	r20, r24
    149c:	8a 81       	ldd	r24, Y+2	; 0x02
    149e:	28 2f       	mov	r18, r24
    14a0:	30 e0       	ldi	r19, 0x00	; 0
    14a2:	81 e0       	ldi	r24, 0x01	; 1
    14a4:	90 e0       	ldi	r25, 0x00	; 0
    14a6:	02 2e       	mov	r0, r18
    14a8:	02 c0       	rjmp	.+4      	; 0x14ae <DIO_VidSitPintDirection+0x106>
    14aa:	88 0f       	add	r24, r24
    14ac:	99 1f       	adc	r25, r25
    14ae:	0a 94       	dec	r0
    14b0:	e2 f7       	brpl	.-8      	; 0x14aa <DIO_VidSitPintDirection+0x102>
    14b2:	84 2b       	or	r24, r20
    14b4:	8c 93       	st	X, r24
			}
		}
		if(INPUT ==LOC_Pin_Direction)
    14b6:	8b 81       	ldd	r24, Y+3	; 0x03
    14b8:	88 23       	and	r24, r24
    14ba:	09 f0       	breq	.+2      	; 0x14be <DIO_VidSitPintDirection+0x116>
    14bc:	73 c0       	rjmp	.+230    	; 0x15a4 <DIO_VidSitPintDirection+0x1fc>
		{
			switch(LOC_Port_ID)
    14be:	89 81       	ldd	r24, Y+1	; 0x01
    14c0:	28 2f       	mov	r18, r24
    14c2:	30 e0       	ldi	r19, 0x00	; 0
    14c4:	3d 83       	std	Y+5, r19	; 0x05
    14c6:	2c 83       	std	Y+4, r18	; 0x04
    14c8:	8c 81       	ldd	r24, Y+4	; 0x04
    14ca:	9d 81       	ldd	r25, Y+5	; 0x05
    14cc:	81 30       	cpi	r24, 0x01	; 1
    14ce:	91 05       	cpc	r25, r1
    14d0:	59 f1       	breq	.+86     	; 0x1528 <DIO_VidSitPintDirection+0x180>
    14d2:	2c 81       	ldd	r18, Y+4	; 0x04
    14d4:	3d 81       	ldd	r19, Y+5	; 0x05
    14d6:	22 30       	cpi	r18, 0x02	; 2
    14d8:	31 05       	cpc	r19, r1
    14da:	2c f4       	brge	.+10     	; 0x14e6 <DIO_VidSitPintDirection+0x13e>
    14dc:	8c 81       	ldd	r24, Y+4	; 0x04
    14de:	9d 81       	ldd	r25, Y+5	; 0x05
    14e0:	00 97       	sbiw	r24, 0x00	; 0
    14e2:	69 f0       	breq	.+26     	; 0x14fe <DIO_VidSitPintDirection+0x156>
    14e4:	5f c0       	rjmp	.+190    	; 0x15a4 <DIO_VidSitPintDirection+0x1fc>
    14e6:	2c 81       	ldd	r18, Y+4	; 0x04
    14e8:	3d 81       	ldd	r19, Y+5	; 0x05
    14ea:	22 30       	cpi	r18, 0x02	; 2
    14ec:	31 05       	cpc	r19, r1
    14ee:	89 f1       	breq	.+98     	; 0x1552 <DIO_VidSitPintDirection+0x1aa>
    14f0:	8c 81       	ldd	r24, Y+4	; 0x04
    14f2:	9d 81       	ldd	r25, Y+5	; 0x05
    14f4:	83 30       	cpi	r24, 0x03	; 3
    14f6:	91 05       	cpc	r25, r1
    14f8:	09 f4       	brne	.+2      	; 0x14fc <DIO_VidSitPintDirection+0x154>
    14fa:	40 c0       	rjmp	.+128    	; 0x157c <DIO_VidSitPintDirection+0x1d4>
    14fc:	53 c0       	rjmp	.+166    	; 0x15a4 <DIO_VidSitPintDirection+0x1fc>
			{
				case PORTA: CLR_BIT(DDRA_Reg,LOC_Pin_ID); break;
    14fe:	aa e3       	ldi	r26, 0x3A	; 58
    1500:	b0 e0       	ldi	r27, 0x00	; 0
    1502:	ea e3       	ldi	r30, 0x3A	; 58
    1504:	f0 e0       	ldi	r31, 0x00	; 0
    1506:	80 81       	ld	r24, Z
    1508:	48 2f       	mov	r20, r24
    150a:	8a 81       	ldd	r24, Y+2	; 0x02
    150c:	28 2f       	mov	r18, r24
    150e:	30 e0       	ldi	r19, 0x00	; 0
    1510:	81 e0       	ldi	r24, 0x01	; 1
    1512:	90 e0       	ldi	r25, 0x00	; 0
    1514:	02 2e       	mov	r0, r18
    1516:	02 c0       	rjmp	.+4      	; 0x151c <DIO_VidSitPintDirection+0x174>
    1518:	88 0f       	add	r24, r24
    151a:	99 1f       	adc	r25, r25
    151c:	0a 94       	dec	r0
    151e:	e2 f7       	brpl	.-8      	; 0x1518 <DIO_VidSitPintDirection+0x170>
    1520:	80 95       	com	r24
    1522:	84 23       	and	r24, r20
    1524:	8c 93       	st	X, r24
    1526:	3e c0       	rjmp	.+124    	; 0x15a4 <DIO_VidSitPintDirection+0x1fc>
				case PORTB: CLR_BIT(DDRB_Reg,LOC_Pin_ID); break;
    1528:	a7 e3       	ldi	r26, 0x37	; 55
    152a:	b0 e0       	ldi	r27, 0x00	; 0
    152c:	e7 e3       	ldi	r30, 0x37	; 55
    152e:	f0 e0       	ldi	r31, 0x00	; 0
    1530:	80 81       	ld	r24, Z
    1532:	48 2f       	mov	r20, r24
    1534:	8a 81       	ldd	r24, Y+2	; 0x02
    1536:	28 2f       	mov	r18, r24
    1538:	30 e0       	ldi	r19, 0x00	; 0
    153a:	81 e0       	ldi	r24, 0x01	; 1
    153c:	90 e0       	ldi	r25, 0x00	; 0
    153e:	02 2e       	mov	r0, r18
    1540:	02 c0       	rjmp	.+4      	; 0x1546 <DIO_VidSitPintDirection+0x19e>
    1542:	88 0f       	add	r24, r24
    1544:	99 1f       	adc	r25, r25
    1546:	0a 94       	dec	r0
    1548:	e2 f7       	brpl	.-8      	; 0x1542 <DIO_VidSitPintDirection+0x19a>
    154a:	80 95       	com	r24
    154c:	84 23       	and	r24, r20
    154e:	8c 93       	st	X, r24
    1550:	29 c0       	rjmp	.+82     	; 0x15a4 <DIO_VidSitPintDirection+0x1fc>
				case PORTC: CLR_BIT(DDRC_Reg,LOC_Pin_ID); break;
    1552:	a4 e3       	ldi	r26, 0x34	; 52
    1554:	b0 e0       	ldi	r27, 0x00	; 0
    1556:	e4 e3       	ldi	r30, 0x34	; 52
    1558:	f0 e0       	ldi	r31, 0x00	; 0
    155a:	80 81       	ld	r24, Z
    155c:	48 2f       	mov	r20, r24
    155e:	8a 81       	ldd	r24, Y+2	; 0x02
    1560:	28 2f       	mov	r18, r24
    1562:	30 e0       	ldi	r19, 0x00	; 0
    1564:	81 e0       	ldi	r24, 0x01	; 1
    1566:	90 e0       	ldi	r25, 0x00	; 0
    1568:	02 2e       	mov	r0, r18
    156a:	02 c0       	rjmp	.+4      	; 0x1570 <DIO_VidSitPintDirection+0x1c8>
    156c:	88 0f       	add	r24, r24
    156e:	99 1f       	adc	r25, r25
    1570:	0a 94       	dec	r0
    1572:	e2 f7       	brpl	.-8      	; 0x156c <DIO_VidSitPintDirection+0x1c4>
    1574:	80 95       	com	r24
    1576:	84 23       	and	r24, r20
    1578:	8c 93       	st	X, r24
    157a:	14 c0       	rjmp	.+40     	; 0x15a4 <DIO_VidSitPintDirection+0x1fc>
				case PORTD: CLR_BIT(DDRD_Reg,LOC_Pin_ID); break;
    157c:	a1 e3       	ldi	r26, 0x31	; 49
    157e:	b0 e0       	ldi	r27, 0x00	; 0
    1580:	e1 e3       	ldi	r30, 0x31	; 49
    1582:	f0 e0       	ldi	r31, 0x00	; 0
    1584:	80 81       	ld	r24, Z
    1586:	48 2f       	mov	r20, r24
    1588:	8a 81       	ldd	r24, Y+2	; 0x02
    158a:	28 2f       	mov	r18, r24
    158c:	30 e0       	ldi	r19, 0x00	; 0
    158e:	81 e0       	ldi	r24, 0x01	; 1
    1590:	90 e0       	ldi	r25, 0x00	; 0
    1592:	02 2e       	mov	r0, r18
    1594:	02 c0       	rjmp	.+4      	; 0x159a <DIO_VidSitPintDirection+0x1f2>
    1596:	88 0f       	add	r24, r24
    1598:	99 1f       	adc	r25, r25
    159a:	0a 94       	dec	r0
    159c:	e2 f7       	brpl	.-8      	; 0x1596 <DIO_VidSitPintDirection+0x1ee>
    159e:	80 95       	com	r24
    15a0:	84 23       	and	r24, r20
    15a2:	8c 93       	st	X, r24
			}
		}
	}
}
    15a4:	27 96       	adiw	r28, 0x07	; 7
    15a6:	0f b6       	in	r0, 0x3f	; 63
    15a8:	f8 94       	cli
    15aa:	de bf       	out	0x3e, r29	; 62
    15ac:	0f be       	out	0x3f, r0	; 63
    15ae:	cd bf       	out	0x3d, r28	; 61
    15b0:	cf 91       	pop	r28
    15b2:	df 91       	pop	r29
    15b4:	08 95       	ret

000015b6 <DIO_VidSitPintValue>:

void DIO_VidSitPintValue(DIO_PORT_ID LOC_Port_ID,DIO_PIN_ID  LOC_Pin_ID,STD_Stat LOC_Pin_Value)
{
    15b6:	df 93       	push	r29
    15b8:	cf 93       	push	r28
    15ba:	cd b7       	in	r28, 0x3d	; 61
    15bc:	de b7       	in	r29, 0x3e	; 62
    15be:	27 97       	sbiw	r28, 0x07	; 7
    15c0:	0f b6       	in	r0, 0x3f	; 63
    15c2:	f8 94       	cli
    15c4:	de bf       	out	0x3e, r29	; 62
    15c6:	0f be       	out	0x3f, r0	; 63
    15c8:	cd bf       	out	0x3d, r28	; 61
    15ca:	89 83       	std	Y+1, r24	; 0x01
    15cc:	6a 83       	std	Y+2, r22	; 0x02
    15ce:	4b 83       	std	Y+3, r20	; 0x03
	if (LOC_Port_ID <=PORTD &&LOC_Pin_ID <= PIN7)
    15d0:	89 81       	ldd	r24, Y+1	; 0x01
    15d2:	84 30       	cpi	r24, 0x04	; 4
    15d4:	08 f0       	brcs	.+2      	; 0x15d8 <DIO_VidSitPintValue+0x22>
    15d6:	ed c0       	rjmp	.+474    	; 0x17b2 <DIO_VidSitPintValue+0x1fc>
    15d8:	8a 81       	ldd	r24, Y+2	; 0x02
    15da:	88 30       	cpi	r24, 0x08	; 8
    15dc:	08 f0       	brcs	.+2      	; 0x15e0 <DIO_VidSitPintValue+0x2a>
    15de:	e9 c0       	rjmp	.+466    	; 0x17b2 <DIO_VidSitPintValue+0x1fc>
	{
		if(HIGH ==LOC_Pin_Value)
    15e0:	8b 81       	ldd	r24, Y+3	; 0x03
    15e2:	81 30       	cpi	r24, 0x01	; 1
    15e4:	09 f0       	breq	.+2      	; 0x15e8 <DIO_VidSitPintValue+0x32>
    15e6:	6e c0       	rjmp	.+220    	; 0x16c4 <DIO_VidSitPintValue+0x10e>
			{
				switch(LOC_Port_ID)
    15e8:	89 81       	ldd	r24, Y+1	; 0x01
    15ea:	28 2f       	mov	r18, r24
    15ec:	30 e0       	ldi	r19, 0x00	; 0
    15ee:	3f 83       	std	Y+7, r19	; 0x07
    15f0:	2e 83       	std	Y+6, r18	; 0x06
    15f2:	8e 81       	ldd	r24, Y+6	; 0x06
    15f4:	9f 81       	ldd	r25, Y+7	; 0x07
    15f6:	81 30       	cpi	r24, 0x01	; 1
    15f8:	91 05       	cpc	r25, r1
    15fa:	49 f1       	breq	.+82     	; 0x164e <DIO_VidSitPintValue+0x98>
    15fc:	2e 81       	ldd	r18, Y+6	; 0x06
    15fe:	3f 81       	ldd	r19, Y+7	; 0x07
    1600:	22 30       	cpi	r18, 0x02	; 2
    1602:	31 05       	cpc	r19, r1
    1604:	2c f4       	brge	.+10     	; 0x1610 <DIO_VidSitPintValue+0x5a>
    1606:	8e 81       	ldd	r24, Y+6	; 0x06
    1608:	9f 81       	ldd	r25, Y+7	; 0x07
    160a:	00 97       	sbiw	r24, 0x00	; 0
    160c:	61 f0       	breq	.+24     	; 0x1626 <DIO_VidSitPintValue+0x70>
    160e:	5a c0       	rjmp	.+180    	; 0x16c4 <DIO_VidSitPintValue+0x10e>
    1610:	2e 81       	ldd	r18, Y+6	; 0x06
    1612:	3f 81       	ldd	r19, Y+7	; 0x07
    1614:	22 30       	cpi	r18, 0x02	; 2
    1616:	31 05       	cpc	r19, r1
    1618:	71 f1       	breq	.+92     	; 0x1676 <DIO_VidSitPintValue+0xc0>
    161a:	8e 81       	ldd	r24, Y+6	; 0x06
    161c:	9f 81       	ldd	r25, Y+7	; 0x07
    161e:	83 30       	cpi	r24, 0x03	; 3
    1620:	91 05       	cpc	r25, r1
    1622:	e9 f1       	breq	.+122    	; 0x169e <DIO_VidSitPintValue+0xe8>
    1624:	4f c0       	rjmp	.+158    	; 0x16c4 <DIO_VidSitPintValue+0x10e>
				{
					case PORTA: SET_BIT(PORTA_Reg,LOC_Pin_ID); break;
    1626:	ab e3       	ldi	r26, 0x3B	; 59
    1628:	b0 e0       	ldi	r27, 0x00	; 0
    162a:	eb e3       	ldi	r30, 0x3B	; 59
    162c:	f0 e0       	ldi	r31, 0x00	; 0
    162e:	80 81       	ld	r24, Z
    1630:	48 2f       	mov	r20, r24
    1632:	8a 81       	ldd	r24, Y+2	; 0x02
    1634:	28 2f       	mov	r18, r24
    1636:	30 e0       	ldi	r19, 0x00	; 0
    1638:	81 e0       	ldi	r24, 0x01	; 1
    163a:	90 e0       	ldi	r25, 0x00	; 0
    163c:	02 2e       	mov	r0, r18
    163e:	02 c0       	rjmp	.+4      	; 0x1644 <DIO_VidSitPintValue+0x8e>
    1640:	88 0f       	add	r24, r24
    1642:	99 1f       	adc	r25, r25
    1644:	0a 94       	dec	r0
    1646:	e2 f7       	brpl	.-8      	; 0x1640 <DIO_VidSitPintValue+0x8a>
    1648:	84 2b       	or	r24, r20
    164a:	8c 93       	st	X, r24
    164c:	3b c0       	rjmp	.+118    	; 0x16c4 <DIO_VidSitPintValue+0x10e>
					case PORTB: SET_BIT(PORTB_Reg,LOC_Pin_ID); break;
    164e:	a8 e3       	ldi	r26, 0x38	; 56
    1650:	b0 e0       	ldi	r27, 0x00	; 0
    1652:	e8 e3       	ldi	r30, 0x38	; 56
    1654:	f0 e0       	ldi	r31, 0x00	; 0
    1656:	80 81       	ld	r24, Z
    1658:	48 2f       	mov	r20, r24
    165a:	8a 81       	ldd	r24, Y+2	; 0x02
    165c:	28 2f       	mov	r18, r24
    165e:	30 e0       	ldi	r19, 0x00	; 0
    1660:	81 e0       	ldi	r24, 0x01	; 1
    1662:	90 e0       	ldi	r25, 0x00	; 0
    1664:	02 2e       	mov	r0, r18
    1666:	02 c0       	rjmp	.+4      	; 0x166c <DIO_VidSitPintValue+0xb6>
    1668:	88 0f       	add	r24, r24
    166a:	99 1f       	adc	r25, r25
    166c:	0a 94       	dec	r0
    166e:	e2 f7       	brpl	.-8      	; 0x1668 <DIO_VidSitPintValue+0xb2>
    1670:	84 2b       	or	r24, r20
    1672:	8c 93       	st	X, r24
    1674:	27 c0       	rjmp	.+78     	; 0x16c4 <DIO_VidSitPintValue+0x10e>
					case PORTC: SET_BIT(PORTC_Reg,LOC_Pin_ID); break;
    1676:	a5 e3       	ldi	r26, 0x35	; 53
    1678:	b0 e0       	ldi	r27, 0x00	; 0
    167a:	e5 e3       	ldi	r30, 0x35	; 53
    167c:	f0 e0       	ldi	r31, 0x00	; 0
    167e:	80 81       	ld	r24, Z
    1680:	48 2f       	mov	r20, r24
    1682:	8a 81       	ldd	r24, Y+2	; 0x02
    1684:	28 2f       	mov	r18, r24
    1686:	30 e0       	ldi	r19, 0x00	; 0
    1688:	81 e0       	ldi	r24, 0x01	; 1
    168a:	90 e0       	ldi	r25, 0x00	; 0
    168c:	02 2e       	mov	r0, r18
    168e:	02 c0       	rjmp	.+4      	; 0x1694 <DIO_VidSitPintValue+0xde>
    1690:	88 0f       	add	r24, r24
    1692:	99 1f       	adc	r25, r25
    1694:	0a 94       	dec	r0
    1696:	e2 f7       	brpl	.-8      	; 0x1690 <DIO_VidSitPintValue+0xda>
    1698:	84 2b       	or	r24, r20
    169a:	8c 93       	st	X, r24
    169c:	13 c0       	rjmp	.+38     	; 0x16c4 <DIO_VidSitPintValue+0x10e>
					case PORTD: SET_BIT(PORTD_Reg,LOC_Pin_ID); break;
    169e:	a2 e3       	ldi	r26, 0x32	; 50
    16a0:	b0 e0       	ldi	r27, 0x00	; 0
    16a2:	e2 e3       	ldi	r30, 0x32	; 50
    16a4:	f0 e0       	ldi	r31, 0x00	; 0
    16a6:	80 81       	ld	r24, Z
    16a8:	48 2f       	mov	r20, r24
    16aa:	8a 81       	ldd	r24, Y+2	; 0x02
    16ac:	28 2f       	mov	r18, r24
    16ae:	30 e0       	ldi	r19, 0x00	; 0
    16b0:	81 e0       	ldi	r24, 0x01	; 1
    16b2:	90 e0       	ldi	r25, 0x00	; 0
    16b4:	02 2e       	mov	r0, r18
    16b6:	02 c0       	rjmp	.+4      	; 0x16bc <DIO_VidSitPintValue+0x106>
    16b8:	88 0f       	add	r24, r24
    16ba:	99 1f       	adc	r25, r25
    16bc:	0a 94       	dec	r0
    16be:	e2 f7       	brpl	.-8      	; 0x16b8 <DIO_VidSitPintValue+0x102>
    16c0:	84 2b       	or	r24, r20
    16c2:	8c 93       	st	X, r24
				}
			}
			if(LOW ==LOC_Pin_Value)
    16c4:	8b 81       	ldd	r24, Y+3	; 0x03
    16c6:	88 23       	and	r24, r24
    16c8:	09 f0       	breq	.+2      	; 0x16cc <DIO_VidSitPintValue+0x116>
    16ca:	73 c0       	rjmp	.+230    	; 0x17b2 <DIO_VidSitPintValue+0x1fc>
			{
				switch(LOC_Port_ID)
    16cc:	89 81       	ldd	r24, Y+1	; 0x01
    16ce:	28 2f       	mov	r18, r24
    16d0:	30 e0       	ldi	r19, 0x00	; 0
    16d2:	3d 83       	std	Y+5, r19	; 0x05
    16d4:	2c 83       	std	Y+4, r18	; 0x04
    16d6:	8c 81       	ldd	r24, Y+4	; 0x04
    16d8:	9d 81       	ldd	r25, Y+5	; 0x05
    16da:	81 30       	cpi	r24, 0x01	; 1
    16dc:	91 05       	cpc	r25, r1
    16de:	59 f1       	breq	.+86     	; 0x1736 <DIO_VidSitPintValue+0x180>
    16e0:	2c 81       	ldd	r18, Y+4	; 0x04
    16e2:	3d 81       	ldd	r19, Y+5	; 0x05
    16e4:	22 30       	cpi	r18, 0x02	; 2
    16e6:	31 05       	cpc	r19, r1
    16e8:	2c f4       	brge	.+10     	; 0x16f4 <DIO_VidSitPintValue+0x13e>
    16ea:	8c 81       	ldd	r24, Y+4	; 0x04
    16ec:	9d 81       	ldd	r25, Y+5	; 0x05
    16ee:	00 97       	sbiw	r24, 0x00	; 0
    16f0:	69 f0       	breq	.+26     	; 0x170c <DIO_VidSitPintValue+0x156>
    16f2:	5f c0       	rjmp	.+190    	; 0x17b2 <DIO_VidSitPintValue+0x1fc>
    16f4:	2c 81       	ldd	r18, Y+4	; 0x04
    16f6:	3d 81       	ldd	r19, Y+5	; 0x05
    16f8:	22 30       	cpi	r18, 0x02	; 2
    16fa:	31 05       	cpc	r19, r1
    16fc:	89 f1       	breq	.+98     	; 0x1760 <DIO_VidSitPintValue+0x1aa>
    16fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1700:	9d 81       	ldd	r25, Y+5	; 0x05
    1702:	83 30       	cpi	r24, 0x03	; 3
    1704:	91 05       	cpc	r25, r1
    1706:	09 f4       	brne	.+2      	; 0x170a <DIO_VidSitPintValue+0x154>
    1708:	40 c0       	rjmp	.+128    	; 0x178a <DIO_VidSitPintValue+0x1d4>
    170a:	53 c0       	rjmp	.+166    	; 0x17b2 <DIO_VidSitPintValue+0x1fc>
				{
					case PORTA: CLR_BIT(PORTA_Reg,LOC_Pin_ID); break;
    170c:	ab e3       	ldi	r26, 0x3B	; 59
    170e:	b0 e0       	ldi	r27, 0x00	; 0
    1710:	eb e3       	ldi	r30, 0x3B	; 59
    1712:	f0 e0       	ldi	r31, 0x00	; 0
    1714:	80 81       	ld	r24, Z
    1716:	48 2f       	mov	r20, r24
    1718:	8a 81       	ldd	r24, Y+2	; 0x02
    171a:	28 2f       	mov	r18, r24
    171c:	30 e0       	ldi	r19, 0x00	; 0
    171e:	81 e0       	ldi	r24, 0x01	; 1
    1720:	90 e0       	ldi	r25, 0x00	; 0
    1722:	02 2e       	mov	r0, r18
    1724:	02 c0       	rjmp	.+4      	; 0x172a <DIO_VidSitPintValue+0x174>
    1726:	88 0f       	add	r24, r24
    1728:	99 1f       	adc	r25, r25
    172a:	0a 94       	dec	r0
    172c:	e2 f7       	brpl	.-8      	; 0x1726 <DIO_VidSitPintValue+0x170>
    172e:	80 95       	com	r24
    1730:	84 23       	and	r24, r20
    1732:	8c 93       	st	X, r24
    1734:	3e c0       	rjmp	.+124    	; 0x17b2 <DIO_VidSitPintValue+0x1fc>
					case PORTB: CLR_BIT(PORTB_Reg,LOC_Pin_ID); break;
    1736:	a8 e3       	ldi	r26, 0x38	; 56
    1738:	b0 e0       	ldi	r27, 0x00	; 0
    173a:	e8 e3       	ldi	r30, 0x38	; 56
    173c:	f0 e0       	ldi	r31, 0x00	; 0
    173e:	80 81       	ld	r24, Z
    1740:	48 2f       	mov	r20, r24
    1742:	8a 81       	ldd	r24, Y+2	; 0x02
    1744:	28 2f       	mov	r18, r24
    1746:	30 e0       	ldi	r19, 0x00	; 0
    1748:	81 e0       	ldi	r24, 0x01	; 1
    174a:	90 e0       	ldi	r25, 0x00	; 0
    174c:	02 2e       	mov	r0, r18
    174e:	02 c0       	rjmp	.+4      	; 0x1754 <DIO_VidSitPintValue+0x19e>
    1750:	88 0f       	add	r24, r24
    1752:	99 1f       	adc	r25, r25
    1754:	0a 94       	dec	r0
    1756:	e2 f7       	brpl	.-8      	; 0x1750 <DIO_VidSitPintValue+0x19a>
    1758:	80 95       	com	r24
    175a:	84 23       	and	r24, r20
    175c:	8c 93       	st	X, r24
    175e:	29 c0       	rjmp	.+82     	; 0x17b2 <DIO_VidSitPintValue+0x1fc>
					case PORTC: CLR_BIT(PORTC_Reg,LOC_Pin_ID); break;
    1760:	a5 e3       	ldi	r26, 0x35	; 53
    1762:	b0 e0       	ldi	r27, 0x00	; 0
    1764:	e5 e3       	ldi	r30, 0x35	; 53
    1766:	f0 e0       	ldi	r31, 0x00	; 0
    1768:	80 81       	ld	r24, Z
    176a:	48 2f       	mov	r20, r24
    176c:	8a 81       	ldd	r24, Y+2	; 0x02
    176e:	28 2f       	mov	r18, r24
    1770:	30 e0       	ldi	r19, 0x00	; 0
    1772:	81 e0       	ldi	r24, 0x01	; 1
    1774:	90 e0       	ldi	r25, 0x00	; 0
    1776:	02 2e       	mov	r0, r18
    1778:	02 c0       	rjmp	.+4      	; 0x177e <DIO_VidSitPintValue+0x1c8>
    177a:	88 0f       	add	r24, r24
    177c:	99 1f       	adc	r25, r25
    177e:	0a 94       	dec	r0
    1780:	e2 f7       	brpl	.-8      	; 0x177a <DIO_VidSitPintValue+0x1c4>
    1782:	80 95       	com	r24
    1784:	84 23       	and	r24, r20
    1786:	8c 93       	st	X, r24
    1788:	14 c0       	rjmp	.+40     	; 0x17b2 <DIO_VidSitPintValue+0x1fc>
					case PORTD: CLR_BIT(PORTD_Reg,LOC_Pin_ID); break;
    178a:	a2 e3       	ldi	r26, 0x32	; 50
    178c:	b0 e0       	ldi	r27, 0x00	; 0
    178e:	e2 e3       	ldi	r30, 0x32	; 50
    1790:	f0 e0       	ldi	r31, 0x00	; 0
    1792:	80 81       	ld	r24, Z
    1794:	48 2f       	mov	r20, r24
    1796:	8a 81       	ldd	r24, Y+2	; 0x02
    1798:	28 2f       	mov	r18, r24
    179a:	30 e0       	ldi	r19, 0x00	; 0
    179c:	81 e0       	ldi	r24, 0x01	; 1
    179e:	90 e0       	ldi	r25, 0x00	; 0
    17a0:	02 2e       	mov	r0, r18
    17a2:	02 c0       	rjmp	.+4      	; 0x17a8 <DIO_VidSitPintValue+0x1f2>
    17a4:	88 0f       	add	r24, r24
    17a6:	99 1f       	adc	r25, r25
    17a8:	0a 94       	dec	r0
    17aa:	e2 f7       	brpl	.-8      	; 0x17a4 <DIO_VidSitPintValue+0x1ee>
    17ac:	80 95       	com	r24
    17ae:	84 23       	and	r24, r20
    17b0:	8c 93       	st	X, r24
				}
			}
	}
}
    17b2:	27 96       	adiw	r28, 0x07	; 7
    17b4:	0f b6       	in	r0, 0x3f	; 63
    17b6:	f8 94       	cli
    17b8:	de bf       	out	0x3e, r29	; 62
    17ba:	0f be       	out	0x3f, r0	; 63
    17bc:	cd bf       	out	0x3d, r28	; 61
    17be:	cf 91       	pop	r28
    17c0:	df 91       	pop	r29
    17c2:	08 95       	ret

000017c4 <DIO_GitPinVule>:

STD_Stat DIO_GitPinVule(DIO_PORT_ID LOC_Port_ID,DIO_PIN_ID  LOC_Pin_ID)
{
    17c4:	df 93       	push	r29
    17c6:	cf 93       	push	r28
    17c8:	00 d0       	rcall	.+0      	; 0x17ca <DIO_GitPinVule+0x6>
    17ca:	00 d0       	rcall	.+0      	; 0x17cc <DIO_GitPinVule+0x8>
    17cc:	0f 92       	push	r0
    17ce:	cd b7       	in	r28, 0x3d	; 61
    17d0:	de b7       	in	r29, 0x3e	; 62
    17d2:	8a 83       	std	Y+2, r24	; 0x02
    17d4:	6b 83       	std	Y+3, r22	; 0x03
	STD_Stat Pin_Value;
	if (LOC_Port_ID <=PORTD &&LOC_Pin_ID <= PIN7)
    17d6:	8a 81       	ldd	r24, Y+2	; 0x02
    17d8:	84 30       	cpi	r24, 0x04	; 4
    17da:	08 f0       	brcs	.+2      	; 0x17de <DIO_GitPinVule+0x1a>
    17dc:	6b c0       	rjmp	.+214    	; 0x18b4 <DIO_GitPinVule+0xf0>
    17de:	8b 81       	ldd	r24, Y+3	; 0x03
    17e0:	88 30       	cpi	r24, 0x08	; 8
    17e2:	08 f0       	brcs	.+2      	; 0x17e6 <DIO_GitPinVule+0x22>
    17e4:	67 c0       	rjmp	.+206    	; 0x18b4 <DIO_GitPinVule+0xf0>
	{
		switch (LOC_Port_ID)
    17e6:	8a 81       	ldd	r24, Y+2	; 0x02
    17e8:	28 2f       	mov	r18, r24
    17ea:	30 e0       	ldi	r19, 0x00	; 0
    17ec:	3d 83       	std	Y+5, r19	; 0x05
    17ee:	2c 83       	std	Y+4, r18	; 0x04
    17f0:	4c 81       	ldd	r20, Y+4	; 0x04
    17f2:	5d 81       	ldd	r21, Y+5	; 0x05
    17f4:	41 30       	cpi	r20, 0x01	; 1
    17f6:	51 05       	cpc	r21, r1
    17f8:	41 f1       	breq	.+80     	; 0x184a <DIO_GitPinVule+0x86>
    17fa:	8c 81       	ldd	r24, Y+4	; 0x04
    17fc:	9d 81       	ldd	r25, Y+5	; 0x05
    17fe:	82 30       	cpi	r24, 0x02	; 2
    1800:	91 05       	cpc	r25, r1
    1802:	34 f4       	brge	.+12     	; 0x1810 <DIO_GitPinVule+0x4c>
    1804:	2c 81       	ldd	r18, Y+4	; 0x04
    1806:	3d 81       	ldd	r19, Y+5	; 0x05
    1808:	21 15       	cp	r18, r1
    180a:	31 05       	cpc	r19, r1
    180c:	61 f0       	breq	.+24     	; 0x1826 <DIO_GitPinVule+0x62>
    180e:	52 c0       	rjmp	.+164    	; 0x18b4 <DIO_GitPinVule+0xf0>
    1810:	4c 81       	ldd	r20, Y+4	; 0x04
    1812:	5d 81       	ldd	r21, Y+5	; 0x05
    1814:	42 30       	cpi	r20, 0x02	; 2
    1816:	51 05       	cpc	r21, r1
    1818:	51 f1       	breq	.+84     	; 0x186e <DIO_GitPinVule+0xaa>
    181a:	8c 81       	ldd	r24, Y+4	; 0x04
    181c:	9d 81       	ldd	r25, Y+5	; 0x05
    181e:	83 30       	cpi	r24, 0x03	; 3
    1820:	91 05       	cpc	r25, r1
    1822:	b9 f1       	breq	.+110    	; 0x1892 <DIO_GitPinVule+0xce>
    1824:	47 c0       	rjmp	.+142    	; 0x18b4 <DIO_GitPinVule+0xf0>
		{
			case PORTA: Pin_Value= GET_BIT(PINA_Reg,LOC_Pin_ID); break;
    1826:	e9 e3       	ldi	r30, 0x39	; 57
    1828:	f0 e0       	ldi	r31, 0x00	; 0
    182a:	80 81       	ld	r24, Z
    182c:	28 2f       	mov	r18, r24
    182e:	30 e0       	ldi	r19, 0x00	; 0
    1830:	8b 81       	ldd	r24, Y+3	; 0x03
    1832:	88 2f       	mov	r24, r24
    1834:	90 e0       	ldi	r25, 0x00	; 0
    1836:	a9 01       	movw	r20, r18
    1838:	02 c0       	rjmp	.+4      	; 0x183e <DIO_GitPinVule+0x7a>
    183a:	55 95       	asr	r21
    183c:	47 95       	ror	r20
    183e:	8a 95       	dec	r24
    1840:	e2 f7       	brpl	.-8      	; 0x183a <DIO_GitPinVule+0x76>
    1842:	ca 01       	movw	r24, r20
    1844:	81 70       	andi	r24, 0x01	; 1
    1846:	89 83       	std	Y+1, r24	; 0x01
    1848:	35 c0       	rjmp	.+106    	; 0x18b4 <DIO_GitPinVule+0xf0>
			case PORTB: Pin_Value= GET_BIT(PINB_Reg,LOC_Pin_ID); break;
    184a:	e6 e3       	ldi	r30, 0x36	; 54
    184c:	f0 e0       	ldi	r31, 0x00	; 0
    184e:	80 81       	ld	r24, Z
    1850:	28 2f       	mov	r18, r24
    1852:	30 e0       	ldi	r19, 0x00	; 0
    1854:	8b 81       	ldd	r24, Y+3	; 0x03
    1856:	88 2f       	mov	r24, r24
    1858:	90 e0       	ldi	r25, 0x00	; 0
    185a:	a9 01       	movw	r20, r18
    185c:	02 c0       	rjmp	.+4      	; 0x1862 <DIO_GitPinVule+0x9e>
    185e:	55 95       	asr	r21
    1860:	47 95       	ror	r20
    1862:	8a 95       	dec	r24
    1864:	e2 f7       	brpl	.-8      	; 0x185e <DIO_GitPinVule+0x9a>
    1866:	ca 01       	movw	r24, r20
    1868:	81 70       	andi	r24, 0x01	; 1
    186a:	89 83       	std	Y+1, r24	; 0x01
    186c:	23 c0       	rjmp	.+70     	; 0x18b4 <DIO_GitPinVule+0xf0>
			case PORTC: Pin_Value= GET_BIT(PINC_Reg,LOC_Pin_ID); break;
    186e:	e3 e3       	ldi	r30, 0x33	; 51
    1870:	f0 e0       	ldi	r31, 0x00	; 0
    1872:	80 81       	ld	r24, Z
    1874:	28 2f       	mov	r18, r24
    1876:	30 e0       	ldi	r19, 0x00	; 0
    1878:	8b 81       	ldd	r24, Y+3	; 0x03
    187a:	88 2f       	mov	r24, r24
    187c:	90 e0       	ldi	r25, 0x00	; 0
    187e:	a9 01       	movw	r20, r18
    1880:	02 c0       	rjmp	.+4      	; 0x1886 <DIO_GitPinVule+0xc2>
    1882:	55 95       	asr	r21
    1884:	47 95       	ror	r20
    1886:	8a 95       	dec	r24
    1888:	e2 f7       	brpl	.-8      	; 0x1882 <DIO_GitPinVule+0xbe>
    188a:	ca 01       	movw	r24, r20
    188c:	81 70       	andi	r24, 0x01	; 1
    188e:	89 83       	std	Y+1, r24	; 0x01
    1890:	11 c0       	rjmp	.+34     	; 0x18b4 <DIO_GitPinVule+0xf0>
			case PORTD: Pin_Value= GET_BIT(PIND_Reg,LOC_Pin_ID); break;
    1892:	e0 e3       	ldi	r30, 0x30	; 48
    1894:	f0 e0       	ldi	r31, 0x00	; 0
    1896:	80 81       	ld	r24, Z
    1898:	28 2f       	mov	r18, r24
    189a:	30 e0       	ldi	r19, 0x00	; 0
    189c:	8b 81       	ldd	r24, Y+3	; 0x03
    189e:	88 2f       	mov	r24, r24
    18a0:	90 e0       	ldi	r25, 0x00	; 0
    18a2:	a9 01       	movw	r20, r18
    18a4:	02 c0       	rjmp	.+4      	; 0x18aa <DIO_GitPinVule+0xe6>
    18a6:	55 95       	asr	r21
    18a8:	47 95       	ror	r20
    18aa:	8a 95       	dec	r24
    18ac:	e2 f7       	brpl	.-8      	; 0x18a6 <DIO_GitPinVule+0xe2>
    18ae:	ca 01       	movw	r24, r20
    18b0:	81 70       	andi	r24, 0x01	; 1
    18b2:	89 83       	std	Y+1, r24	; 0x01
		}
	}

	return Pin_Value;
    18b4:	89 81       	ldd	r24, Y+1	; 0x01
}
    18b6:	0f 90       	pop	r0
    18b8:	0f 90       	pop	r0
    18ba:	0f 90       	pop	r0
    18bc:	0f 90       	pop	r0
    18be:	0f 90       	pop	r0
    18c0:	cf 91       	pop	r28
    18c2:	df 91       	pop	r29
    18c4:	08 95       	ret

000018c6 <ADC_VidInit>:
#include "../DIO/DIO_Interface.h"
#include "../../HAL/LCD_4BIT/LCD_4BIT_Interface.h"
#include <avr/delay.h>

void ADC_VidInit(void)
{
    18c6:	df 93       	push	r29
    18c8:	cf 93       	push	r28
    18ca:	cd b7       	in	r28, 0x3d	; 61
    18cc:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADMUX,REFS0);
    18ce:	a7 e2       	ldi	r26, 0x27	; 39
    18d0:	b0 e0       	ldi	r27, 0x00	; 0
    18d2:	e7 e2       	ldi	r30, 0x27	; 39
    18d4:	f0 e0       	ldi	r31, 0x00	; 0
    18d6:	80 81       	ld	r24, Z
    18d8:	80 64       	ori	r24, 0x40	; 64
    18da:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,REFS1);              //V reference
    18dc:	a7 e2       	ldi	r26, 0x27	; 39
    18de:	b0 e0       	ldi	r27, 0x00	; 0
    18e0:	e7 e2       	ldi	r30, 0x27	; 39
    18e2:	f0 e0       	ldi	r31, 0x00	; 0
    18e4:	80 81       	ld	r24, Z
    18e6:	8f 77       	andi	r24, 0x7F	; 127
    18e8:	8c 93       	st	X, r24

	CLR_BIT(ADMUX,ADLAR);             //right adjast
    18ea:	a7 e2       	ldi	r26, 0x27	; 39
    18ec:	b0 e0       	ldi	r27, 0x00	; 0
    18ee:	e7 e2       	ldi	r30, 0x27	; 39
    18f0:	f0 e0       	ldi	r31, 0x00	; 0
    18f2:	80 81       	ld	r24, Z
    18f4:	8f 7d       	andi	r24, 0xDF	; 223
    18f6:	8c 93       	st	X, r24

	SET_BIT(ADCSRA,ADTS2);
    18f8:	a6 e2       	ldi	r26, 0x26	; 38
    18fa:	b0 e0       	ldi	r27, 0x00	; 0
    18fc:	e6 e2       	ldi	r30, 0x26	; 38
    18fe:	f0 e0       	ldi	r31, 0x00	; 0
    1900:	80 81       	ld	r24, Z
    1902:	80 68       	ori	r24, 0x80	; 128
    1904:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADTS1);
    1906:	a6 e2       	ldi	r26, 0x26	; 38
    1908:	b0 e0       	ldi	r27, 0x00	; 0
    190a:	e6 e2       	ldi	r30, 0x26	; 38
    190c:	f0 e0       	ldi	r31, 0x00	; 0
    190e:	80 81       	ld	r24, Z
    1910:	80 64       	ori	r24, 0x40	; 64
    1912:	8c 93       	st	X, r24
	CLR_BIT(ADCSRA,ADTS0);	         //Prescaler
    1914:	a6 e2       	ldi	r26, 0x26	; 38
    1916:	b0 e0       	ldi	r27, 0x00	; 0
    1918:	e6 e2       	ldi	r30, 0x26	; 38
    191a:	f0 e0       	ldi	r31, 0x00	; 0
    191c:	80 81       	ld	r24, Z
    191e:	8f 7d       	andi	r24, 0xDF	; 223
    1920:	8c 93       	st	X, r24

	CLR_BIT(SFIOR,ADTS0);
    1922:	a0 e5       	ldi	r26, 0x50	; 80
    1924:	b0 e0       	ldi	r27, 0x00	; 0
    1926:	e0 e5       	ldi	r30, 0x50	; 80
    1928:	f0 e0       	ldi	r31, 0x00	; 0
    192a:	80 81       	ld	r24, Z
    192c:	8f 7d       	andi	r24, 0xDF	; 223
    192e:	8c 93       	st	X, r24
	CLR_BIT(SFIOR,ADTS1);
    1930:	a0 e5       	ldi	r26, 0x50	; 80
    1932:	b0 e0       	ldi	r27, 0x00	; 0
    1934:	e0 e5       	ldi	r30, 0x50	; 80
    1936:	f0 e0       	ldi	r31, 0x00	; 0
    1938:	80 81       	ld	r24, Z
    193a:	8f 7b       	andi	r24, 0xBF	; 191
    193c:	8c 93       	st	X, r24
	CLR_BIT(SFIOR,ADTS2);               //Free Running mode
    193e:	a0 e5       	ldi	r26, 0x50	; 80
    1940:	b0 e0       	ldi	r27, 0x00	; 0
    1942:	e0 e5       	ldi	r30, 0x50	; 80
    1944:	f0 e0       	ldi	r31, 0x00	; 0
    1946:	80 81       	ld	r24, Z
    1948:	8f 77       	andi	r24, 0x7F	; 127
    194a:	8c 93       	st	X, r24
	
	//CLR_BIT(ADCSRA,ADIE);	           //disable  intrrupt

	SET_BIT(ADCSRA,ADATE);         //enable auto triger*/
    194c:	a6 e2       	ldi	r26, 0x26	; 38
    194e:	b0 e0       	ldi	r27, 0x00	; 0
    1950:	e6 e2       	ldi	r30, 0x26	; 38
    1952:	f0 e0       	ldi	r31, 0x00	; 0
    1954:	80 81       	ld	r24, Z
    1956:	80 62       	ori	r24, 0x20	; 32
    1958:	8c 93       	st	X, r24

	SET_BIT(ADCSRA,ADEN);            //enable ADC when it's running in the initialization it's will running in sleep mode
    195a:	a6 e2       	ldi	r26, 0x26	; 38
    195c:	b0 e0       	ldi	r27, 0x00	; 0
    195e:	e6 e2       	ldi	r30, 0x26	; 38
    1960:	f0 e0       	ldi	r31, 0x00	; 0
    1962:	80 81       	ld	r24, Z
    1964:	80 68       	ori	r24, 0x80	; 128
    1966:	8c 93       	st	X, r24

	
}
    1968:	cf 91       	pop	r28
    196a:	df 91       	pop	r29
    196c:	08 95       	ret

0000196e <ADC_U16GitDigital>:

u16 ADC_U16GitDigital(u8 LOC_Channel)
{
    196e:	df 93       	push	r29
    1970:	cf 93       	push	r28
    1972:	0f 92       	push	r0
    1974:	cd b7       	in	r28, 0x3d	; 61
    1976:	de b7       	in	r29, 0x3e	; 62
    1978:	89 83       	std	Y+1, r24	; 0x01
	ADMUX&=0b11100000;               //singel ended
    197a:	a7 e2       	ldi	r26, 0x27	; 39
    197c:	b0 e0       	ldi	r27, 0x00	; 0
    197e:	e7 e2       	ldi	r30, 0x27	; 39
    1980:	f0 e0       	ldi	r31, 0x00	; 0
    1982:	80 81       	ld	r24, Z
    1984:	80 7e       	andi	r24, 0xE0	; 224
    1986:	8c 93       	st	X, r24
	ADMUX|=LOC_Channel;              //number of channel by user
    1988:	a7 e2       	ldi	r26, 0x27	; 39
    198a:	b0 e0       	ldi	r27, 0x00	; 0
    198c:	e7 e2       	ldi	r30, 0x27	; 39
    198e:	f0 e0       	ldi	r31, 0x00	; 0
    1990:	90 81       	ld	r25, Z
    1992:	89 81       	ldd	r24, Y+1	; 0x01
    1994:	89 2b       	or	r24, r25
    1996:	8c 93       	st	X, r24

	SET_BIT(ADCSRA,ADSC);           //Start Conversion
    1998:	a6 e2       	ldi	r26, 0x26	; 38
    199a:	b0 e0       	ldi	r27, 0x00	; 0
    199c:	e6 e2       	ldi	r30, 0x26	; 38
    199e:	f0 e0       	ldi	r31, 0x00	; 0
    19a0:	80 81       	ld	r24, Z
    19a2:	80 64       	ori	r24, 0x40	; 64
    19a4:	8c 93       	st	X, r24
	while(0==GET_BIT(ADCSRA,ADIF))  //if ADC interrupt flag=0 waite until be one
    19a6:	e6 e2       	ldi	r30, 0x26	; 38
    19a8:	f0 e0       	ldi	r31, 0x00	; 0
    19aa:	80 81       	ld	r24, Z
    19ac:	82 95       	swap	r24
    19ae:	8f 70       	andi	r24, 0x0F	; 15
    19b0:	88 2f       	mov	r24, r24
    19b2:	90 e0       	ldi	r25, 0x00	; 0
    19b4:	81 70       	andi	r24, 0x01	; 1
    19b6:	90 70       	andi	r25, 0x00	; 0
    19b8:	00 97       	sbiw	r24, 0x00	; 0
    19ba:	a9 f3       	breq	.-22     	; 0x19a6 <ADC_U16GitDigital+0x38>
	{
	}
	SET_BIT(ADCSRA,ADIF);           //reset the interrupt flag over write one to be zero
    19bc:	a6 e2       	ldi	r26, 0x26	; 38
    19be:	b0 e0       	ldi	r27, 0x00	; 0
    19c0:	e6 e2       	ldi	r30, 0x26	; 38
    19c2:	f0 e0       	ldi	r31, 0x00	; 0
    19c4:	80 81       	ld	r24, Z
    19c6:	80 61       	ori	r24, 0x10	; 16
    19c8:	8c 93       	st	X, r24
    return ADC;
    19ca:	e4 e2       	ldi	r30, 0x24	; 36
    19cc:	f0 e0       	ldi	r31, 0x00	; 0
    19ce:	80 81       	ld	r24, Z
    19d0:	91 81       	ldd	r25, Z+1	; 0x01

}
    19d2:	0f 90       	pop	r0
    19d4:	cf 91       	pop	r28
    19d6:	df 91       	pop	r29
    19d8:	08 95       	ret

000019da <ADC_VidStartConvertion>:


void ADC_VidStartConvertion(u8  LOC_Channel)
{
    19da:	df 93       	push	r29
    19dc:	cf 93       	push	r28
    19de:	0f 92       	push	r0
    19e0:	cd b7       	in	r28, 0x3d	; 61
    19e2:	de b7       	in	r29, 0x3e	; 62
    19e4:	89 83       	std	Y+1, r24	; 0x01
	ADMUX&=0b11100000;               //singel ended
    19e6:	a7 e2       	ldi	r26, 0x27	; 39
    19e8:	b0 e0       	ldi	r27, 0x00	; 0
    19ea:	e7 e2       	ldi	r30, 0x27	; 39
    19ec:	f0 e0       	ldi	r31, 0x00	; 0
    19ee:	80 81       	ld	r24, Z
    19f0:	80 7e       	andi	r24, 0xE0	; 224
    19f2:	8c 93       	st	X, r24
	ADMUX|=LOC_Channel;              //number of channel by user
    19f4:	a7 e2       	ldi	r26, 0x27	; 39
    19f6:	b0 e0       	ldi	r27, 0x00	; 0
    19f8:	e7 e2       	ldi	r30, 0x27	; 39
    19fa:	f0 e0       	ldi	r31, 0x00	; 0
    19fc:	90 81       	ld	r25, Z
    19fe:	89 81       	ldd	r24, Y+1	; 0x01
    1a00:	89 2b       	or	r24, r25
    1a02:	8c 93       	st	X, r24


	SET_BIT(ADCSRA,ADSC);           //Start Conversion
    1a04:	a6 e2       	ldi	r26, 0x26	; 38
    1a06:	b0 e0       	ldi	r27, 0x00	; 0
    1a08:	e6 e2       	ldi	r30, 0x26	; 38
    1a0a:	f0 e0       	ldi	r31, 0x00	; 0
    1a0c:	80 81       	ld	r24, Z
    1a0e:	80 64       	ori	r24, 0x40	; 64
    1a10:	8c 93       	st	X, r24

}
    1a12:	0f 90       	pop	r0
    1a14:	cf 91       	pop	r28
    1a16:	df 91       	pop	r29
    1a18:	08 95       	ret

00001a1a <ADC_VidEnableInt>:

void ADC_VidEnableInt(void)
{
    1a1a:	df 93       	push	r29
    1a1c:	cf 93       	push	r28
    1a1e:	cd b7       	in	r28, 0x3d	; 61
    1a20:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADCSRA,ADIE);              //enable intruppt
    1a22:	a6 e2       	ldi	r26, 0x26	; 38
    1a24:	b0 e0       	ldi	r27, 0x00	; 0
    1a26:	e6 e2       	ldi	r30, 0x26	; 38
    1a28:	f0 e0       	ldi	r31, 0x00	; 0
    1a2a:	80 81       	ld	r24, Z
    1a2c:	88 60       	ori	r24, 0x08	; 8
    1a2e:	8c 93       	st	X, r24
	}
    1a30:	cf 91       	pop	r28
    1a32:	df 91       	pop	r29
    1a34:	08 95       	ret

00001a36 <__vector_16>:

ISR(ADC_VECT)
{
    1a36:	1f 92       	push	r1
    1a38:	0f 92       	push	r0
    1a3a:	0f b6       	in	r0, 0x3f	; 63
    1a3c:	0f 92       	push	r0
    1a3e:	11 24       	eor	r1, r1
    1a40:	2f 93       	push	r18
    1a42:	3f 93       	push	r19
    1a44:	4f 93       	push	r20
    1a46:	5f 93       	push	r21
    1a48:	6f 93       	push	r22
    1a4a:	7f 93       	push	r23
    1a4c:	8f 93       	push	r24
    1a4e:	9f 93       	push	r25
    1a50:	af 93       	push	r26
    1a52:	bf 93       	push	r27
    1a54:	ef 93       	push	r30
    1a56:	ff 93       	push	r31
    1a58:	df 93       	push	r29
    1a5a:	cf 93       	push	r28
    1a5c:	00 d0       	rcall	.+0      	; 0x1a5e <__vector_16+0x28>
    1a5e:	cd b7       	in	r28, 0x3d	; 61
    1a60:	de b7       	in	r29, 0x3e	; 62
	    // CLR_BIT(ADCSRA,ADIE);
	/*DIO_VidSitPintValue(PORTB,PIN7,0);
			DIO_VidSitPintValue(PORTB,PIN1,0);
			DIO_VidSitPintValue(PORTB,PIN0,1);*/

	u16 Analog_value=0;
    1a62:	1a 82       	std	Y+2, r1	; 0x02
    1a64:	19 82       	std	Y+1, r1	; 0x01
	Analog_value=((ADC*5000UL)/1024);
    1a66:	e4 e2       	ldi	r30, 0x24	; 36
    1a68:	f0 e0       	ldi	r31, 0x00	; 0
    1a6a:	80 81       	ld	r24, Z
    1a6c:	91 81       	ldd	r25, Z+1	; 0x01
    1a6e:	cc 01       	movw	r24, r24
    1a70:	a0 e0       	ldi	r26, 0x00	; 0
    1a72:	b0 e0       	ldi	r27, 0x00	; 0
    1a74:	28 e8       	ldi	r18, 0x88	; 136
    1a76:	33 e1       	ldi	r19, 0x13	; 19
    1a78:	40 e0       	ldi	r20, 0x00	; 0
    1a7a:	50 e0       	ldi	r21, 0x00	; 0
    1a7c:	bc 01       	movw	r22, r24
    1a7e:	cd 01       	movw	r24, r26
    1a80:	0e 94 66 38 	call	0x70cc	; 0x70cc <__mulsi3>
    1a84:	dc 01       	movw	r26, r24
    1a86:	cb 01       	movw	r24, r22
    1a88:	07 2e       	mov	r0, r23
    1a8a:	7a e0       	ldi	r23, 0x0A	; 10
    1a8c:	b6 95       	lsr	r27
    1a8e:	a7 95       	ror	r26
    1a90:	97 95       	ror	r25
    1a92:	87 95       	ror	r24
    1a94:	7a 95       	dec	r23
    1a96:	d1 f7       	brne	.-12     	; 0x1a8c <__vector_16+0x56>
    1a98:	70 2d       	mov	r23, r0
    1a9a:	9a 83       	std	Y+2, r25	; 0x02
    1a9c:	89 83       	std	Y+1, r24	; 0x01
	LCD_GoToPosition(1,0);
    1a9e:	81 e0       	ldi	r24, 0x01	; 1
    1aa0:	60 e0       	ldi	r22, 0x00	; 0
    1aa2:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <LCD_GoToPosition>
	LCD_VidDisp4Number(Analog_value);
    1aa6:	89 81       	ldd	r24, Y+1	; 0x01
    1aa8:	9a 81       	ldd	r25, Y+2	; 0x02
    1aaa:	cc 01       	movw	r24, r24
    1aac:	a0 e0       	ldi	r26, 0x00	; 0
    1aae:	b0 e0       	ldi	r27, 0x00	; 0
    1ab0:	bc 01       	movw	r22, r24
    1ab2:	cd 01       	movw	r24, r26
    1ab4:	0e 94 eb 15 	call	0x2bd6	; 0x2bd6 <LCD_VidDisp4Number>


	if ((Analog_value <= 400) )
    1ab8:	89 81       	ldd	r24, Y+1	; 0x01
    1aba:	9a 81       	ldd	r25, Y+2	; 0x02
    1abc:	21 e0       	ldi	r18, 0x01	; 1
    1abe:	81 39       	cpi	r24, 0x91	; 145
    1ac0:	92 07       	cpc	r25, r18
    1ac2:	80 f4       	brcc	.+32     	; 0x1ae4 <__vector_16+0xae>
			{
				DIO_VidSitPintValue(PORTB,PIN7,0);
    1ac4:	81 e0       	ldi	r24, 0x01	; 1
    1ac6:	67 e0       	ldi	r22, 0x07	; 7
    1ac8:	40 e0       	ldi	r20, 0x00	; 0
    1aca:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <DIO_VidSitPintValue>
				DIO_VidSitPintValue(PORTB,PIN1,0);
    1ace:	81 e0       	ldi	r24, 0x01	; 1
    1ad0:	61 e0       	ldi	r22, 0x01	; 1
    1ad2:	40 e0       	ldi	r20, 0x00	; 0
    1ad4:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <DIO_VidSitPintValue>
				DIO_VidSitPintValue(PORTB,PIN0,0);
    1ad8:	81 e0       	ldi	r24, 0x01	; 1
    1ada:	60 e0       	ldi	r22, 0x00	; 0
    1adc:	40 e0       	ldi	r20, 0x00	; 0
    1ade:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <DIO_VidSitPintValue>
    1ae2:	53 c0       	rjmp	.+166    	; 0x1b8a <__vector_16+0x154>
			}
	else if ((Analog_value > 400)&& (Analog_value <= 1200) )
    1ae4:	89 81       	ldd	r24, Y+1	; 0x01
    1ae6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ae8:	21 e0       	ldi	r18, 0x01	; 1
    1aea:	81 39       	cpi	r24, 0x91	; 145
    1aec:	92 07       	cpc	r25, r18
    1aee:	b0 f0       	brcs	.+44     	; 0x1b1c <__vector_16+0xe6>
    1af0:	89 81       	ldd	r24, Y+1	; 0x01
    1af2:	9a 81       	ldd	r25, Y+2	; 0x02
    1af4:	24 e0       	ldi	r18, 0x04	; 4
    1af6:	81 3b       	cpi	r24, 0xB1	; 177
    1af8:	92 07       	cpc	r25, r18
    1afa:	80 f4       	brcc	.+32     	; 0x1b1c <__vector_16+0xe6>
	{
		DIO_VidSitPintValue(PORTB,PIN7,0);
    1afc:	81 e0       	ldi	r24, 0x01	; 1
    1afe:	67 e0       	ldi	r22, 0x07	; 7
    1b00:	40 e0       	ldi	r20, 0x00	; 0
    1b02:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <DIO_VidSitPintValue>
		DIO_VidSitPintValue(PORTB,PIN1,0);
    1b06:	81 e0       	ldi	r24, 0x01	; 1
    1b08:	61 e0       	ldi	r22, 0x01	; 1
    1b0a:	40 e0       	ldi	r20, 0x00	; 0
    1b0c:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <DIO_VidSitPintValue>
		DIO_VidSitPintValue(PORTB,PIN0,1);
    1b10:	81 e0       	ldi	r24, 0x01	; 1
    1b12:	60 e0       	ldi	r22, 0x00	; 0
    1b14:	41 e0       	ldi	r20, 0x01	; 1
    1b16:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <DIO_VidSitPintValue>
    1b1a:	37 c0       	rjmp	.+110    	; 0x1b8a <__vector_16+0x154>
	}
	else if ((Analog_value > 1200)&& (Analog_value <= 2500))
    1b1c:	89 81       	ldd	r24, Y+1	; 0x01
    1b1e:	9a 81       	ldd	r25, Y+2	; 0x02
    1b20:	24 e0       	ldi	r18, 0x04	; 4
    1b22:	81 3b       	cpi	r24, 0xB1	; 177
    1b24:	92 07       	cpc	r25, r18
    1b26:	b0 f0       	brcs	.+44     	; 0x1b54 <__vector_16+0x11e>
    1b28:	89 81       	ldd	r24, Y+1	; 0x01
    1b2a:	9a 81       	ldd	r25, Y+2	; 0x02
    1b2c:	29 e0       	ldi	r18, 0x09	; 9
    1b2e:	85 3c       	cpi	r24, 0xC5	; 197
    1b30:	92 07       	cpc	r25, r18
    1b32:	80 f4       	brcc	.+32     	; 0x1b54 <__vector_16+0x11e>
	{
		DIO_VidSitPintValue(PORTB,PIN7,0);
    1b34:	81 e0       	ldi	r24, 0x01	; 1
    1b36:	67 e0       	ldi	r22, 0x07	; 7
    1b38:	40 e0       	ldi	r20, 0x00	; 0
    1b3a:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <DIO_VidSitPintValue>
		DIO_VidSitPintValue(PORTB,PIN0,0);
    1b3e:	81 e0       	ldi	r24, 0x01	; 1
    1b40:	60 e0       	ldi	r22, 0x00	; 0
    1b42:	40 e0       	ldi	r20, 0x00	; 0
    1b44:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <DIO_VidSitPintValue>
		DIO_VidSitPintValue(PORTB,PIN1,1);
    1b48:	81 e0       	ldi	r24, 0x01	; 1
    1b4a:	61 e0       	ldi	r22, 0x01	; 1
    1b4c:	41 e0       	ldi	r20, 0x01	; 1
    1b4e:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <DIO_VidSitPintValue>
    1b52:	1b c0       	rjmp	.+54     	; 0x1b8a <__vector_16+0x154>
	}

	else if ((Analog_value > 2500)&& (Analog_value <5000))
    1b54:	89 81       	ldd	r24, Y+1	; 0x01
    1b56:	9a 81       	ldd	r25, Y+2	; 0x02
    1b58:	29 e0       	ldi	r18, 0x09	; 9
    1b5a:	85 3c       	cpi	r24, 0xC5	; 197
    1b5c:	92 07       	cpc	r25, r18
    1b5e:	a8 f0       	brcs	.+42     	; 0x1b8a <__vector_16+0x154>
    1b60:	89 81       	ldd	r24, Y+1	; 0x01
    1b62:	9a 81       	ldd	r25, Y+2	; 0x02
    1b64:	23 e1       	ldi	r18, 0x13	; 19
    1b66:	88 38       	cpi	r24, 0x88	; 136
    1b68:	92 07       	cpc	r25, r18
    1b6a:	78 f4       	brcc	.+30     	; 0x1b8a <__vector_16+0x154>
	{
		DIO_VidSitPintValue(PORTB,PIN7,1);
    1b6c:	81 e0       	ldi	r24, 0x01	; 1
    1b6e:	67 e0       	ldi	r22, 0x07	; 7
    1b70:	41 e0       	ldi	r20, 0x01	; 1
    1b72:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <DIO_VidSitPintValue>
		DIO_VidSitPintValue(PORTB,PIN0,0);
    1b76:	81 e0       	ldi	r24, 0x01	; 1
    1b78:	60 e0       	ldi	r22, 0x00	; 0
    1b7a:	40 e0       	ldi	r20, 0x00	; 0
    1b7c:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <DIO_VidSitPintValue>
		DIO_VidSitPintValue(PORTB,PIN1,0);
    1b80:	81 e0       	ldi	r24, 0x01	; 1
    1b82:	61 e0       	ldi	r22, 0x01	; 1
    1b84:	40 e0       	ldi	r20, 0x00	; 0
    1b86:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <DIO_VidSitPintValue>
	}
}
    1b8a:	0f 90       	pop	r0
    1b8c:	0f 90       	pop	r0
    1b8e:	cf 91       	pop	r28
    1b90:	df 91       	pop	r29
    1b92:	ff 91       	pop	r31
    1b94:	ef 91       	pop	r30
    1b96:	bf 91       	pop	r27
    1b98:	af 91       	pop	r26
    1b9a:	9f 91       	pop	r25
    1b9c:	8f 91       	pop	r24
    1b9e:	7f 91       	pop	r23
    1ba0:	6f 91       	pop	r22
    1ba2:	5f 91       	pop	r21
    1ba4:	4f 91       	pop	r20
    1ba6:	3f 91       	pop	r19
    1ba8:	2f 91       	pop	r18
    1baa:	0f 90       	pop	r0
    1bac:	0f be       	out	0x3f, r0	; 63
    1bae:	0f 90       	pop	r0
    1bb0:	1f 90       	pop	r1
    1bb2:	18 95       	reti

00001bb4 <SEVEN_SEGMENT_INT>:
#include "../../MCAL/DIO/DIO_TYPE.h"
#include "../../MCAL/DIO/DIO_Interface.h"
#include "SEVEN_SEGMENT.h"

void SEVEN_SEGMENT_INT(void)
{
    1bb4:	df 93       	push	r29
    1bb6:	cf 93       	push	r28
    1bb8:	cd b7       	in	r28, 0x3d	; 61
    1bba:	de b7       	in	r29, 0x3e	; 62

	 DIO_VidSitPortDirection(PORTA,OUTPUT);
    1bbc:	80 e0       	ldi	r24, 0x00	; 0
    1bbe:	61 e0       	ldi	r22, 0x01	; 1
    1bc0:	0e 94 52 09 	call	0x12a4	; 0x12a4 <DIO_VidSitPortDirection>
	 DIO_VidSitPortDirection(PORTB,OUTPUT);
    1bc4:	81 e0       	ldi	r24, 0x01	; 1
    1bc6:	61 e0       	ldi	r22, 0x01	; 1
    1bc8:	0e 94 52 09 	call	0x12a4	; 0x12a4 <DIO_VidSitPortDirection>
	 DIO_VidSitPortDirection(PORTC,OUTPUT);
    1bcc:	82 e0       	ldi	r24, 0x02	; 2
    1bce:	61 e0       	ldi	r22, 0x01	; 1
    1bd0:	0e 94 52 09 	call	0x12a4	; 0x12a4 <DIO_VidSitPortDirection>
	 DIO_VidSitPortDirection(PORTD,OUTPUT);
    1bd4:	83 e0       	ldi	r24, 0x03	; 3
    1bd6:	61 e0       	ldi	r22, 0x01	; 1
    1bd8:	0e 94 52 09 	call	0x12a4	; 0x12a4 <DIO_VidSitPortDirection>

}
    1bdc:	cf 91       	pop	r28
    1bde:	df 91       	pop	r29
    1be0:	08 95       	ret

00001be2 <SEVEN_SEGMENT_WRITE>:

void SEVEN_SEGMENT_WRITE(unsigned char number,SEVEN_SEGMENT_TYPE TYPE)
{
    1be2:	df 93       	push	r29
    1be4:	cf 93       	push	r28
    1be6:	00 d0       	rcall	.+0      	; 0x1be8 <SEVEN_SEGMENT_WRITE+0x6>
    1be8:	0f 92       	push	r0
    1bea:	cd b7       	in	r28, 0x3d	; 61
    1bec:	de b7       	in	r29, 0x3e	; 62
    1bee:	8a 83       	std	Y+2, r24	; 0x02
    1bf0:	6b 83       	std	Y+3, r22	; 0x03
	const unsigned char seven_seg_digits[10]={ZERO1,ONE1,TWO1,THREE1,FOUR1,FIVE1,SIX1,SEVEN1,EIGHT1,NINE1};
	unsigned char VALUE;
	if (INOD == TYPE)
    1bf2:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf4:	88 23       	and	r24, r24
    1bf6:	71 f4       	brne	.+28     	; 0x1c14 <SEVEN_SEGMENT_WRITE+0x32>
	{
		VALUE= ~seven_seg_digits[number];
    1bf8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bfa:	88 2f       	mov	r24, r24
    1bfc:	90 e0       	ldi	r25, 0x00	; 0
    1bfe:	fc 01       	movw	r30, r24
    1c00:	e7 55       	subi	r30, 0x57	; 87
    1c02:	ff 4f       	sbci	r31, 0xFF	; 255
    1c04:	80 81       	ld	r24, Z
    1c06:	80 95       	com	r24
    1c08:	89 83       	std	Y+1, r24	; 0x01
		DIO_VidSitPortValue(PORTA,VALUE);
    1c0a:	80 e0       	ldi	r24, 0x00	; 0
    1c0c:	69 81       	ldd	r22, Y+1	; 0x01
    1c0e:	0e 94 93 09 	call	0x1326	; 0x1326 <DIO_VidSitPortValue>
    1c12:	0f c0       	rjmp	.+30     	; 0x1c32 <SEVEN_SEGMENT_WRITE+0x50>
	}
	else if (CATHOD == TYPE)
    1c14:	8b 81       	ldd	r24, Y+3	; 0x03
    1c16:	81 30       	cpi	r24, 0x01	; 1
    1c18:	61 f4       	brne	.+24     	; 0x1c32 <SEVEN_SEGMENT_WRITE+0x50>
	{
		VALUE= seven_seg_digits[number];
    1c1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c1c:	88 2f       	mov	r24, r24
    1c1e:	90 e0       	ldi	r25, 0x00	; 0
    1c20:	fc 01       	movw	r30, r24
    1c22:	e7 55       	subi	r30, 0x57	; 87
    1c24:	ff 4f       	sbci	r31, 0xFF	; 255
    1c26:	80 81       	ld	r24, Z
    1c28:	89 83       	std	Y+1, r24	; 0x01
		DIO_VidSitPortValue(PORTA,VALUE);
    1c2a:	80 e0       	ldi	r24, 0x00	; 0
    1c2c:	69 81       	ldd	r22, Y+1	; 0x01
    1c2e:	0e 94 93 09 	call	0x1326	; 0x1326 <DIO_VidSitPortValue>
	}
}
    1c32:	0f 90       	pop	r0
    1c34:	0f 90       	pop	r0
    1c36:	0f 90       	pop	r0
    1c38:	cf 91       	pop	r28
    1c3a:	df 91       	pop	r29
    1c3c:	08 95       	ret

00001c3e <SEVEN_SEGMENT_CLEAR>:

void SEVEN_SEGMENT_CLEAR(void)
{
    1c3e:	df 93       	push	r29
    1c40:	cf 93       	push	r28
    1c42:	cd b7       	in	r28, 0x3d	; 61
    1c44:	de b7       	in	r29, 0x3e	; 62
	DIO_VidSitPortValue(PORTA,clear);
    1c46:	80 e0       	ldi	r24, 0x00	; 0
    1c48:	6f ef       	ldi	r22, 0xFF	; 255
    1c4a:	0e 94 93 09 	call	0x1326	; 0x1326 <DIO_VidSitPortValue>
}
    1c4e:	cf 91       	pop	r28
    1c50:	df 91       	pop	r29
    1c52:	08 95       	ret

00001c54 <LCD_Vid4Initialization>:
#include "LCD_4BIT_Interface.h"

static u8 InitStepFinishid= 0;

void LCD_Vid4Initialization(void)
{
    1c54:	df 93       	push	r29
    1c56:	cf 93       	push	r28
    1c58:	cd b7       	in	r28, 0x3d	; 61
    1c5a:	de b7       	in	r29, 0x3e	; 62
    1c5c:	e8 97       	sbiw	r28, 0x38	; 56
    1c5e:	0f b6       	in	r0, 0x3f	; 63
    1c60:	f8 94       	cli
    1c62:	de bf       	out	0x3e, r29	; 62
    1c64:	0f be       	out	0x3f, r0	; 63
    1c66:	cd bf       	out	0x3d, r28	; 61
	DIO_VidSitPortDirection(LCD_PORT, 0xff);
    1c68:	83 e0       	ldi	r24, 0x03	; 3
    1c6a:	6f ef       	ldi	r22, 0xFF	; 255
    1c6c:	0e 94 52 09 	call	0x12a4	; 0x12a4 <DIO_VidSitPortDirection>
	DIO_VidSitPintDirection(LCD_INIT,LCD_RS,HIGH);   //RS
    1c70:	81 e0       	ldi	r24, 0x01	; 1
    1c72:	63 e0       	ldi	r22, 0x03	; 3
    1c74:	41 e0       	ldi	r20, 0x01	; 1
    1c76:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <DIO_VidSitPintDirection>
	DIO_VidSitPintDirection(LCD_INIT,LCD_RW,HIGH);   //RW
    1c7a:	81 e0       	ldi	r24, 0x01	; 1
    1c7c:	64 e0       	ldi	r22, 0x04	; 4
    1c7e:	41 e0       	ldi	r20, 0x01	; 1
    1c80:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <DIO_VidSitPintDirection>
	DIO_VidSitPintDirection(LCD_INIT,LCD_EN,HIGH);   //EN
    1c84:	81 e0       	ldi	r24, 0x01	; 1
    1c86:	65 e0       	ldi	r22, 0x05	; 5
    1c88:	41 e0       	ldi	r20, 0x01	; 1
    1c8a:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <DIO_VidSitPintDirection>
    1c8e:	80 e0       	ldi	r24, 0x00	; 0
    1c90:	90 e0       	ldi	r25, 0x00	; 0
    1c92:	a8 e4       	ldi	r26, 0x48	; 72
    1c94:	b2 e4       	ldi	r27, 0x42	; 66
    1c96:	8d ab       	std	Y+53, r24	; 0x35
    1c98:	9e ab       	std	Y+54, r25	; 0x36
    1c9a:	af ab       	std	Y+55, r26	; 0x37
    1c9c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c9e:	6d a9       	ldd	r22, Y+53	; 0x35
    1ca0:	7e a9       	ldd	r23, Y+54	; 0x36
    1ca2:	8f a9       	ldd	r24, Y+55	; 0x37
    1ca4:	98 ad       	ldd	r25, Y+56	; 0x38
    1ca6:	20 e0       	ldi	r18, 0x00	; 0
    1ca8:	30 e0       	ldi	r19, 0x00	; 0
    1caa:	4a ef       	ldi	r20, 0xFA	; 250
    1cac:	54 e4       	ldi	r21, 0x44	; 68
    1cae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cb2:	dc 01       	movw	r26, r24
    1cb4:	cb 01       	movw	r24, r22
    1cb6:	89 ab       	std	Y+49, r24	; 0x31
    1cb8:	9a ab       	std	Y+50, r25	; 0x32
    1cba:	ab ab       	std	Y+51, r26	; 0x33
    1cbc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1cbe:	69 a9       	ldd	r22, Y+49	; 0x31
    1cc0:	7a a9       	ldd	r23, Y+50	; 0x32
    1cc2:	8b a9       	ldd	r24, Y+51	; 0x33
    1cc4:	9c a9       	ldd	r25, Y+52	; 0x34
    1cc6:	20 e0       	ldi	r18, 0x00	; 0
    1cc8:	30 e0       	ldi	r19, 0x00	; 0
    1cca:	40 e8       	ldi	r20, 0x80	; 128
    1ccc:	5f e3       	ldi	r21, 0x3F	; 63
    1cce:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cd2:	88 23       	and	r24, r24
    1cd4:	2c f4       	brge	.+10     	; 0x1ce0 <LCD_Vid4Initialization+0x8c>
		__ticks = 1;
    1cd6:	81 e0       	ldi	r24, 0x01	; 1
    1cd8:	90 e0       	ldi	r25, 0x00	; 0
    1cda:	98 ab       	std	Y+48, r25	; 0x30
    1cdc:	8f a7       	std	Y+47, r24	; 0x2f
    1cde:	3f c0       	rjmp	.+126    	; 0x1d5e <LCD_Vid4Initialization+0x10a>
	else if (__tmp > 65535)
    1ce0:	69 a9       	ldd	r22, Y+49	; 0x31
    1ce2:	7a a9       	ldd	r23, Y+50	; 0x32
    1ce4:	8b a9       	ldd	r24, Y+51	; 0x33
    1ce6:	9c a9       	ldd	r25, Y+52	; 0x34
    1ce8:	20 e0       	ldi	r18, 0x00	; 0
    1cea:	3f ef       	ldi	r19, 0xFF	; 255
    1cec:	4f e7       	ldi	r20, 0x7F	; 127
    1cee:	57 e4       	ldi	r21, 0x47	; 71
    1cf0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1cf4:	18 16       	cp	r1, r24
    1cf6:	4c f5       	brge	.+82     	; 0x1d4a <LCD_Vid4Initialization+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cf8:	6d a9       	ldd	r22, Y+53	; 0x35
    1cfa:	7e a9       	ldd	r23, Y+54	; 0x36
    1cfc:	8f a9       	ldd	r24, Y+55	; 0x37
    1cfe:	98 ad       	ldd	r25, Y+56	; 0x38
    1d00:	20 e0       	ldi	r18, 0x00	; 0
    1d02:	30 e0       	ldi	r19, 0x00	; 0
    1d04:	40 e2       	ldi	r20, 0x20	; 32
    1d06:	51 e4       	ldi	r21, 0x41	; 65
    1d08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d0c:	dc 01       	movw	r26, r24
    1d0e:	cb 01       	movw	r24, r22
    1d10:	bc 01       	movw	r22, r24
    1d12:	cd 01       	movw	r24, r26
    1d14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d18:	dc 01       	movw	r26, r24
    1d1a:	cb 01       	movw	r24, r22
    1d1c:	98 ab       	std	Y+48, r25	; 0x30
    1d1e:	8f a7       	std	Y+47, r24	; 0x2f
    1d20:	0f c0       	rjmp	.+30     	; 0x1d40 <LCD_Vid4Initialization+0xec>
    1d22:	88 ec       	ldi	r24, 0xC8	; 200
    1d24:	90 e0       	ldi	r25, 0x00	; 0
    1d26:	9e a7       	std	Y+46, r25	; 0x2e
    1d28:	8d a7       	std	Y+45, r24	; 0x2d
    1d2a:	8d a5       	ldd	r24, Y+45	; 0x2d
    1d2c:	9e a5       	ldd	r25, Y+46	; 0x2e
    1d2e:	01 97       	sbiw	r24, 0x01	; 1
    1d30:	f1 f7       	brne	.-4      	; 0x1d2e <LCD_Vid4Initialization+0xda>
    1d32:	9e a7       	std	Y+46, r25	; 0x2e
    1d34:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d36:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d38:	98 a9       	ldd	r25, Y+48	; 0x30
    1d3a:	01 97       	sbiw	r24, 0x01	; 1
    1d3c:	98 ab       	std	Y+48, r25	; 0x30
    1d3e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d40:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d42:	98 a9       	ldd	r25, Y+48	; 0x30
    1d44:	00 97       	sbiw	r24, 0x00	; 0
    1d46:	69 f7       	brne	.-38     	; 0x1d22 <LCD_Vid4Initialization+0xce>
    1d48:	14 c0       	rjmp	.+40     	; 0x1d72 <LCD_Vid4Initialization+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d4a:	69 a9       	ldd	r22, Y+49	; 0x31
    1d4c:	7a a9       	ldd	r23, Y+50	; 0x32
    1d4e:	8b a9       	ldd	r24, Y+51	; 0x33
    1d50:	9c a9       	ldd	r25, Y+52	; 0x34
    1d52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d56:	dc 01       	movw	r26, r24
    1d58:	cb 01       	movw	r24, r22
    1d5a:	98 ab       	std	Y+48, r25	; 0x30
    1d5c:	8f a7       	std	Y+47, r24	; 0x2f
    1d5e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d60:	98 a9       	ldd	r25, Y+48	; 0x30
    1d62:	9c a7       	std	Y+44, r25	; 0x2c
    1d64:	8b a7       	std	Y+43, r24	; 0x2b
    1d66:	8b a5       	ldd	r24, Y+43	; 0x2b
    1d68:	9c a5       	ldd	r25, Y+44	; 0x2c
    1d6a:	01 97       	sbiw	r24, 0x01	; 1
    1d6c:	f1 f7       	brne	.-4      	; 0x1d6a <LCD_Vid4Initialization+0x116>
    1d6e:	9c a7       	std	Y+44, r25	; 0x2c
    1d70:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(50); // wait for LCD to initialize

	LCD_VidWrite4Cmd(0x20);
    1d72:	80 e2       	ldi	r24, 0x20	; 32
    1d74:	0e 94 30 10 	call	0x2060	; 0x2060 <LCD_VidWrite4Cmd>
	LCD_VidWrite4Cmd(0x20);
    1d78:	80 e2       	ldi	r24, 0x20	; 32
    1d7a:	0e 94 30 10 	call	0x2060	; 0x2060 <LCD_VidWrite4Cmd>
	LCD_VidWrite4Cmd(0x80);
    1d7e:	80 e8       	ldi	r24, 0x80	; 128
    1d80:	0e 94 30 10 	call	0x2060	; 0x2060 <LCD_VidWrite4Cmd>
    1d84:	80 e0       	ldi	r24, 0x00	; 0
    1d86:	90 e0       	ldi	r25, 0x00	; 0
    1d88:	a0 e0       	ldi	r26, 0x00	; 0
    1d8a:	b0 e4       	ldi	r27, 0x40	; 64
    1d8c:	8f a3       	std	Y+39, r24	; 0x27
    1d8e:	98 a7       	std	Y+40, r25	; 0x28
    1d90:	a9 a7       	std	Y+41, r26	; 0x29
    1d92:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d94:	6f a1       	ldd	r22, Y+39	; 0x27
    1d96:	78 a5       	ldd	r23, Y+40	; 0x28
    1d98:	89 a5       	ldd	r24, Y+41	; 0x29
    1d9a:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d9c:	20 e0       	ldi	r18, 0x00	; 0
    1d9e:	30 e0       	ldi	r19, 0x00	; 0
    1da0:	4a ef       	ldi	r20, 0xFA	; 250
    1da2:	54 e4       	ldi	r21, 0x44	; 68
    1da4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1da8:	dc 01       	movw	r26, r24
    1daa:	cb 01       	movw	r24, r22
    1dac:	8b a3       	std	Y+35, r24	; 0x23
    1dae:	9c a3       	std	Y+36, r25	; 0x24
    1db0:	ad a3       	std	Y+37, r26	; 0x25
    1db2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1db4:	6b a1       	ldd	r22, Y+35	; 0x23
    1db6:	7c a1       	ldd	r23, Y+36	; 0x24
    1db8:	8d a1       	ldd	r24, Y+37	; 0x25
    1dba:	9e a1       	ldd	r25, Y+38	; 0x26
    1dbc:	20 e0       	ldi	r18, 0x00	; 0
    1dbe:	30 e0       	ldi	r19, 0x00	; 0
    1dc0:	40 e8       	ldi	r20, 0x80	; 128
    1dc2:	5f e3       	ldi	r21, 0x3F	; 63
    1dc4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1dc8:	88 23       	and	r24, r24
    1dca:	2c f4       	brge	.+10     	; 0x1dd6 <LCD_Vid4Initialization+0x182>
		__ticks = 1;
    1dcc:	81 e0       	ldi	r24, 0x01	; 1
    1dce:	90 e0       	ldi	r25, 0x00	; 0
    1dd0:	9a a3       	std	Y+34, r25	; 0x22
    1dd2:	89 a3       	std	Y+33, r24	; 0x21
    1dd4:	3f c0       	rjmp	.+126    	; 0x1e54 <LCD_Vid4Initialization+0x200>
	else if (__tmp > 65535)
    1dd6:	6b a1       	ldd	r22, Y+35	; 0x23
    1dd8:	7c a1       	ldd	r23, Y+36	; 0x24
    1dda:	8d a1       	ldd	r24, Y+37	; 0x25
    1ddc:	9e a1       	ldd	r25, Y+38	; 0x26
    1dde:	20 e0       	ldi	r18, 0x00	; 0
    1de0:	3f ef       	ldi	r19, 0xFF	; 255
    1de2:	4f e7       	ldi	r20, 0x7F	; 127
    1de4:	57 e4       	ldi	r21, 0x47	; 71
    1de6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1dea:	18 16       	cp	r1, r24
    1dec:	4c f5       	brge	.+82     	; 0x1e40 <LCD_Vid4Initialization+0x1ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dee:	6f a1       	ldd	r22, Y+39	; 0x27
    1df0:	78 a5       	ldd	r23, Y+40	; 0x28
    1df2:	89 a5       	ldd	r24, Y+41	; 0x29
    1df4:	9a a5       	ldd	r25, Y+42	; 0x2a
    1df6:	20 e0       	ldi	r18, 0x00	; 0
    1df8:	30 e0       	ldi	r19, 0x00	; 0
    1dfa:	40 e2       	ldi	r20, 0x20	; 32
    1dfc:	51 e4       	ldi	r21, 0x41	; 65
    1dfe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e02:	dc 01       	movw	r26, r24
    1e04:	cb 01       	movw	r24, r22
    1e06:	bc 01       	movw	r22, r24
    1e08:	cd 01       	movw	r24, r26
    1e0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e0e:	dc 01       	movw	r26, r24
    1e10:	cb 01       	movw	r24, r22
    1e12:	9a a3       	std	Y+34, r25	; 0x22
    1e14:	89 a3       	std	Y+33, r24	; 0x21
    1e16:	0f c0       	rjmp	.+30     	; 0x1e36 <LCD_Vid4Initialization+0x1e2>
    1e18:	88 ec       	ldi	r24, 0xC8	; 200
    1e1a:	90 e0       	ldi	r25, 0x00	; 0
    1e1c:	98 a3       	std	Y+32, r25	; 0x20
    1e1e:	8f 8f       	std	Y+31, r24	; 0x1f
    1e20:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1e22:	98 a1       	ldd	r25, Y+32	; 0x20
    1e24:	01 97       	sbiw	r24, 0x01	; 1
    1e26:	f1 f7       	brne	.-4      	; 0x1e24 <LCD_Vid4Initialization+0x1d0>
    1e28:	98 a3       	std	Y+32, r25	; 0x20
    1e2a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e2c:	89 a1       	ldd	r24, Y+33	; 0x21
    1e2e:	9a a1       	ldd	r25, Y+34	; 0x22
    1e30:	01 97       	sbiw	r24, 0x01	; 1
    1e32:	9a a3       	std	Y+34, r25	; 0x22
    1e34:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e36:	89 a1       	ldd	r24, Y+33	; 0x21
    1e38:	9a a1       	ldd	r25, Y+34	; 0x22
    1e3a:	00 97       	sbiw	r24, 0x00	; 0
    1e3c:	69 f7       	brne	.-38     	; 0x1e18 <LCD_Vid4Initialization+0x1c4>
    1e3e:	14 c0       	rjmp	.+40     	; 0x1e68 <LCD_Vid4Initialization+0x214>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e40:	6b a1       	ldd	r22, Y+35	; 0x23
    1e42:	7c a1       	ldd	r23, Y+36	; 0x24
    1e44:	8d a1       	ldd	r24, Y+37	; 0x25
    1e46:	9e a1       	ldd	r25, Y+38	; 0x26
    1e48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e4c:	dc 01       	movw	r26, r24
    1e4e:	cb 01       	movw	r24, r22
    1e50:	9a a3       	std	Y+34, r25	; 0x22
    1e52:	89 a3       	std	Y+33, r24	; 0x21
    1e54:	89 a1       	ldd	r24, Y+33	; 0x21
    1e56:	9a a1       	ldd	r25, Y+34	; 0x22
    1e58:	9e 8f       	std	Y+30, r25	; 0x1e
    1e5a:	8d 8f       	std	Y+29, r24	; 0x1d
    1e5c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e5e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1e60:	01 97       	sbiw	r24, 0x01	; 1
    1e62:	f1 f7       	brne	.-4      	; 0x1e60 <LCD_Vid4Initialization+0x20c>
    1e64:	9e 8f       	std	Y+30, r25	; 0x1e
    1e66:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);
	LCD_VidWrite4Cmd(0x00);
    1e68:	80 e0       	ldi	r24, 0x00	; 0
    1e6a:	0e 94 30 10 	call	0x2060	; 0x2060 <LCD_VidWrite4Cmd>
	LCD_VidWrite4Cmd(0xC0);
    1e6e:	80 ec       	ldi	r24, 0xC0	; 192
    1e70:	0e 94 30 10 	call	0x2060	; 0x2060 <LCD_VidWrite4Cmd>
    1e74:	80 e0       	ldi	r24, 0x00	; 0
    1e76:	90 e0       	ldi	r25, 0x00	; 0
    1e78:	a0 e8       	ldi	r26, 0x80	; 128
    1e7a:	bf e3       	ldi	r27, 0x3F	; 63
    1e7c:	89 8f       	std	Y+25, r24	; 0x19
    1e7e:	9a 8f       	std	Y+26, r25	; 0x1a
    1e80:	ab 8f       	std	Y+27, r26	; 0x1b
    1e82:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e84:	69 8d       	ldd	r22, Y+25	; 0x19
    1e86:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e88:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e8a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e8c:	20 e0       	ldi	r18, 0x00	; 0
    1e8e:	30 e0       	ldi	r19, 0x00	; 0
    1e90:	4a ef       	ldi	r20, 0xFA	; 250
    1e92:	54 e4       	ldi	r21, 0x44	; 68
    1e94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e98:	dc 01       	movw	r26, r24
    1e9a:	cb 01       	movw	r24, r22
    1e9c:	8d 8b       	std	Y+21, r24	; 0x15
    1e9e:	9e 8b       	std	Y+22, r25	; 0x16
    1ea0:	af 8b       	std	Y+23, r26	; 0x17
    1ea2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1ea4:	6d 89       	ldd	r22, Y+21	; 0x15
    1ea6:	7e 89       	ldd	r23, Y+22	; 0x16
    1ea8:	8f 89       	ldd	r24, Y+23	; 0x17
    1eaa:	98 8d       	ldd	r25, Y+24	; 0x18
    1eac:	20 e0       	ldi	r18, 0x00	; 0
    1eae:	30 e0       	ldi	r19, 0x00	; 0
    1eb0:	40 e8       	ldi	r20, 0x80	; 128
    1eb2:	5f e3       	ldi	r21, 0x3F	; 63
    1eb4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1eb8:	88 23       	and	r24, r24
    1eba:	2c f4       	brge	.+10     	; 0x1ec6 <LCD_Vid4Initialization+0x272>
		__ticks = 1;
    1ebc:	81 e0       	ldi	r24, 0x01	; 1
    1ebe:	90 e0       	ldi	r25, 0x00	; 0
    1ec0:	9c 8b       	std	Y+20, r25	; 0x14
    1ec2:	8b 8b       	std	Y+19, r24	; 0x13
    1ec4:	3f c0       	rjmp	.+126    	; 0x1f44 <LCD_Vid4Initialization+0x2f0>
	else if (__tmp > 65535)
    1ec6:	6d 89       	ldd	r22, Y+21	; 0x15
    1ec8:	7e 89       	ldd	r23, Y+22	; 0x16
    1eca:	8f 89       	ldd	r24, Y+23	; 0x17
    1ecc:	98 8d       	ldd	r25, Y+24	; 0x18
    1ece:	20 e0       	ldi	r18, 0x00	; 0
    1ed0:	3f ef       	ldi	r19, 0xFF	; 255
    1ed2:	4f e7       	ldi	r20, 0x7F	; 127
    1ed4:	57 e4       	ldi	r21, 0x47	; 71
    1ed6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1eda:	18 16       	cp	r1, r24
    1edc:	4c f5       	brge	.+82     	; 0x1f30 <LCD_Vid4Initialization+0x2dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ede:	69 8d       	ldd	r22, Y+25	; 0x19
    1ee0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ee2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ee4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ee6:	20 e0       	ldi	r18, 0x00	; 0
    1ee8:	30 e0       	ldi	r19, 0x00	; 0
    1eea:	40 e2       	ldi	r20, 0x20	; 32
    1eec:	51 e4       	ldi	r21, 0x41	; 65
    1eee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ef2:	dc 01       	movw	r26, r24
    1ef4:	cb 01       	movw	r24, r22
    1ef6:	bc 01       	movw	r22, r24
    1ef8:	cd 01       	movw	r24, r26
    1efa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1efe:	dc 01       	movw	r26, r24
    1f00:	cb 01       	movw	r24, r22
    1f02:	9c 8b       	std	Y+20, r25	; 0x14
    1f04:	8b 8b       	std	Y+19, r24	; 0x13
    1f06:	0f c0       	rjmp	.+30     	; 0x1f26 <LCD_Vid4Initialization+0x2d2>
    1f08:	88 ec       	ldi	r24, 0xC8	; 200
    1f0a:	90 e0       	ldi	r25, 0x00	; 0
    1f0c:	9a 8b       	std	Y+18, r25	; 0x12
    1f0e:	89 8b       	std	Y+17, r24	; 0x11
    1f10:	89 89       	ldd	r24, Y+17	; 0x11
    1f12:	9a 89       	ldd	r25, Y+18	; 0x12
    1f14:	01 97       	sbiw	r24, 0x01	; 1
    1f16:	f1 f7       	brne	.-4      	; 0x1f14 <LCD_Vid4Initialization+0x2c0>
    1f18:	9a 8b       	std	Y+18, r25	; 0x12
    1f1a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f1c:	8b 89       	ldd	r24, Y+19	; 0x13
    1f1e:	9c 89       	ldd	r25, Y+20	; 0x14
    1f20:	01 97       	sbiw	r24, 0x01	; 1
    1f22:	9c 8b       	std	Y+20, r25	; 0x14
    1f24:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f26:	8b 89       	ldd	r24, Y+19	; 0x13
    1f28:	9c 89       	ldd	r25, Y+20	; 0x14
    1f2a:	00 97       	sbiw	r24, 0x00	; 0
    1f2c:	69 f7       	brne	.-38     	; 0x1f08 <LCD_Vid4Initialization+0x2b4>
    1f2e:	14 c0       	rjmp	.+40     	; 0x1f58 <LCD_Vid4Initialization+0x304>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f30:	6d 89       	ldd	r22, Y+21	; 0x15
    1f32:	7e 89       	ldd	r23, Y+22	; 0x16
    1f34:	8f 89       	ldd	r24, Y+23	; 0x17
    1f36:	98 8d       	ldd	r25, Y+24	; 0x18
    1f38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f3c:	dc 01       	movw	r26, r24
    1f3e:	cb 01       	movw	r24, r22
    1f40:	9c 8b       	std	Y+20, r25	; 0x14
    1f42:	8b 8b       	std	Y+19, r24	; 0x13
    1f44:	8b 89       	ldd	r24, Y+19	; 0x13
    1f46:	9c 89       	ldd	r25, Y+20	; 0x14
    1f48:	98 8b       	std	Y+16, r25	; 0x10
    1f4a:	8f 87       	std	Y+15, r24	; 0x0f
    1f4c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f4e:	98 89       	ldd	r25, Y+16	; 0x10
    1f50:	01 97       	sbiw	r24, 0x01	; 1
    1f52:	f1 f7       	brne	.-4      	; 0x1f50 <LCD_Vid4Initialization+0x2fc>
    1f54:	98 8b       	std	Y+16, r25	; 0x10
    1f56:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_VidWrite4Cmd(0x00);
    1f58:	80 e0       	ldi	r24, 0x00	; 0
    1f5a:	0e 94 30 10 	call	0x2060	; 0x2060 <LCD_VidWrite4Cmd>
	LCD_VidWrite4Cmd(0x10);
    1f5e:	80 e1       	ldi	r24, 0x10	; 16
    1f60:	0e 94 30 10 	call	0x2060	; 0x2060 <LCD_VidWrite4Cmd>
    1f64:	80 e0       	ldi	r24, 0x00	; 0
    1f66:	90 e0       	ldi	r25, 0x00	; 0
    1f68:	a0 e0       	ldi	r26, 0x00	; 0
    1f6a:	b0 e4       	ldi	r27, 0x40	; 64
    1f6c:	8b 87       	std	Y+11, r24	; 0x0b
    1f6e:	9c 87       	std	Y+12, r25	; 0x0c
    1f70:	ad 87       	std	Y+13, r26	; 0x0d
    1f72:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f74:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f76:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f78:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f7a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f7c:	20 e0       	ldi	r18, 0x00	; 0
    1f7e:	30 e0       	ldi	r19, 0x00	; 0
    1f80:	4a ef       	ldi	r20, 0xFA	; 250
    1f82:	54 e4       	ldi	r21, 0x44	; 68
    1f84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f88:	dc 01       	movw	r26, r24
    1f8a:	cb 01       	movw	r24, r22
    1f8c:	8f 83       	std	Y+7, r24	; 0x07
    1f8e:	98 87       	std	Y+8, r25	; 0x08
    1f90:	a9 87       	std	Y+9, r26	; 0x09
    1f92:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f94:	6f 81       	ldd	r22, Y+7	; 0x07
    1f96:	78 85       	ldd	r23, Y+8	; 0x08
    1f98:	89 85       	ldd	r24, Y+9	; 0x09
    1f9a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f9c:	20 e0       	ldi	r18, 0x00	; 0
    1f9e:	30 e0       	ldi	r19, 0x00	; 0
    1fa0:	40 e8       	ldi	r20, 0x80	; 128
    1fa2:	5f e3       	ldi	r21, 0x3F	; 63
    1fa4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fa8:	88 23       	and	r24, r24
    1faa:	2c f4       	brge	.+10     	; 0x1fb6 <LCD_Vid4Initialization+0x362>
		__ticks = 1;
    1fac:	81 e0       	ldi	r24, 0x01	; 1
    1fae:	90 e0       	ldi	r25, 0x00	; 0
    1fb0:	9e 83       	std	Y+6, r25	; 0x06
    1fb2:	8d 83       	std	Y+5, r24	; 0x05
    1fb4:	3f c0       	rjmp	.+126    	; 0x2034 <LCD_Vid4Initialization+0x3e0>
	else if (__tmp > 65535)
    1fb6:	6f 81       	ldd	r22, Y+7	; 0x07
    1fb8:	78 85       	ldd	r23, Y+8	; 0x08
    1fba:	89 85       	ldd	r24, Y+9	; 0x09
    1fbc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fbe:	20 e0       	ldi	r18, 0x00	; 0
    1fc0:	3f ef       	ldi	r19, 0xFF	; 255
    1fc2:	4f e7       	ldi	r20, 0x7F	; 127
    1fc4:	57 e4       	ldi	r21, 0x47	; 71
    1fc6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fca:	18 16       	cp	r1, r24
    1fcc:	4c f5       	brge	.+82     	; 0x2020 <LCD_Vid4Initialization+0x3cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fce:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fd0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fd2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fd4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fd6:	20 e0       	ldi	r18, 0x00	; 0
    1fd8:	30 e0       	ldi	r19, 0x00	; 0
    1fda:	40 e2       	ldi	r20, 0x20	; 32
    1fdc:	51 e4       	ldi	r21, 0x41	; 65
    1fde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fe2:	dc 01       	movw	r26, r24
    1fe4:	cb 01       	movw	r24, r22
    1fe6:	bc 01       	movw	r22, r24
    1fe8:	cd 01       	movw	r24, r26
    1fea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fee:	dc 01       	movw	r26, r24
    1ff0:	cb 01       	movw	r24, r22
    1ff2:	9e 83       	std	Y+6, r25	; 0x06
    1ff4:	8d 83       	std	Y+5, r24	; 0x05
    1ff6:	0f c0       	rjmp	.+30     	; 0x2016 <LCD_Vid4Initialization+0x3c2>
    1ff8:	88 ec       	ldi	r24, 0xC8	; 200
    1ffa:	90 e0       	ldi	r25, 0x00	; 0
    1ffc:	9c 83       	std	Y+4, r25	; 0x04
    1ffe:	8b 83       	std	Y+3, r24	; 0x03
    2000:	8b 81       	ldd	r24, Y+3	; 0x03
    2002:	9c 81       	ldd	r25, Y+4	; 0x04
    2004:	01 97       	sbiw	r24, 0x01	; 1
    2006:	f1 f7       	brne	.-4      	; 0x2004 <LCD_Vid4Initialization+0x3b0>
    2008:	9c 83       	std	Y+4, r25	; 0x04
    200a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    200c:	8d 81       	ldd	r24, Y+5	; 0x05
    200e:	9e 81       	ldd	r25, Y+6	; 0x06
    2010:	01 97       	sbiw	r24, 0x01	; 1
    2012:	9e 83       	std	Y+6, r25	; 0x06
    2014:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2016:	8d 81       	ldd	r24, Y+5	; 0x05
    2018:	9e 81       	ldd	r25, Y+6	; 0x06
    201a:	00 97       	sbiw	r24, 0x00	; 0
    201c:	69 f7       	brne	.-38     	; 0x1ff8 <LCD_Vid4Initialization+0x3a4>
    201e:	14 c0       	rjmp	.+40     	; 0x2048 <LCD_Vid4Initialization+0x3f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2020:	6f 81       	ldd	r22, Y+7	; 0x07
    2022:	78 85       	ldd	r23, Y+8	; 0x08
    2024:	89 85       	ldd	r24, Y+9	; 0x09
    2026:	9a 85       	ldd	r25, Y+10	; 0x0a
    2028:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    202c:	dc 01       	movw	r26, r24
    202e:	cb 01       	movw	r24, r22
    2030:	9e 83       	std	Y+6, r25	; 0x06
    2032:	8d 83       	std	Y+5, r24	; 0x05
    2034:	8d 81       	ldd	r24, Y+5	; 0x05
    2036:	9e 81       	ldd	r25, Y+6	; 0x06
    2038:	9a 83       	std	Y+2, r25	; 0x02
    203a:	89 83       	std	Y+1, r24	; 0x01
    203c:	89 81       	ldd	r24, Y+1	; 0x01
    203e:	9a 81       	ldd	r25, Y+2	; 0x02
    2040:	01 97       	sbiw	r24, 0x01	; 1
    2042:	f1 f7       	brne	.-4      	; 0x2040 <LCD_Vid4Initialization+0x3ec>
    2044:	9a 83       	std	Y+2, r25	; 0x02
    2046:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	InitStepFinishid=1;
    2048:	81 e0       	ldi	r24, 0x01	; 1
    204a:	80 93 2c 01 	sts	0x012C, r24
}
    204e:	e8 96       	adiw	r28, 0x38	; 56
    2050:	0f b6       	in	r0, 0x3f	; 63
    2052:	f8 94       	cli
    2054:	de bf       	out	0x3e, r29	; 62
    2056:	0f be       	out	0x3f, r0	; 63
    2058:	cd bf       	out	0x3d, r28	; 61
    205a:	cf 91       	pop	r28
    205c:	df 91       	pop	r29
    205e:	08 95       	ret

00002060 <LCD_VidWrite4Cmd>:


void LCD_VidWrite4Cmd(u8 LOC_Cmd)
{
    2060:	0f 93       	push	r16
    2062:	1f 93       	push	r17
    2064:	df 93       	push	r29
    2066:	cf 93       	push	r28
    2068:	cd b7       	in	r28, 0x3d	; 61
    206a:	de b7       	in	r29, 0x3e	; 62
    206c:	c7 54       	subi	r28, 0x47	; 71
    206e:	d0 40       	sbci	r29, 0x00	; 0
    2070:	0f b6       	in	r0, 0x3f	; 63
    2072:	f8 94       	cli
    2074:	de bf       	out	0x3e, r29	; 62
    2076:	0f be       	out	0x3f, r0	; 63
    2078:	cd bf       	out	0x3d, r28	; 61
    207a:	fe 01       	movw	r30, r28
    207c:	e9 5b       	subi	r30, 0xB9	; 185
    207e:	ff 4f       	sbci	r31, 0xFF	; 255
    2080:	80 83       	st	Z, r24
	DIO_VidSitPintValue(LCD_INIT,LCD_RS,LOW);
    2082:	81 e0       	ldi	r24, 0x01	; 1
    2084:	63 e0       	ldi	r22, 0x03	; 3
    2086:	40 e0       	ldi	r20, 0x00	; 0
    2088:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <DIO_VidSitPintValue>
	DIO_VidSitPintValue(LCD_INIT,LCD_RW,LOW);
    208c:	81 e0       	ldi	r24, 0x01	; 1
    208e:	64 e0       	ldi	r22, 0x04	; 4
    2090:	40 e0       	ldi	r20, 0x00	; 0
    2092:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <DIO_VidSitPintValue>

	DIO_VidSitPintValue(LCD_PORT,PIN4,GET_BIT(LOC_Cmd,4));
    2096:	fe 01       	movw	r30, r28
    2098:	e9 5b       	subi	r30, 0xB9	; 185
    209a:	ff 4f       	sbci	r31, 0xFF	; 255
    209c:	80 81       	ld	r24, Z
    209e:	82 95       	swap	r24
    20a0:	8f 70       	andi	r24, 0x0F	; 15
    20a2:	98 2f       	mov	r25, r24
    20a4:	91 70       	andi	r25, 0x01	; 1
    20a6:	83 e0       	ldi	r24, 0x03	; 3
    20a8:	64 e0       	ldi	r22, 0x04	; 4
    20aa:	49 2f       	mov	r20, r25
    20ac:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <DIO_VidSitPintValue>
	DIO_VidSitPintValue(LCD_PORT,PIN5,GET_BIT(LOC_Cmd,5));
    20b0:	fe 01       	movw	r30, r28
    20b2:	e9 5b       	subi	r30, 0xB9	; 185
    20b4:	ff 4f       	sbci	r31, 0xFF	; 255
    20b6:	80 81       	ld	r24, Z
    20b8:	82 95       	swap	r24
    20ba:	86 95       	lsr	r24
    20bc:	87 70       	andi	r24, 0x07	; 7
    20be:	98 2f       	mov	r25, r24
    20c0:	91 70       	andi	r25, 0x01	; 1
    20c2:	83 e0       	ldi	r24, 0x03	; 3
    20c4:	65 e0       	ldi	r22, 0x05	; 5
    20c6:	49 2f       	mov	r20, r25
    20c8:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <DIO_VidSitPintValue>
	DIO_VidSitPintValue(LCD_PORT,PIN6,GET_BIT(LOC_Cmd,6));
    20cc:	fe 01       	movw	r30, r28
    20ce:	e9 5b       	subi	r30, 0xB9	; 185
    20d0:	ff 4f       	sbci	r31, 0xFF	; 255
    20d2:	80 81       	ld	r24, Z
    20d4:	82 95       	swap	r24
    20d6:	86 95       	lsr	r24
    20d8:	86 95       	lsr	r24
    20da:	83 70       	andi	r24, 0x03	; 3
    20dc:	98 2f       	mov	r25, r24
    20de:	91 70       	andi	r25, 0x01	; 1
    20e0:	83 e0       	ldi	r24, 0x03	; 3
    20e2:	66 e0       	ldi	r22, 0x06	; 6
    20e4:	49 2f       	mov	r20, r25
    20e6:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <DIO_VidSitPintValue>
	DIO_VidSitPintValue(LCD_PORT,PIN7,GET_BIT(LOC_Cmd,7));
    20ea:	fe 01       	movw	r30, r28
    20ec:	e9 5b       	subi	r30, 0xB9	; 185
    20ee:	ff 4f       	sbci	r31, 0xFF	; 255
    20f0:	80 81       	ld	r24, Z
    20f2:	98 2f       	mov	r25, r24
    20f4:	99 1f       	adc	r25, r25
    20f6:	99 27       	eor	r25, r25
    20f8:	99 1f       	adc	r25, r25
    20fa:	83 e0       	ldi	r24, 0x03	; 3
    20fc:	67 e0       	ldi	r22, 0x07	; 7
    20fe:	49 2f       	mov	r20, r25
    2100:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <DIO_VidSitPintValue>

	DIO_VidSitPintValue(LCD_INIT,LCD_EN,HIGH);
    2104:	81 e0       	ldi	r24, 0x01	; 1
    2106:	65 e0       	ldi	r22, 0x05	; 5
    2108:	41 e0       	ldi	r20, 0x01	; 1
    210a:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <DIO_VidSitPintValue>
    210e:	fe 01       	movw	r30, r28
    2110:	ed 5b       	subi	r30, 0xBD	; 189
    2112:	ff 4f       	sbci	r31, 0xFF	; 255
    2114:	80 e0       	ldi	r24, 0x00	; 0
    2116:	90 e0       	ldi	r25, 0x00	; 0
    2118:	a0 e8       	ldi	r26, 0x80	; 128
    211a:	bf e3       	ldi	r27, 0x3F	; 63
    211c:	80 83       	st	Z, r24
    211e:	91 83       	std	Z+1, r25	; 0x01
    2120:	a2 83       	std	Z+2, r26	; 0x02
    2122:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2124:	8e 01       	movw	r16, r28
    2126:	01 5c       	subi	r16, 0xC1	; 193
    2128:	1f 4f       	sbci	r17, 0xFF	; 255
    212a:	fe 01       	movw	r30, r28
    212c:	ed 5b       	subi	r30, 0xBD	; 189
    212e:	ff 4f       	sbci	r31, 0xFF	; 255
    2130:	60 81       	ld	r22, Z
    2132:	71 81       	ldd	r23, Z+1	; 0x01
    2134:	82 81       	ldd	r24, Z+2	; 0x02
    2136:	93 81       	ldd	r25, Z+3	; 0x03
    2138:	20 e0       	ldi	r18, 0x00	; 0
    213a:	30 e0       	ldi	r19, 0x00	; 0
    213c:	4a ef       	ldi	r20, 0xFA	; 250
    213e:	54 e4       	ldi	r21, 0x44	; 68
    2140:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2144:	dc 01       	movw	r26, r24
    2146:	cb 01       	movw	r24, r22
    2148:	f8 01       	movw	r30, r16
    214a:	80 83       	st	Z, r24
    214c:	91 83       	std	Z+1, r25	; 0x01
    214e:	a2 83       	std	Z+2, r26	; 0x02
    2150:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2152:	fe 01       	movw	r30, r28
    2154:	ff 96       	adiw	r30, 0x3f	; 63
    2156:	60 81       	ld	r22, Z
    2158:	71 81       	ldd	r23, Z+1	; 0x01
    215a:	82 81       	ldd	r24, Z+2	; 0x02
    215c:	93 81       	ldd	r25, Z+3	; 0x03
    215e:	20 e0       	ldi	r18, 0x00	; 0
    2160:	30 e0       	ldi	r19, 0x00	; 0
    2162:	40 e8       	ldi	r20, 0x80	; 128
    2164:	5f e3       	ldi	r21, 0x3F	; 63
    2166:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    216a:	88 23       	and	r24, r24
    216c:	2c f4       	brge	.+10     	; 0x2178 <LCD_VidWrite4Cmd+0x118>
		__ticks = 1;
    216e:	81 e0       	ldi	r24, 0x01	; 1
    2170:	90 e0       	ldi	r25, 0x00	; 0
    2172:	9e af       	std	Y+62, r25	; 0x3e
    2174:	8d af       	std	Y+61, r24	; 0x3d
    2176:	46 c0       	rjmp	.+140    	; 0x2204 <LCD_VidWrite4Cmd+0x1a4>
	else if (__tmp > 65535)
    2178:	fe 01       	movw	r30, r28
    217a:	ff 96       	adiw	r30, 0x3f	; 63
    217c:	60 81       	ld	r22, Z
    217e:	71 81       	ldd	r23, Z+1	; 0x01
    2180:	82 81       	ldd	r24, Z+2	; 0x02
    2182:	93 81       	ldd	r25, Z+3	; 0x03
    2184:	20 e0       	ldi	r18, 0x00	; 0
    2186:	3f ef       	ldi	r19, 0xFF	; 255
    2188:	4f e7       	ldi	r20, 0x7F	; 127
    218a:	57 e4       	ldi	r21, 0x47	; 71
    218c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2190:	18 16       	cp	r1, r24
    2192:	64 f5       	brge	.+88     	; 0x21ec <LCD_VidWrite4Cmd+0x18c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2194:	fe 01       	movw	r30, r28
    2196:	ed 5b       	subi	r30, 0xBD	; 189
    2198:	ff 4f       	sbci	r31, 0xFF	; 255
    219a:	60 81       	ld	r22, Z
    219c:	71 81       	ldd	r23, Z+1	; 0x01
    219e:	82 81       	ldd	r24, Z+2	; 0x02
    21a0:	93 81       	ldd	r25, Z+3	; 0x03
    21a2:	20 e0       	ldi	r18, 0x00	; 0
    21a4:	30 e0       	ldi	r19, 0x00	; 0
    21a6:	40 e2       	ldi	r20, 0x20	; 32
    21a8:	51 e4       	ldi	r21, 0x41	; 65
    21aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21ae:	dc 01       	movw	r26, r24
    21b0:	cb 01       	movw	r24, r22
    21b2:	bc 01       	movw	r22, r24
    21b4:	cd 01       	movw	r24, r26
    21b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21ba:	dc 01       	movw	r26, r24
    21bc:	cb 01       	movw	r24, r22
    21be:	9e af       	std	Y+62, r25	; 0x3e
    21c0:	8d af       	std	Y+61, r24	; 0x3d
    21c2:	0f c0       	rjmp	.+30     	; 0x21e2 <LCD_VidWrite4Cmd+0x182>
    21c4:	88 ec       	ldi	r24, 0xC8	; 200
    21c6:	90 e0       	ldi	r25, 0x00	; 0
    21c8:	9c af       	std	Y+60, r25	; 0x3c
    21ca:	8b af       	std	Y+59, r24	; 0x3b
    21cc:	8b ad       	ldd	r24, Y+59	; 0x3b
    21ce:	9c ad       	ldd	r25, Y+60	; 0x3c
    21d0:	01 97       	sbiw	r24, 0x01	; 1
    21d2:	f1 f7       	brne	.-4      	; 0x21d0 <LCD_VidWrite4Cmd+0x170>
    21d4:	9c af       	std	Y+60, r25	; 0x3c
    21d6:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21d8:	8d ad       	ldd	r24, Y+61	; 0x3d
    21da:	9e ad       	ldd	r25, Y+62	; 0x3e
    21dc:	01 97       	sbiw	r24, 0x01	; 1
    21de:	9e af       	std	Y+62, r25	; 0x3e
    21e0:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21e2:	8d ad       	ldd	r24, Y+61	; 0x3d
    21e4:	9e ad       	ldd	r25, Y+62	; 0x3e
    21e6:	00 97       	sbiw	r24, 0x00	; 0
    21e8:	69 f7       	brne	.-38     	; 0x21c4 <LCD_VidWrite4Cmd+0x164>
    21ea:	16 c0       	rjmp	.+44     	; 0x2218 <LCD_VidWrite4Cmd+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21ec:	fe 01       	movw	r30, r28
    21ee:	ff 96       	adiw	r30, 0x3f	; 63
    21f0:	60 81       	ld	r22, Z
    21f2:	71 81       	ldd	r23, Z+1	; 0x01
    21f4:	82 81       	ldd	r24, Z+2	; 0x02
    21f6:	93 81       	ldd	r25, Z+3	; 0x03
    21f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21fc:	dc 01       	movw	r26, r24
    21fe:	cb 01       	movw	r24, r22
    2200:	9e af       	std	Y+62, r25	; 0x3e
    2202:	8d af       	std	Y+61, r24	; 0x3d
    2204:	8d ad       	ldd	r24, Y+61	; 0x3d
    2206:	9e ad       	ldd	r25, Y+62	; 0x3e
    2208:	9a af       	std	Y+58, r25	; 0x3a
    220a:	89 af       	std	Y+57, r24	; 0x39
    220c:	89 ad       	ldd	r24, Y+57	; 0x39
    220e:	9a ad       	ldd	r25, Y+58	; 0x3a
    2210:	01 97       	sbiw	r24, 0x01	; 1
    2212:	f1 f7       	brne	.-4      	; 0x2210 <LCD_VidWrite4Cmd+0x1b0>
    2214:	9a af       	std	Y+58, r25	; 0x3a
    2216:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);
	DIO_VidSitPintValue(LCD_INIT,LCD_EN,LOW);
    2218:	81 e0       	ldi	r24, 0x01	; 1
    221a:	65 e0       	ldi	r22, 0x05	; 5
    221c:	40 e0       	ldi	r20, 0x00	; 0
    221e:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <DIO_VidSitPintValue>
    2222:	80 e0       	ldi	r24, 0x00	; 0
    2224:	90 e0       	ldi	r25, 0x00	; 0
    2226:	a0 e8       	ldi	r26, 0x80	; 128
    2228:	bf e3       	ldi	r27, 0x3F	; 63
    222a:	8d ab       	std	Y+53, r24	; 0x35
    222c:	9e ab       	std	Y+54, r25	; 0x36
    222e:	af ab       	std	Y+55, r26	; 0x37
    2230:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2232:	6d a9       	ldd	r22, Y+53	; 0x35
    2234:	7e a9       	ldd	r23, Y+54	; 0x36
    2236:	8f a9       	ldd	r24, Y+55	; 0x37
    2238:	98 ad       	ldd	r25, Y+56	; 0x38
    223a:	20 e0       	ldi	r18, 0x00	; 0
    223c:	30 e0       	ldi	r19, 0x00	; 0
    223e:	4a ef       	ldi	r20, 0xFA	; 250
    2240:	54 e4       	ldi	r21, 0x44	; 68
    2242:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2246:	dc 01       	movw	r26, r24
    2248:	cb 01       	movw	r24, r22
    224a:	89 ab       	std	Y+49, r24	; 0x31
    224c:	9a ab       	std	Y+50, r25	; 0x32
    224e:	ab ab       	std	Y+51, r26	; 0x33
    2250:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2252:	69 a9       	ldd	r22, Y+49	; 0x31
    2254:	7a a9       	ldd	r23, Y+50	; 0x32
    2256:	8b a9       	ldd	r24, Y+51	; 0x33
    2258:	9c a9       	ldd	r25, Y+52	; 0x34
    225a:	20 e0       	ldi	r18, 0x00	; 0
    225c:	30 e0       	ldi	r19, 0x00	; 0
    225e:	40 e8       	ldi	r20, 0x80	; 128
    2260:	5f e3       	ldi	r21, 0x3F	; 63
    2262:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2266:	88 23       	and	r24, r24
    2268:	2c f4       	brge	.+10     	; 0x2274 <LCD_VidWrite4Cmd+0x214>
		__ticks = 1;
    226a:	81 e0       	ldi	r24, 0x01	; 1
    226c:	90 e0       	ldi	r25, 0x00	; 0
    226e:	98 ab       	std	Y+48, r25	; 0x30
    2270:	8f a7       	std	Y+47, r24	; 0x2f
    2272:	3f c0       	rjmp	.+126    	; 0x22f2 <LCD_VidWrite4Cmd+0x292>
	else if (__tmp > 65535)
    2274:	69 a9       	ldd	r22, Y+49	; 0x31
    2276:	7a a9       	ldd	r23, Y+50	; 0x32
    2278:	8b a9       	ldd	r24, Y+51	; 0x33
    227a:	9c a9       	ldd	r25, Y+52	; 0x34
    227c:	20 e0       	ldi	r18, 0x00	; 0
    227e:	3f ef       	ldi	r19, 0xFF	; 255
    2280:	4f e7       	ldi	r20, 0x7F	; 127
    2282:	57 e4       	ldi	r21, 0x47	; 71
    2284:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2288:	18 16       	cp	r1, r24
    228a:	4c f5       	brge	.+82     	; 0x22de <LCD_VidWrite4Cmd+0x27e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    228c:	6d a9       	ldd	r22, Y+53	; 0x35
    228e:	7e a9       	ldd	r23, Y+54	; 0x36
    2290:	8f a9       	ldd	r24, Y+55	; 0x37
    2292:	98 ad       	ldd	r25, Y+56	; 0x38
    2294:	20 e0       	ldi	r18, 0x00	; 0
    2296:	30 e0       	ldi	r19, 0x00	; 0
    2298:	40 e2       	ldi	r20, 0x20	; 32
    229a:	51 e4       	ldi	r21, 0x41	; 65
    229c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22a0:	dc 01       	movw	r26, r24
    22a2:	cb 01       	movw	r24, r22
    22a4:	bc 01       	movw	r22, r24
    22a6:	cd 01       	movw	r24, r26
    22a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22ac:	dc 01       	movw	r26, r24
    22ae:	cb 01       	movw	r24, r22
    22b0:	98 ab       	std	Y+48, r25	; 0x30
    22b2:	8f a7       	std	Y+47, r24	; 0x2f
    22b4:	0f c0       	rjmp	.+30     	; 0x22d4 <LCD_VidWrite4Cmd+0x274>
    22b6:	88 ec       	ldi	r24, 0xC8	; 200
    22b8:	90 e0       	ldi	r25, 0x00	; 0
    22ba:	9e a7       	std	Y+46, r25	; 0x2e
    22bc:	8d a7       	std	Y+45, r24	; 0x2d
    22be:	8d a5       	ldd	r24, Y+45	; 0x2d
    22c0:	9e a5       	ldd	r25, Y+46	; 0x2e
    22c2:	01 97       	sbiw	r24, 0x01	; 1
    22c4:	f1 f7       	brne	.-4      	; 0x22c2 <LCD_VidWrite4Cmd+0x262>
    22c6:	9e a7       	std	Y+46, r25	; 0x2e
    22c8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22ca:	8f a5       	ldd	r24, Y+47	; 0x2f
    22cc:	98 a9       	ldd	r25, Y+48	; 0x30
    22ce:	01 97       	sbiw	r24, 0x01	; 1
    22d0:	98 ab       	std	Y+48, r25	; 0x30
    22d2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22d4:	8f a5       	ldd	r24, Y+47	; 0x2f
    22d6:	98 a9       	ldd	r25, Y+48	; 0x30
    22d8:	00 97       	sbiw	r24, 0x00	; 0
    22da:	69 f7       	brne	.-38     	; 0x22b6 <LCD_VidWrite4Cmd+0x256>
    22dc:	14 c0       	rjmp	.+40     	; 0x2306 <LCD_VidWrite4Cmd+0x2a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22de:	69 a9       	ldd	r22, Y+49	; 0x31
    22e0:	7a a9       	ldd	r23, Y+50	; 0x32
    22e2:	8b a9       	ldd	r24, Y+51	; 0x33
    22e4:	9c a9       	ldd	r25, Y+52	; 0x34
    22e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22ea:	dc 01       	movw	r26, r24
    22ec:	cb 01       	movw	r24, r22
    22ee:	98 ab       	std	Y+48, r25	; 0x30
    22f0:	8f a7       	std	Y+47, r24	; 0x2f
    22f2:	8f a5       	ldd	r24, Y+47	; 0x2f
    22f4:	98 a9       	ldd	r25, Y+48	; 0x30
    22f6:	9c a7       	std	Y+44, r25	; 0x2c
    22f8:	8b a7       	std	Y+43, r24	; 0x2b
    22fa:	8b a5       	ldd	r24, Y+43	; 0x2b
    22fc:	9c a5       	ldd	r25, Y+44	; 0x2c
    22fe:	01 97       	sbiw	r24, 0x01	; 1
    2300:	f1 f7       	brne	.-4      	; 0x22fe <LCD_VidWrite4Cmd+0x29e>
    2302:	9c a7       	std	Y+44, r25	; 0x2c
    2304:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);

	if(InitStepFinishid)
    2306:	80 91 2c 01 	lds	r24, 0x012C
    230a:	88 23       	and	r24, r24
    230c:	09 f4       	brne	.+2      	; 0x2310 <LCD_VidWrite4Cmd+0x2b0>
    230e:	20 c1       	rjmp	.+576    	; 0x2550 <LCD_VidWrite4Cmd+0x4f0>
	{
		DIO_VidSitPintValue(LCD_PORT,PIN4,GET_BIT(LOC_Cmd,0));
    2310:	fe 01       	movw	r30, r28
    2312:	e9 5b       	subi	r30, 0xB9	; 185
    2314:	ff 4f       	sbci	r31, 0xFF	; 255
    2316:	80 81       	ld	r24, Z
    2318:	98 2f       	mov	r25, r24
    231a:	91 70       	andi	r25, 0x01	; 1
    231c:	83 e0       	ldi	r24, 0x03	; 3
    231e:	64 e0       	ldi	r22, 0x04	; 4
    2320:	49 2f       	mov	r20, r25
    2322:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <DIO_VidSitPintValue>
		DIO_VidSitPintValue(LCD_PORT,PIN5,GET_BIT(LOC_Cmd,1));
    2326:	fe 01       	movw	r30, r28
    2328:	e9 5b       	subi	r30, 0xB9	; 185
    232a:	ff 4f       	sbci	r31, 0xFF	; 255
    232c:	80 81       	ld	r24, Z
    232e:	86 95       	lsr	r24
    2330:	98 2f       	mov	r25, r24
    2332:	91 70       	andi	r25, 0x01	; 1
    2334:	83 e0       	ldi	r24, 0x03	; 3
    2336:	65 e0       	ldi	r22, 0x05	; 5
    2338:	49 2f       	mov	r20, r25
    233a:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <DIO_VidSitPintValue>
		DIO_VidSitPintValue(LCD_PORT,PIN6,GET_BIT(LOC_Cmd,2));
    233e:	fe 01       	movw	r30, r28
    2340:	e9 5b       	subi	r30, 0xB9	; 185
    2342:	ff 4f       	sbci	r31, 0xFF	; 255
    2344:	80 81       	ld	r24, Z
    2346:	86 95       	lsr	r24
    2348:	86 95       	lsr	r24
    234a:	98 2f       	mov	r25, r24
    234c:	91 70       	andi	r25, 0x01	; 1
    234e:	83 e0       	ldi	r24, 0x03	; 3
    2350:	66 e0       	ldi	r22, 0x06	; 6
    2352:	49 2f       	mov	r20, r25
    2354:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <DIO_VidSitPintValue>
		DIO_VidSitPintValue(LCD_PORT,PIN7,GET_BIT(LOC_Cmd,3));
    2358:	fe 01       	movw	r30, r28
    235a:	e9 5b       	subi	r30, 0xB9	; 185
    235c:	ff 4f       	sbci	r31, 0xFF	; 255
    235e:	80 81       	ld	r24, Z
    2360:	86 95       	lsr	r24
    2362:	86 95       	lsr	r24
    2364:	86 95       	lsr	r24
    2366:	98 2f       	mov	r25, r24
    2368:	91 70       	andi	r25, 0x01	; 1
    236a:	83 e0       	ldi	r24, 0x03	; 3
    236c:	67 e0       	ldi	r22, 0x07	; 7
    236e:	49 2f       	mov	r20, r25
    2370:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <DIO_VidSitPintValue>

		DIO_VidSitPintValue(LCD_INIT,LCD_EN,HIGH);
    2374:	81 e0       	ldi	r24, 0x01	; 1
    2376:	65 e0       	ldi	r22, 0x05	; 5
    2378:	41 e0       	ldi	r20, 0x01	; 1
    237a:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <DIO_VidSitPintValue>
    237e:	80 e0       	ldi	r24, 0x00	; 0
    2380:	90 e0       	ldi	r25, 0x00	; 0
    2382:	a0 e8       	ldi	r26, 0x80	; 128
    2384:	bf e3       	ldi	r27, 0x3F	; 63
    2386:	8f a3       	std	Y+39, r24	; 0x27
    2388:	98 a7       	std	Y+40, r25	; 0x28
    238a:	a9 a7       	std	Y+41, r26	; 0x29
    238c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    238e:	6f a1       	ldd	r22, Y+39	; 0x27
    2390:	78 a5       	ldd	r23, Y+40	; 0x28
    2392:	89 a5       	ldd	r24, Y+41	; 0x29
    2394:	9a a5       	ldd	r25, Y+42	; 0x2a
    2396:	20 e0       	ldi	r18, 0x00	; 0
    2398:	30 e0       	ldi	r19, 0x00	; 0
    239a:	4a ef       	ldi	r20, 0xFA	; 250
    239c:	54 e4       	ldi	r21, 0x44	; 68
    239e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23a2:	dc 01       	movw	r26, r24
    23a4:	cb 01       	movw	r24, r22
    23a6:	8b a3       	std	Y+35, r24	; 0x23
    23a8:	9c a3       	std	Y+36, r25	; 0x24
    23aa:	ad a3       	std	Y+37, r26	; 0x25
    23ac:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    23ae:	6b a1       	ldd	r22, Y+35	; 0x23
    23b0:	7c a1       	ldd	r23, Y+36	; 0x24
    23b2:	8d a1       	ldd	r24, Y+37	; 0x25
    23b4:	9e a1       	ldd	r25, Y+38	; 0x26
    23b6:	20 e0       	ldi	r18, 0x00	; 0
    23b8:	30 e0       	ldi	r19, 0x00	; 0
    23ba:	40 e8       	ldi	r20, 0x80	; 128
    23bc:	5f e3       	ldi	r21, 0x3F	; 63
    23be:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23c2:	88 23       	and	r24, r24
    23c4:	2c f4       	brge	.+10     	; 0x23d0 <LCD_VidWrite4Cmd+0x370>
		__ticks = 1;
    23c6:	81 e0       	ldi	r24, 0x01	; 1
    23c8:	90 e0       	ldi	r25, 0x00	; 0
    23ca:	9a a3       	std	Y+34, r25	; 0x22
    23cc:	89 a3       	std	Y+33, r24	; 0x21
    23ce:	3f c0       	rjmp	.+126    	; 0x244e <LCD_VidWrite4Cmd+0x3ee>
	else if (__tmp > 65535)
    23d0:	6b a1       	ldd	r22, Y+35	; 0x23
    23d2:	7c a1       	ldd	r23, Y+36	; 0x24
    23d4:	8d a1       	ldd	r24, Y+37	; 0x25
    23d6:	9e a1       	ldd	r25, Y+38	; 0x26
    23d8:	20 e0       	ldi	r18, 0x00	; 0
    23da:	3f ef       	ldi	r19, 0xFF	; 255
    23dc:	4f e7       	ldi	r20, 0x7F	; 127
    23de:	57 e4       	ldi	r21, 0x47	; 71
    23e0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23e4:	18 16       	cp	r1, r24
    23e6:	4c f5       	brge	.+82     	; 0x243a <LCD_VidWrite4Cmd+0x3da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23e8:	6f a1       	ldd	r22, Y+39	; 0x27
    23ea:	78 a5       	ldd	r23, Y+40	; 0x28
    23ec:	89 a5       	ldd	r24, Y+41	; 0x29
    23ee:	9a a5       	ldd	r25, Y+42	; 0x2a
    23f0:	20 e0       	ldi	r18, 0x00	; 0
    23f2:	30 e0       	ldi	r19, 0x00	; 0
    23f4:	40 e2       	ldi	r20, 0x20	; 32
    23f6:	51 e4       	ldi	r21, 0x41	; 65
    23f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23fc:	dc 01       	movw	r26, r24
    23fe:	cb 01       	movw	r24, r22
    2400:	bc 01       	movw	r22, r24
    2402:	cd 01       	movw	r24, r26
    2404:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2408:	dc 01       	movw	r26, r24
    240a:	cb 01       	movw	r24, r22
    240c:	9a a3       	std	Y+34, r25	; 0x22
    240e:	89 a3       	std	Y+33, r24	; 0x21
    2410:	0f c0       	rjmp	.+30     	; 0x2430 <LCD_VidWrite4Cmd+0x3d0>
    2412:	88 ec       	ldi	r24, 0xC8	; 200
    2414:	90 e0       	ldi	r25, 0x00	; 0
    2416:	98 a3       	std	Y+32, r25	; 0x20
    2418:	8f 8f       	std	Y+31, r24	; 0x1f
    241a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    241c:	98 a1       	ldd	r25, Y+32	; 0x20
    241e:	01 97       	sbiw	r24, 0x01	; 1
    2420:	f1 f7       	brne	.-4      	; 0x241e <LCD_VidWrite4Cmd+0x3be>
    2422:	98 a3       	std	Y+32, r25	; 0x20
    2424:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2426:	89 a1       	ldd	r24, Y+33	; 0x21
    2428:	9a a1       	ldd	r25, Y+34	; 0x22
    242a:	01 97       	sbiw	r24, 0x01	; 1
    242c:	9a a3       	std	Y+34, r25	; 0x22
    242e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2430:	89 a1       	ldd	r24, Y+33	; 0x21
    2432:	9a a1       	ldd	r25, Y+34	; 0x22
    2434:	00 97       	sbiw	r24, 0x00	; 0
    2436:	69 f7       	brne	.-38     	; 0x2412 <LCD_VidWrite4Cmd+0x3b2>
    2438:	14 c0       	rjmp	.+40     	; 0x2462 <LCD_VidWrite4Cmd+0x402>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    243a:	6b a1       	ldd	r22, Y+35	; 0x23
    243c:	7c a1       	ldd	r23, Y+36	; 0x24
    243e:	8d a1       	ldd	r24, Y+37	; 0x25
    2440:	9e a1       	ldd	r25, Y+38	; 0x26
    2442:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2446:	dc 01       	movw	r26, r24
    2448:	cb 01       	movw	r24, r22
    244a:	9a a3       	std	Y+34, r25	; 0x22
    244c:	89 a3       	std	Y+33, r24	; 0x21
    244e:	89 a1       	ldd	r24, Y+33	; 0x21
    2450:	9a a1       	ldd	r25, Y+34	; 0x22
    2452:	9e 8f       	std	Y+30, r25	; 0x1e
    2454:	8d 8f       	std	Y+29, r24	; 0x1d
    2456:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2458:	9e 8d       	ldd	r25, Y+30	; 0x1e
    245a:	01 97       	sbiw	r24, 0x01	; 1
    245c:	f1 f7       	brne	.-4      	; 0x245a <LCD_VidWrite4Cmd+0x3fa>
    245e:	9e 8f       	std	Y+30, r25	; 0x1e
    2460:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1);
		DIO_VidSitPintValue(LCD_INIT,LCD_EN,LOW);
    2462:	81 e0       	ldi	r24, 0x01	; 1
    2464:	65 e0       	ldi	r22, 0x05	; 5
    2466:	40 e0       	ldi	r20, 0x00	; 0
    2468:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <DIO_VidSitPintValue>
    246c:	80 e0       	ldi	r24, 0x00	; 0
    246e:	90 e0       	ldi	r25, 0x00	; 0
    2470:	a0 e8       	ldi	r26, 0x80	; 128
    2472:	bf e3       	ldi	r27, 0x3F	; 63
    2474:	89 8f       	std	Y+25, r24	; 0x19
    2476:	9a 8f       	std	Y+26, r25	; 0x1a
    2478:	ab 8f       	std	Y+27, r26	; 0x1b
    247a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    247c:	69 8d       	ldd	r22, Y+25	; 0x19
    247e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2480:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2482:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2484:	20 e0       	ldi	r18, 0x00	; 0
    2486:	30 e0       	ldi	r19, 0x00	; 0
    2488:	4a ef       	ldi	r20, 0xFA	; 250
    248a:	54 e4       	ldi	r21, 0x44	; 68
    248c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2490:	dc 01       	movw	r26, r24
    2492:	cb 01       	movw	r24, r22
    2494:	8d 8b       	std	Y+21, r24	; 0x15
    2496:	9e 8b       	std	Y+22, r25	; 0x16
    2498:	af 8b       	std	Y+23, r26	; 0x17
    249a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    249c:	6d 89       	ldd	r22, Y+21	; 0x15
    249e:	7e 89       	ldd	r23, Y+22	; 0x16
    24a0:	8f 89       	ldd	r24, Y+23	; 0x17
    24a2:	98 8d       	ldd	r25, Y+24	; 0x18
    24a4:	20 e0       	ldi	r18, 0x00	; 0
    24a6:	30 e0       	ldi	r19, 0x00	; 0
    24a8:	40 e8       	ldi	r20, 0x80	; 128
    24aa:	5f e3       	ldi	r21, 0x3F	; 63
    24ac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24b0:	88 23       	and	r24, r24
    24b2:	2c f4       	brge	.+10     	; 0x24be <LCD_VidWrite4Cmd+0x45e>
		__ticks = 1;
    24b4:	81 e0       	ldi	r24, 0x01	; 1
    24b6:	90 e0       	ldi	r25, 0x00	; 0
    24b8:	9c 8b       	std	Y+20, r25	; 0x14
    24ba:	8b 8b       	std	Y+19, r24	; 0x13
    24bc:	3f c0       	rjmp	.+126    	; 0x253c <LCD_VidWrite4Cmd+0x4dc>
	else if (__tmp > 65535)
    24be:	6d 89       	ldd	r22, Y+21	; 0x15
    24c0:	7e 89       	ldd	r23, Y+22	; 0x16
    24c2:	8f 89       	ldd	r24, Y+23	; 0x17
    24c4:	98 8d       	ldd	r25, Y+24	; 0x18
    24c6:	20 e0       	ldi	r18, 0x00	; 0
    24c8:	3f ef       	ldi	r19, 0xFF	; 255
    24ca:	4f e7       	ldi	r20, 0x7F	; 127
    24cc:	57 e4       	ldi	r21, 0x47	; 71
    24ce:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24d2:	18 16       	cp	r1, r24
    24d4:	4c f5       	brge	.+82     	; 0x2528 <LCD_VidWrite4Cmd+0x4c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24d6:	69 8d       	ldd	r22, Y+25	; 0x19
    24d8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    24da:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24dc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24de:	20 e0       	ldi	r18, 0x00	; 0
    24e0:	30 e0       	ldi	r19, 0x00	; 0
    24e2:	40 e2       	ldi	r20, 0x20	; 32
    24e4:	51 e4       	ldi	r21, 0x41	; 65
    24e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24ea:	dc 01       	movw	r26, r24
    24ec:	cb 01       	movw	r24, r22
    24ee:	bc 01       	movw	r22, r24
    24f0:	cd 01       	movw	r24, r26
    24f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24f6:	dc 01       	movw	r26, r24
    24f8:	cb 01       	movw	r24, r22
    24fa:	9c 8b       	std	Y+20, r25	; 0x14
    24fc:	8b 8b       	std	Y+19, r24	; 0x13
    24fe:	0f c0       	rjmp	.+30     	; 0x251e <LCD_VidWrite4Cmd+0x4be>
    2500:	88 ec       	ldi	r24, 0xC8	; 200
    2502:	90 e0       	ldi	r25, 0x00	; 0
    2504:	9a 8b       	std	Y+18, r25	; 0x12
    2506:	89 8b       	std	Y+17, r24	; 0x11
    2508:	89 89       	ldd	r24, Y+17	; 0x11
    250a:	9a 89       	ldd	r25, Y+18	; 0x12
    250c:	01 97       	sbiw	r24, 0x01	; 1
    250e:	f1 f7       	brne	.-4      	; 0x250c <LCD_VidWrite4Cmd+0x4ac>
    2510:	9a 8b       	std	Y+18, r25	; 0x12
    2512:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2514:	8b 89       	ldd	r24, Y+19	; 0x13
    2516:	9c 89       	ldd	r25, Y+20	; 0x14
    2518:	01 97       	sbiw	r24, 0x01	; 1
    251a:	9c 8b       	std	Y+20, r25	; 0x14
    251c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    251e:	8b 89       	ldd	r24, Y+19	; 0x13
    2520:	9c 89       	ldd	r25, Y+20	; 0x14
    2522:	00 97       	sbiw	r24, 0x00	; 0
    2524:	69 f7       	brne	.-38     	; 0x2500 <LCD_VidWrite4Cmd+0x4a0>
    2526:	14 c0       	rjmp	.+40     	; 0x2550 <LCD_VidWrite4Cmd+0x4f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2528:	6d 89       	ldd	r22, Y+21	; 0x15
    252a:	7e 89       	ldd	r23, Y+22	; 0x16
    252c:	8f 89       	ldd	r24, Y+23	; 0x17
    252e:	98 8d       	ldd	r25, Y+24	; 0x18
    2530:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2534:	dc 01       	movw	r26, r24
    2536:	cb 01       	movw	r24, r22
    2538:	9c 8b       	std	Y+20, r25	; 0x14
    253a:	8b 8b       	std	Y+19, r24	; 0x13
    253c:	8b 89       	ldd	r24, Y+19	; 0x13
    253e:	9c 89       	ldd	r25, Y+20	; 0x14
    2540:	98 8b       	std	Y+16, r25	; 0x10
    2542:	8f 87       	std	Y+15, r24	; 0x0f
    2544:	8f 85       	ldd	r24, Y+15	; 0x0f
    2546:	98 89       	ldd	r25, Y+16	; 0x10
    2548:	01 97       	sbiw	r24, 0x01	; 1
    254a:	f1 f7       	brne	.-4      	; 0x2548 <LCD_VidWrite4Cmd+0x4e8>
    254c:	98 8b       	std	Y+16, r25	; 0x10
    254e:	8f 87       	std	Y+15, r24	; 0x0f
    2550:	80 e0       	ldi	r24, 0x00	; 0
    2552:	90 e0       	ldi	r25, 0x00	; 0
    2554:	a0 e0       	ldi	r26, 0x00	; 0
    2556:	b0 e4       	ldi	r27, 0x40	; 64
    2558:	8b 87       	std	Y+11, r24	; 0x0b
    255a:	9c 87       	std	Y+12, r25	; 0x0c
    255c:	ad 87       	std	Y+13, r26	; 0x0d
    255e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2560:	6b 85       	ldd	r22, Y+11	; 0x0b
    2562:	7c 85       	ldd	r23, Y+12	; 0x0c
    2564:	8d 85       	ldd	r24, Y+13	; 0x0d
    2566:	9e 85       	ldd	r25, Y+14	; 0x0e
    2568:	20 e0       	ldi	r18, 0x00	; 0
    256a:	30 e0       	ldi	r19, 0x00	; 0
    256c:	4a ef       	ldi	r20, 0xFA	; 250
    256e:	54 e4       	ldi	r21, 0x44	; 68
    2570:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2574:	dc 01       	movw	r26, r24
    2576:	cb 01       	movw	r24, r22
    2578:	8f 83       	std	Y+7, r24	; 0x07
    257a:	98 87       	std	Y+8, r25	; 0x08
    257c:	a9 87       	std	Y+9, r26	; 0x09
    257e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2580:	6f 81       	ldd	r22, Y+7	; 0x07
    2582:	78 85       	ldd	r23, Y+8	; 0x08
    2584:	89 85       	ldd	r24, Y+9	; 0x09
    2586:	9a 85       	ldd	r25, Y+10	; 0x0a
    2588:	20 e0       	ldi	r18, 0x00	; 0
    258a:	30 e0       	ldi	r19, 0x00	; 0
    258c:	40 e8       	ldi	r20, 0x80	; 128
    258e:	5f e3       	ldi	r21, 0x3F	; 63
    2590:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2594:	88 23       	and	r24, r24
    2596:	2c f4       	brge	.+10     	; 0x25a2 <LCD_VidWrite4Cmd+0x542>
		__ticks = 1;
    2598:	81 e0       	ldi	r24, 0x01	; 1
    259a:	90 e0       	ldi	r25, 0x00	; 0
    259c:	9e 83       	std	Y+6, r25	; 0x06
    259e:	8d 83       	std	Y+5, r24	; 0x05
    25a0:	3f c0       	rjmp	.+126    	; 0x2620 <LCD_VidWrite4Cmd+0x5c0>
	else if (__tmp > 65535)
    25a2:	6f 81       	ldd	r22, Y+7	; 0x07
    25a4:	78 85       	ldd	r23, Y+8	; 0x08
    25a6:	89 85       	ldd	r24, Y+9	; 0x09
    25a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    25aa:	20 e0       	ldi	r18, 0x00	; 0
    25ac:	3f ef       	ldi	r19, 0xFF	; 255
    25ae:	4f e7       	ldi	r20, 0x7F	; 127
    25b0:	57 e4       	ldi	r21, 0x47	; 71
    25b2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25b6:	18 16       	cp	r1, r24
    25b8:	4c f5       	brge	.+82     	; 0x260c <LCD_VidWrite4Cmd+0x5ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    25bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    25be:	8d 85       	ldd	r24, Y+13	; 0x0d
    25c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    25c2:	20 e0       	ldi	r18, 0x00	; 0
    25c4:	30 e0       	ldi	r19, 0x00	; 0
    25c6:	40 e2       	ldi	r20, 0x20	; 32
    25c8:	51 e4       	ldi	r21, 0x41	; 65
    25ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25ce:	dc 01       	movw	r26, r24
    25d0:	cb 01       	movw	r24, r22
    25d2:	bc 01       	movw	r22, r24
    25d4:	cd 01       	movw	r24, r26
    25d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25da:	dc 01       	movw	r26, r24
    25dc:	cb 01       	movw	r24, r22
    25de:	9e 83       	std	Y+6, r25	; 0x06
    25e0:	8d 83       	std	Y+5, r24	; 0x05
    25e2:	0f c0       	rjmp	.+30     	; 0x2602 <LCD_VidWrite4Cmd+0x5a2>
    25e4:	88 ec       	ldi	r24, 0xC8	; 200
    25e6:	90 e0       	ldi	r25, 0x00	; 0
    25e8:	9c 83       	std	Y+4, r25	; 0x04
    25ea:	8b 83       	std	Y+3, r24	; 0x03
    25ec:	8b 81       	ldd	r24, Y+3	; 0x03
    25ee:	9c 81       	ldd	r25, Y+4	; 0x04
    25f0:	01 97       	sbiw	r24, 0x01	; 1
    25f2:	f1 f7       	brne	.-4      	; 0x25f0 <LCD_VidWrite4Cmd+0x590>
    25f4:	9c 83       	std	Y+4, r25	; 0x04
    25f6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25f8:	8d 81       	ldd	r24, Y+5	; 0x05
    25fa:	9e 81       	ldd	r25, Y+6	; 0x06
    25fc:	01 97       	sbiw	r24, 0x01	; 1
    25fe:	9e 83       	std	Y+6, r25	; 0x06
    2600:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2602:	8d 81       	ldd	r24, Y+5	; 0x05
    2604:	9e 81       	ldd	r25, Y+6	; 0x06
    2606:	00 97       	sbiw	r24, 0x00	; 0
    2608:	69 f7       	brne	.-38     	; 0x25e4 <LCD_VidWrite4Cmd+0x584>
    260a:	14 c0       	rjmp	.+40     	; 0x2634 <LCD_VidWrite4Cmd+0x5d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    260c:	6f 81       	ldd	r22, Y+7	; 0x07
    260e:	78 85       	ldd	r23, Y+8	; 0x08
    2610:	89 85       	ldd	r24, Y+9	; 0x09
    2612:	9a 85       	ldd	r25, Y+10	; 0x0a
    2614:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2618:	dc 01       	movw	r26, r24
    261a:	cb 01       	movw	r24, r22
    261c:	9e 83       	std	Y+6, r25	; 0x06
    261e:	8d 83       	std	Y+5, r24	; 0x05
    2620:	8d 81       	ldd	r24, Y+5	; 0x05
    2622:	9e 81       	ldd	r25, Y+6	; 0x06
    2624:	9a 83       	std	Y+2, r25	; 0x02
    2626:	89 83       	std	Y+1, r24	; 0x01
    2628:	89 81       	ldd	r24, Y+1	; 0x01
    262a:	9a 81       	ldd	r25, Y+2	; 0x02
    262c:	01 97       	sbiw	r24, 0x01	; 1
    262e:	f1 f7       	brne	.-4      	; 0x262c <LCD_VidWrite4Cmd+0x5cc>
    2630:	9a 83       	std	Y+2, r25	; 0x02
    2632:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1);
	}
	_delay_ms(2);
}
    2634:	c9 5b       	subi	r28, 0xB9	; 185
    2636:	df 4f       	sbci	r29, 0xFF	; 255
    2638:	0f b6       	in	r0, 0x3f	; 63
    263a:	f8 94       	cli
    263c:	de bf       	out	0x3e, r29	; 62
    263e:	0f be       	out	0x3f, r0	; 63
    2640:	cd bf       	out	0x3d, r28	; 61
    2642:	cf 91       	pop	r28
    2644:	df 91       	pop	r29
    2646:	1f 91       	pop	r17
    2648:	0f 91       	pop	r16
    264a:	08 95       	ret

0000264c <LCD_VidWrite4Data>:


void LCD_VidWrite4Data(u8 LOC_Data)
{
    264c:	df 93       	push	r29
    264e:	cf 93       	push	r28
    2650:	cd b7       	in	r28, 0x3d	; 61
    2652:	de b7       	in	r29, 0x3e	; 62
    2654:	ab 97       	sbiw	r28, 0x2b	; 43
    2656:	0f b6       	in	r0, 0x3f	; 63
    2658:	f8 94       	cli
    265a:	de bf       	out	0x3e, r29	; 62
    265c:	0f be       	out	0x3f, r0	; 63
    265e:	cd bf       	out	0x3d, r28	; 61
    2660:	8b a7       	std	Y+43, r24	; 0x2b
	DIO_VidSitPintValue(LCD_INIT,LCD_RS,HIGH);
    2662:	81 e0       	ldi	r24, 0x01	; 1
    2664:	63 e0       	ldi	r22, 0x03	; 3
    2666:	41 e0       	ldi	r20, 0x01	; 1
    2668:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <DIO_VidSitPintValue>
	DIO_VidSitPintValue(LCD_INIT,LCD_RW,LOW);
    266c:	81 e0       	ldi	r24, 0x01	; 1
    266e:	64 e0       	ldi	r22, 0x04	; 4
    2670:	40 e0       	ldi	r20, 0x00	; 0
    2672:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <DIO_VidSitPintValue>

	DIO_VidSitPintValue(LCD_PORT,PIN4,GET_BIT(LOC_Data,4));
    2676:	8b a5       	ldd	r24, Y+43	; 0x2b
    2678:	82 95       	swap	r24
    267a:	8f 70       	andi	r24, 0x0F	; 15
    267c:	98 2f       	mov	r25, r24
    267e:	91 70       	andi	r25, 0x01	; 1
    2680:	83 e0       	ldi	r24, 0x03	; 3
    2682:	64 e0       	ldi	r22, 0x04	; 4
    2684:	49 2f       	mov	r20, r25
    2686:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <DIO_VidSitPintValue>
	DIO_VidSitPintValue(LCD_PORT,PIN5,GET_BIT(LOC_Data,5));
    268a:	8b a5       	ldd	r24, Y+43	; 0x2b
    268c:	82 95       	swap	r24
    268e:	86 95       	lsr	r24
    2690:	87 70       	andi	r24, 0x07	; 7
    2692:	98 2f       	mov	r25, r24
    2694:	91 70       	andi	r25, 0x01	; 1
    2696:	83 e0       	ldi	r24, 0x03	; 3
    2698:	65 e0       	ldi	r22, 0x05	; 5
    269a:	49 2f       	mov	r20, r25
    269c:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <DIO_VidSitPintValue>
	DIO_VidSitPintValue(LCD_PORT,PIN6,GET_BIT(LOC_Data,6));
    26a0:	8b a5       	ldd	r24, Y+43	; 0x2b
    26a2:	82 95       	swap	r24
    26a4:	86 95       	lsr	r24
    26a6:	86 95       	lsr	r24
    26a8:	83 70       	andi	r24, 0x03	; 3
    26aa:	98 2f       	mov	r25, r24
    26ac:	91 70       	andi	r25, 0x01	; 1
    26ae:	83 e0       	ldi	r24, 0x03	; 3
    26b0:	66 e0       	ldi	r22, 0x06	; 6
    26b2:	49 2f       	mov	r20, r25
    26b4:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <DIO_VidSitPintValue>
	DIO_VidSitPintValue(LCD_PORT,PIN7,GET_BIT(LOC_Data,7));
    26b8:	8b a5       	ldd	r24, Y+43	; 0x2b
    26ba:	98 2f       	mov	r25, r24
    26bc:	99 1f       	adc	r25, r25
    26be:	99 27       	eor	r25, r25
    26c0:	99 1f       	adc	r25, r25
    26c2:	83 e0       	ldi	r24, 0x03	; 3
    26c4:	67 e0       	ldi	r22, 0x07	; 7
    26c6:	49 2f       	mov	r20, r25
    26c8:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <DIO_VidSitPintValue>

	DIO_VidSitPintValue(LCD_INIT,LCD_EN,HIGH);
    26cc:	81 e0       	ldi	r24, 0x01	; 1
    26ce:	65 e0       	ldi	r22, 0x05	; 5
    26d0:	41 e0       	ldi	r20, 0x01	; 1
    26d2:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <DIO_VidSitPintValue>
    26d6:	80 e0       	ldi	r24, 0x00	; 0
    26d8:	90 e0       	ldi	r25, 0x00	; 0
    26da:	a0 e8       	ldi	r26, 0x80	; 128
    26dc:	bf e3       	ldi	r27, 0x3F	; 63
    26de:	8f a3       	std	Y+39, r24	; 0x27
    26e0:	98 a7       	std	Y+40, r25	; 0x28
    26e2:	a9 a7       	std	Y+41, r26	; 0x29
    26e4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26e6:	6f a1       	ldd	r22, Y+39	; 0x27
    26e8:	78 a5       	ldd	r23, Y+40	; 0x28
    26ea:	89 a5       	ldd	r24, Y+41	; 0x29
    26ec:	9a a5       	ldd	r25, Y+42	; 0x2a
    26ee:	20 e0       	ldi	r18, 0x00	; 0
    26f0:	30 e0       	ldi	r19, 0x00	; 0
    26f2:	4a ef       	ldi	r20, 0xFA	; 250
    26f4:	54 e4       	ldi	r21, 0x44	; 68
    26f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26fa:	dc 01       	movw	r26, r24
    26fc:	cb 01       	movw	r24, r22
    26fe:	8b a3       	std	Y+35, r24	; 0x23
    2700:	9c a3       	std	Y+36, r25	; 0x24
    2702:	ad a3       	std	Y+37, r26	; 0x25
    2704:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2706:	6b a1       	ldd	r22, Y+35	; 0x23
    2708:	7c a1       	ldd	r23, Y+36	; 0x24
    270a:	8d a1       	ldd	r24, Y+37	; 0x25
    270c:	9e a1       	ldd	r25, Y+38	; 0x26
    270e:	20 e0       	ldi	r18, 0x00	; 0
    2710:	30 e0       	ldi	r19, 0x00	; 0
    2712:	40 e8       	ldi	r20, 0x80	; 128
    2714:	5f e3       	ldi	r21, 0x3F	; 63
    2716:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    271a:	88 23       	and	r24, r24
    271c:	2c f4       	brge	.+10     	; 0x2728 <LCD_VidWrite4Data+0xdc>
		__ticks = 1;
    271e:	81 e0       	ldi	r24, 0x01	; 1
    2720:	90 e0       	ldi	r25, 0x00	; 0
    2722:	9a a3       	std	Y+34, r25	; 0x22
    2724:	89 a3       	std	Y+33, r24	; 0x21
    2726:	3f c0       	rjmp	.+126    	; 0x27a6 <LCD_VidWrite4Data+0x15a>
	else if (__tmp > 65535)
    2728:	6b a1       	ldd	r22, Y+35	; 0x23
    272a:	7c a1       	ldd	r23, Y+36	; 0x24
    272c:	8d a1       	ldd	r24, Y+37	; 0x25
    272e:	9e a1       	ldd	r25, Y+38	; 0x26
    2730:	20 e0       	ldi	r18, 0x00	; 0
    2732:	3f ef       	ldi	r19, 0xFF	; 255
    2734:	4f e7       	ldi	r20, 0x7F	; 127
    2736:	57 e4       	ldi	r21, 0x47	; 71
    2738:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    273c:	18 16       	cp	r1, r24
    273e:	4c f5       	brge	.+82     	; 0x2792 <LCD_VidWrite4Data+0x146>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2740:	6f a1       	ldd	r22, Y+39	; 0x27
    2742:	78 a5       	ldd	r23, Y+40	; 0x28
    2744:	89 a5       	ldd	r24, Y+41	; 0x29
    2746:	9a a5       	ldd	r25, Y+42	; 0x2a
    2748:	20 e0       	ldi	r18, 0x00	; 0
    274a:	30 e0       	ldi	r19, 0x00	; 0
    274c:	40 e2       	ldi	r20, 0x20	; 32
    274e:	51 e4       	ldi	r21, 0x41	; 65
    2750:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2754:	dc 01       	movw	r26, r24
    2756:	cb 01       	movw	r24, r22
    2758:	bc 01       	movw	r22, r24
    275a:	cd 01       	movw	r24, r26
    275c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2760:	dc 01       	movw	r26, r24
    2762:	cb 01       	movw	r24, r22
    2764:	9a a3       	std	Y+34, r25	; 0x22
    2766:	89 a3       	std	Y+33, r24	; 0x21
    2768:	0f c0       	rjmp	.+30     	; 0x2788 <LCD_VidWrite4Data+0x13c>
    276a:	88 ec       	ldi	r24, 0xC8	; 200
    276c:	90 e0       	ldi	r25, 0x00	; 0
    276e:	98 a3       	std	Y+32, r25	; 0x20
    2770:	8f 8f       	std	Y+31, r24	; 0x1f
    2772:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2774:	98 a1       	ldd	r25, Y+32	; 0x20
    2776:	01 97       	sbiw	r24, 0x01	; 1
    2778:	f1 f7       	brne	.-4      	; 0x2776 <LCD_VidWrite4Data+0x12a>
    277a:	98 a3       	std	Y+32, r25	; 0x20
    277c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    277e:	89 a1       	ldd	r24, Y+33	; 0x21
    2780:	9a a1       	ldd	r25, Y+34	; 0x22
    2782:	01 97       	sbiw	r24, 0x01	; 1
    2784:	9a a3       	std	Y+34, r25	; 0x22
    2786:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2788:	89 a1       	ldd	r24, Y+33	; 0x21
    278a:	9a a1       	ldd	r25, Y+34	; 0x22
    278c:	00 97       	sbiw	r24, 0x00	; 0
    278e:	69 f7       	brne	.-38     	; 0x276a <LCD_VidWrite4Data+0x11e>
    2790:	14 c0       	rjmp	.+40     	; 0x27ba <LCD_VidWrite4Data+0x16e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2792:	6b a1       	ldd	r22, Y+35	; 0x23
    2794:	7c a1       	ldd	r23, Y+36	; 0x24
    2796:	8d a1       	ldd	r24, Y+37	; 0x25
    2798:	9e a1       	ldd	r25, Y+38	; 0x26
    279a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    279e:	dc 01       	movw	r26, r24
    27a0:	cb 01       	movw	r24, r22
    27a2:	9a a3       	std	Y+34, r25	; 0x22
    27a4:	89 a3       	std	Y+33, r24	; 0x21
    27a6:	89 a1       	ldd	r24, Y+33	; 0x21
    27a8:	9a a1       	ldd	r25, Y+34	; 0x22
    27aa:	9e 8f       	std	Y+30, r25	; 0x1e
    27ac:	8d 8f       	std	Y+29, r24	; 0x1d
    27ae:	8d 8d       	ldd	r24, Y+29	; 0x1d
    27b0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    27b2:	01 97       	sbiw	r24, 0x01	; 1
    27b4:	f1 f7       	brne	.-4      	; 0x27b2 <LCD_VidWrite4Data+0x166>
    27b6:	9e 8f       	std	Y+30, r25	; 0x1e
    27b8:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	DIO_VidSitPintValue(LCD_INIT,LCD_EN,LOW);
    27ba:	81 e0       	ldi	r24, 0x01	; 1
    27bc:	65 e0       	ldi	r22, 0x05	; 5
    27be:	40 e0       	ldi	r20, 0x00	; 0
    27c0:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <DIO_VidSitPintValue>

	DIO_VidSitPintValue(LCD_PORT,PIN4,GET_BIT(LOC_Data,0));
    27c4:	8b a5       	ldd	r24, Y+43	; 0x2b
    27c6:	98 2f       	mov	r25, r24
    27c8:	91 70       	andi	r25, 0x01	; 1
    27ca:	83 e0       	ldi	r24, 0x03	; 3
    27cc:	64 e0       	ldi	r22, 0x04	; 4
    27ce:	49 2f       	mov	r20, r25
    27d0:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <DIO_VidSitPintValue>
	DIO_VidSitPintValue(LCD_PORT,PIN5,GET_BIT(LOC_Data,1));
    27d4:	8b a5       	ldd	r24, Y+43	; 0x2b
    27d6:	86 95       	lsr	r24
    27d8:	98 2f       	mov	r25, r24
    27da:	91 70       	andi	r25, 0x01	; 1
    27dc:	83 e0       	ldi	r24, 0x03	; 3
    27de:	65 e0       	ldi	r22, 0x05	; 5
    27e0:	49 2f       	mov	r20, r25
    27e2:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <DIO_VidSitPintValue>
	DIO_VidSitPintValue(LCD_PORT,PIN6,GET_BIT(LOC_Data,2));
    27e6:	8b a5       	ldd	r24, Y+43	; 0x2b
    27e8:	86 95       	lsr	r24
    27ea:	86 95       	lsr	r24
    27ec:	98 2f       	mov	r25, r24
    27ee:	91 70       	andi	r25, 0x01	; 1
    27f0:	83 e0       	ldi	r24, 0x03	; 3
    27f2:	66 e0       	ldi	r22, 0x06	; 6
    27f4:	49 2f       	mov	r20, r25
    27f6:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <DIO_VidSitPintValue>
	DIO_VidSitPintValue(LCD_PORT,PIN7,GET_BIT(LOC_Data,3));
    27fa:	8b a5       	ldd	r24, Y+43	; 0x2b
    27fc:	86 95       	lsr	r24
    27fe:	86 95       	lsr	r24
    2800:	86 95       	lsr	r24
    2802:	98 2f       	mov	r25, r24
    2804:	91 70       	andi	r25, 0x01	; 1
    2806:	83 e0       	ldi	r24, 0x03	; 3
    2808:	67 e0       	ldi	r22, 0x07	; 7
    280a:	49 2f       	mov	r20, r25
    280c:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <DIO_VidSitPintValue>

	DIO_VidSitPintValue(LCD_INIT,LCD_EN,HIGH);
    2810:	81 e0       	ldi	r24, 0x01	; 1
    2812:	65 e0       	ldi	r22, 0x05	; 5
    2814:	41 e0       	ldi	r20, 0x01	; 1
    2816:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <DIO_VidSitPintValue>
    281a:	80 e0       	ldi	r24, 0x00	; 0
    281c:	90 e0       	ldi	r25, 0x00	; 0
    281e:	a0 e8       	ldi	r26, 0x80	; 128
    2820:	bf e3       	ldi	r27, 0x3F	; 63
    2822:	89 8f       	std	Y+25, r24	; 0x19
    2824:	9a 8f       	std	Y+26, r25	; 0x1a
    2826:	ab 8f       	std	Y+27, r26	; 0x1b
    2828:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    282a:	69 8d       	ldd	r22, Y+25	; 0x19
    282c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    282e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2830:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2832:	20 e0       	ldi	r18, 0x00	; 0
    2834:	30 e0       	ldi	r19, 0x00	; 0
    2836:	4a ef       	ldi	r20, 0xFA	; 250
    2838:	54 e4       	ldi	r21, 0x44	; 68
    283a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    283e:	dc 01       	movw	r26, r24
    2840:	cb 01       	movw	r24, r22
    2842:	8d 8b       	std	Y+21, r24	; 0x15
    2844:	9e 8b       	std	Y+22, r25	; 0x16
    2846:	af 8b       	std	Y+23, r26	; 0x17
    2848:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    284a:	6d 89       	ldd	r22, Y+21	; 0x15
    284c:	7e 89       	ldd	r23, Y+22	; 0x16
    284e:	8f 89       	ldd	r24, Y+23	; 0x17
    2850:	98 8d       	ldd	r25, Y+24	; 0x18
    2852:	20 e0       	ldi	r18, 0x00	; 0
    2854:	30 e0       	ldi	r19, 0x00	; 0
    2856:	40 e8       	ldi	r20, 0x80	; 128
    2858:	5f e3       	ldi	r21, 0x3F	; 63
    285a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    285e:	88 23       	and	r24, r24
    2860:	2c f4       	brge	.+10     	; 0x286c <LCD_VidWrite4Data+0x220>
		__ticks = 1;
    2862:	81 e0       	ldi	r24, 0x01	; 1
    2864:	90 e0       	ldi	r25, 0x00	; 0
    2866:	9c 8b       	std	Y+20, r25	; 0x14
    2868:	8b 8b       	std	Y+19, r24	; 0x13
    286a:	3f c0       	rjmp	.+126    	; 0x28ea <LCD_VidWrite4Data+0x29e>
	else if (__tmp > 65535)
    286c:	6d 89       	ldd	r22, Y+21	; 0x15
    286e:	7e 89       	ldd	r23, Y+22	; 0x16
    2870:	8f 89       	ldd	r24, Y+23	; 0x17
    2872:	98 8d       	ldd	r25, Y+24	; 0x18
    2874:	20 e0       	ldi	r18, 0x00	; 0
    2876:	3f ef       	ldi	r19, 0xFF	; 255
    2878:	4f e7       	ldi	r20, 0x7F	; 127
    287a:	57 e4       	ldi	r21, 0x47	; 71
    287c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2880:	18 16       	cp	r1, r24
    2882:	4c f5       	brge	.+82     	; 0x28d6 <LCD_VidWrite4Data+0x28a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2884:	69 8d       	ldd	r22, Y+25	; 0x19
    2886:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2888:	8b 8d       	ldd	r24, Y+27	; 0x1b
    288a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    288c:	20 e0       	ldi	r18, 0x00	; 0
    288e:	30 e0       	ldi	r19, 0x00	; 0
    2890:	40 e2       	ldi	r20, 0x20	; 32
    2892:	51 e4       	ldi	r21, 0x41	; 65
    2894:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2898:	dc 01       	movw	r26, r24
    289a:	cb 01       	movw	r24, r22
    289c:	bc 01       	movw	r22, r24
    289e:	cd 01       	movw	r24, r26
    28a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28a4:	dc 01       	movw	r26, r24
    28a6:	cb 01       	movw	r24, r22
    28a8:	9c 8b       	std	Y+20, r25	; 0x14
    28aa:	8b 8b       	std	Y+19, r24	; 0x13
    28ac:	0f c0       	rjmp	.+30     	; 0x28cc <LCD_VidWrite4Data+0x280>
    28ae:	88 ec       	ldi	r24, 0xC8	; 200
    28b0:	90 e0       	ldi	r25, 0x00	; 0
    28b2:	9a 8b       	std	Y+18, r25	; 0x12
    28b4:	89 8b       	std	Y+17, r24	; 0x11
    28b6:	89 89       	ldd	r24, Y+17	; 0x11
    28b8:	9a 89       	ldd	r25, Y+18	; 0x12
    28ba:	01 97       	sbiw	r24, 0x01	; 1
    28bc:	f1 f7       	brne	.-4      	; 0x28ba <LCD_VidWrite4Data+0x26e>
    28be:	9a 8b       	std	Y+18, r25	; 0x12
    28c0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28c2:	8b 89       	ldd	r24, Y+19	; 0x13
    28c4:	9c 89       	ldd	r25, Y+20	; 0x14
    28c6:	01 97       	sbiw	r24, 0x01	; 1
    28c8:	9c 8b       	std	Y+20, r25	; 0x14
    28ca:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28cc:	8b 89       	ldd	r24, Y+19	; 0x13
    28ce:	9c 89       	ldd	r25, Y+20	; 0x14
    28d0:	00 97       	sbiw	r24, 0x00	; 0
    28d2:	69 f7       	brne	.-38     	; 0x28ae <LCD_VidWrite4Data+0x262>
    28d4:	14 c0       	rjmp	.+40     	; 0x28fe <LCD_VidWrite4Data+0x2b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28d6:	6d 89       	ldd	r22, Y+21	; 0x15
    28d8:	7e 89       	ldd	r23, Y+22	; 0x16
    28da:	8f 89       	ldd	r24, Y+23	; 0x17
    28dc:	98 8d       	ldd	r25, Y+24	; 0x18
    28de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28e2:	dc 01       	movw	r26, r24
    28e4:	cb 01       	movw	r24, r22
    28e6:	9c 8b       	std	Y+20, r25	; 0x14
    28e8:	8b 8b       	std	Y+19, r24	; 0x13
    28ea:	8b 89       	ldd	r24, Y+19	; 0x13
    28ec:	9c 89       	ldd	r25, Y+20	; 0x14
    28ee:	98 8b       	std	Y+16, r25	; 0x10
    28f0:	8f 87       	std	Y+15, r24	; 0x0f
    28f2:	8f 85       	ldd	r24, Y+15	; 0x0f
    28f4:	98 89       	ldd	r25, Y+16	; 0x10
    28f6:	01 97       	sbiw	r24, 0x01	; 1
    28f8:	f1 f7       	brne	.-4      	; 0x28f6 <LCD_VidWrite4Data+0x2aa>
    28fa:	98 8b       	std	Y+16, r25	; 0x10
    28fc:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_VidSitPintValue(LCD_INIT,LCD_EN,LOW);
    28fe:	81 e0       	ldi	r24, 0x01	; 1
    2900:	65 e0       	ldi	r22, 0x05	; 5
    2902:	40 e0       	ldi	r20, 0x00	; 0
    2904:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <DIO_VidSitPintValue>
    2908:	80 e0       	ldi	r24, 0x00	; 0
    290a:	90 e0       	ldi	r25, 0x00	; 0
    290c:	a0 e0       	ldi	r26, 0x00	; 0
    290e:	b0 e4       	ldi	r27, 0x40	; 64
    2910:	8b 87       	std	Y+11, r24	; 0x0b
    2912:	9c 87       	std	Y+12, r25	; 0x0c
    2914:	ad 87       	std	Y+13, r26	; 0x0d
    2916:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2918:	6b 85       	ldd	r22, Y+11	; 0x0b
    291a:	7c 85       	ldd	r23, Y+12	; 0x0c
    291c:	8d 85       	ldd	r24, Y+13	; 0x0d
    291e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2920:	20 e0       	ldi	r18, 0x00	; 0
    2922:	30 e0       	ldi	r19, 0x00	; 0
    2924:	4a ef       	ldi	r20, 0xFA	; 250
    2926:	54 e4       	ldi	r21, 0x44	; 68
    2928:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    292c:	dc 01       	movw	r26, r24
    292e:	cb 01       	movw	r24, r22
    2930:	8f 83       	std	Y+7, r24	; 0x07
    2932:	98 87       	std	Y+8, r25	; 0x08
    2934:	a9 87       	std	Y+9, r26	; 0x09
    2936:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2938:	6f 81       	ldd	r22, Y+7	; 0x07
    293a:	78 85       	ldd	r23, Y+8	; 0x08
    293c:	89 85       	ldd	r24, Y+9	; 0x09
    293e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2940:	20 e0       	ldi	r18, 0x00	; 0
    2942:	30 e0       	ldi	r19, 0x00	; 0
    2944:	40 e8       	ldi	r20, 0x80	; 128
    2946:	5f e3       	ldi	r21, 0x3F	; 63
    2948:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    294c:	88 23       	and	r24, r24
    294e:	2c f4       	brge	.+10     	; 0x295a <LCD_VidWrite4Data+0x30e>
		__ticks = 1;
    2950:	81 e0       	ldi	r24, 0x01	; 1
    2952:	90 e0       	ldi	r25, 0x00	; 0
    2954:	9e 83       	std	Y+6, r25	; 0x06
    2956:	8d 83       	std	Y+5, r24	; 0x05
    2958:	3f c0       	rjmp	.+126    	; 0x29d8 <LCD_VidWrite4Data+0x38c>
	else if (__tmp > 65535)
    295a:	6f 81       	ldd	r22, Y+7	; 0x07
    295c:	78 85       	ldd	r23, Y+8	; 0x08
    295e:	89 85       	ldd	r24, Y+9	; 0x09
    2960:	9a 85       	ldd	r25, Y+10	; 0x0a
    2962:	20 e0       	ldi	r18, 0x00	; 0
    2964:	3f ef       	ldi	r19, 0xFF	; 255
    2966:	4f e7       	ldi	r20, 0x7F	; 127
    2968:	57 e4       	ldi	r21, 0x47	; 71
    296a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    296e:	18 16       	cp	r1, r24
    2970:	4c f5       	brge	.+82     	; 0x29c4 <LCD_VidWrite4Data+0x378>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2972:	6b 85       	ldd	r22, Y+11	; 0x0b
    2974:	7c 85       	ldd	r23, Y+12	; 0x0c
    2976:	8d 85       	ldd	r24, Y+13	; 0x0d
    2978:	9e 85       	ldd	r25, Y+14	; 0x0e
    297a:	20 e0       	ldi	r18, 0x00	; 0
    297c:	30 e0       	ldi	r19, 0x00	; 0
    297e:	40 e2       	ldi	r20, 0x20	; 32
    2980:	51 e4       	ldi	r21, 0x41	; 65
    2982:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2986:	dc 01       	movw	r26, r24
    2988:	cb 01       	movw	r24, r22
    298a:	bc 01       	movw	r22, r24
    298c:	cd 01       	movw	r24, r26
    298e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2992:	dc 01       	movw	r26, r24
    2994:	cb 01       	movw	r24, r22
    2996:	9e 83       	std	Y+6, r25	; 0x06
    2998:	8d 83       	std	Y+5, r24	; 0x05
    299a:	0f c0       	rjmp	.+30     	; 0x29ba <LCD_VidWrite4Data+0x36e>
    299c:	88 ec       	ldi	r24, 0xC8	; 200
    299e:	90 e0       	ldi	r25, 0x00	; 0
    29a0:	9c 83       	std	Y+4, r25	; 0x04
    29a2:	8b 83       	std	Y+3, r24	; 0x03
    29a4:	8b 81       	ldd	r24, Y+3	; 0x03
    29a6:	9c 81       	ldd	r25, Y+4	; 0x04
    29a8:	01 97       	sbiw	r24, 0x01	; 1
    29aa:	f1 f7       	brne	.-4      	; 0x29a8 <LCD_VidWrite4Data+0x35c>
    29ac:	9c 83       	std	Y+4, r25	; 0x04
    29ae:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29b0:	8d 81       	ldd	r24, Y+5	; 0x05
    29b2:	9e 81       	ldd	r25, Y+6	; 0x06
    29b4:	01 97       	sbiw	r24, 0x01	; 1
    29b6:	9e 83       	std	Y+6, r25	; 0x06
    29b8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29ba:	8d 81       	ldd	r24, Y+5	; 0x05
    29bc:	9e 81       	ldd	r25, Y+6	; 0x06
    29be:	00 97       	sbiw	r24, 0x00	; 0
    29c0:	69 f7       	brne	.-38     	; 0x299c <LCD_VidWrite4Data+0x350>
    29c2:	14 c0       	rjmp	.+40     	; 0x29ec <LCD_VidWrite4Data+0x3a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29c4:	6f 81       	ldd	r22, Y+7	; 0x07
    29c6:	78 85       	ldd	r23, Y+8	; 0x08
    29c8:	89 85       	ldd	r24, Y+9	; 0x09
    29ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    29cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29d0:	dc 01       	movw	r26, r24
    29d2:	cb 01       	movw	r24, r22
    29d4:	9e 83       	std	Y+6, r25	; 0x06
    29d6:	8d 83       	std	Y+5, r24	; 0x05
    29d8:	8d 81       	ldd	r24, Y+5	; 0x05
    29da:	9e 81       	ldd	r25, Y+6	; 0x06
    29dc:	9a 83       	std	Y+2, r25	; 0x02
    29de:	89 83       	std	Y+1, r24	; 0x01
    29e0:	89 81       	ldd	r24, Y+1	; 0x01
    29e2:	9a 81       	ldd	r25, Y+2	; 0x02
    29e4:	01 97       	sbiw	r24, 0x01	; 1
    29e6:	f1 f7       	brne	.-4      	; 0x29e4 <LCD_VidWrite4Data+0x398>
    29e8:	9a 83       	std	Y+2, r25	; 0x02
    29ea:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(2);

}
    29ec:	ab 96       	adiw	r28, 0x2b	; 43
    29ee:	0f b6       	in	r0, 0x3f	; 63
    29f0:	f8 94       	cli
    29f2:	de bf       	out	0x3e, r29	; 62
    29f4:	0f be       	out	0x3f, r0	; 63
    29f6:	cd bf       	out	0x3d, r28	; 61
    29f8:	cf 91       	pop	r28
    29fa:	df 91       	pop	r29
    29fc:	08 95       	ret

000029fe <LCD_Write4String>:

void LCD_Write4String(u8* str,u8 row,u8 col)
{
    29fe:	df 93       	push	r29
    2a00:	cf 93       	push	r28
    2a02:	00 d0       	rcall	.+0      	; 0x2a04 <LCD_Write4String+0x6>
    2a04:	00 d0       	rcall	.+0      	; 0x2a06 <LCD_Write4String+0x8>
    2a06:	00 d0       	rcall	.+0      	; 0x2a08 <LCD_Write4String+0xa>
    2a08:	cd b7       	in	r28, 0x3d	; 61
    2a0a:	de b7       	in	r29, 0x3e	; 62
    2a0c:	9c 83       	std	Y+4, r25	; 0x04
    2a0e:	8b 83       	std	Y+3, r24	; 0x03
    2a10:	6d 83       	std	Y+5, r22	; 0x05
    2a12:	4e 83       	std	Y+6, r20	; 0x06
	LCD_GoToPosition(row,col);
    2a14:	8d 81       	ldd	r24, Y+5	; 0x05
    2a16:	6e 81       	ldd	r22, Y+6	; 0x06
    2a18:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <LCD_GoToPosition>
	u8 index=0;
    2a1c:	1a 82       	std	Y+2, r1	; 0x02
	u8 line0=0;
    2a1e:	19 82       	std	Y+1, r1	; 0x01
    2a20:	8a c0       	rjmp	.+276    	; 0x2b36 <LCD_Write4String+0x138>
	while (str[index] !='\0' && ((row*16)+(col+index))<32)
	{
		if (((row*16)+(col+index))<16&&(line0==0))
    2a22:	8d 81       	ldd	r24, Y+5	; 0x05
    2a24:	88 2f       	mov	r24, r24
    2a26:	90 e0       	ldi	r25, 0x00	; 0
    2a28:	ac 01       	movw	r20, r24
    2a2a:	42 95       	swap	r20
    2a2c:	52 95       	swap	r21
    2a2e:	50 7f       	andi	r21, 0xF0	; 240
    2a30:	54 27       	eor	r21, r20
    2a32:	40 7f       	andi	r20, 0xF0	; 240
    2a34:	54 27       	eor	r21, r20
    2a36:	8e 81       	ldd	r24, Y+6	; 0x06
    2a38:	28 2f       	mov	r18, r24
    2a3a:	30 e0       	ldi	r19, 0x00	; 0
    2a3c:	8a 81       	ldd	r24, Y+2	; 0x02
    2a3e:	88 2f       	mov	r24, r24
    2a40:	90 e0       	ldi	r25, 0x00	; 0
    2a42:	82 0f       	add	r24, r18
    2a44:	93 1f       	adc	r25, r19
    2a46:	84 0f       	add	r24, r20
    2a48:	95 1f       	adc	r25, r21
    2a4a:	80 31       	cpi	r24, 0x10	; 16
    2a4c:	91 05       	cpc	r25, r1
    2a4e:	94 f4       	brge	.+36     	; 0x2a74 <LCD_Write4String+0x76>
    2a50:	89 81       	ldd	r24, Y+1	; 0x01
    2a52:	88 23       	and	r24, r24
    2a54:	79 f4       	brne	.+30     	; 0x2a74 <LCD_Write4String+0x76>
		{
			LCD_VidWrite4Data(str[index]);
    2a56:	8a 81       	ldd	r24, Y+2	; 0x02
    2a58:	28 2f       	mov	r18, r24
    2a5a:	30 e0       	ldi	r19, 0x00	; 0
    2a5c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a5e:	9c 81       	ldd	r25, Y+4	; 0x04
    2a60:	fc 01       	movw	r30, r24
    2a62:	e2 0f       	add	r30, r18
    2a64:	f3 1f       	adc	r31, r19
    2a66:	80 81       	ld	r24, Z
    2a68:	0e 94 26 13 	call	0x264c	; 0x264c <LCD_VidWrite4Data>
			index++;
    2a6c:	8a 81       	ldd	r24, Y+2	; 0x02
    2a6e:	8f 5f       	subi	r24, 0xFF	; 255
    2a70:	8a 83       	std	Y+2, r24	; 0x02
    2a72:	61 c0       	rjmp	.+194    	; 0x2b36 <LCD_Write4String+0x138>
		}
		else if (((row*16)+(col+index))>=16&& ((row*16)+(col+index))<32 &&(line0==0))
    2a74:	8d 81       	ldd	r24, Y+5	; 0x05
    2a76:	88 2f       	mov	r24, r24
    2a78:	90 e0       	ldi	r25, 0x00	; 0
    2a7a:	ac 01       	movw	r20, r24
    2a7c:	42 95       	swap	r20
    2a7e:	52 95       	swap	r21
    2a80:	50 7f       	andi	r21, 0xF0	; 240
    2a82:	54 27       	eor	r21, r20
    2a84:	40 7f       	andi	r20, 0xF0	; 240
    2a86:	54 27       	eor	r21, r20
    2a88:	8e 81       	ldd	r24, Y+6	; 0x06
    2a8a:	28 2f       	mov	r18, r24
    2a8c:	30 e0       	ldi	r19, 0x00	; 0
    2a8e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a90:	88 2f       	mov	r24, r24
    2a92:	90 e0       	ldi	r25, 0x00	; 0
    2a94:	82 0f       	add	r24, r18
    2a96:	93 1f       	adc	r25, r19
    2a98:	84 0f       	add	r24, r20
    2a9a:	95 1f       	adc	r25, r21
    2a9c:	80 31       	cpi	r24, 0x10	; 16
    2a9e:	91 05       	cpc	r25, r1
    2aa0:	14 f1       	brlt	.+68     	; 0x2ae6 <LCD_Write4String+0xe8>
    2aa2:	8d 81       	ldd	r24, Y+5	; 0x05
    2aa4:	88 2f       	mov	r24, r24
    2aa6:	90 e0       	ldi	r25, 0x00	; 0
    2aa8:	ac 01       	movw	r20, r24
    2aaa:	42 95       	swap	r20
    2aac:	52 95       	swap	r21
    2aae:	50 7f       	andi	r21, 0xF0	; 240
    2ab0:	54 27       	eor	r21, r20
    2ab2:	40 7f       	andi	r20, 0xF0	; 240
    2ab4:	54 27       	eor	r21, r20
    2ab6:	8e 81       	ldd	r24, Y+6	; 0x06
    2ab8:	28 2f       	mov	r18, r24
    2aba:	30 e0       	ldi	r19, 0x00	; 0
    2abc:	8a 81       	ldd	r24, Y+2	; 0x02
    2abe:	88 2f       	mov	r24, r24
    2ac0:	90 e0       	ldi	r25, 0x00	; 0
    2ac2:	82 0f       	add	r24, r18
    2ac4:	93 1f       	adc	r25, r19
    2ac6:	84 0f       	add	r24, r20
    2ac8:	95 1f       	adc	r25, r21
    2aca:	80 32       	cpi	r24, 0x20	; 32
    2acc:	91 05       	cpc	r25, r1
    2ace:	5c f4       	brge	.+22     	; 0x2ae6 <LCD_Write4String+0xe8>
    2ad0:	89 81       	ldd	r24, Y+1	; 0x01
    2ad2:	88 23       	and	r24, r24
    2ad4:	41 f4       	brne	.+16     	; 0x2ae6 <LCD_Write4String+0xe8>
		{
			LCD_GoToPosition(1,col);
    2ad6:	81 e0       	ldi	r24, 0x01	; 1
    2ad8:	6e 81       	ldd	r22, Y+6	; 0x06
    2ada:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <LCD_GoToPosition>
			line0++;
    2ade:	89 81       	ldd	r24, Y+1	; 0x01
    2ae0:	8f 5f       	subi	r24, 0xFF	; 255
    2ae2:	89 83       	std	Y+1, r24	; 0x01
    2ae4:	28 c0       	rjmp	.+80     	; 0x2b36 <LCD_Write4String+0x138>
		}
		else if (((row*16)+(col+index))<32&&(line0==1))
    2ae6:	8d 81       	ldd	r24, Y+5	; 0x05
    2ae8:	88 2f       	mov	r24, r24
    2aea:	90 e0       	ldi	r25, 0x00	; 0
    2aec:	ac 01       	movw	r20, r24
    2aee:	42 95       	swap	r20
    2af0:	52 95       	swap	r21
    2af2:	50 7f       	andi	r21, 0xF0	; 240
    2af4:	54 27       	eor	r21, r20
    2af6:	40 7f       	andi	r20, 0xF0	; 240
    2af8:	54 27       	eor	r21, r20
    2afa:	8e 81       	ldd	r24, Y+6	; 0x06
    2afc:	28 2f       	mov	r18, r24
    2afe:	30 e0       	ldi	r19, 0x00	; 0
    2b00:	8a 81       	ldd	r24, Y+2	; 0x02
    2b02:	88 2f       	mov	r24, r24
    2b04:	90 e0       	ldi	r25, 0x00	; 0
    2b06:	82 0f       	add	r24, r18
    2b08:	93 1f       	adc	r25, r19
    2b0a:	84 0f       	add	r24, r20
    2b0c:	95 1f       	adc	r25, r21
    2b0e:	80 32       	cpi	r24, 0x20	; 32
    2b10:	91 05       	cpc	r25, r1
    2b12:	8c f4       	brge	.+34     	; 0x2b36 <LCD_Write4String+0x138>
    2b14:	89 81       	ldd	r24, Y+1	; 0x01
    2b16:	81 30       	cpi	r24, 0x01	; 1
    2b18:	71 f4       	brne	.+28     	; 0x2b36 <LCD_Write4String+0x138>
		{
			LCD_VidWrite4Data(str[index]);
    2b1a:	8a 81       	ldd	r24, Y+2	; 0x02
    2b1c:	28 2f       	mov	r18, r24
    2b1e:	30 e0       	ldi	r19, 0x00	; 0
    2b20:	8b 81       	ldd	r24, Y+3	; 0x03
    2b22:	9c 81       	ldd	r25, Y+4	; 0x04
    2b24:	fc 01       	movw	r30, r24
    2b26:	e2 0f       	add	r30, r18
    2b28:	f3 1f       	adc	r31, r19
    2b2a:	80 81       	ld	r24, Z
    2b2c:	0e 94 26 13 	call	0x264c	; 0x264c <LCD_VidWrite4Data>
			index++;
    2b30:	8a 81       	ldd	r24, Y+2	; 0x02
    2b32:	8f 5f       	subi	r24, 0xFF	; 255
    2b34:	8a 83       	std	Y+2, r24	; 0x02
void LCD_Write4String(u8* str,u8 row,u8 col)
{
	LCD_GoToPosition(row,col);
	u8 index=0;
	u8 line0=0;
	while (str[index] !='\0' && ((row*16)+(col+index))<32)
    2b36:	8a 81       	ldd	r24, Y+2	; 0x02
    2b38:	28 2f       	mov	r18, r24
    2b3a:	30 e0       	ldi	r19, 0x00	; 0
    2b3c:	8b 81       	ldd	r24, Y+3	; 0x03
    2b3e:	9c 81       	ldd	r25, Y+4	; 0x04
    2b40:	fc 01       	movw	r30, r24
    2b42:	e2 0f       	add	r30, r18
    2b44:	f3 1f       	adc	r31, r19
    2b46:	80 81       	ld	r24, Z
    2b48:	88 23       	and	r24, r24
    2b4a:	c1 f0       	breq	.+48     	; 0x2b7c <LCD_Write4String+0x17e>
    2b4c:	8d 81       	ldd	r24, Y+5	; 0x05
    2b4e:	88 2f       	mov	r24, r24
    2b50:	90 e0       	ldi	r25, 0x00	; 0
    2b52:	ac 01       	movw	r20, r24
    2b54:	42 95       	swap	r20
    2b56:	52 95       	swap	r21
    2b58:	50 7f       	andi	r21, 0xF0	; 240
    2b5a:	54 27       	eor	r21, r20
    2b5c:	40 7f       	andi	r20, 0xF0	; 240
    2b5e:	54 27       	eor	r21, r20
    2b60:	8e 81       	ldd	r24, Y+6	; 0x06
    2b62:	28 2f       	mov	r18, r24
    2b64:	30 e0       	ldi	r19, 0x00	; 0
    2b66:	8a 81       	ldd	r24, Y+2	; 0x02
    2b68:	88 2f       	mov	r24, r24
    2b6a:	90 e0       	ldi	r25, 0x00	; 0
    2b6c:	82 0f       	add	r24, r18
    2b6e:	93 1f       	adc	r25, r19
    2b70:	84 0f       	add	r24, r20
    2b72:	95 1f       	adc	r25, r21
    2b74:	80 32       	cpi	r24, 0x20	; 32
    2b76:	91 05       	cpc	r25, r1
    2b78:	0c f4       	brge	.+2      	; 0x2b7c <LCD_Write4String+0x17e>
    2b7a:	53 cf       	rjmp	.-346    	; 0x2a22 <LCD_Write4String+0x24>
			LCD_VidWrite4Data(str[index]);
			index++;
		}
	}

}
    2b7c:	26 96       	adiw	r28, 0x06	; 6
    2b7e:	0f b6       	in	r0, 0x3f	; 63
    2b80:	f8 94       	cli
    2b82:	de bf       	out	0x3e, r29	; 62
    2b84:	0f be       	out	0x3f, r0	; 63
    2b86:	cd bf       	out	0x3d, r28	; 61
    2b88:	cf 91       	pop	r28
    2b8a:	df 91       	pop	r29
    2b8c:	08 95       	ret

00002b8e <LCD_GoToPosition>:

void LCD_GoToPosition(u8 row,u8 col)
{
    2b8e:	df 93       	push	r29
    2b90:	cf 93       	push	r28
    2b92:	00 d0       	rcall	.+0      	; 0x2b94 <LCD_GoToPosition+0x6>
    2b94:	0f 92       	push	r0
    2b96:	cd b7       	in	r28, 0x3d	; 61
    2b98:	de b7       	in	r29, 0x3e	; 62
    2b9a:	8a 83       	std	Y+2, r24	; 0x02
    2b9c:	6b 83       	std	Y+3, r22	; 0x03
	u8 adress;
	adress= (row*0x40)+col;
    2b9e:	8a 81       	ldd	r24, Y+2	; 0x02
    2ba0:	88 2f       	mov	r24, r24
    2ba2:	90 e0       	ldi	r25, 0x00	; 0
    2ba4:	00 24       	eor	r0, r0
    2ba6:	96 95       	lsr	r25
    2ba8:	87 95       	ror	r24
    2baa:	07 94       	ror	r0
    2bac:	96 95       	lsr	r25
    2bae:	87 95       	ror	r24
    2bb0:	07 94       	ror	r0
    2bb2:	98 2f       	mov	r25, r24
    2bb4:	80 2d       	mov	r24, r0
    2bb6:	98 2f       	mov	r25, r24
    2bb8:	8b 81       	ldd	r24, Y+3	; 0x03
    2bba:	89 0f       	add	r24, r25
    2bbc:	89 83       	std	Y+1, r24	; 0x01
	adress =SET_BIT(adress,7);
    2bbe:	89 81       	ldd	r24, Y+1	; 0x01
    2bc0:	80 68       	ori	r24, 0x80	; 128
    2bc2:	89 83       	std	Y+1, r24	; 0x01
	LCD_VidWrite4Cmd(adress);
    2bc4:	89 81       	ldd	r24, Y+1	; 0x01
    2bc6:	0e 94 30 10 	call	0x2060	; 0x2060 <LCD_VidWrite4Cmd>
}
    2bca:	0f 90       	pop	r0
    2bcc:	0f 90       	pop	r0
    2bce:	0f 90       	pop	r0
    2bd0:	cf 91       	pop	r28
    2bd2:	df 91       	pop	r29
    2bd4:	08 95       	ret

00002bd6 <LCD_VidDisp4Number>:

void LCD_VidDisp4Number(u32 number)
{
    2bd6:	df 93       	push	r29
    2bd8:	cf 93       	push	r28
    2bda:	cd b7       	in	r28, 0x3d	; 61
    2bdc:	de b7       	in	r29, 0x3e	; 62
    2bde:	68 97       	sbiw	r28, 0x18	; 24
    2be0:	0f b6       	in	r0, 0x3f	; 63
    2be2:	f8 94       	cli
    2be4:	de bf       	out	0x3e, r29	; 62
    2be6:	0f be       	out	0x3f, r0	; 63
    2be8:	cd bf       	out	0x3d, r28	; 61
    2bea:	6d 8b       	std	Y+21, r22	; 0x15
    2bec:	7e 8b       	std	Y+22, r23	; 0x16
    2bee:	8f 8b       	std	Y+23, r24	; 0x17
    2bf0:	98 8f       	std	Y+24, r25	; 0x18

	u32 digit=0;
    2bf2:	1f 82       	std	Y+7, r1	; 0x07
    2bf4:	18 86       	std	Y+8, r1	; 0x08
    2bf6:	19 86       	std	Y+9, r1	; 0x09
    2bf8:	1a 86       	std	Y+10, r1	; 0x0a
	u16 i=0;
    2bfa:	1e 82       	std	Y+6, r1	; 0x06
    2bfc:	1d 82       	std	Y+5, r1	; 0x05
	u32 f=0;
    2bfe:	19 82       	std	Y+1, r1	; 0x01
    2c00:	1a 82       	std	Y+2, r1	; 0x02
    2c02:	1b 82       	std	Y+3, r1	; 0x03
    2c04:	1c 82       	std	Y+4, r1	; 0x04
    2c06:	45 c0       	rjmp	.+138    	; 0x2c92 <LCD_VidDisp4Number+0xbc>
	u8 number_holder[10];

	while(number>0)
	{
		f=number%10;
    2c08:	8d 89       	ldd	r24, Y+21	; 0x15
    2c0a:	9e 89       	ldd	r25, Y+22	; 0x16
    2c0c:	af 89       	ldd	r26, Y+23	; 0x17
    2c0e:	b8 8d       	ldd	r27, Y+24	; 0x18
    2c10:	2a e0       	ldi	r18, 0x0A	; 10
    2c12:	30 e0       	ldi	r19, 0x00	; 0
    2c14:	40 e0       	ldi	r20, 0x00	; 0
    2c16:	50 e0       	ldi	r21, 0x00	; 0
    2c18:	bc 01       	movw	r22, r24
    2c1a:	cd 01       	movw	r24, r26
    2c1c:	0e 94 85 38 	call	0x710a	; 0x710a <__udivmodsi4>
    2c20:	dc 01       	movw	r26, r24
    2c22:	cb 01       	movw	r24, r22
    2c24:	89 83       	std	Y+1, r24	; 0x01
    2c26:	9a 83       	std	Y+2, r25	; 0x02
    2c28:	ab 83       	std	Y+3, r26	; 0x03
    2c2a:	bc 83       	std	Y+4, r27	; 0x04
		number_holder[i]=f;
    2c2c:	2d 81       	ldd	r18, Y+5	; 0x05
    2c2e:	3e 81       	ldd	r19, Y+6	; 0x06
    2c30:	49 81       	ldd	r20, Y+1	; 0x01
    2c32:	ce 01       	movw	r24, r28
    2c34:	0b 96       	adiw	r24, 0x0b	; 11
    2c36:	fc 01       	movw	r30, r24
    2c38:	e2 0f       	add	r30, r18
    2c3a:	f3 1f       	adc	r31, r19
    2c3c:	40 83       	st	Z, r20
		number=number/10;
    2c3e:	8d 89       	ldd	r24, Y+21	; 0x15
    2c40:	9e 89       	ldd	r25, Y+22	; 0x16
    2c42:	af 89       	ldd	r26, Y+23	; 0x17
    2c44:	b8 8d       	ldd	r27, Y+24	; 0x18
    2c46:	2a e0       	ldi	r18, 0x0A	; 10
    2c48:	30 e0       	ldi	r19, 0x00	; 0
    2c4a:	40 e0       	ldi	r20, 0x00	; 0
    2c4c:	50 e0       	ldi	r21, 0x00	; 0
    2c4e:	bc 01       	movw	r22, r24
    2c50:	cd 01       	movw	r24, r26
    2c52:	0e 94 85 38 	call	0x710a	; 0x710a <__udivmodsi4>
    2c56:	da 01       	movw	r26, r20
    2c58:	c9 01       	movw	r24, r18
    2c5a:	8d 8b       	std	Y+21, r24	; 0x15
    2c5c:	9e 8b       	std	Y+22, r25	; 0x16
    2c5e:	af 8b       	std	Y+23, r26	; 0x17
    2c60:	b8 8f       	std	Y+24, r27	; 0x18
		i++;
    2c62:	8d 81       	ldd	r24, Y+5	; 0x05
    2c64:	9e 81       	ldd	r25, Y+6	; 0x06
    2c66:	01 96       	adiw	r24, 0x01	; 1
    2c68:	9e 83       	std	Y+6, r25	; 0x06
    2c6a:	8d 83       	std	Y+5, r24	; 0x05
		digit++;
    2c6c:	8f 81       	ldd	r24, Y+7	; 0x07
    2c6e:	98 85       	ldd	r25, Y+8	; 0x08
    2c70:	a9 85       	ldd	r26, Y+9	; 0x09
    2c72:	ba 85       	ldd	r27, Y+10	; 0x0a
    2c74:	01 96       	adiw	r24, 0x01	; 1
    2c76:	a1 1d       	adc	r26, r1
    2c78:	b1 1d       	adc	r27, r1
    2c7a:	8f 83       	std	Y+7, r24	; 0x07
    2c7c:	98 87       	std	Y+8, r25	; 0x08
    2c7e:	a9 87       	std	Y+9, r26	; 0x09
    2c80:	ba 87       	std	Y+10, r27	; 0x0a
		if(number==0)
    2c82:	8d 89       	ldd	r24, Y+21	; 0x15
    2c84:	9e 89       	ldd	r25, Y+22	; 0x16
    2c86:	af 89       	ldd	r26, Y+23	; 0x17
    2c88:	b8 8d       	ldd	r27, Y+24	; 0x18
    2c8a:	00 97       	sbiw	r24, 0x00	; 0
    2c8c:	a1 05       	cpc	r26, r1
    2c8e:	b1 05       	cpc	r27, r1
    2c90:	49 f0       	breq	.+18     	; 0x2ca4 <LCD_VidDisp4Number+0xce>
	u32 digit=0;
	u16 i=0;
	u32 f=0;
	u8 number_holder[10];

	while(number>0)
    2c92:	8d 89       	ldd	r24, Y+21	; 0x15
    2c94:	9e 89       	ldd	r25, Y+22	; 0x16
    2c96:	af 89       	ldd	r26, Y+23	; 0x17
    2c98:	b8 8d       	ldd	r27, Y+24	; 0x18
    2c9a:	00 97       	sbiw	r24, 0x00	; 0
    2c9c:	a1 05       	cpc	r26, r1
    2c9e:	b1 05       	cpc	r27, r1
    2ca0:	09 f0       	breq	.+2      	; 0x2ca4 <LCD_VidDisp4Number+0xce>
    2ca2:	b2 cf       	rjmp	.-156    	; 0x2c08 <LCD_VidDisp4Number+0x32>
		i++;
		digit++;
		if(number==0)
		{break;}
	}
	for(i=digit;i>0;i--)
    2ca4:	8f 81       	ldd	r24, Y+7	; 0x07
    2ca6:	98 85       	ldd	r25, Y+8	; 0x08
    2ca8:	9e 83       	std	Y+6, r25	; 0x06
    2caa:	8d 83       	std	Y+5, r24	; 0x05
    2cac:	13 c0       	rjmp	.+38     	; 0x2cd4 <LCD_VidDisp4Number+0xfe>
	{
		LCD_VidWrite4Data(number_holder[i-1]+48);
    2cae:	8d 81       	ldd	r24, Y+5	; 0x05
    2cb0:	9e 81       	ldd	r25, Y+6	; 0x06
    2cb2:	9c 01       	movw	r18, r24
    2cb4:	21 50       	subi	r18, 0x01	; 1
    2cb6:	30 40       	sbci	r19, 0x00	; 0
    2cb8:	ce 01       	movw	r24, r28
    2cba:	0b 96       	adiw	r24, 0x0b	; 11
    2cbc:	fc 01       	movw	r30, r24
    2cbe:	e2 0f       	add	r30, r18
    2cc0:	f3 1f       	adc	r31, r19
    2cc2:	80 81       	ld	r24, Z
    2cc4:	80 5d       	subi	r24, 0xD0	; 208
    2cc6:	0e 94 26 13 	call	0x264c	; 0x264c <LCD_VidWrite4Data>
		i++;
		digit++;
		if(number==0)
		{break;}
	}
	for(i=digit;i>0;i--)
    2cca:	8d 81       	ldd	r24, Y+5	; 0x05
    2ccc:	9e 81       	ldd	r25, Y+6	; 0x06
    2cce:	01 97       	sbiw	r24, 0x01	; 1
    2cd0:	9e 83       	std	Y+6, r25	; 0x06
    2cd2:	8d 83       	std	Y+5, r24	; 0x05
    2cd4:	8d 81       	ldd	r24, Y+5	; 0x05
    2cd6:	9e 81       	ldd	r25, Y+6	; 0x06
    2cd8:	00 97       	sbiw	r24, 0x00	; 0
    2cda:	49 f7       	brne	.-46     	; 0x2cae <LCD_VidDisp4Number+0xd8>
	{
		LCD_VidWrite4Data(number_holder[i-1]+48);
	}

}
    2cdc:	68 96       	adiw	r28, 0x18	; 24
    2cde:	0f b6       	in	r0, 0x3f	; 63
    2ce0:	f8 94       	cli
    2ce2:	de bf       	out	0x3e, r29	; 62
    2ce4:	0f be       	out	0x3f, r0	; 63
    2ce6:	cd bf       	out	0x3d, r28	; 61
    2ce8:	cf 91       	pop	r28
    2cea:	df 91       	pop	r29
    2cec:	08 95       	ret

00002cee <LCD_StoreCustomChr>:


void LCD_StoreCustomChr(u8* LOC_pattern, u8 LOC_CGRAM_Index)
{
    2cee:	df 93       	push	r29
    2cf0:	cf 93       	push	r28
    2cf2:	00 d0       	rcall	.+0      	; 0x2cf4 <LCD_StoreCustomChr+0x6>
    2cf4:	00 d0       	rcall	.+0      	; 0x2cf6 <LCD_StoreCustomChr+0x8>
    2cf6:	0f 92       	push	r0
    2cf8:	cd b7       	in	r28, 0x3d	; 61
    2cfa:	de b7       	in	r29, 0x3e	; 62
    2cfc:	9c 83       	std	Y+4, r25	; 0x04
    2cfe:	8b 83       	std	Y+3, r24	; 0x03
    2d00:	6d 83       	std	Y+5, r22	; 0x05
	u8 LOC_Adress;
	u8 LOC_Adress_Index;
	if(LOC_CGRAM_Index < 8)
    2d02:	8d 81       	ldd	r24, Y+5	; 0x05
    2d04:	88 30       	cpi	r24, 0x08	; 8
    2d06:	18 f5       	brcc	.+70     	; 0x2d4e <LCD_StoreCustomChr+0x60>
	{
		LOC_Adress = LOC_CGRAM_Index *8;
    2d08:	8d 81       	ldd	r24, Y+5	; 0x05
    2d0a:	88 2f       	mov	r24, r24
    2d0c:	90 e0       	ldi	r25, 0x00	; 0
    2d0e:	88 0f       	add	r24, r24
    2d10:	99 1f       	adc	r25, r25
    2d12:	88 0f       	add	r24, r24
    2d14:	99 1f       	adc	r25, r25
    2d16:	88 0f       	add	r24, r24
    2d18:	99 1f       	adc	r25, r25
    2d1a:	8a 83       	std	Y+2, r24	; 0x02
		LOC_Adress = SET_BIT(LOC_Adress,6);
    2d1c:	8a 81       	ldd	r24, Y+2	; 0x02
    2d1e:	80 64       	ori	r24, 0x40	; 64
    2d20:	8a 83       	std	Y+2, r24	; 0x02
		LCD_VidWrite4Cmd(LOC_Adress);
    2d22:	8a 81       	ldd	r24, Y+2	; 0x02
    2d24:	0e 94 30 10 	call	0x2060	; 0x2060 <LCD_VidWrite4Cmd>
		for(LOC_Adress_Index=0;LOC_Adress_Index<8;LOC_Adress_Index++)
    2d28:	19 82       	std	Y+1, r1	; 0x01
    2d2a:	0e c0       	rjmp	.+28     	; 0x2d48 <LCD_StoreCustomChr+0x5a>
		{
			LCD_VidWrite4Data(LOC_pattern[LOC_Adress_Index]);
    2d2c:	89 81       	ldd	r24, Y+1	; 0x01
    2d2e:	28 2f       	mov	r18, r24
    2d30:	30 e0       	ldi	r19, 0x00	; 0
    2d32:	8b 81       	ldd	r24, Y+3	; 0x03
    2d34:	9c 81       	ldd	r25, Y+4	; 0x04
    2d36:	fc 01       	movw	r30, r24
    2d38:	e2 0f       	add	r30, r18
    2d3a:	f3 1f       	adc	r31, r19
    2d3c:	80 81       	ld	r24, Z
    2d3e:	0e 94 26 13 	call	0x264c	; 0x264c <LCD_VidWrite4Data>
	if(LOC_CGRAM_Index < 8)
	{
		LOC_Adress = LOC_CGRAM_Index *8;
		LOC_Adress = SET_BIT(LOC_Adress,6);
		LCD_VidWrite4Cmd(LOC_Adress);
		for(LOC_Adress_Index=0;LOC_Adress_Index<8;LOC_Adress_Index++)
    2d42:	89 81       	ldd	r24, Y+1	; 0x01
    2d44:	8f 5f       	subi	r24, 0xFF	; 255
    2d46:	89 83       	std	Y+1, r24	; 0x01
    2d48:	89 81       	ldd	r24, Y+1	; 0x01
    2d4a:	88 30       	cpi	r24, 0x08	; 8
    2d4c:	78 f3       	brcs	.-34     	; 0x2d2c <LCD_StoreCustomChr+0x3e>
		{
			LCD_VidWrite4Data(LOC_pattern[LOC_Adress_Index]);
		}
	}

	LCD_VidWrite4Cmd(RETURN_HOME);
    2d4e:	82 e0       	ldi	r24, 0x02	; 2
    2d50:	0e 94 30 10 	call	0x2060	; 0x2060 <LCD_VidWrite4Cmd>

}
    2d54:	0f 90       	pop	r0
    2d56:	0f 90       	pop	r0
    2d58:	0f 90       	pop	r0
    2d5a:	0f 90       	pop	r0
    2d5c:	0f 90       	pop	r0
    2d5e:	cf 91       	pop	r28
    2d60:	df 91       	pop	r29
    2d62:	08 95       	ret

00002d64 <LCD_Disply>:

void LCD_Disply(u8 LOC_CGRAM_Index,u8 LOC_row,u8 LOC_col)
{
    2d64:	df 93       	push	r29
    2d66:	cf 93       	push	r28
    2d68:	00 d0       	rcall	.+0      	; 0x2d6a <LCD_Disply+0x6>
    2d6a:	0f 92       	push	r0
    2d6c:	cd b7       	in	r28, 0x3d	; 61
    2d6e:	de b7       	in	r29, 0x3e	; 62
    2d70:	89 83       	std	Y+1, r24	; 0x01
    2d72:	6a 83       	std	Y+2, r22	; 0x02
    2d74:	4b 83       	std	Y+3, r20	; 0x03
	LCD_GoToPosition(LOC_row,LOC_col);
    2d76:	8a 81       	ldd	r24, Y+2	; 0x02
    2d78:	6b 81       	ldd	r22, Y+3	; 0x03
    2d7a:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <LCD_GoToPosition>

	LCD_VidWrite4Data(LOC_CGRAM_Index);
    2d7e:	89 81       	ldd	r24, Y+1	; 0x01
    2d80:	0e 94 26 13 	call	0x264c	; 0x264c <LCD_VidWrite4Data>


}
    2d84:	0f 90       	pop	r0
    2d86:	0f 90       	pop	r0
    2d88:	0f 90       	pop	r0
    2d8a:	cf 91       	pop	r28
    2d8c:	df 91       	pop	r29
    2d8e:	08 95       	ret

00002d90 <LCD_VidInit>:
#include "../../MCAL/DIO/DIO_Regster.h"
#include "../../MCAL/DIO/DIO_Interface.h"
#include "LCD_Interface.h"

void LCD_VidInit(void)
{
    2d90:	df 93       	push	r29
    2d92:	cf 93       	push	r28
    2d94:	cd b7       	in	r28, 0x3d	; 61
    2d96:	de b7       	in	r29, 0x3e	; 62
    2d98:	e8 97       	sbiw	r28, 0x38	; 56
    2d9a:	0f b6       	in	r0, 0x3f	; 63
    2d9c:	f8 94       	cli
    2d9e:	de bf       	out	0x3e, r29	; 62
    2da0:	0f be       	out	0x3f, r0	; 63
    2da2:	cd bf       	out	0x3d, r28	; 61
    2da4:	80 e0       	ldi	r24, 0x00	; 0
    2da6:	90 e0       	ldi	r25, 0x00	; 0
    2da8:	a8 e4       	ldi	r26, 0x48	; 72
    2daa:	b2 e4       	ldi	r27, 0x42	; 66
    2dac:	8d ab       	std	Y+53, r24	; 0x35
    2dae:	9e ab       	std	Y+54, r25	; 0x36
    2db0:	af ab       	std	Y+55, r26	; 0x37
    2db2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2db4:	6d a9       	ldd	r22, Y+53	; 0x35
    2db6:	7e a9       	ldd	r23, Y+54	; 0x36
    2db8:	8f a9       	ldd	r24, Y+55	; 0x37
    2dba:	98 ad       	ldd	r25, Y+56	; 0x38
    2dbc:	20 e0       	ldi	r18, 0x00	; 0
    2dbe:	30 e0       	ldi	r19, 0x00	; 0
    2dc0:	4a ef       	ldi	r20, 0xFA	; 250
    2dc2:	54 e4       	ldi	r21, 0x44	; 68
    2dc4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dc8:	dc 01       	movw	r26, r24
    2dca:	cb 01       	movw	r24, r22
    2dcc:	89 ab       	std	Y+49, r24	; 0x31
    2dce:	9a ab       	std	Y+50, r25	; 0x32
    2dd0:	ab ab       	std	Y+51, r26	; 0x33
    2dd2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2dd4:	69 a9       	ldd	r22, Y+49	; 0x31
    2dd6:	7a a9       	ldd	r23, Y+50	; 0x32
    2dd8:	8b a9       	ldd	r24, Y+51	; 0x33
    2dda:	9c a9       	ldd	r25, Y+52	; 0x34
    2ddc:	20 e0       	ldi	r18, 0x00	; 0
    2dde:	30 e0       	ldi	r19, 0x00	; 0
    2de0:	40 e8       	ldi	r20, 0x80	; 128
    2de2:	5f e3       	ldi	r21, 0x3F	; 63
    2de4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2de8:	88 23       	and	r24, r24
    2dea:	2c f4       	brge	.+10     	; 0x2df6 <LCD_VidInit+0x66>
		__ticks = 1;
    2dec:	81 e0       	ldi	r24, 0x01	; 1
    2dee:	90 e0       	ldi	r25, 0x00	; 0
    2df0:	98 ab       	std	Y+48, r25	; 0x30
    2df2:	8f a7       	std	Y+47, r24	; 0x2f
    2df4:	3f c0       	rjmp	.+126    	; 0x2e74 <LCD_VidInit+0xe4>
	else if (__tmp > 65535)
    2df6:	69 a9       	ldd	r22, Y+49	; 0x31
    2df8:	7a a9       	ldd	r23, Y+50	; 0x32
    2dfa:	8b a9       	ldd	r24, Y+51	; 0x33
    2dfc:	9c a9       	ldd	r25, Y+52	; 0x34
    2dfe:	20 e0       	ldi	r18, 0x00	; 0
    2e00:	3f ef       	ldi	r19, 0xFF	; 255
    2e02:	4f e7       	ldi	r20, 0x7F	; 127
    2e04:	57 e4       	ldi	r21, 0x47	; 71
    2e06:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e0a:	18 16       	cp	r1, r24
    2e0c:	4c f5       	brge	.+82     	; 0x2e60 <LCD_VidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e0e:	6d a9       	ldd	r22, Y+53	; 0x35
    2e10:	7e a9       	ldd	r23, Y+54	; 0x36
    2e12:	8f a9       	ldd	r24, Y+55	; 0x37
    2e14:	98 ad       	ldd	r25, Y+56	; 0x38
    2e16:	20 e0       	ldi	r18, 0x00	; 0
    2e18:	30 e0       	ldi	r19, 0x00	; 0
    2e1a:	40 e2       	ldi	r20, 0x20	; 32
    2e1c:	51 e4       	ldi	r21, 0x41	; 65
    2e1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e22:	dc 01       	movw	r26, r24
    2e24:	cb 01       	movw	r24, r22
    2e26:	bc 01       	movw	r22, r24
    2e28:	cd 01       	movw	r24, r26
    2e2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e2e:	dc 01       	movw	r26, r24
    2e30:	cb 01       	movw	r24, r22
    2e32:	98 ab       	std	Y+48, r25	; 0x30
    2e34:	8f a7       	std	Y+47, r24	; 0x2f
    2e36:	0f c0       	rjmp	.+30     	; 0x2e56 <LCD_VidInit+0xc6>
    2e38:	88 ec       	ldi	r24, 0xC8	; 200
    2e3a:	90 e0       	ldi	r25, 0x00	; 0
    2e3c:	9e a7       	std	Y+46, r25	; 0x2e
    2e3e:	8d a7       	std	Y+45, r24	; 0x2d
    2e40:	8d a5       	ldd	r24, Y+45	; 0x2d
    2e42:	9e a5       	ldd	r25, Y+46	; 0x2e
    2e44:	01 97       	sbiw	r24, 0x01	; 1
    2e46:	f1 f7       	brne	.-4      	; 0x2e44 <LCD_VidInit+0xb4>
    2e48:	9e a7       	std	Y+46, r25	; 0x2e
    2e4a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e4c:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e4e:	98 a9       	ldd	r25, Y+48	; 0x30
    2e50:	01 97       	sbiw	r24, 0x01	; 1
    2e52:	98 ab       	std	Y+48, r25	; 0x30
    2e54:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e56:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e58:	98 a9       	ldd	r25, Y+48	; 0x30
    2e5a:	00 97       	sbiw	r24, 0x00	; 0
    2e5c:	69 f7       	brne	.-38     	; 0x2e38 <LCD_VidInit+0xa8>
    2e5e:	14 c0       	rjmp	.+40     	; 0x2e88 <LCD_VidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e60:	69 a9       	ldd	r22, Y+49	; 0x31
    2e62:	7a a9       	ldd	r23, Y+50	; 0x32
    2e64:	8b a9       	ldd	r24, Y+51	; 0x33
    2e66:	9c a9       	ldd	r25, Y+52	; 0x34
    2e68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e6c:	dc 01       	movw	r26, r24
    2e6e:	cb 01       	movw	r24, r22
    2e70:	98 ab       	std	Y+48, r25	; 0x30
    2e72:	8f a7       	std	Y+47, r24	; 0x2f
    2e74:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e76:	98 a9       	ldd	r25, Y+48	; 0x30
    2e78:	9c a7       	std	Y+44, r25	; 0x2c
    2e7a:	8b a7       	std	Y+43, r24	; 0x2b
    2e7c:	8b a5       	ldd	r24, Y+43	; 0x2b
    2e7e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2e80:	01 97       	sbiw	r24, 0x01	; 1
    2e82:	f1 f7       	brne	.-4      	; 0x2e80 <LCD_VidInit+0xf0>
    2e84:	9c a7       	std	Y+44, r25	; 0x2c
    2e86:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(50); // wait for LCD to initialize
	DIO_VidSitPortDirection(LCD_PORT, 0xff);
    2e88:	83 e0       	ldi	r24, 0x03	; 3
    2e8a:	6f ef       	ldi	r22, 0xFF	; 255
    2e8c:	0e 94 52 09 	call	0x12a4	; 0x12a4 <DIO_VidSitPortDirection>
	//DIO_VidSetPortDirection(PORTB, 0b00111000 ); //RS RW E
	DIO_VidSitPintDirection(LCD_INIT,LCD_RS,1);   //RS
    2e90:	81 e0       	ldi	r24, 0x01	; 1
    2e92:	63 e0       	ldi	r22, 0x03	; 3
    2e94:	41 e0       	ldi	r20, 0x01	; 1
    2e96:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <DIO_VidSitPintDirection>
	DIO_VidSitPintDirection(LCD_INIT,LCD_RW,1);   //RW
    2e9a:	81 e0       	ldi	r24, 0x01	; 1
    2e9c:	64 e0       	ldi	r22, 0x04	; 4
    2e9e:	41 e0       	ldi	r20, 0x01	; 1
    2ea0:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <DIO_VidSitPintDirection>
	DIO_VidSitPintDirection(LCD_INIT,LCD_EN,1);   //EN
    2ea4:	81 e0       	ldi	r24, 0x01	; 1
    2ea6:	65 e0       	ldi	r22, 0x05	; 5
    2ea8:	41 e0       	ldi	r20, 0x01	; 1
    2eaa:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <DIO_VidSitPintDirection>
/**/


	LCD_VidWriteCommand(function_set_8_bit_lcd); 	//function set
    2eae:	88 e3       	ldi	r24, 0x38	; 56
    2eb0:	0e 94 bf 18 	call	0x317e	; 0x317e <LCD_VidWriteCommand>
    2eb4:	80 e0       	ldi	r24, 0x00	; 0
    2eb6:	90 e0       	ldi	r25, 0x00	; 0
    2eb8:	a0 e8       	ldi	r26, 0x80	; 128
    2eba:	bf e3       	ldi	r27, 0x3F	; 63
    2ebc:	8f a3       	std	Y+39, r24	; 0x27
    2ebe:	98 a7       	std	Y+40, r25	; 0x28
    2ec0:	a9 a7       	std	Y+41, r26	; 0x29
    2ec2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ec4:	6f a1       	ldd	r22, Y+39	; 0x27
    2ec6:	78 a5       	ldd	r23, Y+40	; 0x28
    2ec8:	89 a5       	ldd	r24, Y+41	; 0x29
    2eca:	9a a5       	ldd	r25, Y+42	; 0x2a
    2ecc:	20 e0       	ldi	r18, 0x00	; 0
    2ece:	30 e0       	ldi	r19, 0x00	; 0
    2ed0:	4a ef       	ldi	r20, 0xFA	; 250
    2ed2:	54 e4       	ldi	r21, 0x44	; 68
    2ed4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ed8:	dc 01       	movw	r26, r24
    2eda:	cb 01       	movw	r24, r22
    2edc:	8b a3       	std	Y+35, r24	; 0x23
    2ede:	9c a3       	std	Y+36, r25	; 0x24
    2ee0:	ad a3       	std	Y+37, r26	; 0x25
    2ee2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2ee4:	6b a1       	ldd	r22, Y+35	; 0x23
    2ee6:	7c a1       	ldd	r23, Y+36	; 0x24
    2ee8:	8d a1       	ldd	r24, Y+37	; 0x25
    2eea:	9e a1       	ldd	r25, Y+38	; 0x26
    2eec:	20 e0       	ldi	r18, 0x00	; 0
    2eee:	30 e0       	ldi	r19, 0x00	; 0
    2ef0:	40 e8       	ldi	r20, 0x80	; 128
    2ef2:	5f e3       	ldi	r21, 0x3F	; 63
    2ef4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ef8:	88 23       	and	r24, r24
    2efa:	2c f4       	brge	.+10     	; 0x2f06 <LCD_VidInit+0x176>
		__ticks = 1;
    2efc:	81 e0       	ldi	r24, 0x01	; 1
    2efe:	90 e0       	ldi	r25, 0x00	; 0
    2f00:	9a a3       	std	Y+34, r25	; 0x22
    2f02:	89 a3       	std	Y+33, r24	; 0x21
    2f04:	3f c0       	rjmp	.+126    	; 0x2f84 <LCD_VidInit+0x1f4>
	else if (__tmp > 65535)
    2f06:	6b a1       	ldd	r22, Y+35	; 0x23
    2f08:	7c a1       	ldd	r23, Y+36	; 0x24
    2f0a:	8d a1       	ldd	r24, Y+37	; 0x25
    2f0c:	9e a1       	ldd	r25, Y+38	; 0x26
    2f0e:	20 e0       	ldi	r18, 0x00	; 0
    2f10:	3f ef       	ldi	r19, 0xFF	; 255
    2f12:	4f e7       	ldi	r20, 0x7F	; 127
    2f14:	57 e4       	ldi	r21, 0x47	; 71
    2f16:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f1a:	18 16       	cp	r1, r24
    2f1c:	4c f5       	brge	.+82     	; 0x2f70 <LCD_VidInit+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f1e:	6f a1       	ldd	r22, Y+39	; 0x27
    2f20:	78 a5       	ldd	r23, Y+40	; 0x28
    2f22:	89 a5       	ldd	r24, Y+41	; 0x29
    2f24:	9a a5       	ldd	r25, Y+42	; 0x2a
    2f26:	20 e0       	ldi	r18, 0x00	; 0
    2f28:	30 e0       	ldi	r19, 0x00	; 0
    2f2a:	40 e2       	ldi	r20, 0x20	; 32
    2f2c:	51 e4       	ldi	r21, 0x41	; 65
    2f2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f32:	dc 01       	movw	r26, r24
    2f34:	cb 01       	movw	r24, r22
    2f36:	bc 01       	movw	r22, r24
    2f38:	cd 01       	movw	r24, r26
    2f3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f3e:	dc 01       	movw	r26, r24
    2f40:	cb 01       	movw	r24, r22
    2f42:	9a a3       	std	Y+34, r25	; 0x22
    2f44:	89 a3       	std	Y+33, r24	; 0x21
    2f46:	0f c0       	rjmp	.+30     	; 0x2f66 <LCD_VidInit+0x1d6>
    2f48:	88 ec       	ldi	r24, 0xC8	; 200
    2f4a:	90 e0       	ldi	r25, 0x00	; 0
    2f4c:	98 a3       	std	Y+32, r25	; 0x20
    2f4e:	8f 8f       	std	Y+31, r24	; 0x1f
    2f50:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2f52:	98 a1       	ldd	r25, Y+32	; 0x20
    2f54:	01 97       	sbiw	r24, 0x01	; 1
    2f56:	f1 f7       	brne	.-4      	; 0x2f54 <LCD_VidInit+0x1c4>
    2f58:	98 a3       	std	Y+32, r25	; 0x20
    2f5a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f5c:	89 a1       	ldd	r24, Y+33	; 0x21
    2f5e:	9a a1       	ldd	r25, Y+34	; 0x22
    2f60:	01 97       	sbiw	r24, 0x01	; 1
    2f62:	9a a3       	std	Y+34, r25	; 0x22
    2f64:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f66:	89 a1       	ldd	r24, Y+33	; 0x21
    2f68:	9a a1       	ldd	r25, Y+34	; 0x22
    2f6a:	00 97       	sbiw	r24, 0x00	; 0
    2f6c:	69 f7       	brne	.-38     	; 0x2f48 <LCD_VidInit+0x1b8>
    2f6e:	14 c0       	rjmp	.+40     	; 0x2f98 <LCD_VidInit+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f70:	6b a1       	ldd	r22, Y+35	; 0x23
    2f72:	7c a1       	ldd	r23, Y+36	; 0x24
    2f74:	8d a1       	ldd	r24, Y+37	; 0x25
    2f76:	9e a1       	ldd	r25, Y+38	; 0x26
    2f78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f7c:	dc 01       	movw	r26, r24
    2f7e:	cb 01       	movw	r24, r22
    2f80:	9a a3       	std	Y+34, r25	; 0x22
    2f82:	89 a3       	std	Y+33, r24	; 0x21
    2f84:	89 a1       	ldd	r24, Y+33	; 0x21
    2f86:	9a a1       	ldd	r25, Y+34	; 0x22
    2f88:	9e 8f       	std	Y+30, r25	; 0x1e
    2f8a:	8d 8f       	std	Y+29, r24	; 0x1d
    2f8c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2f8e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2f90:	01 97       	sbiw	r24, 0x01	; 1
    2f92:	f1 f7       	brne	.-4      	; 0x2f90 <LCD_VidInit+0x200>
    2f94:	9e 8f       	std	Y+30, r25	; 0x1e
    2f96:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); // wait for LCD to Function set
	LCD_VidWriteCommand(Display_On_Cursor_OFF);	//Display On
    2f98:	8c e0       	ldi	r24, 0x0C	; 12
    2f9a:	0e 94 bf 18 	call	0x317e	; 0x317e <LCD_VidWriteCommand>
    2f9e:	80 e0       	ldi	r24, 0x00	; 0
    2fa0:	90 e0       	ldi	r25, 0x00	; 0
    2fa2:	a0 e8       	ldi	r26, 0x80	; 128
    2fa4:	bf e3       	ldi	r27, 0x3F	; 63
    2fa6:	89 8f       	std	Y+25, r24	; 0x19
    2fa8:	9a 8f       	std	Y+26, r25	; 0x1a
    2faa:	ab 8f       	std	Y+27, r26	; 0x1b
    2fac:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fae:	69 8d       	ldd	r22, Y+25	; 0x19
    2fb0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2fb2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2fb4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2fb6:	20 e0       	ldi	r18, 0x00	; 0
    2fb8:	30 e0       	ldi	r19, 0x00	; 0
    2fba:	4a ef       	ldi	r20, 0xFA	; 250
    2fbc:	54 e4       	ldi	r21, 0x44	; 68
    2fbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fc2:	dc 01       	movw	r26, r24
    2fc4:	cb 01       	movw	r24, r22
    2fc6:	8d 8b       	std	Y+21, r24	; 0x15
    2fc8:	9e 8b       	std	Y+22, r25	; 0x16
    2fca:	af 8b       	std	Y+23, r26	; 0x17
    2fcc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2fce:	6d 89       	ldd	r22, Y+21	; 0x15
    2fd0:	7e 89       	ldd	r23, Y+22	; 0x16
    2fd2:	8f 89       	ldd	r24, Y+23	; 0x17
    2fd4:	98 8d       	ldd	r25, Y+24	; 0x18
    2fd6:	20 e0       	ldi	r18, 0x00	; 0
    2fd8:	30 e0       	ldi	r19, 0x00	; 0
    2fda:	40 e8       	ldi	r20, 0x80	; 128
    2fdc:	5f e3       	ldi	r21, 0x3F	; 63
    2fde:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2fe2:	88 23       	and	r24, r24
    2fe4:	2c f4       	brge	.+10     	; 0x2ff0 <LCD_VidInit+0x260>
		__ticks = 1;
    2fe6:	81 e0       	ldi	r24, 0x01	; 1
    2fe8:	90 e0       	ldi	r25, 0x00	; 0
    2fea:	9c 8b       	std	Y+20, r25	; 0x14
    2fec:	8b 8b       	std	Y+19, r24	; 0x13
    2fee:	3f c0       	rjmp	.+126    	; 0x306e <LCD_VidInit+0x2de>
	else if (__tmp > 65535)
    2ff0:	6d 89       	ldd	r22, Y+21	; 0x15
    2ff2:	7e 89       	ldd	r23, Y+22	; 0x16
    2ff4:	8f 89       	ldd	r24, Y+23	; 0x17
    2ff6:	98 8d       	ldd	r25, Y+24	; 0x18
    2ff8:	20 e0       	ldi	r18, 0x00	; 0
    2ffa:	3f ef       	ldi	r19, 0xFF	; 255
    2ffc:	4f e7       	ldi	r20, 0x7F	; 127
    2ffe:	57 e4       	ldi	r21, 0x47	; 71
    3000:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3004:	18 16       	cp	r1, r24
    3006:	4c f5       	brge	.+82     	; 0x305a <LCD_VidInit+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3008:	69 8d       	ldd	r22, Y+25	; 0x19
    300a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    300c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    300e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3010:	20 e0       	ldi	r18, 0x00	; 0
    3012:	30 e0       	ldi	r19, 0x00	; 0
    3014:	40 e2       	ldi	r20, 0x20	; 32
    3016:	51 e4       	ldi	r21, 0x41	; 65
    3018:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    301c:	dc 01       	movw	r26, r24
    301e:	cb 01       	movw	r24, r22
    3020:	bc 01       	movw	r22, r24
    3022:	cd 01       	movw	r24, r26
    3024:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3028:	dc 01       	movw	r26, r24
    302a:	cb 01       	movw	r24, r22
    302c:	9c 8b       	std	Y+20, r25	; 0x14
    302e:	8b 8b       	std	Y+19, r24	; 0x13
    3030:	0f c0       	rjmp	.+30     	; 0x3050 <LCD_VidInit+0x2c0>
    3032:	88 ec       	ldi	r24, 0xC8	; 200
    3034:	90 e0       	ldi	r25, 0x00	; 0
    3036:	9a 8b       	std	Y+18, r25	; 0x12
    3038:	89 8b       	std	Y+17, r24	; 0x11
    303a:	89 89       	ldd	r24, Y+17	; 0x11
    303c:	9a 89       	ldd	r25, Y+18	; 0x12
    303e:	01 97       	sbiw	r24, 0x01	; 1
    3040:	f1 f7       	brne	.-4      	; 0x303e <LCD_VidInit+0x2ae>
    3042:	9a 8b       	std	Y+18, r25	; 0x12
    3044:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3046:	8b 89       	ldd	r24, Y+19	; 0x13
    3048:	9c 89       	ldd	r25, Y+20	; 0x14
    304a:	01 97       	sbiw	r24, 0x01	; 1
    304c:	9c 8b       	std	Y+20, r25	; 0x14
    304e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3050:	8b 89       	ldd	r24, Y+19	; 0x13
    3052:	9c 89       	ldd	r25, Y+20	; 0x14
    3054:	00 97       	sbiw	r24, 0x00	; 0
    3056:	69 f7       	brne	.-38     	; 0x3032 <LCD_VidInit+0x2a2>
    3058:	14 c0       	rjmp	.+40     	; 0x3082 <LCD_VidInit+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    305a:	6d 89       	ldd	r22, Y+21	; 0x15
    305c:	7e 89       	ldd	r23, Y+22	; 0x16
    305e:	8f 89       	ldd	r24, Y+23	; 0x17
    3060:	98 8d       	ldd	r25, Y+24	; 0x18
    3062:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3066:	dc 01       	movw	r26, r24
    3068:	cb 01       	movw	r24, r22
    306a:	9c 8b       	std	Y+20, r25	; 0x14
    306c:	8b 8b       	std	Y+19, r24	; 0x13
    306e:	8b 89       	ldd	r24, Y+19	; 0x13
    3070:	9c 89       	ldd	r25, Y+20	; 0x14
    3072:	98 8b       	std	Y+16, r25	; 0x10
    3074:	8f 87       	std	Y+15, r24	; 0x0f
    3076:	8f 85       	ldd	r24, Y+15	; 0x0f
    3078:	98 89       	ldd	r25, Y+16	; 0x10
    307a:	01 97       	sbiw	r24, 0x01	; 1
    307c:	f1 f7       	brne	.-4      	; 0x307a <LCD_VidInit+0x2ea>
    307e:	98 8b       	std	Y+16, r25	; 0x10
    3080:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); // wait for LCD to Display On
	LCD_VidWriteCommand(Clear_Display);	//Clear Display
    3082:	81 e0       	ldi	r24, 0x01	; 1
    3084:	0e 94 bf 18 	call	0x317e	; 0x317e <LCD_VidWriteCommand>
    3088:	80 e0       	ldi	r24, 0x00	; 0
    308a:	90 e0       	ldi	r25, 0x00	; 0
    308c:	a0 e0       	ldi	r26, 0x00	; 0
    308e:	b0 e4       	ldi	r27, 0x40	; 64
    3090:	8b 87       	std	Y+11, r24	; 0x0b
    3092:	9c 87       	std	Y+12, r25	; 0x0c
    3094:	ad 87       	std	Y+13, r26	; 0x0d
    3096:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3098:	6b 85       	ldd	r22, Y+11	; 0x0b
    309a:	7c 85       	ldd	r23, Y+12	; 0x0c
    309c:	8d 85       	ldd	r24, Y+13	; 0x0d
    309e:	9e 85       	ldd	r25, Y+14	; 0x0e
    30a0:	20 e0       	ldi	r18, 0x00	; 0
    30a2:	30 e0       	ldi	r19, 0x00	; 0
    30a4:	4a ef       	ldi	r20, 0xFA	; 250
    30a6:	54 e4       	ldi	r21, 0x44	; 68
    30a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30ac:	dc 01       	movw	r26, r24
    30ae:	cb 01       	movw	r24, r22
    30b0:	8f 83       	std	Y+7, r24	; 0x07
    30b2:	98 87       	std	Y+8, r25	; 0x08
    30b4:	a9 87       	std	Y+9, r26	; 0x09
    30b6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    30b8:	6f 81       	ldd	r22, Y+7	; 0x07
    30ba:	78 85       	ldd	r23, Y+8	; 0x08
    30bc:	89 85       	ldd	r24, Y+9	; 0x09
    30be:	9a 85       	ldd	r25, Y+10	; 0x0a
    30c0:	20 e0       	ldi	r18, 0x00	; 0
    30c2:	30 e0       	ldi	r19, 0x00	; 0
    30c4:	40 e8       	ldi	r20, 0x80	; 128
    30c6:	5f e3       	ldi	r21, 0x3F	; 63
    30c8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    30cc:	88 23       	and	r24, r24
    30ce:	2c f4       	brge	.+10     	; 0x30da <LCD_VidInit+0x34a>
		__ticks = 1;
    30d0:	81 e0       	ldi	r24, 0x01	; 1
    30d2:	90 e0       	ldi	r25, 0x00	; 0
    30d4:	9e 83       	std	Y+6, r25	; 0x06
    30d6:	8d 83       	std	Y+5, r24	; 0x05
    30d8:	3f c0       	rjmp	.+126    	; 0x3158 <LCD_VidInit+0x3c8>
	else if (__tmp > 65535)
    30da:	6f 81       	ldd	r22, Y+7	; 0x07
    30dc:	78 85       	ldd	r23, Y+8	; 0x08
    30de:	89 85       	ldd	r24, Y+9	; 0x09
    30e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    30e2:	20 e0       	ldi	r18, 0x00	; 0
    30e4:	3f ef       	ldi	r19, 0xFF	; 255
    30e6:	4f e7       	ldi	r20, 0x7F	; 127
    30e8:	57 e4       	ldi	r21, 0x47	; 71
    30ea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    30ee:	18 16       	cp	r1, r24
    30f0:	4c f5       	brge	.+82     	; 0x3144 <LCD_VidInit+0x3b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    30f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    30f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    30f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    30fa:	20 e0       	ldi	r18, 0x00	; 0
    30fc:	30 e0       	ldi	r19, 0x00	; 0
    30fe:	40 e2       	ldi	r20, 0x20	; 32
    3100:	51 e4       	ldi	r21, 0x41	; 65
    3102:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3106:	dc 01       	movw	r26, r24
    3108:	cb 01       	movw	r24, r22
    310a:	bc 01       	movw	r22, r24
    310c:	cd 01       	movw	r24, r26
    310e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3112:	dc 01       	movw	r26, r24
    3114:	cb 01       	movw	r24, r22
    3116:	9e 83       	std	Y+6, r25	; 0x06
    3118:	8d 83       	std	Y+5, r24	; 0x05
    311a:	0f c0       	rjmp	.+30     	; 0x313a <LCD_VidInit+0x3aa>
    311c:	88 ec       	ldi	r24, 0xC8	; 200
    311e:	90 e0       	ldi	r25, 0x00	; 0
    3120:	9c 83       	std	Y+4, r25	; 0x04
    3122:	8b 83       	std	Y+3, r24	; 0x03
    3124:	8b 81       	ldd	r24, Y+3	; 0x03
    3126:	9c 81       	ldd	r25, Y+4	; 0x04
    3128:	01 97       	sbiw	r24, 0x01	; 1
    312a:	f1 f7       	brne	.-4      	; 0x3128 <LCD_VidInit+0x398>
    312c:	9c 83       	std	Y+4, r25	; 0x04
    312e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3130:	8d 81       	ldd	r24, Y+5	; 0x05
    3132:	9e 81       	ldd	r25, Y+6	; 0x06
    3134:	01 97       	sbiw	r24, 0x01	; 1
    3136:	9e 83       	std	Y+6, r25	; 0x06
    3138:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    313a:	8d 81       	ldd	r24, Y+5	; 0x05
    313c:	9e 81       	ldd	r25, Y+6	; 0x06
    313e:	00 97       	sbiw	r24, 0x00	; 0
    3140:	69 f7       	brne	.-38     	; 0x311c <LCD_VidInit+0x38c>
    3142:	14 c0       	rjmp	.+40     	; 0x316c <LCD_VidInit+0x3dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3144:	6f 81       	ldd	r22, Y+7	; 0x07
    3146:	78 85       	ldd	r23, Y+8	; 0x08
    3148:	89 85       	ldd	r24, Y+9	; 0x09
    314a:	9a 85       	ldd	r25, Y+10	; 0x0a
    314c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3150:	dc 01       	movw	r26, r24
    3152:	cb 01       	movw	r24, r22
    3154:	9e 83       	std	Y+6, r25	; 0x06
    3156:	8d 83       	std	Y+5, r24	; 0x05
    3158:	8d 81       	ldd	r24, Y+5	; 0x05
    315a:	9e 81       	ldd	r25, Y+6	; 0x06
    315c:	9a 83       	std	Y+2, r25	; 0x02
    315e:	89 83       	std	Y+1, r24	; 0x01
    3160:	89 81       	ldd	r24, Y+1	; 0x01
    3162:	9a 81       	ldd	r25, Y+2	; 0x02
    3164:	01 97       	sbiw	r24, 0x01	; 1
    3166:	f1 f7       	brne	.-4      	; 0x3164 <LCD_VidInit+0x3d4>
    3168:	9a 83       	std	Y+2, r25	; 0x02
    316a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2); // wait for LCD to Clear Display

}
    316c:	e8 96       	adiw	r28, 0x38	; 56
    316e:	0f b6       	in	r0, 0x3f	; 63
    3170:	f8 94       	cli
    3172:	de bf       	out	0x3e, r29	; 62
    3174:	0f be       	out	0x3f, r0	; 63
    3176:	cd bf       	out	0x3d, r28	; 61
    3178:	cf 91       	pop	r28
    317a:	df 91       	pop	r29
    317c:	08 95       	ret

0000317e <LCD_VidWriteCommand>:

void LCD_VidWriteCommand(u8 LOC_u8Command)
{
    317e:	df 93       	push	r29
    3180:	cf 93       	push	r28
    3182:	cd b7       	in	r28, 0x3d	; 61
    3184:	de b7       	in	r29, 0x3e	; 62
    3186:	6d 97       	sbiw	r28, 0x1d	; 29
    3188:	0f b6       	in	r0, 0x3f	; 63
    318a:	f8 94       	cli
    318c:	de bf       	out	0x3e, r29	; 62
    318e:	0f be       	out	0x3f, r0	; 63
    3190:	cd bf       	out	0x3d, r28	; 61
    3192:	8d 8f       	std	Y+29, r24	; 0x1d
	DIO_VidSitPintValue(LCD_INIT, LCD_RS, LOW);  //RS = 0   register selection
    3194:	81 e0       	ldi	r24, 0x01	; 1
    3196:	63 e0       	ldi	r22, 0x03	; 3
    3198:	40 e0       	ldi	r20, 0x00	; 0
    319a:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <DIO_VidSitPintValue>
	DIO_VidSitPintValue(LCD_INIT, LCD_RW, LOW);  //RW = 0
    319e:	81 e0       	ldi	r24, 0x01	; 1
    31a0:	64 e0       	ldi	r22, 0x04	; 4
    31a2:	40 e0       	ldi	r20, 0x00	; 0
    31a4:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <DIO_VidSitPintValue>
	DIO_VidSitPortValue(LCD_PORT, LOC_u8Command);  // Write Command
    31a8:	83 e0       	ldi	r24, 0x03	; 3
    31aa:	6d 8d       	ldd	r22, Y+29	; 0x1d
    31ac:	0e 94 93 09 	call	0x1326	; 0x1326 <DIO_VidSitPortValue>
	DIO_VidSitPintValue(LCD_INIT, LCD_EN, HIGH);  //Enable = 1 high rise edge
    31b0:	81 e0       	ldi	r24, 0x01	; 1
    31b2:	65 e0       	ldi	r22, 0x05	; 5
    31b4:	41 e0       	ldi	r20, 0x01	; 1
    31b6:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <DIO_VidSitPintValue>
    31ba:	80 e0       	ldi	r24, 0x00	; 0
    31bc:	90 e0       	ldi	r25, 0x00	; 0
    31be:	a0 e8       	ldi	r26, 0x80	; 128
    31c0:	bf e3       	ldi	r27, 0x3F	; 63
    31c2:	89 8f       	std	Y+25, r24	; 0x19
    31c4:	9a 8f       	std	Y+26, r25	; 0x1a
    31c6:	ab 8f       	std	Y+27, r26	; 0x1b
    31c8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31ca:	69 8d       	ldd	r22, Y+25	; 0x19
    31cc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    31ce:	8b 8d       	ldd	r24, Y+27	; 0x1b
    31d0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    31d2:	20 e0       	ldi	r18, 0x00	; 0
    31d4:	30 e0       	ldi	r19, 0x00	; 0
    31d6:	4a ef       	ldi	r20, 0xFA	; 250
    31d8:	54 e4       	ldi	r21, 0x44	; 68
    31da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31de:	dc 01       	movw	r26, r24
    31e0:	cb 01       	movw	r24, r22
    31e2:	8d 8b       	std	Y+21, r24	; 0x15
    31e4:	9e 8b       	std	Y+22, r25	; 0x16
    31e6:	af 8b       	std	Y+23, r26	; 0x17
    31e8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    31ea:	6d 89       	ldd	r22, Y+21	; 0x15
    31ec:	7e 89       	ldd	r23, Y+22	; 0x16
    31ee:	8f 89       	ldd	r24, Y+23	; 0x17
    31f0:	98 8d       	ldd	r25, Y+24	; 0x18
    31f2:	20 e0       	ldi	r18, 0x00	; 0
    31f4:	30 e0       	ldi	r19, 0x00	; 0
    31f6:	40 e8       	ldi	r20, 0x80	; 128
    31f8:	5f e3       	ldi	r21, 0x3F	; 63
    31fa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    31fe:	88 23       	and	r24, r24
    3200:	2c f4       	brge	.+10     	; 0x320c <LCD_VidWriteCommand+0x8e>
		__ticks = 1;
    3202:	81 e0       	ldi	r24, 0x01	; 1
    3204:	90 e0       	ldi	r25, 0x00	; 0
    3206:	9c 8b       	std	Y+20, r25	; 0x14
    3208:	8b 8b       	std	Y+19, r24	; 0x13
    320a:	3f c0       	rjmp	.+126    	; 0x328a <LCD_VidWriteCommand+0x10c>
	else if (__tmp > 65535)
    320c:	6d 89       	ldd	r22, Y+21	; 0x15
    320e:	7e 89       	ldd	r23, Y+22	; 0x16
    3210:	8f 89       	ldd	r24, Y+23	; 0x17
    3212:	98 8d       	ldd	r25, Y+24	; 0x18
    3214:	20 e0       	ldi	r18, 0x00	; 0
    3216:	3f ef       	ldi	r19, 0xFF	; 255
    3218:	4f e7       	ldi	r20, 0x7F	; 127
    321a:	57 e4       	ldi	r21, 0x47	; 71
    321c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3220:	18 16       	cp	r1, r24
    3222:	4c f5       	brge	.+82     	; 0x3276 <LCD_VidWriteCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3224:	69 8d       	ldd	r22, Y+25	; 0x19
    3226:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3228:	8b 8d       	ldd	r24, Y+27	; 0x1b
    322a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    322c:	20 e0       	ldi	r18, 0x00	; 0
    322e:	30 e0       	ldi	r19, 0x00	; 0
    3230:	40 e2       	ldi	r20, 0x20	; 32
    3232:	51 e4       	ldi	r21, 0x41	; 65
    3234:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3238:	dc 01       	movw	r26, r24
    323a:	cb 01       	movw	r24, r22
    323c:	bc 01       	movw	r22, r24
    323e:	cd 01       	movw	r24, r26
    3240:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3244:	dc 01       	movw	r26, r24
    3246:	cb 01       	movw	r24, r22
    3248:	9c 8b       	std	Y+20, r25	; 0x14
    324a:	8b 8b       	std	Y+19, r24	; 0x13
    324c:	0f c0       	rjmp	.+30     	; 0x326c <LCD_VidWriteCommand+0xee>
    324e:	88 ec       	ldi	r24, 0xC8	; 200
    3250:	90 e0       	ldi	r25, 0x00	; 0
    3252:	9a 8b       	std	Y+18, r25	; 0x12
    3254:	89 8b       	std	Y+17, r24	; 0x11
    3256:	89 89       	ldd	r24, Y+17	; 0x11
    3258:	9a 89       	ldd	r25, Y+18	; 0x12
    325a:	01 97       	sbiw	r24, 0x01	; 1
    325c:	f1 f7       	brne	.-4      	; 0x325a <LCD_VidWriteCommand+0xdc>
    325e:	9a 8b       	std	Y+18, r25	; 0x12
    3260:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3262:	8b 89       	ldd	r24, Y+19	; 0x13
    3264:	9c 89       	ldd	r25, Y+20	; 0x14
    3266:	01 97       	sbiw	r24, 0x01	; 1
    3268:	9c 8b       	std	Y+20, r25	; 0x14
    326a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    326c:	8b 89       	ldd	r24, Y+19	; 0x13
    326e:	9c 89       	ldd	r25, Y+20	; 0x14
    3270:	00 97       	sbiw	r24, 0x00	; 0
    3272:	69 f7       	brne	.-38     	; 0x324e <LCD_VidWriteCommand+0xd0>
    3274:	14 c0       	rjmp	.+40     	; 0x329e <LCD_VidWriteCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3276:	6d 89       	ldd	r22, Y+21	; 0x15
    3278:	7e 89       	ldd	r23, Y+22	; 0x16
    327a:	8f 89       	ldd	r24, Y+23	; 0x17
    327c:	98 8d       	ldd	r25, Y+24	; 0x18
    327e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3282:	dc 01       	movw	r26, r24
    3284:	cb 01       	movw	r24, r22
    3286:	9c 8b       	std	Y+20, r25	; 0x14
    3288:	8b 8b       	std	Y+19, r24	; 0x13
    328a:	8b 89       	ldd	r24, Y+19	; 0x13
    328c:	9c 89       	ldd	r25, Y+20	; 0x14
    328e:	98 8b       	std	Y+16, r25	; 0x10
    3290:	8f 87       	std	Y+15, r24	; 0x0f
    3292:	8f 85       	ldd	r24, Y+15	; 0x0f
    3294:	98 89       	ldd	r25, Y+16	; 0x10
    3296:	01 97       	sbiw	r24, 0x01	; 1
    3298:	f1 f7       	brne	.-4      	; 0x3296 <LCD_VidWriteCommand+0x118>
    329a:	98 8b       	std	Y+16, r25	; 0x10
    329c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);	// required by LCD Datasheet
	DIO_VidSitPintValue(LCD_INIT, LCD_EN, LOW);  //Enable = 0  Falling edge
    329e:	81 e0       	ldi	r24, 0x01	; 1
    32a0:	65 e0       	ldi	r22, 0x05	; 5
    32a2:	40 e0       	ldi	r20, 0x00	; 0
    32a4:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <DIO_VidSitPintValue>
    32a8:	80 e0       	ldi	r24, 0x00	; 0
    32aa:	90 e0       	ldi	r25, 0x00	; 0
    32ac:	a0 e8       	ldi	r26, 0x80	; 128
    32ae:	bf e3       	ldi	r27, 0x3F	; 63
    32b0:	8b 87       	std	Y+11, r24	; 0x0b
    32b2:	9c 87       	std	Y+12, r25	; 0x0c
    32b4:	ad 87       	std	Y+13, r26	; 0x0d
    32b6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    32ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    32bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    32be:	9e 85       	ldd	r25, Y+14	; 0x0e
    32c0:	20 e0       	ldi	r18, 0x00	; 0
    32c2:	30 e0       	ldi	r19, 0x00	; 0
    32c4:	4a ef       	ldi	r20, 0xFA	; 250
    32c6:	54 e4       	ldi	r21, 0x44	; 68
    32c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32cc:	dc 01       	movw	r26, r24
    32ce:	cb 01       	movw	r24, r22
    32d0:	8f 83       	std	Y+7, r24	; 0x07
    32d2:	98 87       	std	Y+8, r25	; 0x08
    32d4:	a9 87       	std	Y+9, r26	; 0x09
    32d6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    32d8:	6f 81       	ldd	r22, Y+7	; 0x07
    32da:	78 85       	ldd	r23, Y+8	; 0x08
    32dc:	89 85       	ldd	r24, Y+9	; 0x09
    32de:	9a 85       	ldd	r25, Y+10	; 0x0a
    32e0:	20 e0       	ldi	r18, 0x00	; 0
    32e2:	30 e0       	ldi	r19, 0x00	; 0
    32e4:	40 e8       	ldi	r20, 0x80	; 128
    32e6:	5f e3       	ldi	r21, 0x3F	; 63
    32e8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    32ec:	88 23       	and	r24, r24
    32ee:	2c f4       	brge	.+10     	; 0x32fa <LCD_VidWriteCommand+0x17c>
		__ticks = 1;
    32f0:	81 e0       	ldi	r24, 0x01	; 1
    32f2:	90 e0       	ldi	r25, 0x00	; 0
    32f4:	9e 83       	std	Y+6, r25	; 0x06
    32f6:	8d 83       	std	Y+5, r24	; 0x05
    32f8:	3f c0       	rjmp	.+126    	; 0x3378 <LCD_VidWriteCommand+0x1fa>
	else if (__tmp > 65535)
    32fa:	6f 81       	ldd	r22, Y+7	; 0x07
    32fc:	78 85       	ldd	r23, Y+8	; 0x08
    32fe:	89 85       	ldd	r24, Y+9	; 0x09
    3300:	9a 85       	ldd	r25, Y+10	; 0x0a
    3302:	20 e0       	ldi	r18, 0x00	; 0
    3304:	3f ef       	ldi	r19, 0xFF	; 255
    3306:	4f e7       	ldi	r20, 0x7F	; 127
    3308:	57 e4       	ldi	r21, 0x47	; 71
    330a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    330e:	18 16       	cp	r1, r24
    3310:	4c f5       	brge	.+82     	; 0x3364 <LCD_VidWriteCommand+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3312:	6b 85       	ldd	r22, Y+11	; 0x0b
    3314:	7c 85       	ldd	r23, Y+12	; 0x0c
    3316:	8d 85       	ldd	r24, Y+13	; 0x0d
    3318:	9e 85       	ldd	r25, Y+14	; 0x0e
    331a:	20 e0       	ldi	r18, 0x00	; 0
    331c:	30 e0       	ldi	r19, 0x00	; 0
    331e:	40 e2       	ldi	r20, 0x20	; 32
    3320:	51 e4       	ldi	r21, 0x41	; 65
    3322:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3326:	dc 01       	movw	r26, r24
    3328:	cb 01       	movw	r24, r22
    332a:	bc 01       	movw	r22, r24
    332c:	cd 01       	movw	r24, r26
    332e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3332:	dc 01       	movw	r26, r24
    3334:	cb 01       	movw	r24, r22
    3336:	9e 83       	std	Y+6, r25	; 0x06
    3338:	8d 83       	std	Y+5, r24	; 0x05
    333a:	0f c0       	rjmp	.+30     	; 0x335a <LCD_VidWriteCommand+0x1dc>
    333c:	88 ec       	ldi	r24, 0xC8	; 200
    333e:	90 e0       	ldi	r25, 0x00	; 0
    3340:	9c 83       	std	Y+4, r25	; 0x04
    3342:	8b 83       	std	Y+3, r24	; 0x03
    3344:	8b 81       	ldd	r24, Y+3	; 0x03
    3346:	9c 81       	ldd	r25, Y+4	; 0x04
    3348:	01 97       	sbiw	r24, 0x01	; 1
    334a:	f1 f7       	brne	.-4      	; 0x3348 <LCD_VidWriteCommand+0x1ca>
    334c:	9c 83       	std	Y+4, r25	; 0x04
    334e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3350:	8d 81       	ldd	r24, Y+5	; 0x05
    3352:	9e 81       	ldd	r25, Y+6	; 0x06
    3354:	01 97       	sbiw	r24, 0x01	; 1
    3356:	9e 83       	std	Y+6, r25	; 0x06
    3358:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    335a:	8d 81       	ldd	r24, Y+5	; 0x05
    335c:	9e 81       	ldd	r25, Y+6	; 0x06
    335e:	00 97       	sbiw	r24, 0x00	; 0
    3360:	69 f7       	brne	.-38     	; 0x333c <LCD_VidWriteCommand+0x1be>
    3362:	14 c0       	rjmp	.+40     	; 0x338c <LCD_VidWriteCommand+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3364:	6f 81       	ldd	r22, Y+7	; 0x07
    3366:	78 85       	ldd	r23, Y+8	; 0x08
    3368:	89 85       	ldd	r24, Y+9	; 0x09
    336a:	9a 85       	ldd	r25, Y+10	; 0x0a
    336c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3370:	dc 01       	movw	r26, r24
    3372:	cb 01       	movw	r24, r22
    3374:	9e 83       	std	Y+6, r25	; 0x06
    3376:	8d 83       	std	Y+5, r24	; 0x05
    3378:	8d 81       	ldd	r24, Y+5	; 0x05
    337a:	9e 81       	ldd	r25, Y+6	; 0x06
    337c:	9a 83       	std	Y+2, r25	; 0x02
    337e:	89 83       	std	Y+1, r24	; 0x01
    3380:	89 81       	ldd	r24, Y+1	; 0x01
    3382:	9a 81       	ldd	r25, Y+2	; 0x02
    3384:	01 97       	sbiw	r24, 0x01	; 1
    3386:	f1 f7       	brne	.-4      	; 0x3384 <LCD_VidWriteCommand+0x206>
    3388:	9a 83       	std	Y+2, r25	; 0x02
    338a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); // give the LCD time to wite / display
}
    338c:	6d 96       	adiw	r28, 0x1d	; 29
    338e:	0f b6       	in	r0, 0x3f	; 63
    3390:	f8 94       	cli
    3392:	de bf       	out	0x3e, r29	; 62
    3394:	0f be       	out	0x3f, r0	; 63
    3396:	cd bf       	out	0x3d, r28	; 61
    3398:	cf 91       	pop	r28
    339a:	df 91       	pop	r29
    339c:	08 95       	ret

0000339e <LCD_VidWriteData>:

void LCD_VidWriteData(u8 LOC_u8Data)
{
    339e:	df 93       	push	r29
    33a0:	cf 93       	push	r28
    33a2:	cd b7       	in	r28, 0x3d	; 61
    33a4:	de b7       	in	r29, 0x3e	; 62
    33a6:	6d 97       	sbiw	r28, 0x1d	; 29
    33a8:	0f b6       	in	r0, 0x3f	; 63
    33aa:	f8 94       	cli
    33ac:	de bf       	out	0x3e, r29	; 62
    33ae:	0f be       	out	0x3f, r0	; 63
    33b0:	cd bf       	out	0x3d, r28	; 61
    33b2:	8d 8f       	std	Y+29, r24	; 0x1d
	DIO_VidSitPintValue(LCD_INIT, LCD_RS, HIGH);  //RS = 0
    33b4:	81 e0       	ldi	r24, 0x01	; 1
    33b6:	63 e0       	ldi	r22, 0x03	; 3
    33b8:	41 e0       	ldi	r20, 0x01	; 1
    33ba:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <DIO_VidSitPintValue>
	DIO_VidSitPintValue(LCD_INIT, LCD_RW, LOW);  //RW = 0
    33be:	81 e0       	ldi	r24, 0x01	; 1
    33c0:	64 e0       	ldi	r22, 0x04	; 4
    33c2:	40 e0       	ldi	r20, 0x00	; 0
    33c4:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <DIO_VidSitPintValue>
	DIO_VidSitPortValue(LCD_PORT, LOC_u8Data);  // Write data
    33c8:	83 e0       	ldi	r24, 0x03	; 3
    33ca:	6d 8d       	ldd	r22, Y+29	; 0x1d
    33cc:	0e 94 93 09 	call	0x1326	; 0x1326 <DIO_VidSitPortValue>
	DIO_VidSitPintValue(LCD_INIT, LCD_EN, HIGH);  //Enable = 1 high rise edge
    33d0:	81 e0       	ldi	r24, 0x01	; 1
    33d2:	65 e0       	ldi	r22, 0x05	; 5
    33d4:	41 e0       	ldi	r20, 0x01	; 1
    33d6:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <DIO_VidSitPintValue>
    33da:	80 e0       	ldi	r24, 0x00	; 0
    33dc:	90 e0       	ldi	r25, 0x00	; 0
    33de:	a0 e8       	ldi	r26, 0x80	; 128
    33e0:	bf e3       	ldi	r27, 0x3F	; 63
    33e2:	89 8f       	std	Y+25, r24	; 0x19
    33e4:	9a 8f       	std	Y+26, r25	; 0x1a
    33e6:	ab 8f       	std	Y+27, r26	; 0x1b
    33e8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33ea:	69 8d       	ldd	r22, Y+25	; 0x19
    33ec:	7a 8d       	ldd	r23, Y+26	; 0x1a
    33ee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    33f0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    33f2:	20 e0       	ldi	r18, 0x00	; 0
    33f4:	30 e0       	ldi	r19, 0x00	; 0
    33f6:	4a ef       	ldi	r20, 0xFA	; 250
    33f8:	54 e4       	ldi	r21, 0x44	; 68
    33fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33fe:	dc 01       	movw	r26, r24
    3400:	cb 01       	movw	r24, r22
    3402:	8d 8b       	std	Y+21, r24	; 0x15
    3404:	9e 8b       	std	Y+22, r25	; 0x16
    3406:	af 8b       	std	Y+23, r26	; 0x17
    3408:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    340a:	6d 89       	ldd	r22, Y+21	; 0x15
    340c:	7e 89       	ldd	r23, Y+22	; 0x16
    340e:	8f 89       	ldd	r24, Y+23	; 0x17
    3410:	98 8d       	ldd	r25, Y+24	; 0x18
    3412:	20 e0       	ldi	r18, 0x00	; 0
    3414:	30 e0       	ldi	r19, 0x00	; 0
    3416:	40 e8       	ldi	r20, 0x80	; 128
    3418:	5f e3       	ldi	r21, 0x3F	; 63
    341a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    341e:	88 23       	and	r24, r24
    3420:	2c f4       	brge	.+10     	; 0x342c <LCD_VidWriteData+0x8e>
		__ticks = 1;
    3422:	81 e0       	ldi	r24, 0x01	; 1
    3424:	90 e0       	ldi	r25, 0x00	; 0
    3426:	9c 8b       	std	Y+20, r25	; 0x14
    3428:	8b 8b       	std	Y+19, r24	; 0x13
    342a:	3f c0       	rjmp	.+126    	; 0x34aa <LCD_VidWriteData+0x10c>
	else if (__tmp > 65535)
    342c:	6d 89       	ldd	r22, Y+21	; 0x15
    342e:	7e 89       	ldd	r23, Y+22	; 0x16
    3430:	8f 89       	ldd	r24, Y+23	; 0x17
    3432:	98 8d       	ldd	r25, Y+24	; 0x18
    3434:	20 e0       	ldi	r18, 0x00	; 0
    3436:	3f ef       	ldi	r19, 0xFF	; 255
    3438:	4f e7       	ldi	r20, 0x7F	; 127
    343a:	57 e4       	ldi	r21, 0x47	; 71
    343c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3440:	18 16       	cp	r1, r24
    3442:	4c f5       	brge	.+82     	; 0x3496 <LCD_VidWriteData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3444:	69 8d       	ldd	r22, Y+25	; 0x19
    3446:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3448:	8b 8d       	ldd	r24, Y+27	; 0x1b
    344a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    344c:	20 e0       	ldi	r18, 0x00	; 0
    344e:	30 e0       	ldi	r19, 0x00	; 0
    3450:	40 e2       	ldi	r20, 0x20	; 32
    3452:	51 e4       	ldi	r21, 0x41	; 65
    3454:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3458:	dc 01       	movw	r26, r24
    345a:	cb 01       	movw	r24, r22
    345c:	bc 01       	movw	r22, r24
    345e:	cd 01       	movw	r24, r26
    3460:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3464:	dc 01       	movw	r26, r24
    3466:	cb 01       	movw	r24, r22
    3468:	9c 8b       	std	Y+20, r25	; 0x14
    346a:	8b 8b       	std	Y+19, r24	; 0x13
    346c:	0f c0       	rjmp	.+30     	; 0x348c <LCD_VidWriteData+0xee>
    346e:	88 ec       	ldi	r24, 0xC8	; 200
    3470:	90 e0       	ldi	r25, 0x00	; 0
    3472:	9a 8b       	std	Y+18, r25	; 0x12
    3474:	89 8b       	std	Y+17, r24	; 0x11
    3476:	89 89       	ldd	r24, Y+17	; 0x11
    3478:	9a 89       	ldd	r25, Y+18	; 0x12
    347a:	01 97       	sbiw	r24, 0x01	; 1
    347c:	f1 f7       	brne	.-4      	; 0x347a <LCD_VidWriteData+0xdc>
    347e:	9a 8b       	std	Y+18, r25	; 0x12
    3480:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3482:	8b 89       	ldd	r24, Y+19	; 0x13
    3484:	9c 89       	ldd	r25, Y+20	; 0x14
    3486:	01 97       	sbiw	r24, 0x01	; 1
    3488:	9c 8b       	std	Y+20, r25	; 0x14
    348a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    348c:	8b 89       	ldd	r24, Y+19	; 0x13
    348e:	9c 89       	ldd	r25, Y+20	; 0x14
    3490:	00 97       	sbiw	r24, 0x00	; 0
    3492:	69 f7       	brne	.-38     	; 0x346e <LCD_VidWriteData+0xd0>
    3494:	14 c0       	rjmp	.+40     	; 0x34be <LCD_VidWriteData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3496:	6d 89       	ldd	r22, Y+21	; 0x15
    3498:	7e 89       	ldd	r23, Y+22	; 0x16
    349a:	8f 89       	ldd	r24, Y+23	; 0x17
    349c:	98 8d       	ldd	r25, Y+24	; 0x18
    349e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34a2:	dc 01       	movw	r26, r24
    34a4:	cb 01       	movw	r24, r22
    34a6:	9c 8b       	std	Y+20, r25	; 0x14
    34a8:	8b 8b       	std	Y+19, r24	; 0x13
    34aa:	8b 89       	ldd	r24, Y+19	; 0x13
    34ac:	9c 89       	ldd	r25, Y+20	; 0x14
    34ae:	98 8b       	std	Y+16, r25	; 0x10
    34b0:	8f 87       	std	Y+15, r24	; 0x0f
    34b2:	8f 85       	ldd	r24, Y+15	; 0x0f
    34b4:	98 89       	ldd	r25, Y+16	; 0x10
    34b6:	01 97       	sbiw	r24, 0x01	; 1
    34b8:	f1 f7       	brne	.-4      	; 0x34b6 <LCD_VidWriteData+0x118>
    34ba:	98 8b       	std	Y+16, r25	; 0x10
    34bc:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);	// required by LCD Datasheet
	DIO_VidSitPintValue(LCD_INIT, LCD_EN, LOW);  //Enable = 0  Falling edge
    34be:	81 e0       	ldi	r24, 0x01	; 1
    34c0:	65 e0       	ldi	r22, 0x05	; 5
    34c2:	40 e0       	ldi	r20, 0x00	; 0
    34c4:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <DIO_VidSitPintValue>
    34c8:	80 e0       	ldi	r24, 0x00	; 0
    34ca:	90 e0       	ldi	r25, 0x00	; 0
    34cc:	a0 e8       	ldi	r26, 0x80	; 128
    34ce:	bf e3       	ldi	r27, 0x3F	; 63
    34d0:	8b 87       	std	Y+11, r24	; 0x0b
    34d2:	9c 87       	std	Y+12, r25	; 0x0c
    34d4:	ad 87       	std	Y+13, r26	; 0x0d
    34d6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    34da:	7c 85       	ldd	r23, Y+12	; 0x0c
    34dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    34de:	9e 85       	ldd	r25, Y+14	; 0x0e
    34e0:	20 e0       	ldi	r18, 0x00	; 0
    34e2:	30 e0       	ldi	r19, 0x00	; 0
    34e4:	4a ef       	ldi	r20, 0xFA	; 250
    34e6:	54 e4       	ldi	r21, 0x44	; 68
    34e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34ec:	dc 01       	movw	r26, r24
    34ee:	cb 01       	movw	r24, r22
    34f0:	8f 83       	std	Y+7, r24	; 0x07
    34f2:	98 87       	std	Y+8, r25	; 0x08
    34f4:	a9 87       	std	Y+9, r26	; 0x09
    34f6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    34f8:	6f 81       	ldd	r22, Y+7	; 0x07
    34fa:	78 85       	ldd	r23, Y+8	; 0x08
    34fc:	89 85       	ldd	r24, Y+9	; 0x09
    34fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    3500:	20 e0       	ldi	r18, 0x00	; 0
    3502:	30 e0       	ldi	r19, 0x00	; 0
    3504:	40 e8       	ldi	r20, 0x80	; 128
    3506:	5f e3       	ldi	r21, 0x3F	; 63
    3508:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    350c:	88 23       	and	r24, r24
    350e:	2c f4       	brge	.+10     	; 0x351a <LCD_VidWriteData+0x17c>
		__ticks = 1;
    3510:	81 e0       	ldi	r24, 0x01	; 1
    3512:	90 e0       	ldi	r25, 0x00	; 0
    3514:	9e 83       	std	Y+6, r25	; 0x06
    3516:	8d 83       	std	Y+5, r24	; 0x05
    3518:	3f c0       	rjmp	.+126    	; 0x3598 <LCD_VidWriteData+0x1fa>
	else if (__tmp > 65535)
    351a:	6f 81       	ldd	r22, Y+7	; 0x07
    351c:	78 85       	ldd	r23, Y+8	; 0x08
    351e:	89 85       	ldd	r24, Y+9	; 0x09
    3520:	9a 85       	ldd	r25, Y+10	; 0x0a
    3522:	20 e0       	ldi	r18, 0x00	; 0
    3524:	3f ef       	ldi	r19, 0xFF	; 255
    3526:	4f e7       	ldi	r20, 0x7F	; 127
    3528:	57 e4       	ldi	r21, 0x47	; 71
    352a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    352e:	18 16       	cp	r1, r24
    3530:	4c f5       	brge	.+82     	; 0x3584 <LCD_VidWriteData+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3532:	6b 85       	ldd	r22, Y+11	; 0x0b
    3534:	7c 85       	ldd	r23, Y+12	; 0x0c
    3536:	8d 85       	ldd	r24, Y+13	; 0x0d
    3538:	9e 85       	ldd	r25, Y+14	; 0x0e
    353a:	20 e0       	ldi	r18, 0x00	; 0
    353c:	30 e0       	ldi	r19, 0x00	; 0
    353e:	40 e2       	ldi	r20, 0x20	; 32
    3540:	51 e4       	ldi	r21, 0x41	; 65
    3542:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3546:	dc 01       	movw	r26, r24
    3548:	cb 01       	movw	r24, r22
    354a:	bc 01       	movw	r22, r24
    354c:	cd 01       	movw	r24, r26
    354e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3552:	dc 01       	movw	r26, r24
    3554:	cb 01       	movw	r24, r22
    3556:	9e 83       	std	Y+6, r25	; 0x06
    3558:	8d 83       	std	Y+5, r24	; 0x05
    355a:	0f c0       	rjmp	.+30     	; 0x357a <LCD_VidWriteData+0x1dc>
    355c:	88 ec       	ldi	r24, 0xC8	; 200
    355e:	90 e0       	ldi	r25, 0x00	; 0
    3560:	9c 83       	std	Y+4, r25	; 0x04
    3562:	8b 83       	std	Y+3, r24	; 0x03
    3564:	8b 81       	ldd	r24, Y+3	; 0x03
    3566:	9c 81       	ldd	r25, Y+4	; 0x04
    3568:	01 97       	sbiw	r24, 0x01	; 1
    356a:	f1 f7       	brne	.-4      	; 0x3568 <LCD_VidWriteData+0x1ca>
    356c:	9c 83       	std	Y+4, r25	; 0x04
    356e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3570:	8d 81       	ldd	r24, Y+5	; 0x05
    3572:	9e 81       	ldd	r25, Y+6	; 0x06
    3574:	01 97       	sbiw	r24, 0x01	; 1
    3576:	9e 83       	std	Y+6, r25	; 0x06
    3578:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    357a:	8d 81       	ldd	r24, Y+5	; 0x05
    357c:	9e 81       	ldd	r25, Y+6	; 0x06
    357e:	00 97       	sbiw	r24, 0x00	; 0
    3580:	69 f7       	brne	.-38     	; 0x355c <LCD_VidWriteData+0x1be>
    3582:	14 c0       	rjmp	.+40     	; 0x35ac <LCD_VidWriteData+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3584:	6f 81       	ldd	r22, Y+7	; 0x07
    3586:	78 85       	ldd	r23, Y+8	; 0x08
    3588:	89 85       	ldd	r24, Y+9	; 0x09
    358a:	9a 85       	ldd	r25, Y+10	; 0x0a
    358c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3590:	dc 01       	movw	r26, r24
    3592:	cb 01       	movw	r24, r22
    3594:	9e 83       	std	Y+6, r25	; 0x06
    3596:	8d 83       	std	Y+5, r24	; 0x05
    3598:	8d 81       	ldd	r24, Y+5	; 0x05
    359a:	9e 81       	ldd	r25, Y+6	; 0x06
    359c:	9a 83       	std	Y+2, r25	; 0x02
    359e:	89 83       	std	Y+1, r24	; 0x01
    35a0:	89 81       	ldd	r24, Y+1	; 0x01
    35a2:	9a 81       	ldd	r25, Y+2	; 0x02
    35a4:	01 97       	sbiw	r24, 0x01	; 1
    35a6:	f1 f7       	brne	.-4      	; 0x35a4 <LCD_VidWriteData+0x206>
    35a8:	9a 83       	std	Y+2, r25	; 0x02
    35aa:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); // give the LCD time to wite / display

}
    35ac:	6d 96       	adiw	r28, 0x1d	; 29
    35ae:	0f b6       	in	r0, 0x3f	; 63
    35b0:	f8 94       	cli
    35b2:	de bf       	out	0x3e, r29	; 62
    35b4:	0f be       	out	0x3f, r0	; 63
    35b6:	cd bf       	out	0x3d, r28	; 61
    35b8:	cf 91       	pop	r28
    35ba:	df 91       	pop	r29
    35bc:	08 95       	ret

000035be <LCD_VidString>:

void LCD_VidString(u8* LOC_USER)
{
    35be:	df 93       	push	r29
    35c0:	cf 93       	push	r28
    35c2:	cd b7       	in	r28, 0x3d	; 61
    35c4:	de b7       	in	r29, 0x3e	; 62
    35c6:	61 97       	sbiw	r28, 0x11	; 17
    35c8:	0f b6       	in	r0, 0x3f	; 63
    35ca:	f8 94       	cli
    35cc:	de bf       	out	0x3e, r29	; 62
    35ce:	0f be       	out	0x3f, r0	; 63
    35d0:	cd bf       	out	0x3d, r28	; 61
    35d2:	99 8b       	std	Y+17, r25	; 0x11
    35d4:	88 8b       	std	Y+16, r24	; 0x10
	u8 i=0;
    35d6:	1f 86       	std	Y+15, r1	; 0x0f
    35d8:	80 c0       	rjmp	.+256    	; 0x36da <LCD_VidString+0x11c>
	while(LOC_USER[i] !='\0')
	{
		LCD_VidWriteData(LOC_USER[i]);
    35da:	8f 85       	ldd	r24, Y+15	; 0x0f
    35dc:	28 2f       	mov	r18, r24
    35de:	30 e0       	ldi	r19, 0x00	; 0
    35e0:	88 89       	ldd	r24, Y+16	; 0x10
    35e2:	99 89       	ldd	r25, Y+17	; 0x11
    35e4:	fc 01       	movw	r30, r24
    35e6:	e2 0f       	add	r30, r18
    35e8:	f3 1f       	adc	r31, r19
    35ea:	80 81       	ld	r24, Z
    35ec:	0e 94 cf 19 	call	0x339e	; 0x339e <LCD_VidWriteData>
    35f0:	80 e0       	ldi	r24, 0x00	; 0
    35f2:	90 e0       	ldi	r25, 0x00	; 0
    35f4:	a0 e0       	ldi	r26, 0x00	; 0
    35f6:	b0 e4       	ldi	r27, 0x40	; 64
    35f8:	8b 87       	std	Y+11, r24	; 0x0b
    35fa:	9c 87       	std	Y+12, r25	; 0x0c
    35fc:	ad 87       	std	Y+13, r26	; 0x0d
    35fe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3600:	6b 85       	ldd	r22, Y+11	; 0x0b
    3602:	7c 85       	ldd	r23, Y+12	; 0x0c
    3604:	8d 85       	ldd	r24, Y+13	; 0x0d
    3606:	9e 85       	ldd	r25, Y+14	; 0x0e
    3608:	20 e0       	ldi	r18, 0x00	; 0
    360a:	30 e0       	ldi	r19, 0x00	; 0
    360c:	4a ef       	ldi	r20, 0xFA	; 250
    360e:	54 e4       	ldi	r21, 0x44	; 68
    3610:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3614:	dc 01       	movw	r26, r24
    3616:	cb 01       	movw	r24, r22
    3618:	8f 83       	std	Y+7, r24	; 0x07
    361a:	98 87       	std	Y+8, r25	; 0x08
    361c:	a9 87       	std	Y+9, r26	; 0x09
    361e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3620:	6f 81       	ldd	r22, Y+7	; 0x07
    3622:	78 85       	ldd	r23, Y+8	; 0x08
    3624:	89 85       	ldd	r24, Y+9	; 0x09
    3626:	9a 85       	ldd	r25, Y+10	; 0x0a
    3628:	20 e0       	ldi	r18, 0x00	; 0
    362a:	30 e0       	ldi	r19, 0x00	; 0
    362c:	40 e8       	ldi	r20, 0x80	; 128
    362e:	5f e3       	ldi	r21, 0x3F	; 63
    3630:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3634:	88 23       	and	r24, r24
    3636:	2c f4       	brge	.+10     	; 0x3642 <LCD_VidString+0x84>
		__ticks = 1;
    3638:	81 e0       	ldi	r24, 0x01	; 1
    363a:	90 e0       	ldi	r25, 0x00	; 0
    363c:	9e 83       	std	Y+6, r25	; 0x06
    363e:	8d 83       	std	Y+5, r24	; 0x05
    3640:	3f c0       	rjmp	.+126    	; 0x36c0 <LCD_VidString+0x102>
	else if (__tmp > 65535)
    3642:	6f 81       	ldd	r22, Y+7	; 0x07
    3644:	78 85       	ldd	r23, Y+8	; 0x08
    3646:	89 85       	ldd	r24, Y+9	; 0x09
    3648:	9a 85       	ldd	r25, Y+10	; 0x0a
    364a:	20 e0       	ldi	r18, 0x00	; 0
    364c:	3f ef       	ldi	r19, 0xFF	; 255
    364e:	4f e7       	ldi	r20, 0x7F	; 127
    3650:	57 e4       	ldi	r21, 0x47	; 71
    3652:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3656:	18 16       	cp	r1, r24
    3658:	4c f5       	brge	.+82     	; 0x36ac <LCD_VidString+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    365a:	6b 85       	ldd	r22, Y+11	; 0x0b
    365c:	7c 85       	ldd	r23, Y+12	; 0x0c
    365e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3660:	9e 85       	ldd	r25, Y+14	; 0x0e
    3662:	20 e0       	ldi	r18, 0x00	; 0
    3664:	30 e0       	ldi	r19, 0x00	; 0
    3666:	40 e2       	ldi	r20, 0x20	; 32
    3668:	51 e4       	ldi	r21, 0x41	; 65
    366a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    366e:	dc 01       	movw	r26, r24
    3670:	cb 01       	movw	r24, r22
    3672:	bc 01       	movw	r22, r24
    3674:	cd 01       	movw	r24, r26
    3676:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    367a:	dc 01       	movw	r26, r24
    367c:	cb 01       	movw	r24, r22
    367e:	9e 83       	std	Y+6, r25	; 0x06
    3680:	8d 83       	std	Y+5, r24	; 0x05
    3682:	0f c0       	rjmp	.+30     	; 0x36a2 <LCD_VidString+0xe4>
    3684:	88 ec       	ldi	r24, 0xC8	; 200
    3686:	90 e0       	ldi	r25, 0x00	; 0
    3688:	9c 83       	std	Y+4, r25	; 0x04
    368a:	8b 83       	std	Y+3, r24	; 0x03
    368c:	8b 81       	ldd	r24, Y+3	; 0x03
    368e:	9c 81       	ldd	r25, Y+4	; 0x04
    3690:	01 97       	sbiw	r24, 0x01	; 1
    3692:	f1 f7       	brne	.-4      	; 0x3690 <LCD_VidString+0xd2>
    3694:	9c 83       	std	Y+4, r25	; 0x04
    3696:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3698:	8d 81       	ldd	r24, Y+5	; 0x05
    369a:	9e 81       	ldd	r25, Y+6	; 0x06
    369c:	01 97       	sbiw	r24, 0x01	; 1
    369e:	9e 83       	std	Y+6, r25	; 0x06
    36a0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36a2:	8d 81       	ldd	r24, Y+5	; 0x05
    36a4:	9e 81       	ldd	r25, Y+6	; 0x06
    36a6:	00 97       	sbiw	r24, 0x00	; 0
    36a8:	69 f7       	brne	.-38     	; 0x3684 <LCD_VidString+0xc6>
    36aa:	14 c0       	rjmp	.+40     	; 0x36d4 <LCD_VidString+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36ac:	6f 81       	ldd	r22, Y+7	; 0x07
    36ae:	78 85       	ldd	r23, Y+8	; 0x08
    36b0:	89 85       	ldd	r24, Y+9	; 0x09
    36b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    36b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36b8:	dc 01       	movw	r26, r24
    36ba:	cb 01       	movw	r24, r22
    36bc:	9e 83       	std	Y+6, r25	; 0x06
    36be:	8d 83       	std	Y+5, r24	; 0x05
    36c0:	8d 81       	ldd	r24, Y+5	; 0x05
    36c2:	9e 81       	ldd	r25, Y+6	; 0x06
    36c4:	9a 83       	std	Y+2, r25	; 0x02
    36c6:	89 83       	std	Y+1, r24	; 0x01
    36c8:	89 81       	ldd	r24, Y+1	; 0x01
    36ca:	9a 81       	ldd	r25, Y+2	; 0x02
    36cc:	01 97       	sbiw	r24, 0x01	; 1
    36ce:	f1 f7       	brne	.-4      	; 0x36cc <LCD_VidString+0x10e>
    36d0:	9a 83       	std	Y+2, r25	; 0x02
    36d2:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2);
		i++;
    36d4:	8f 85       	ldd	r24, Y+15	; 0x0f
    36d6:	8f 5f       	subi	r24, 0xFF	; 255
    36d8:	8f 87       	std	Y+15, r24	; 0x0f
}

void LCD_VidString(u8* LOC_USER)
{
	u8 i=0;
	while(LOC_USER[i] !='\0')
    36da:	8f 85       	ldd	r24, Y+15	; 0x0f
    36dc:	28 2f       	mov	r18, r24
    36de:	30 e0       	ldi	r19, 0x00	; 0
    36e0:	88 89       	ldd	r24, Y+16	; 0x10
    36e2:	99 89       	ldd	r25, Y+17	; 0x11
    36e4:	fc 01       	movw	r30, r24
    36e6:	e2 0f       	add	r30, r18
    36e8:	f3 1f       	adc	r31, r19
    36ea:	80 81       	ld	r24, Z
    36ec:	88 23       	and	r24, r24
    36ee:	09 f0       	breq	.+2      	; 0x36f2 <LCD_VidString+0x134>
    36f0:	74 cf       	rjmp	.-280    	; 0x35da <LCD_VidString+0x1c>
	{
		LCD_VidWriteData(LOC_USER[i]);
		_delay_ms(2);
		i++;
	}
}
    36f2:	61 96       	adiw	r28, 0x11	; 17
    36f4:	0f b6       	in	r0, 0x3f	; 63
    36f6:	f8 94       	cli
    36f8:	de bf       	out	0x3e, r29	; 62
    36fa:	0f be       	out	0x3f, r0	; 63
    36fc:	cd bf       	out	0x3d, r28	; 61
    36fe:	cf 91       	pop	r28
    3700:	df 91       	pop	r29
    3702:	08 95       	ret

00003704 <LCD_VidDispNumber>:

void LCD_VidDispNumber(u32 number)
{
    3704:	df 93       	push	r29
    3706:	cf 93       	push	r28
    3708:	cd b7       	in	r28, 0x3d	; 61
    370a:	de b7       	in	r29, 0x3e	; 62
    370c:	68 97       	sbiw	r28, 0x18	; 24
    370e:	0f b6       	in	r0, 0x3f	; 63
    3710:	f8 94       	cli
    3712:	de bf       	out	0x3e, r29	; 62
    3714:	0f be       	out	0x3f, r0	; 63
    3716:	cd bf       	out	0x3d, r28	; 61
    3718:	6d 8b       	std	Y+21, r22	; 0x15
    371a:	7e 8b       	std	Y+22, r23	; 0x16
    371c:	8f 8b       	std	Y+23, r24	; 0x17
    371e:	98 8f       	std	Y+24, r25	; 0x18
		digit=revesed%10;
		LCD_VidWriteData(digit+48);
		revesed=revesed/10;
	}
*/
	u32 digit=0;
    3720:	1f 82       	std	Y+7, r1	; 0x07
    3722:	18 86       	std	Y+8, r1	; 0x08
    3724:	19 86       	std	Y+9, r1	; 0x09
    3726:	1a 86       	std	Y+10, r1	; 0x0a
	u16 i=0;
    3728:	1e 82       	std	Y+6, r1	; 0x06
    372a:	1d 82       	std	Y+5, r1	; 0x05
	u32 f=0;
    372c:	19 82       	std	Y+1, r1	; 0x01
    372e:	1a 82       	std	Y+2, r1	; 0x02
    3730:	1b 82       	std	Y+3, r1	; 0x03
    3732:	1c 82       	std	Y+4, r1	; 0x04
    3734:	45 c0       	rjmp	.+138    	; 0x37c0 <LCD_VidDispNumber+0xbc>
	u8 number_holder[10];

	while(number>0)
	{
		f=number%10;
    3736:	8d 89       	ldd	r24, Y+21	; 0x15
    3738:	9e 89       	ldd	r25, Y+22	; 0x16
    373a:	af 89       	ldd	r26, Y+23	; 0x17
    373c:	b8 8d       	ldd	r27, Y+24	; 0x18
    373e:	2a e0       	ldi	r18, 0x0A	; 10
    3740:	30 e0       	ldi	r19, 0x00	; 0
    3742:	40 e0       	ldi	r20, 0x00	; 0
    3744:	50 e0       	ldi	r21, 0x00	; 0
    3746:	bc 01       	movw	r22, r24
    3748:	cd 01       	movw	r24, r26
    374a:	0e 94 85 38 	call	0x710a	; 0x710a <__udivmodsi4>
    374e:	dc 01       	movw	r26, r24
    3750:	cb 01       	movw	r24, r22
    3752:	89 83       	std	Y+1, r24	; 0x01
    3754:	9a 83       	std	Y+2, r25	; 0x02
    3756:	ab 83       	std	Y+3, r26	; 0x03
    3758:	bc 83       	std	Y+4, r27	; 0x04
		number_holder[i]=f;
    375a:	2d 81       	ldd	r18, Y+5	; 0x05
    375c:	3e 81       	ldd	r19, Y+6	; 0x06
    375e:	49 81       	ldd	r20, Y+1	; 0x01
    3760:	ce 01       	movw	r24, r28
    3762:	0b 96       	adiw	r24, 0x0b	; 11
    3764:	fc 01       	movw	r30, r24
    3766:	e2 0f       	add	r30, r18
    3768:	f3 1f       	adc	r31, r19
    376a:	40 83       	st	Z, r20
		number=number/10;
    376c:	8d 89       	ldd	r24, Y+21	; 0x15
    376e:	9e 89       	ldd	r25, Y+22	; 0x16
    3770:	af 89       	ldd	r26, Y+23	; 0x17
    3772:	b8 8d       	ldd	r27, Y+24	; 0x18
    3774:	2a e0       	ldi	r18, 0x0A	; 10
    3776:	30 e0       	ldi	r19, 0x00	; 0
    3778:	40 e0       	ldi	r20, 0x00	; 0
    377a:	50 e0       	ldi	r21, 0x00	; 0
    377c:	bc 01       	movw	r22, r24
    377e:	cd 01       	movw	r24, r26
    3780:	0e 94 85 38 	call	0x710a	; 0x710a <__udivmodsi4>
    3784:	da 01       	movw	r26, r20
    3786:	c9 01       	movw	r24, r18
    3788:	8d 8b       	std	Y+21, r24	; 0x15
    378a:	9e 8b       	std	Y+22, r25	; 0x16
    378c:	af 8b       	std	Y+23, r26	; 0x17
    378e:	b8 8f       	std	Y+24, r27	; 0x18
		i++;
    3790:	8d 81       	ldd	r24, Y+5	; 0x05
    3792:	9e 81       	ldd	r25, Y+6	; 0x06
    3794:	01 96       	adiw	r24, 0x01	; 1
    3796:	9e 83       	std	Y+6, r25	; 0x06
    3798:	8d 83       	std	Y+5, r24	; 0x05
		digit++;
    379a:	8f 81       	ldd	r24, Y+7	; 0x07
    379c:	98 85       	ldd	r25, Y+8	; 0x08
    379e:	a9 85       	ldd	r26, Y+9	; 0x09
    37a0:	ba 85       	ldd	r27, Y+10	; 0x0a
    37a2:	01 96       	adiw	r24, 0x01	; 1
    37a4:	a1 1d       	adc	r26, r1
    37a6:	b1 1d       	adc	r27, r1
    37a8:	8f 83       	std	Y+7, r24	; 0x07
    37aa:	98 87       	std	Y+8, r25	; 0x08
    37ac:	a9 87       	std	Y+9, r26	; 0x09
    37ae:	ba 87       	std	Y+10, r27	; 0x0a
		if(number==0)
    37b0:	8d 89       	ldd	r24, Y+21	; 0x15
    37b2:	9e 89       	ldd	r25, Y+22	; 0x16
    37b4:	af 89       	ldd	r26, Y+23	; 0x17
    37b6:	b8 8d       	ldd	r27, Y+24	; 0x18
    37b8:	00 97       	sbiw	r24, 0x00	; 0
    37ba:	a1 05       	cpc	r26, r1
    37bc:	b1 05       	cpc	r27, r1
    37be:	49 f0       	breq	.+18     	; 0x37d2 <LCD_VidDispNumber+0xce>
	u32 digit=0;
	u16 i=0;
	u32 f=0;
	u8 number_holder[10];

	while(number>0)
    37c0:	8d 89       	ldd	r24, Y+21	; 0x15
    37c2:	9e 89       	ldd	r25, Y+22	; 0x16
    37c4:	af 89       	ldd	r26, Y+23	; 0x17
    37c6:	b8 8d       	ldd	r27, Y+24	; 0x18
    37c8:	00 97       	sbiw	r24, 0x00	; 0
    37ca:	a1 05       	cpc	r26, r1
    37cc:	b1 05       	cpc	r27, r1
    37ce:	09 f0       	breq	.+2      	; 0x37d2 <LCD_VidDispNumber+0xce>
    37d0:	b2 cf       	rjmp	.-156    	; 0x3736 <LCD_VidDispNumber+0x32>
		i++;
		digit++;
		if(number==0)
		{break;}
	}
	for(i=digit;i>0;i--)
    37d2:	8f 81       	ldd	r24, Y+7	; 0x07
    37d4:	98 85       	ldd	r25, Y+8	; 0x08
    37d6:	9e 83       	std	Y+6, r25	; 0x06
    37d8:	8d 83       	std	Y+5, r24	; 0x05
    37da:	13 c0       	rjmp	.+38     	; 0x3802 <LCD_VidDispNumber+0xfe>
	{
		LCD_VidWriteData(number_holder[i-1]+48);
    37dc:	8d 81       	ldd	r24, Y+5	; 0x05
    37de:	9e 81       	ldd	r25, Y+6	; 0x06
    37e0:	9c 01       	movw	r18, r24
    37e2:	21 50       	subi	r18, 0x01	; 1
    37e4:	30 40       	sbci	r19, 0x00	; 0
    37e6:	ce 01       	movw	r24, r28
    37e8:	0b 96       	adiw	r24, 0x0b	; 11
    37ea:	fc 01       	movw	r30, r24
    37ec:	e2 0f       	add	r30, r18
    37ee:	f3 1f       	adc	r31, r19
    37f0:	80 81       	ld	r24, Z
    37f2:	80 5d       	subi	r24, 0xD0	; 208
    37f4:	0e 94 cf 19 	call	0x339e	; 0x339e <LCD_VidWriteData>
		i++;
		digit++;
		if(number==0)
		{break;}
	}
	for(i=digit;i>0;i--)
    37f8:	8d 81       	ldd	r24, Y+5	; 0x05
    37fa:	9e 81       	ldd	r25, Y+6	; 0x06
    37fc:	01 97       	sbiw	r24, 0x01	; 1
    37fe:	9e 83       	std	Y+6, r25	; 0x06
    3800:	8d 83       	std	Y+5, r24	; 0x05
    3802:	8d 81       	ldd	r24, Y+5	; 0x05
    3804:	9e 81       	ldd	r25, Y+6	; 0x06
    3806:	00 97       	sbiw	r24, 0x00	; 0
    3808:	49 f7       	brne	.-46     	; 0x37dc <LCD_VidDispNumber+0xd8>
		LCD_VidWriteData(number_holder[i-1]+48);
	}
	/*if(number==0)
	{LCD_VidWriteData(48);}*/

}
    380a:	68 96       	adiw	r28, 0x18	; 24
    380c:	0f b6       	in	r0, 0x3f	; 63
    380e:	f8 94       	cli
    3810:	de bf       	out	0x3e, r29	; 62
    3812:	0f be       	out	0x3f, r0	; 63
    3814:	cd bf       	out	0x3d, r28	; 61
    3816:	cf 91       	pop	r28
    3818:	df 91       	pop	r29
    381a:	08 95       	ret

0000381c <LCD_VidPostion>:
void LCD_VidPostion(u8 row,u8 colm)
{
    381c:	df 93       	push	r29
    381e:	cf 93       	push	r28
    3820:	cd b7       	in	r28, 0x3d	; 61
    3822:	de b7       	in	r29, 0x3e	; 62
    3824:	6e 97       	sbiw	r28, 0x1e	; 30
    3826:	0f b6       	in	r0, 0x3f	; 63
    3828:	f8 94       	cli
    382a:	de bf       	out	0x3e, r29	; 62
    382c:	0f be       	out	0x3f, r0	; 63
    382e:	cd bf       	out	0x3d, r28	; 61
    3830:	8d 8f       	std	Y+29, r24	; 0x1d
    3832:	6e 8f       	std	Y+30, r22	; 0x1e
	if(row==0)
    3834:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3836:	88 23       	and	r24, r24
    3838:	09 f0       	breq	.+2      	; 0x383c <LCD_VidPostion+0x20>
    383a:	77 c0       	rjmp	.+238    	; 0x392a <LCD_VidPostion+0x10e>
	{
		LCD_VidWriteCommand(DDRAM_address_row_one_lcd+colm);  //DDRAM address row one lcd
    383c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    383e:	80 58       	subi	r24, 0x80	; 128
    3840:	0e 94 bf 18 	call	0x317e	; 0x317e <LCD_VidWriteCommand>
    3844:	80 e0       	ldi	r24, 0x00	; 0
    3846:	90 e0       	ldi	r25, 0x00	; 0
    3848:	a0 e8       	ldi	r26, 0x80	; 128
    384a:	bf e3       	ldi	r27, 0x3F	; 63
    384c:	89 8f       	std	Y+25, r24	; 0x19
    384e:	9a 8f       	std	Y+26, r25	; 0x1a
    3850:	ab 8f       	std	Y+27, r26	; 0x1b
    3852:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3854:	69 8d       	ldd	r22, Y+25	; 0x19
    3856:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3858:	8b 8d       	ldd	r24, Y+27	; 0x1b
    385a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    385c:	20 e0       	ldi	r18, 0x00	; 0
    385e:	30 e0       	ldi	r19, 0x00	; 0
    3860:	4a ef       	ldi	r20, 0xFA	; 250
    3862:	54 e4       	ldi	r21, 0x44	; 68
    3864:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3868:	dc 01       	movw	r26, r24
    386a:	cb 01       	movw	r24, r22
    386c:	8d 8b       	std	Y+21, r24	; 0x15
    386e:	9e 8b       	std	Y+22, r25	; 0x16
    3870:	af 8b       	std	Y+23, r26	; 0x17
    3872:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3874:	6d 89       	ldd	r22, Y+21	; 0x15
    3876:	7e 89       	ldd	r23, Y+22	; 0x16
    3878:	8f 89       	ldd	r24, Y+23	; 0x17
    387a:	98 8d       	ldd	r25, Y+24	; 0x18
    387c:	20 e0       	ldi	r18, 0x00	; 0
    387e:	30 e0       	ldi	r19, 0x00	; 0
    3880:	40 e8       	ldi	r20, 0x80	; 128
    3882:	5f e3       	ldi	r21, 0x3F	; 63
    3884:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3888:	88 23       	and	r24, r24
    388a:	2c f4       	brge	.+10     	; 0x3896 <LCD_VidPostion+0x7a>
		__ticks = 1;
    388c:	81 e0       	ldi	r24, 0x01	; 1
    388e:	90 e0       	ldi	r25, 0x00	; 0
    3890:	9c 8b       	std	Y+20, r25	; 0x14
    3892:	8b 8b       	std	Y+19, r24	; 0x13
    3894:	3f c0       	rjmp	.+126    	; 0x3914 <LCD_VidPostion+0xf8>
	else if (__tmp > 65535)
    3896:	6d 89       	ldd	r22, Y+21	; 0x15
    3898:	7e 89       	ldd	r23, Y+22	; 0x16
    389a:	8f 89       	ldd	r24, Y+23	; 0x17
    389c:	98 8d       	ldd	r25, Y+24	; 0x18
    389e:	20 e0       	ldi	r18, 0x00	; 0
    38a0:	3f ef       	ldi	r19, 0xFF	; 255
    38a2:	4f e7       	ldi	r20, 0x7F	; 127
    38a4:	57 e4       	ldi	r21, 0x47	; 71
    38a6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    38aa:	18 16       	cp	r1, r24
    38ac:	4c f5       	brge	.+82     	; 0x3900 <LCD_VidPostion+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38ae:	69 8d       	ldd	r22, Y+25	; 0x19
    38b0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    38b2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    38b4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    38b6:	20 e0       	ldi	r18, 0x00	; 0
    38b8:	30 e0       	ldi	r19, 0x00	; 0
    38ba:	40 e2       	ldi	r20, 0x20	; 32
    38bc:	51 e4       	ldi	r21, 0x41	; 65
    38be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38c2:	dc 01       	movw	r26, r24
    38c4:	cb 01       	movw	r24, r22
    38c6:	bc 01       	movw	r22, r24
    38c8:	cd 01       	movw	r24, r26
    38ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38ce:	dc 01       	movw	r26, r24
    38d0:	cb 01       	movw	r24, r22
    38d2:	9c 8b       	std	Y+20, r25	; 0x14
    38d4:	8b 8b       	std	Y+19, r24	; 0x13
    38d6:	0f c0       	rjmp	.+30     	; 0x38f6 <LCD_VidPostion+0xda>
    38d8:	88 ec       	ldi	r24, 0xC8	; 200
    38da:	90 e0       	ldi	r25, 0x00	; 0
    38dc:	9a 8b       	std	Y+18, r25	; 0x12
    38de:	89 8b       	std	Y+17, r24	; 0x11
    38e0:	89 89       	ldd	r24, Y+17	; 0x11
    38e2:	9a 89       	ldd	r25, Y+18	; 0x12
    38e4:	01 97       	sbiw	r24, 0x01	; 1
    38e6:	f1 f7       	brne	.-4      	; 0x38e4 <LCD_VidPostion+0xc8>
    38e8:	9a 8b       	std	Y+18, r25	; 0x12
    38ea:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38ec:	8b 89       	ldd	r24, Y+19	; 0x13
    38ee:	9c 89       	ldd	r25, Y+20	; 0x14
    38f0:	01 97       	sbiw	r24, 0x01	; 1
    38f2:	9c 8b       	std	Y+20, r25	; 0x14
    38f4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38f6:	8b 89       	ldd	r24, Y+19	; 0x13
    38f8:	9c 89       	ldd	r25, Y+20	; 0x14
    38fa:	00 97       	sbiw	r24, 0x00	; 0
    38fc:	69 f7       	brne	.-38     	; 0x38d8 <LCD_VidPostion+0xbc>
    38fe:	8f c0       	rjmp	.+286    	; 0x3a1e <LCD_VidPostion+0x202>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3900:	6d 89       	ldd	r22, Y+21	; 0x15
    3902:	7e 89       	ldd	r23, Y+22	; 0x16
    3904:	8f 89       	ldd	r24, Y+23	; 0x17
    3906:	98 8d       	ldd	r25, Y+24	; 0x18
    3908:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    390c:	dc 01       	movw	r26, r24
    390e:	cb 01       	movw	r24, r22
    3910:	9c 8b       	std	Y+20, r25	; 0x14
    3912:	8b 8b       	std	Y+19, r24	; 0x13
    3914:	8b 89       	ldd	r24, Y+19	; 0x13
    3916:	9c 89       	ldd	r25, Y+20	; 0x14
    3918:	98 8b       	std	Y+16, r25	; 0x10
    391a:	8f 87       	std	Y+15, r24	; 0x0f
    391c:	8f 85       	ldd	r24, Y+15	; 0x0f
    391e:	98 89       	ldd	r25, Y+16	; 0x10
    3920:	01 97       	sbiw	r24, 0x01	; 1
    3922:	f1 f7       	brne	.-4      	; 0x3920 <LCD_VidPostion+0x104>
    3924:	98 8b       	std	Y+16, r25	; 0x10
    3926:	8f 87       	std	Y+15, r24	; 0x0f
    3928:	7a c0       	rjmp	.+244    	; 0x3a1e <LCD_VidPostion+0x202>
		_delay_ms(1);
	}
	else if(row==1)
    392a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    392c:	81 30       	cpi	r24, 0x01	; 1
    392e:	09 f0       	breq	.+2      	; 0x3932 <LCD_VidPostion+0x116>
    3930:	76 c0       	rjmp	.+236    	; 0x3a1e <LCD_VidPostion+0x202>
		{
			LCD_VidWriteCommand(DDRAM_address_row_two_lcd+colm); //DDRAM address row two lcd
    3932:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3934:	80 54       	subi	r24, 0x40	; 64
    3936:	0e 94 bf 18 	call	0x317e	; 0x317e <LCD_VidWriteCommand>
    393a:	80 e0       	ldi	r24, 0x00	; 0
    393c:	90 e0       	ldi	r25, 0x00	; 0
    393e:	a0 e8       	ldi	r26, 0x80	; 128
    3940:	bf e3       	ldi	r27, 0x3F	; 63
    3942:	8b 87       	std	Y+11, r24	; 0x0b
    3944:	9c 87       	std	Y+12, r25	; 0x0c
    3946:	ad 87       	std	Y+13, r26	; 0x0d
    3948:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    394a:	6b 85       	ldd	r22, Y+11	; 0x0b
    394c:	7c 85       	ldd	r23, Y+12	; 0x0c
    394e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3950:	9e 85       	ldd	r25, Y+14	; 0x0e
    3952:	20 e0       	ldi	r18, 0x00	; 0
    3954:	30 e0       	ldi	r19, 0x00	; 0
    3956:	4a ef       	ldi	r20, 0xFA	; 250
    3958:	54 e4       	ldi	r21, 0x44	; 68
    395a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    395e:	dc 01       	movw	r26, r24
    3960:	cb 01       	movw	r24, r22
    3962:	8f 83       	std	Y+7, r24	; 0x07
    3964:	98 87       	std	Y+8, r25	; 0x08
    3966:	a9 87       	std	Y+9, r26	; 0x09
    3968:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    396a:	6f 81       	ldd	r22, Y+7	; 0x07
    396c:	78 85       	ldd	r23, Y+8	; 0x08
    396e:	89 85       	ldd	r24, Y+9	; 0x09
    3970:	9a 85       	ldd	r25, Y+10	; 0x0a
    3972:	20 e0       	ldi	r18, 0x00	; 0
    3974:	30 e0       	ldi	r19, 0x00	; 0
    3976:	40 e8       	ldi	r20, 0x80	; 128
    3978:	5f e3       	ldi	r21, 0x3F	; 63
    397a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    397e:	88 23       	and	r24, r24
    3980:	2c f4       	brge	.+10     	; 0x398c <LCD_VidPostion+0x170>
		__ticks = 1;
    3982:	81 e0       	ldi	r24, 0x01	; 1
    3984:	90 e0       	ldi	r25, 0x00	; 0
    3986:	9e 83       	std	Y+6, r25	; 0x06
    3988:	8d 83       	std	Y+5, r24	; 0x05
    398a:	3f c0       	rjmp	.+126    	; 0x3a0a <LCD_VidPostion+0x1ee>
	else if (__tmp > 65535)
    398c:	6f 81       	ldd	r22, Y+7	; 0x07
    398e:	78 85       	ldd	r23, Y+8	; 0x08
    3990:	89 85       	ldd	r24, Y+9	; 0x09
    3992:	9a 85       	ldd	r25, Y+10	; 0x0a
    3994:	20 e0       	ldi	r18, 0x00	; 0
    3996:	3f ef       	ldi	r19, 0xFF	; 255
    3998:	4f e7       	ldi	r20, 0x7F	; 127
    399a:	57 e4       	ldi	r21, 0x47	; 71
    399c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    39a0:	18 16       	cp	r1, r24
    39a2:	4c f5       	brge	.+82     	; 0x39f6 <LCD_VidPostion+0x1da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    39a4:	6b 85       	ldd	r22, Y+11	; 0x0b
    39a6:	7c 85       	ldd	r23, Y+12	; 0x0c
    39a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    39aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    39ac:	20 e0       	ldi	r18, 0x00	; 0
    39ae:	30 e0       	ldi	r19, 0x00	; 0
    39b0:	40 e2       	ldi	r20, 0x20	; 32
    39b2:	51 e4       	ldi	r21, 0x41	; 65
    39b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39b8:	dc 01       	movw	r26, r24
    39ba:	cb 01       	movw	r24, r22
    39bc:	bc 01       	movw	r22, r24
    39be:	cd 01       	movw	r24, r26
    39c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39c4:	dc 01       	movw	r26, r24
    39c6:	cb 01       	movw	r24, r22
    39c8:	9e 83       	std	Y+6, r25	; 0x06
    39ca:	8d 83       	std	Y+5, r24	; 0x05
    39cc:	0f c0       	rjmp	.+30     	; 0x39ec <LCD_VidPostion+0x1d0>
    39ce:	88 ec       	ldi	r24, 0xC8	; 200
    39d0:	90 e0       	ldi	r25, 0x00	; 0
    39d2:	9c 83       	std	Y+4, r25	; 0x04
    39d4:	8b 83       	std	Y+3, r24	; 0x03
    39d6:	8b 81       	ldd	r24, Y+3	; 0x03
    39d8:	9c 81       	ldd	r25, Y+4	; 0x04
    39da:	01 97       	sbiw	r24, 0x01	; 1
    39dc:	f1 f7       	brne	.-4      	; 0x39da <LCD_VidPostion+0x1be>
    39de:	9c 83       	std	Y+4, r25	; 0x04
    39e0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39e2:	8d 81       	ldd	r24, Y+5	; 0x05
    39e4:	9e 81       	ldd	r25, Y+6	; 0x06
    39e6:	01 97       	sbiw	r24, 0x01	; 1
    39e8:	9e 83       	std	Y+6, r25	; 0x06
    39ea:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39ec:	8d 81       	ldd	r24, Y+5	; 0x05
    39ee:	9e 81       	ldd	r25, Y+6	; 0x06
    39f0:	00 97       	sbiw	r24, 0x00	; 0
    39f2:	69 f7       	brne	.-38     	; 0x39ce <LCD_VidPostion+0x1b2>
    39f4:	14 c0       	rjmp	.+40     	; 0x3a1e <LCD_VidPostion+0x202>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39f6:	6f 81       	ldd	r22, Y+7	; 0x07
    39f8:	78 85       	ldd	r23, Y+8	; 0x08
    39fa:	89 85       	ldd	r24, Y+9	; 0x09
    39fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    39fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a02:	dc 01       	movw	r26, r24
    3a04:	cb 01       	movw	r24, r22
    3a06:	9e 83       	std	Y+6, r25	; 0x06
    3a08:	8d 83       	std	Y+5, r24	; 0x05
    3a0a:	8d 81       	ldd	r24, Y+5	; 0x05
    3a0c:	9e 81       	ldd	r25, Y+6	; 0x06
    3a0e:	9a 83       	std	Y+2, r25	; 0x02
    3a10:	89 83       	std	Y+1, r24	; 0x01
    3a12:	89 81       	ldd	r24, Y+1	; 0x01
    3a14:	9a 81       	ldd	r25, Y+2	; 0x02
    3a16:	01 97       	sbiw	r24, 0x01	; 1
    3a18:	f1 f7       	brne	.-4      	; 0x3a16 <LCD_VidPostion+0x1fa>
    3a1a:	9a 83       	std	Y+2, r25	; 0x02
    3a1c:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(1);
		}

}
    3a1e:	6e 96       	adiw	r28, 0x1e	; 30
    3a20:	0f b6       	in	r0, 0x3f	; 63
    3a22:	f8 94       	cli
    3a24:	de bf       	out	0x3e, r29	; 62
    3a26:	0f be       	out	0x3f, r0	; 63
    3a28:	cd bf       	out	0x3d, r28	; 61
    3a2a:	cf 91       	pop	r28
    3a2c:	df 91       	pop	r29
    3a2e:	08 95       	ret

00003a30 <LCD_VidGotoCGRAM>:
void LCD_VidGotoCGRAM()
{
    3a30:	df 93       	push	r29
    3a32:	cf 93       	push	r28
    3a34:	cd b7       	in	r28, 0x3d	; 61
    3a36:	de b7       	in	r29, 0x3e	; 62
	LCD_VidWriteCommand(SET_CGRAM_ADDRESS);
    3a38:	80 e4       	ldi	r24, 0x40	; 64
    3a3a:	0e 94 bf 18 	call	0x317e	; 0x317e <LCD_VidWriteCommand>
}
    3a3e:	cf 91       	pop	r28
    3a40:	df 91       	pop	r29
    3a42:	08 95       	ret

00003a44 <LCD_VidArabicNume>:

void LCD_VidArabicNume(void)
{
    3a44:	df 93       	push	r29
    3a46:	cf 93       	push	r28
    3a48:	cd b7       	in	r28, 0x3d	; 61
    3a4a:	de b7       	in	r29, 0x3e	; 62
	LCD_VidGotoCGRAM();
    3a4c:	0e 94 18 1d 	call	0x3a30	; 0x3a30 <LCD_VidGotoCGRAM>
	LCD_VidWriteData(0b00000000);
	LCD_VidWriteData(0b00000100);
	LCD_VidWriteData(0b00000100);
	LCD_VidWriteData(0b00000100);
	LCD_VidWriteData(0b00000100);*/
	LCD_VidWriteData(0b00000000);
    3a50:	80 e0       	ldi	r24, 0x00	; 0
    3a52:	0e 94 cf 19 	call	0x339e	; 0x339e <LCD_VidWriteData>
	LCD_VidWriteData(0b00000000);
    3a56:	80 e0       	ldi	r24, 0x00	; 0
    3a58:	0e 94 cf 19 	call	0x339e	; 0x339e <LCD_VidWriteData>
	LCD_VidWriteData(0b00000100);
    3a5c:	84 e0       	ldi	r24, 0x04	; 4
    3a5e:	0e 94 cf 19 	call	0x339e	; 0x339e <LCD_VidWriteData>
	LCD_VidWriteData(0b00001010);
    3a62:	8a e0       	ldi	r24, 0x0A	; 10
    3a64:	0e 94 cf 19 	call	0x339e	; 0x339e <LCD_VidWriteData>
	LCD_VidWriteData(0b00011010);
    3a68:	8a e1       	ldi	r24, 0x1A	; 26
    3a6a:	0e 94 cf 19 	call	0x339e	; 0x339e <LCD_VidWriteData>
	LCD_VidWriteData(0b00001010);
    3a6e:	8a e0       	ldi	r24, 0x0A	; 10
    3a70:	0e 94 cf 19 	call	0x339e	; 0x339e <LCD_VidWriteData>
	LCD_VidWriteData(0b00000100);
    3a74:	84 e0       	ldi	r24, 0x04	; 4
    3a76:	0e 94 cf 19 	call	0x339e	; 0x339e <LCD_VidWriteData>
	LCD_VidWriteData(0b00000000);
    3a7a:	80 e0       	ldi	r24, 0x00	; 0
    3a7c:	0e 94 cf 19 	call	0x339e	; 0x339e <LCD_VidWriteData>
	//ح
	LCD_VidWriteData(0b00000000);
    3a80:	80 e0       	ldi	r24, 0x00	; 0
    3a82:	0e 94 cf 19 	call	0x339e	; 0x339e <LCD_VidWriteData>
	LCD_VidWriteData(0b00000000);
    3a86:	80 e0       	ldi	r24, 0x00	; 0
    3a88:	0e 94 cf 19 	call	0x339e	; 0x339e <LCD_VidWriteData>
	LCD_VidWriteData(0b00001100);
    3a8c:	8c e0       	ldi	r24, 0x0C	; 12
    3a8e:	0e 94 cf 19 	call	0x339e	; 0x339e <LCD_VidWriteData>
	LCD_VidWriteData(0b00000010);
    3a92:	82 e0       	ldi	r24, 0x02	; 2
    3a94:	0e 94 cf 19 	call	0x339e	; 0x339e <LCD_VidWriteData>
	LCD_VidWriteData(0b00011111);
    3a98:	8f e1       	ldi	r24, 0x1F	; 31
    3a9a:	0e 94 cf 19 	call	0x339e	; 0x339e <LCD_VidWriteData>
	LCD_VidWriteData(0b00000000);
    3a9e:	80 e0       	ldi	r24, 0x00	; 0
    3aa0:	0e 94 cf 19 	call	0x339e	; 0x339e <LCD_VidWriteData>
	LCD_VidWriteData(0b00000000);
    3aa4:	80 e0       	ldi	r24, 0x00	; 0
    3aa6:	0e 94 cf 19 	call	0x339e	; 0x339e <LCD_VidWriteData>
	LCD_VidWriteData(0b00000000);
    3aaa:	80 e0       	ldi	r24, 0x00	; 0
    3aac:	0e 94 cf 19 	call	0x339e	; 0x339e <LCD_VidWriteData>
	//م
	LCD_VidWriteData(0b00000000);
    3ab0:	80 e0       	ldi	r24, 0x00	; 0
    3ab2:	0e 94 cf 19 	call	0x339e	; 0x339e <LCD_VidWriteData>
	LCD_VidWriteData(0b00000000);
    3ab6:	80 e0       	ldi	r24, 0x00	; 0
    3ab8:	0e 94 cf 19 	call	0x339e	; 0x339e <LCD_VidWriteData>
	LCD_VidWriteData(0b00000100);
    3abc:	84 e0       	ldi	r24, 0x04	; 4
    3abe:	0e 94 cf 19 	call	0x339e	; 0x339e <LCD_VidWriteData>
	LCD_VidWriteData(0b00001010);
    3ac2:	8a e0       	ldi	r24, 0x0A	; 10
    3ac4:	0e 94 cf 19 	call	0x339e	; 0x339e <LCD_VidWriteData>
	LCD_VidWriteData(0b00011011);
    3ac8:	8b e1       	ldi	r24, 0x1B	; 27
    3aca:	0e 94 cf 19 	call	0x339e	; 0x339e <LCD_VidWriteData>
	LCD_VidWriteData(0b00001010);
    3ace:	8a e0       	ldi	r24, 0x0A	; 10
    3ad0:	0e 94 cf 19 	call	0x339e	; 0x339e <LCD_VidWriteData>
	LCD_VidWriteData(0b00000100);
    3ad4:	84 e0       	ldi	r24, 0x04	; 4
    3ad6:	0e 94 cf 19 	call	0x339e	; 0x339e <LCD_VidWriteData>
	LCD_VidWriteData(0b00000000);
    3ada:	80 e0       	ldi	r24, 0x00	; 0
    3adc:	0e 94 cf 19 	call	0x339e	; 0x339e <LCD_VidWriteData>
	//د
	LCD_VidWriteData(0b00000000);
    3ae0:	80 e0       	ldi	r24, 0x00	; 0
    3ae2:	0e 94 cf 19 	call	0x339e	; 0x339e <LCD_VidWriteData>
	LCD_VidWriteData(0b00000000);
    3ae6:	80 e0       	ldi	r24, 0x00	; 0
    3ae8:	0e 94 cf 19 	call	0x339e	; 0x339e <LCD_VidWriteData>
	LCD_VidWriteData(0b00000100);
    3aec:	84 e0       	ldi	r24, 0x04	; 4
    3aee:	0e 94 cf 19 	call	0x339e	; 0x339e <LCD_VidWriteData>
	LCD_VidWriteData(0b00000100);
    3af2:	84 e0       	ldi	r24, 0x04	; 4
    3af4:	0e 94 cf 19 	call	0x339e	; 0x339e <LCD_VidWriteData>
	LCD_VidWriteData(0b00011111);
    3af8:	8f e1       	ldi	r24, 0x1F	; 31
    3afa:	0e 94 cf 19 	call	0x339e	; 0x339e <LCD_VidWriteData>
	LCD_VidWriteData(0b00000000);
    3afe:	80 e0       	ldi	r24, 0x00	; 0
    3b00:	0e 94 cf 19 	call	0x339e	; 0x339e <LCD_VidWriteData>
	LCD_VidWriteData(0b00000000);
    3b04:	80 e0       	ldi	r24, 0x00	; 0
    3b06:	0e 94 cf 19 	call	0x339e	; 0x339e <LCD_VidWriteData>
	LCD_VidWriteData(0b00000000);
    3b0a:	80 e0       	ldi	r24, 0x00	; 0
    3b0c:	0e 94 cf 19 	call	0x339e	; 0x339e <LCD_VidWriteData>
}
    3b10:	cf 91       	pop	r28
    3b12:	df 91       	pop	r29
    3b14:	08 95       	ret

00003b16 <KEY_PAD_VidInit>:
#include "KEY_PAD_Interface.h"
#include "avr/delay.h"


void KEY_PAD_VidInit(void)
{
    3b16:	df 93       	push	r29
    3b18:	cf 93       	push	r28
    3b1a:	cd b7       	in	r28, 0x3d	; 61
    3b1c:	de b7       	in	r29, 0x3e	; 62
	DIO_VidSitPortDirection(KEY_pad_port,KEY_pad_dirction_init);
    3b1e:	80 e0       	ldi	r24, 0x00	; 0
    3b20:	6f e0       	ldi	r22, 0x0F	; 15
    3b22:	0e 94 52 09 	call	0x12a4	; 0x12a4 <DIO_VidSitPortDirection>
	DIO_VidSitPortValue(KEY_pad_port,KEY_pad_value_init);
    3b26:	80 e0       	ldi	r24, 0x00	; 0
    3b28:	6f ef       	ldi	r22, 0xFF	; 255
    3b2a:	0e 94 93 09 	call	0x1326	; 0x1326 <DIO_VidSitPortValue>
}
    3b2e:	cf 91       	pop	r28
    3b30:	df 91       	pop	r29
    3b32:	08 95       	ret

00003b34 <KEY_PAD_VidGitPresed>:
u8 KEY_PAD_VidGitPresed(void)
{
    3b34:	df 93       	push	r29
    3b36:	cf 93       	push	r28
    3b38:	cd b7       	in	r28, 0x3d	; 61
    3b3a:	de b7       	in	r29, 0x3e	; 62
    3b3c:	e6 97       	sbiw	r28, 0x36	; 54
    3b3e:	0f b6       	in	r0, 0x3f	; 63
    3b40:	f8 94       	cli
    3b42:	de bf       	out	0x3e, r29	; 62
    3b44:	0f be       	out	0x3f, r0	; 63
    3b46:	cd bf       	out	0x3d, r28	; 61
	u8 colum, row;
	u8 keypad_OUT=0;
    3b48:	1f 86       	std	Y+15, r1	; 0x0f
	u16 KEYPAmap[4][4]={{1,2,3,4},
						{5,6,7,8},
						{9,10,11,12},
						{13,14,15,'c'}};
    3b4a:	ce 01       	movw	r24, r28
    3b4c:	42 96       	adiw	r24, 0x12	; 18
    3b4e:	9b ab       	std	Y+51, r25	; 0x33
    3b50:	8a ab       	std	Y+50, r24	; 0x32
    3b52:	e3 eb       	ldi	r30, 0xB3	; 179
    3b54:	f0 e0       	ldi	r31, 0x00	; 0
    3b56:	fd ab       	std	Y+53, r31	; 0x35
    3b58:	ec ab       	std	Y+52, r30	; 0x34
    3b5a:	f0 e2       	ldi	r31, 0x20	; 32
    3b5c:	fe ab       	std	Y+54, r31	; 0x36
    3b5e:	ec a9       	ldd	r30, Y+52	; 0x34
    3b60:	fd a9       	ldd	r31, Y+53	; 0x35
    3b62:	00 80       	ld	r0, Z
    3b64:	8c a9       	ldd	r24, Y+52	; 0x34
    3b66:	9d a9       	ldd	r25, Y+53	; 0x35
    3b68:	01 96       	adiw	r24, 0x01	; 1
    3b6a:	9d ab       	std	Y+53, r25	; 0x35
    3b6c:	8c ab       	std	Y+52, r24	; 0x34
    3b6e:	ea a9       	ldd	r30, Y+50	; 0x32
    3b70:	fb a9       	ldd	r31, Y+51	; 0x33
    3b72:	00 82       	st	Z, r0
    3b74:	8a a9       	ldd	r24, Y+50	; 0x32
    3b76:	9b a9       	ldd	r25, Y+51	; 0x33
    3b78:	01 96       	adiw	r24, 0x01	; 1
    3b7a:	9b ab       	std	Y+51, r25	; 0x33
    3b7c:	8a ab       	std	Y+50, r24	; 0x32
    3b7e:	9e a9       	ldd	r25, Y+54	; 0x36
    3b80:	91 50       	subi	r25, 0x01	; 1
    3b82:	9e ab       	std	Y+54, r25	; 0x36
    3b84:	ee a9       	ldd	r30, Y+54	; 0x36
    3b86:	ee 23       	and	r30, r30
    3b88:	51 f7       	brne	.-44     	; 0x3b5e <KEY_PAD_VidGitPresed+0x2a>
	for(colum=0;colum<4;colum++)
    3b8a:	19 8a       	std	Y+17, r1	; 0x11
    3b8c:	b2 c0       	rjmp	.+356    	; 0x3cf2 <KEY_PAD_VidGitPresed+0x1be>
	{
		DIO_VidSitPintValue(KEY_pad_port,colum,0);
    3b8e:	80 e0       	ldi	r24, 0x00	; 0
    3b90:	69 89       	ldd	r22, Y+17	; 0x11
    3b92:	40 e0       	ldi	r20, 0x00	; 0
    3b94:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <DIO_VidSitPintValue>
		for(row=4;row<8;row++)
    3b98:	84 e0       	ldi	r24, 0x04	; 4
    3b9a:	88 8b       	std	Y+16, r24	; 0x10
    3b9c:	9e c0       	rjmp	.+316    	; 0x3cda <KEY_PAD_VidGitPresed+0x1a6>
		{
			if(puuton_pressed==DIO_GitPinVule(KEY_pad_port,row))
    3b9e:	80 e0       	ldi	r24, 0x00	; 0
    3ba0:	68 89       	ldd	r22, Y+16	; 0x10
    3ba2:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <DIO_GitPinVule>
    3ba6:	88 23       	and	r24, r24
    3ba8:	09 f0       	breq	.+2      	; 0x3bac <KEY_PAD_VidGitPresed+0x78>
    3baa:	94 c0       	rjmp	.+296    	; 0x3cd4 <KEY_PAD_VidGitPresed+0x1a0>
			{
				keypad_OUT=KEYPAmap[row-4][colum];
    3bac:	88 89       	ldd	r24, Y+16	; 0x10
    3bae:	88 2f       	mov	r24, r24
    3bb0:	90 e0       	ldi	r25, 0x00	; 0
    3bb2:	ac 01       	movw	r20, r24
    3bb4:	44 50       	subi	r20, 0x04	; 4
    3bb6:	50 40       	sbci	r21, 0x00	; 0
    3bb8:	89 89       	ldd	r24, Y+17	; 0x11
    3bba:	28 2f       	mov	r18, r24
    3bbc:	30 e0       	ldi	r19, 0x00	; 0
    3bbe:	ca 01       	movw	r24, r20
    3bc0:	88 0f       	add	r24, r24
    3bc2:	99 1f       	adc	r25, r25
    3bc4:	88 0f       	add	r24, r24
    3bc6:	99 1f       	adc	r25, r25
    3bc8:	82 0f       	add	r24, r18
    3bca:	93 1f       	adc	r25, r19
    3bcc:	9c 01       	movw	r18, r24
    3bce:	22 0f       	add	r18, r18
    3bd0:	33 1f       	adc	r19, r19
    3bd2:	ce 01       	movw	r24, r28
    3bd4:	01 96       	adiw	r24, 0x01	; 1
    3bd6:	82 0f       	add	r24, r18
    3bd8:	93 1f       	adc	r25, r19
    3bda:	fc 01       	movw	r30, r24
    3bdc:	71 96       	adiw	r30, 0x11	; 17
    3bde:	80 81       	ld	r24, Z
    3be0:	91 81       	ldd	r25, Z+1	; 0x01
    3be2:	8f 87       	std	Y+15, r24	; 0x0f

				while(puuton_pressed==DIO_GitPinVule(KEY_pad_port,row))
    3be4:	80 e0       	ldi	r24, 0x00	; 0
    3be6:	68 89       	ldd	r22, Y+16	; 0x10
    3be8:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <DIO_GitPinVule>
    3bec:	88 23       	and	r24, r24
    3bee:	d1 f3       	breq	.-12     	; 0x3be4 <KEY_PAD_VidGitPresed+0xb0>
    3bf0:	80 e0       	ldi	r24, 0x00	; 0
    3bf2:	90 e0       	ldi	r25, 0x00	; 0
    3bf4:	a8 e4       	ldi	r26, 0x48	; 72
    3bf6:	b2 e4       	ldi	r27, 0x42	; 66
    3bf8:	8b 87       	std	Y+11, r24	; 0x0b
    3bfa:	9c 87       	std	Y+12, r25	; 0x0c
    3bfc:	ad 87       	std	Y+13, r26	; 0x0d
    3bfe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c00:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c02:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c04:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c06:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c08:	20 e0       	ldi	r18, 0x00	; 0
    3c0a:	30 e0       	ldi	r19, 0x00	; 0
    3c0c:	4a ef       	ldi	r20, 0xFA	; 250
    3c0e:	54 e4       	ldi	r21, 0x44	; 68
    3c10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c14:	dc 01       	movw	r26, r24
    3c16:	cb 01       	movw	r24, r22
    3c18:	8f 83       	std	Y+7, r24	; 0x07
    3c1a:	98 87       	std	Y+8, r25	; 0x08
    3c1c:	a9 87       	std	Y+9, r26	; 0x09
    3c1e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3c20:	6f 81       	ldd	r22, Y+7	; 0x07
    3c22:	78 85       	ldd	r23, Y+8	; 0x08
    3c24:	89 85       	ldd	r24, Y+9	; 0x09
    3c26:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c28:	20 e0       	ldi	r18, 0x00	; 0
    3c2a:	30 e0       	ldi	r19, 0x00	; 0
    3c2c:	40 e8       	ldi	r20, 0x80	; 128
    3c2e:	5f e3       	ldi	r21, 0x3F	; 63
    3c30:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3c34:	88 23       	and	r24, r24
    3c36:	2c f4       	brge	.+10     	; 0x3c42 <KEY_PAD_VidGitPresed+0x10e>
		__ticks = 1;
    3c38:	81 e0       	ldi	r24, 0x01	; 1
    3c3a:	90 e0       	ldi	r25, 0x00	; 0
    3c3c:	9e 83       	std	Y+6, r25	; 0x06
    3c3e:	8d 83       	std	Y+5, r24	; 0x05
    3c40:	3f c0       	rjmp	.+126    	; 0x3cc0 <KEY_PAD_VidGitPresed+0x18c>
	else if (__tmp > 65535)
    3c42:	6f 81       	ldd	r22, Y+7	; 0x07
    3c44:	78 85       	ldd	r23, Y+8	; 0x08
    3c46:	89 85       	ldd	r24, Y+9	; 0x09
    3c48:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c4a:	20 e0       	ldi	r18, 0x00	; 0
    3c4c:	3f ef       	ldi	r19, 0xFF	; 255
    3c4e:	4f e7       	ldi	r20, 0x7F	; 127
    3c50:	57 e4       	ldi	r21, 0x47	; 71
    3c52:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3c56:	18 16       	cp	r1, r24
    3c58:	4c f5       	brge	.+82     	; 0x3cac <KEY_PAD_VidGitPresed+0x178>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c5a:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c5c:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c5e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c60:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c62:	20 e0       	ldi	r18, 0x00	; 0
    3c64:	30 e0       	ldi	r19, 0x00	; 0
    3c66:	40 e2       	ldi	r20, 0x20	; 32
    3c68:	51 e4       	ldi	r21, 0x41	; 65
    3c6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c6e:	dc 01       	movw	r26, r24
    3c70:	cb 01       	movw	r24, r22
    3c72:	bc 01       	movw	r22, r24
    3c74:	cd 01       	movw	r24, r26
    3c76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c7a:	dc 01       	movw	r26, r24
    3c7c:	cb 01       	movw	r24, r22
    3c7e:	9e 83       	std	Y+6, r25	; 0x06
    3c80:	8d 83       	std	Y+5, r24	; 0x05
    3c82:	0f c0       	rjmp	.+30     	; 0x3ca2 <KEY_PAD_VidGitPresed+0x16e>
    3c84:	88 ec       	ldi	r24, 0xC8	; 200
    3c86:	90 e0       	ldi	r25, 0x00	; 0
    3c88:	9c 83       	std	Y+4, r25	; 0x04
    3c8a:	8b 83       	std	Y+3, r24	; 0x03
    3c8c:	8b 81       	ldd	r24, Y+3	; 0x03
    3c8e:	9c 81       	ldd	r25, Y+4	; 0x04
    3c90:	01 97       	sbiw	r24, 0x01	; 1
    3c92:	f1 f7       	brne	.-4      	; 0x3c90 <KEY_PAD_VidGitPresed+0x15c>
    3c94:	9c 83       	std	Y+4, r25	; 0x04
    3c96:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c98:	8d 81       	ldd	r24, Y+5	; 0x05
    3c9a:	9e 81       	ldd	r25, Y+6	; 0x06
    3c9c:	01 97       	sbiw	r24, 0x01	; 1
    3c9e:	9e 83       	std	Y+6, r25	; 0x06
    3ca0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ca2:	8d 81       	ldd	r24, Y+5	; 0x05
    3ca4:	9e 81       	ldd	r25, Y+6	; 0x06
    3ca6:	00 97       	sbiw	r24, 0x00	; 0
    3ca8:	69 f7       	brne	.-38     	; 0x3c84 <KEY_PAD_VidGitPresed+0x150>
    3caa:	14 c0       	rjmp	.+40     	; 0x3cd4 <KEY_PAD_VidGitPresed+0x1a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3cac:	6f 81       	ldd	r22, Y+7	; 0x07
    3cae:	78 85       	ldd	r23, Y+8	; 0x08
    3cb0:	89 85       	ldd	r24, Y+9	; 0x09
    3cb2:	9a 85       	ldd	r25, Y+10	; 0x0a
    3cb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cb8:	dc 01       	movw	r26, r24
    3cba:	cb 01       	movw	r24, r22
    3cbc:	9e 83       	std	Y+6, r25	; 0x06
    3cbe:	8d 83       	std	Y+5, r24	; 0x05
    3cc0:	8d 81       	ldd	r24, Y+5	; 0x05
    3cc2:	9e 81       	ldd	r25, Y+6	; 0x06
    3cc4:	9a 83       	std	Y+2, r25	; 0x02
    3cc6:	89 83       	std	Y+1, r24	; 0x01
    3cc8:	89 81       	ldd	r24, Y+1	; 0x01
    3cca:	9a 81       	ldd	r25, Y+2	; 0x02
    3ccc:	01 97       	sbiw	r24, 0x01	; 1
    3cce:	f1 f7       	brne	.-4      	; 0x3ccc <KEY_PAD_VidGitPresed+0x198>
    3cd0:	9a 83       	std	Y+2, r25	; 0x02
    3cd2:	89 83       	std	Y+1, r24	; 0x01
						{9,10,11,12},
						{13,14,15,'c'}};
	for(colum=0;colum<4;colum++)
	{
		DIO_VidSitPintValue(KEY_pad_port,colum,0);
		for(row=4;row<8;row++)
    3cd4:	88 89       	ldd	r24, Y+16	; 0x10
    3cd6:	8f 5f       	subi	r24, 0xFF	; 255
    3cd8:	88 8b       	std	Y+16, r24	; 0x10
    3cda:	88 89       	ldd	r24, Y+16	; 0x10
    3cdc:	88 30       	cpi	r24, 0x08	; 8
    3cde:	08 f4       	brcc	.+2      	; 0x3ce2 <KEY_PAD_VidGitPresed+0x1ae>
    3ce0:	5e cf       	rjmp	.-324    	; 0x3b9e <KEY_PAD_VidGitPresed+0x6a>
				{
				}
				_delay_ms(50);
			}
		}
		DIO_VidSitPintValue(KEY_pad_port,colum,1);
    3ce2:	80 e0       	ldi	r24, 0x00	; 0
    3ce4:	69 89       	ldd	r22, Y+17	; 0x11
    3ce6:	41 e0       	ldi	r20, 0x01	; 1
    3ce8:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <DIO_VidSitPintValue>
	u8 keypad_OUT=0;
	u16 KEYPAmap[4][4]={{1,2,3,4},
						{5,6,7,8},
						{9,10,11,12},
						{13,14,15,'c'}};
	for(colum=0;colum<4;colum++)
    3cec:	89 89       	ldd	r24, Y+17	; 0x11
    3cee:	8f 5f       	subi	r24, 0xFF	; 255
    3cf0:	89 8b       	std	Y+17, r24	; 0x11
    3cf2:	89 89       	ldd	r24, Y+17	; 0x11
    3cf4:	84 30       	cpi	r24, 0x04	; 4
    3cf6:	08 f4       	brcc	.+2      	; 0x3cfa <KEY_PAD_VidGitPresed+0x1c6>
    3cf8:	4a cf       	rjmp	.-364    	; 0x3b8e <KEY_PAD_VidGitPresed+0x5a>
				_delay_ms(50);
			}
		}
		DIO_VidSitPintValue(KEY_pad_port,colum,1);
	}
	return keypad_OUT;
    3cfa:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    3cfc:	e6 96       	adiw	r28, 0x36	; 54
    3cfe:	0f b6       	in	r0, 0x3f	; 63
    3d00:	f8 94       	cli
    3d02:	de bf       	out	0x3e, r29	; 62
    3d04:	0f be       	out	0x3f, r0	; 63
    3d06:	cd bf       	out	0x3d, r28	; 61
    3d08:	cf 91       	pop	r28
    3d0a:	df 91       	pop	r29
    3d0c:	08 95       	ret

00003d0e <KEY_PAD_VidGitPresedcalc>:

u8 KEY_PAD_VidGitPresedcalc(void)
{
    3d0e:	df 93       	push	r29
    3d10:	cf 93       	push	r28
    3d12:	cd b7       	in	r28, 0x3d	; 61
    3d14:	de b7       	in	r29, 0x3e	; 62
    3d16:	e6 97       	sbiw	r28, 0x36	; 54
    3d18:	0f b6       	in	r0, 0x3f	; 63
    3d1a:	f8 94       	cli
    3d1c:	de bf       	out	0x3e, r29	; 62
    3d1e:	0f be       	out	0x3f, r0	; 63
    3d20:	cd bf       	out	0x3d, r28	; 61
	u8 colum, row;
	u8 keypad_OUT=0;
    3d22:	1f 86       	std	Y+15, r1	; 0x0f
	u16 KEYPAmap[4][4]={{1,2,3,'+'},
						{4,5,6,'-'},
						{7,8,9,'*'},
						{'l','.','c','='}};
    3d24:	ce 01       	movw	r24, r28
    3d26:	42 96       	adiw	r24, 0x12	; 18
    3d28:	9b ab       	std	Y+51, r25	; 0x33
    3d2a:	8a ab       	std	Y+50, r24	; 0x32
    3d2c:	e3 ed       	ldi	r30, 0xD3	; 211
    3d2e:	f0 e0       	ldi	r31, 0x00	; 0
    3d30:	fd ab       	std	Y+53, r31	; 0x35
    3d32:	ec ab       	std	Y+52, r30	; 0x34
    3d34:	f0 e2       	ldi	r31, 0x20	; 32
    3d36:	fe ab       	std	Y+54, r31	; 0x36
    3d38:	ec a9       	ldd	r30, Y+52	; 0x34
    3d3a:	fd a9       	ldd	r31, Y+53	; 0x35
    3d3c:	00 80       	ld	r0, Z
    3d3e:	8c a9       	ldd	r24, Y+52	; 0x34
    3d40:	9d a9       	ldd	r25, Y+53	; 0x35
    3d42:	01 96       	adiw	r24, 0x01	; 1
    3d44:	9d ab       	std	Y+53, r25	; 0x35
    3d46:	8c ab       	std	Y+52, r24	; 0x34
    3d48:	ea a9       	ldd	r30, Y+50	; 0x32
    3d4a:	fb a9       	ldd	r31, Y+51	; 0x33
    3d4c:	00 82       	st	Z, r0
    3d4e:	8a a9       	ldd	r24, Y+50	; 0x32
    3d50:	9b a9       	ldd	r25, Y+51	; 0x33
    3d52:	01 96       	adiw	r24, 0x01	; 1
    3d54:	9b ab       	std	Y+51, r25	; 0x33
    3d56:	8a ab       	std	Y+50, r24	; 0x32
    3d58:	9e a9       	ldd	r25, Y+54	; 0x36
    3d5a:	91 50       	subi	r25, 0x01	; 1
    3d5c:	9e ab       	std	Y+54, r25	; 0x36
    3d5e:	ee a9       	ldd	r30, Y+54	; 0x36
    3d60:	ee 23       	and	r30, r30
    3d62:	51 f7       	brne	.-44     	; 0x3d38 <KEY_PAD_VidGitPresedcalc+0x2a>
	for(colum=0;colum<4;colum++)
    3d64:	19 8a       	std	Y+17, r1	; 0x11
    3d66:	b2 c0       	rjmp	.+356    	; 0x3ecc <KEY_PAD_VidGitPresedcalc+0x1be>
	{
		DIO_VidSitPintValue(KEY_pad_port,colum,0);
    3d68:	80 e0       	ldi	r24, 0x00	; 0
    3d6a:	69 89       	ldd	r22, Y+17	; 0x11
    3d6c:	40 e0       	ldi	r20, 0x00	; 0
    3d6e:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <DIO_VidSitPintValue>
		for(row=4;row<8;row++)
    3d72:	84 e0       	ldi	r24, 0x04	; 4
    3d74:	88 8b       	std	Y+16, r24	; 0x10
    3d76:	9e c0       	rjmp	.+316    	; 0x3eb4 <KEY_PAD_VidGitPresedcalc+0x1a6>
		{
			if(puuton_pressed==DIO_GitPinVule(KEY_pad_port,row))
    3d78:	80 e0       	ldi	r24, 0x00	; 0
    3d7a:	68 89       	ldd	r22, Y+16	; 0x10
    3d7c:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <DIO_GitPinVule>
    3d80:	88 23       	and	r24, r24
    3d82:	09 f0       	breq	.+2      	; 0x3d86 <KEY_PAD_VidGitPresedcalc+0x78>
    3d84:	94 c0       	rjmp	.+296    	; 0x3eae <KEY_PAD_VidGitPresedcalc+0x1a0>
			{
				keypad_OUT=KEYPAmap[row-4][colum];
    3d86:	88 89       	ldd	r24, Y+16	; 0x10
    3d88:	88 2f       	mov	r24, r24
    3d8a:	90 e0       	ldi	r25, 0x00	; 0
    3d8c:	ac 01       	movw	r20, r24
    3d8e:	44 50       	subi	r20, 0x04	; 4
    3d90:	50 40       	sbci	r21, 0x00	; 0
    3d92:	89 89       	ldd	r24, Y+17	; 0x11
    3d94:	28 2f       	mov	r18, r24
    3d96:	30 e0       	ldi	r19, 0x00	; 0
    3d98:	ca 01       	movw	r24, r20
    3d9a:	88 0f       	add	r24, r24
    3d9c:	99 1f       	adc	r25, r25
    3d9e:	88 0f       	add	r24, r24
    3da0:	99 1f       	adc	r25, r25
    3da2:	82 0f       	add	r24, r18
    3da4:	93 1f       	adc	r25, r19
    3da6:	9c 01       	movw	r18, r24
    3da8:	22 0f       	add	r18, r18
    3daa:	33 1f       	adc	r19, r19
    3dac:	ce 01       	movw	r24, r28
    3dae:	01 96       	adiw	r24, 0x01	; 1
    3db0:	82 0f       	add	r24, r18
    3db2:	93 1f       	adc	r25, r19
    3db4:	fc 01       	movw	r30, r24
    3db6:	71 96       	adiw	r30, 0x11	; 17
    3db8:	80 81       	ld	r24, Z
    3dba:	91 81       	ldd	r25, Z+1	; 0x01
    3dbc:	8f 87       	std	Y+15, r24	; 0x0f

				while(puuton_pressed==DIO_GitPinVule(KEY_pad_port,row))
    3dbe:	80 e0       	ldi	r24, 0x00	; 0
    3dc0:	68 89       	ldd	r22, Y+16	; 0x10
    3dc2:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <DIO_GitPinVule>
    3dc6:	88 23       	and	r24, r24
    3dc8:	d1 f3       	breq	.-12     	; 0x3dbe <KEY_PAD_VidGitPresedcalc+0xb0>
    3dca:	80 e0       	ldi	r24, 0x00	; 0
    3dcc:	90 e0       	ldi	r25, 0x00	; 0
    3dce:	a0 e2       	ldi	r26, 0x20	; 32
    3dd0:	b2 e4       	ldi	r27, 0x42	; 66
    3dd2:	8b 87       	std	Y+11, r24	; 0x0b
    3dd4:	9c 87       	std	Y+12, r25	; 0x0c
    3dd6:	ad 87       	std	Y+13, r26	; 0x0d
    3dd8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3dda:	6b 85       	ldd	r22, Y+11	; 0x0b
    3ddc:	7c 85       	ldd	r23, Y+12	; 0x0c
    3dde:	8d 85       	ldd	r24, Y+13	; 0x0d
    3de0:	9e 85       	ldd	r25, Y+14	; 0x0e
    3de2:	20 e0       	ldi	r18, 0x00	; 0
    3de4:	30 e0       	ldi	r19, 0x00	; 0
    3de6:	4a ef       	ldi	r20, 0xFA	; 250
    3de8:	54 e4       	ldi	r21, 0x44	; 68
    3dea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3dee:	dc 01       	movw	r26, r24
    3df0:	cb 01       	movw	r24, r22
    3df2:	8f 83       	std	Y+7, r24	; 0x07
    3df4:	98 87       	std	Y+8, r25	; 0x08
    3df6:	a9 87       	std	Y+9, r26	; 0x09
    3df8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3dfa:	6f 81       	ldd	r22, Y+7	; 0x07
    3dfc:	78 85       	ldd	r23, Y+8	; 0x08
    3dfe:	89 85       	ldd	r24, Y+9	; 0x09
    3e00:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e02:	20 e0       	ldi	r18, 0x00	; 0
    3e04:	30 e0       	ldi	r19, 0x00	; 0
    3e06:	40 e8       	ldi	r20, 0x80	; 128
    3e08:	5f e3       	ldi	r21, 0x3F	; 63
    3e0a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3e0e:	88 23       	and	r24, r24
    3e10:	2c f4       	brge	.+10     	; 0x3e1c <KEY_PAD_VidGitPresedcalc+0x10e>
		__ticks = 1;
    3e12:	81 e0       	ldi	r24, 0x01	; 1
    3e14:	90 e0       	ldi	r25, 0x00	; 0
    3e16:	9e 83       	std	Y+6, r25	; 0x06
    3e18:	8d 83       	std	Y+5, r24	; 0x05
    3e1a:	3f c0       	rjmp	.+126    	; 0x3e9a <KEY_PAD_VidGitPresedcalc+0x18c>
	else if (__tmp > 65535)
    3e1c:	6f 81       	ldd	r22, Y+7	; 0x07
    3e1e:	78 85       	ldd	r23, Y+8	; 0x08
    3e20:	89 85       	ldd	r24, Y+9	; 0x09
    3e22:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e24:	20 e0       	ldi	r18, 0x00	; 0
    3e26:	3f ef       	ldi	r19, 0xFF	; 255
    3e28:	4f e7       	ldi	r20, 0x7F	; 127
    3e2a:	57 e4       	ldi	r21, 0x47	; 71
    3e2c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3e30:	18 16       	cp	r1, r24
    3e32:	4c f5       	brge	.+82     	; 0x3e86 <KEY_PAD_VidGitPresedcalc+0x178>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e34:	6b 85       	ldd	r22, Y+11	; 0x0b
    3e36:	7c 85       	ldd	r23, Y+12	; 0x0c
    3e38:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e3a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e3c:	20 e0       	ldi	r18, 0x00	; 0
    3e3e:	30 e0       	ldi	r19, 0x00	; 0
    3e40:	40 e2       	ldi	r20, 0x20	; 32
    3e42:	51 e4       	ldi	r21, 0x41	; 65
    3e44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e48:	dc 01       	movw	r26, r24
    3e4a:	cb 01       	movw	r24, r22
    3e4c:	bc 01       	movw	r22, r24
    3e4e:	cd 01       	movw	r24, r26
    3e50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e54:	dc 01       	movw	r26, r24
    3e56:	cb 01       	movw	r24, r22
    3e58:	9e 83       	std	Y+6, r25	; 0x06
    3e5a:	8d 83       	std	Y+5, r24	; 0x05
    3e5c:	0f c0       	rjmp	.+30     	; 0x3e7c <KEY_PAD_VidGitPresedcalc+0x16e>
    3e5e:	88 ec       	ldi	r24, 0xC8	; 200
    3e60:	90 e0       	ldi	r25, 0x00	; 0
    3e62:	9c 83       	std	Y+4, r25	; 0x04
    3e64:	8b 83       	std	Y+3, r24	; 0x03
    3e66:	8b 81       	ldd	r24, Y+3	; 0x03
    3e68:	9c 81       	ldd	r25, Y+4	; 0x04
    3e6a:	01 97       	sbiw	r24, 0x01	; 1
    3e6c:	f1 f7       	brne	.-4      	; 0x3e6a <KEY_PAD_VidGitPresedcalc+0x15c>
    3e6e:	9c 83       	std	Y+4, r25	; 0x04
    3e70:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e72:	8d 81       	ldd	r24, Y+5	; 0x05
    3e74:	9e 81       	ldd	r25, Y+6	; 0x06
    3e76:	01 97       	sbiw	r24, 0x01	; 1
    3e78:	9e 83       	std	Y+6, r25	; 0x06
    3e7a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e7c:	8d 81       	ldd	r24, Y+5	; 0x05
    3e7e:	9e 81       	ldd	r25, Y+6	; 0x06
    3e80:	00 97       	sbiw	r24, 0x00	; 0
    3e82:	69 f7       	brne	.-38     	; 0x3e5e <KEY_PAD_VidGitPresedcalc+0x150>
    3e84:	14 c0       	rjmp	.+40     	; 0x3eae <KEY_PAD_VidGitPresedcalc+0x1a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e86:	6f 81       	ldd	r22, Y+7	; 0x07
    3e88:	78 85       	ldd	r23, Y+8	; 0x08
    3e8a:	89 85       	ldd	r24, Y+9	; 0x09
    3e8c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e92:	dc 01       	movw	r26, r24
    3e94:	cb 01       	movw	r24, r22
    3e96:	9e 83       	std	Y+6, r25	; 0x06
    3e98:	8d 83       	std	Y+5, r24	; 0x05
    3e9a:	8d 81       	ldd	r24, Y+5	; 0x05
    3e9c:	9e 81       	ldd	r25, Y+6	; 0x06
    3e9e:	9a 83       	std	Y+2, r25	; 0x02
    3ea0:	89 83       	std	Y+1, r24	; 0x01
    3ea2:	89 81       	ldd	r24, Y+1	; 0x01
    3ea4:	9a 81       	ldd	r25, Y+2	; 0x02
    3ea6:	01 97       	sbiw	r24, 0x01	; 1
    3ea8:	f1 f7       	brne	.-4      	; 0x3ea6 <KEY_PAD_VidGitPresedcalc+0x198>
    3eaa:	9a 83       	std	Y+2, r25	; 0x02
    3eac:	89 83       	std	Y+1, r24	; 0x01
						{7,8,9,'*'},
						{'l','.','c','='}};
	for(colum=0;colum<4;colum++)
	{
		DIO_VidSitPintValue(KEY_pad_port,colum,0);
		for(row=4;row<8;row++)
    3eae:	88 89       	ldd	r24, Y+16	; 0x10
    3eb0:	8f 5f       	subi	r24, 0xFF	; 255
    3eb2:	88 8b       	std	Y+16, r24	; 0x10
    3eb4:	88 89       	ldd	r24, Y+16	; 0x10
    3eb6:	88 30       	cpi	r24, 0x08	; 8
    3eb8:	08 f4       	brcc	.+2      	; 0x3ebc <KEY_PAD_VidGitPresedcalc+0x1ae>
    3eba:	5e cf       	rjmp	.-324    	; 0x3d78 <KEY_PAD_VidGitPresedcalc+0x6a>
				{
				}
				_delay_ms(40);
			}
		}
		DIO_VidSitPintValue(KEY_pad_port,colum,1);
    3ebc:	80 e0       	ldi	r24, 0x00	; 0
    3ebe:	69 89       	ldd	r22, Y+17	; 0x11
    3ec0:	41 e0       	ldi	r20, 0x01	; 1
    3ec2:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <DIO_VidSitPintValue>
	u8 keypad_OUT=0;
	u16 KEYPAmap[4][4]={{1,2,3,'+'},
						{4,5,6,'-'},
						{7,8,9,'*'},
						{'l','.','c','='}};
	for(colum=0;colum<4;colum++)
    3ec6:	89 89       	ldd	r24, Y+17	; 0x11
    3ec8:	8f 5f       	subi	r24, 0xFF	; 255
    3eca:	89 8b       	std	Y+17, r24	; 0x11
    3ecc:	89 89       	ldd	r24, Y+17	; 0x11
    3ece:	84 30       	cpi	r24, 0x04	; 4
    3ed0:	08 f4       	brcc	.+2      	; 0x3ed4 <KEY_PAD_VidGitPresedcalc+0x1c6>
    3ed2:	4a cf       	rjmp	.-364    	; 0x3d68 <KEY_PAD_VidGitPresedcalc+0x5a>
				_delay_ms(40);
			}
		}
		DIO_VidSitPintValue(KEY_pad_port,colum,1);
	}
	return keypad_OUT;
    3ed4:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    3ed6:	e6 96       	adiw	r28, 0x36	; 54
    3ed8:	0f b6       	in	r0, 0x3f	; 63
    3eda:	f8 94       	cli
    3edc:	de bf       	out	0x3e, r29	; 62
    3ede:	0f be       	out	0x3f, r0	; 63
    3ee0:	cd bf       	out	0x3d, r28	; 61
    3ee2:	cf 91       	pop	r28
    3ee4:	df 91       	pop	r29
    3ee6:	08 95       	ret

00003ee8 <calculator>:
#include <avr/delay.h>
#include "../../HAL/LCD/LCD_Interface.h"
#include "../../HAL/KEY_PAD/KEY_PAD_Interface.h"

void calculator (void)
{
    3ee8:	df 93       	push	r29
    3eea:	cf 93       	push	r28
    3eec:	0f 92       	push	r0
    3eee:	cd b7       	in	r28, 0x3d	; 61
    3ef0:	de b7       	in	r29, 0x3e	; 62
	u8 number;
	KEY_PAD_VidInit();
    3ef2:	0e 94 8b 1d 	call	0x3b16	; 0x3b16 <KEY_PAD_VidInit>
	LCD_VidInit();
    3ef6:	0e 94 c8 16 	call	0x2d90	; 0x2d90 <LCD_VidInit>
	LCD_VidWriteData(0);
	LCD_VidPostion(0,14);
	LCD_VidWriteData(1);*/
	while(1)
	{
		number= KEY_PAD_VidGitPresedcalc();
    3efa:	0e 94 87 1e 	call	0x3d0e	; 0x3d0e <KEY_PAD_VidGitPresedcalc>
    3efe:	89 83       	std	Y+1, r24	; 0x01
		if (number==43)
    3f00:	89 81       	ldd	r24, Y+1	; 0x01
    3f02:	8b 32       	cpi	r24, 0x2B	; 43
    3f04:	21 f4       	brne	.+8      	; 0x3f0e <calculator+0x26>
		{LCD_VidWriteData('+');}
    3f06:	8b e2       	ldi	r24, 0x2B	; 43
    3f08:	0e 94 cf 19 	call	0x339e	; 0x339e <LCD_VidWriteData>
    3f0c:	f6 cf       	rjmp	.-20     	; 0x3efa <calculator+0x12>
		else if (number==61)
    3f0e:	89 81       	ldd	r24, Y+1	; 0x01
    3f10:	8d 33       	cpi	r24, 0x3D	; 61
    3f12:	21 f4       	brne	.+8      	; 0x3f1c <calculator+0x34>
		{LCD_VidWriteData('=');}
    3f14:	8d e3       	ldi	r24, 0x3D	; 61
    3f16:	0e 94 cf 19 	call	0x339e	; 0x339e <LCD_VidWriteData>
    3f1a:	ef cf       	rjmp	.-34     	; 0x3efa <calculator+0x12>
		else if (number==42)
    3f1c:	89 81       	ldd	r24, Y+1	; 0x01
    3f1e:	8a 32       	cpi	r24, 0x2A	; 42
    3f20:	21 f4       	brne	.+8      	; 0x3f2a <calculator+0x42>
		{LCD_VidWriteData('*');}
    3f22:	8a e2       	ldi	r24, 0x2A	; 42
    3f24:	0e 94 cf 19 	call	0x339e	; 0x339e <LCD_VidWriteData>
    3f28:	e8 cf       	rjmp	.-48     	; 0x3efa <calculator+0x12>
		else if (number==45)
    3f2a:	89 81       	ldd	r24, Y+1	; 0x01
    3f2c:	8d 32       	cpi	r24, 0x2D	; 45
    3f2e:	21 f4       	brne	.+8      	; 0x3f38 <calculator+0x50>
		{LCD_VidWriteData('-');}
    3f30:	8d e2       	ldi	r24, 0x2D	; 45
    3f32:	0e 94 cf 19 	call	0x339e	; 0x339e <LCD_VidWriteData>
    3f36:	e1 cf       	rjmp	.-62     	; 0x3efa <calculator+0x12>
		else if (number==46)
    3f38:	89 81       	ldd	r24, Y+1	; 0x01
    3f3a:	8e 32       	cpi	r24, 0x2E	; 46
    3f3c:	21 f4       	brne	.+8      	; 0x3f46 <calculator+0x5e>
		{LCD_VidWriteData('.');}
    3f3e:	8e e2       	ldi	r24, 0x2E	; 46
    3f40:	0e 94 cf 19 	call	0x339e	; 0x339e <LCD_VidWriteData>
    3f44:	da cf       	rjmp	.-76     	; 0x3efa <calculator+0x12>
		else if (number==108)
    3f46:	89 81       	ldd	r24, Y+1	; 0x01
    3f48:	8c 36       	cpi	r24, 0x6C	; 108
    3f4a:	21 f4       	brne	.+8      	; 0x3f54 <calculator+0x6c>
		{LCD_VidWriteData('0');}
    3f4c:	80 e3       	ldi	r24, 0x30	; 48
    3f4e:	0e 94 cf 19 	call	0x339e	; 0x339e <LCD_VidWriteData>
    3f52:	d3 cf       	rjmp	.-90     	; 0x3efa <calculator+0x12>
		else if (number==99)
    3f54:	89 81       	ldd	r24, Y+1	; 0x01
    3f56:	83 36       	cpi	r24, 0x63	; 99
    3f58:	19 f4       	brne	.+6      	; 0x3f60 <calculator+0x78>
		{
			LCD_VidInit();
    3f5a:	0e 94 c8 16 	call	0x2d90	; 0x2d90 <LCD_VidInit>
    3f5e:	cd cf       	rjmp	.-102    	; 0x3efa <calculator+0x12>
			/*LCD_VidString("result=");*/
		}
		else
		LCD_VidDispNumber(number);
    3f60:	89 81       	ldd	r24, Y+1	; 0x01
    3f62:	88 2f       	mov	r24, r24
    3f64:	90 e0       	ldi	r25, 0x00	; 0
    3f66:	a0 e0       	ldi	r26, 0x00	; 0
    3f68:	b0 e0       	ldi	r27, 0x00	; 0
    3f6a:	bc 01       	movw	r22, r24
    3f6c:	cd 01       	movw	r24, r26
    3f6e:	0e 94 82 1b 	call	0x3704	; 0x3704 <LCD_VidDispNumber>
    3f72:	c3 cf       	rjmp	.-122    	; 0x3efa <calculator+0x12>

00003f74 <ADC>:
#include "../MCAL/DIO/DIO_Interface.h"
#include "../MCAL/ADC/ADC_Interface.h"
#include <avr/delay.h>

void ADC (void)
{
    3f74:	df 93       	push	r29
    3f76:	cf 93       	push	r28
    3f78:	00 d0       	rcall	.+0      	; 0x3f7a <ADC+0x6>
    3f7a:	00 d0       	rcall	.+0      	; 0x3f7c <ADC+0x8>
    3f7c:	cd b7       	in	r28, 0x3d	; 61
    3f7e:	de b7       	in	r29, 0x3e	; 62
	u16 Digital_value=0;
    3f80:	1c 82       	std	Y+4, r1	; 0x04
    3f82:	1b 82       	std	Y+3, r1	; 0x03
	u16 Analog_value=0;
    3f84:	1a 82       	std	Y+2, r1	; 0x02
    3f86:	19 82       	std	Y+1, r1	; 0x01
	//lcd int
	LCD_Vid4Initialization();
    3f88:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <LCD_Vid4Initialization>
	LCD_Write4String("analog signal:",0,0);
    3f8c:	80 e6       	ldi	r24, 0x60	; 96
    3f8e:	90 e0       	ldi	r25, 0x00	; 0
    3f90:	60 e0       	ldi	r22, 0x00	; 0
    3f92:	40 e0       	ldi	r20, 0x00	; 0
    3f94:	0e 94 ff 14 	call	0x29fe	; 0x29fe <LCD_Write4String>
	//adc init
	ADC_VidInit();
    3f98:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <ADC_VidInit>
	DIO_VidSitPintDirection(PORTB,PIN0,OUTPUT);
    3f9c:	81 e0       	ldi	r24, 0x01	; 1
    3f9e:	60 e0       	ldi	r22, 0x00	; 0
    3fa0:	41 e0       	ldi	r20, 0x01	; 1
    3fa2:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <DIO_VidSitPintDirection>
	DIO_VidSitPintDirection(PORTB,PIN1,OUTPUT);
    3fa6:	81 e0       	ldi	r24, 0x01	; 1
    3fa8:	61 e0       	ldi	r22, 0x01	; 1
    3faa:	41 e0       	ldi	r20, 0x01	; 1
    3fac:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <DIO_VidSitPintDirection>
	DIO_VidSitPintDirection(PORTB,PIN7,OUTPUT);
    3fb0:	81 e0       	ldi	r24, 0x01	; 1
    3fb2:	67 e0       	ldi	r22, 0x07	; 7
    3fb4:	41 e0       	ldi	r20, 0x01	; 1
    3fb6:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <DIO_VidSitPintDirection>
	while(1)
	{
		Digital_value= ADC_U16GitDigital(0);
    3fba:	80 e0       	ldi	r24, 0x00	; 0
    3fbc:	0e 94 b7 0c 	call	0x196e	; 0x196e <ADC_U16GitDigital>
    3fc0:	9c 83       	std	Y+4, r25	; 0x04
    3fc2:	8b 83       	std	Y+3, r24	; 0x03
		Analog_value=((Digital_value*5000UL)/1024);
    3fc4:	8b 81       	ldd	r24, Y+3	; 0x03
    3fc6:	9c 81       	ldd	r25, Y+4	; 0x04
    3fc8:	cc 01       	movw	r24, r24
    3fca:	a0 e0       	ldi	r26, 0x00	; 0
    3fcc:	b0 e0       	ldi	r27, 0x00	; 0
    3fce:	28 e8       	ldi	r18, 0x88	; 136
    3fd0:	33 e1       	ldi	r19, 0x13	; 19
    3fd2:	40 e0       	ldi	r20, 0x00	; 0
    3fd4:	50 e0       	ldi	r21, 0x00	; 0
    3fd6:	bc 01       	movw	r22, r24
    3fd8:	cd 01       	movw	r24, r26
    3fda:	0e 94 66 38 	call	0x70cc	; 0x70cc <__mulsi3>
    3fde:	dc 01       	movw	r26, r24
    3fe0:	cb 01       	movw	r24, r22
    3fe2:	07 2e       	mov	r0, r23
    3fe4:	7a e0       	ldi	r23, 0x0A	; 10
    3fe6:	b6 95       	lsr	r27
    3fe8:	a7 95       	ror	r26
    3fea:	97 95       	ror	r25
    3fec:	87 95       	ror	r24
    3fee:	7a 95       	dec	r23
    3ff0:	d1 f7       	brne	.-12     	; 0x3fe6 <ADC+0x72>
    3ff2:	70 2d       	mov	r23, r0
    3ff4:	9a 83       	std	Y+2, r25	; 0x02
    3ff6:	89 83       	std	Y+1, r24	; 0x01
		LCD_GoToPosition(1,0);
    3ff8:	81 e0       	ldi	r24, 0x01	; 1
    3ffa:	60 e0       	ldi	r22, 0x00	; 0
    3ffc:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <LCD_GoToPosition>
				LCD_VidDisp4Number(Analog_value);
    4000:	89 81       	ldd	r24, Y+1	; 0x01
    4002:	9a 81       	ldd	r25, Y+2	; 0x02
    4004:	cc 01       	movw	r24, r24
    4006:	a0 e0       	ldi	r26, 0x00	; 0
    4008:	b0 e0       	ldi	r27, 0x00	; 0
    400a:	bc 01       	movw	r22, r24
    400c:	cd 01       	movw	r24, r26
    400e:	0e 94 eb 15 	call	0x2bd6	; 0x2bd6 <LCD_VidDisp4Number>
			DIO_VidSetPinValue(PORTB,PIN0,1);
		}
		else
			DIO_VidSetPinValue(PORTB,PIN0,0);*/

		if ((Analog_value <= 400) )
    4012:	89 81       	ldd	r24, Y+1	; 0x01
    4014:	9a 81       	ldd	r25, Y+2	; 0x02
    4016:	21 e0       	ldi	r18, 0x01	; 1
    4018:	81 39       	cpi	r24, 0x91	; 145
    401a:	92 07       	cpc	r25, r18
    401c:	80 f4       	brcc	.+32     	; 0x403e <ADC+0xca>
				{
					DIO_VidSitPintValue(PORTB,PIN7,0);
    401e:	81 e0       	ldi	r24, 0x01	; 1
    4020:	67 e0       	ldi	r22, 0x07	; 7
    4022:	40 e0       	ldi	r20, 0x00	; 0
    4024:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <DIO_VidSitPintValue>
					DIO_VidSitPintValue(PORTB,PIN1,0);
    4028:	81 e0       	ldi	r24, 0x01	; 1
    402a:	61 e0       	ldi	r22, 0x01	; 1
    402c:	40 e0       	ldi	r20, 0x00	; 0
    402e:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <DIO_VidSitPintValue>
					DIO_VidSitPintValue(PORTB,PIN0,0);
    4032:	81 e0       	ldi	r24, 0x01	; 1
    4034:	60 e0       	ldi	r22, 0x00	; 0
    4036:	40 e0       	ldi	r20, 0x00	; 0
    4038:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <DIO_VidSitPintValue>
    403c:	be cf       	rjmp	.-132    	; 0x3fba <ADC+0x46>
				}
		else if ((Analog_value > 400)&& (Analog_value <= 1200) )
    403e:	89 81       	ldd	r24, Y+1	; 0x01
    4040:	9a 81       	ldd	r25, Y+2	; 0x02
    4042:	21 e0       	ldi	r18, 0x01	; 1
    4044:	81 39       	cpi	r24, 0x91	; 145
    4046:	92 07       	cpc	r25, r18
    4048:	b0 f0       	brcs	.+44     	; 0x4076 <ADC+0x102>
    404a:	89 81       	ldd	r24, Y+1	; 0x01
    404c:	9a 81       	ldd	r25, Y+2	; 0x02
    404e:	24 e0       	ldi	r18, 0x04	; 4
    4050:	81 3b       	cpi	r24, 0xB1	; 177
    4052:	92 07       	cpc	r25, r18
    4054:	80 f4       	brcc	.+32     	; 0x4076 <ADC+0x102>
		{
			DIO_VidSitPintValue(PORTB,PIN7,0);
    4056:	81 e0       	ldi	r24, 0x01	; 1
    4058:	67 e0       	ldi	r22, 0x07	; 7
    405a:	40 e0       	ldi	r20, 0x00	; 0
    405c:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <DIO_VidSitPintValue>
			DIO_VidSitPintValue(PORTB,PIN1,0);
    4060:	81 e0       	ldi	r24, 0x01	; 1
    4062:	61 e0       	ldi	r22, 0x01	; 1
    4064:	40 e0       	ldi	r20, 0x00	; 0
    4066:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <DIO_VidSitPintValue>
			DIO_VidSitPintValue(PORTB,PIN0,1);
    406a:	81 e0       	ldi	r24, 0x01	; 1
    406c:	60 e0       	ldi	r22, 0x00	; 0
    406e:	41 e0       	ldi	r20, 0x01	; 1
    4070:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <DIO_VidSitPintValue>
    4074:	a2 cf       	rjmp	.-188    	; 0x3fba <ADC+0x46>
		}
		else if ((Analog_value > 1200)&& (Analog_value <= 2500))
    4076:	89 81       	ldd	r24, Y+1	; 0x01
    4078:	9a 81       	ldd	r25, Y+2	; 0x02
    407a:	24 e0       	ldi	r18, 0x04	; 4
    407c:	81 3b       	cpi	r24, 0xB1	; 177
    407e:	92 07       	cpc	r25, r18
    4080:	b0 f0       	brcs	.+44     	; 0x40ae <ADC+0x13a>
    4082:	89 81       	ldd	r24, Y+1	; 0x01
    4084:	9a 81       	ldd	r25, Y+2	; 0x02
    4086:	29 e0       	ldi	r18, 0x09	; 9
    4088:	85 3c       	cpi	r24, 0xC5	; 197
    408a:	92 07       	cpc	r25, r18
    408c:	80 f4       	brcc	.+32     	; 0x40ae <ADC+0x13a>
		{
			DIO_VidSitPintValue(PORTB,PIN7,0);
    408e:	81 e0       	ldi	r24, 0x01	; 1
    4090:	67 e0       	ldi	r22, 0x07	; 7
    4092:	40 e0       	ldi	r20, 0x00	; 0
    4094:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <DIO_VidSitPintValue>
			DIO_VidSitPintValue(PORTB,PIN0,0);
    4098:	81 e0       	ldi	r24, 0x01	; 1
    409a:	60 e0       	ldi	r22, 0x00	; 0
    409c:	40 e0       	ldi	r20, 0x00	; 0
    409e:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <DIO_VidSitPintValue>
			DIO_VidSitPintValue(PORTB,PIN1,1);
    40a2:	81 e0       	ldi	r24, 0x01	; 1
    40a4:	61 e0       	ldi	r22, 0x01	; 1
    40a6:	41 e0       	ldi	r20, 0x01	; 1
    40a8:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <DIO_VidSitPintValue>
    40ac:	86 cf       	rjmp	.-244    	; 0x3fba <ADC+0x46>
		}

		else if ((Analog_value > 2500)&& (Analog_value <5000))
    40ae:	89 81       	ldd	r24, Y+1	; 0x01
    40b0:	9a 81       	ldd	r25, Y+2	; 0x02
    40b2:	29 e0       	ldi	r18, 0x09	; 9
    40b4:	85 3c       	cpi	r24, 0xC5	; 197
    40b6:	92 07       	cpc	r25, r18
    40b8:	08 f4       	brcc	.+2      	; 0x40bc <ADC+0x148>
    40ba:	7f cf       	rjmp	.-258    	; 0x3fba <ADC+0x46>
    40bc:	89 81       	ldd	r24, Y+1	; 0x01
    40be:	9a 81       	ldd	r25, Y+2	; 0x02
    40c0:	23 e1       	ldi	r18, 0x13	; 19
    40c2:	88 38       	cpi	r24, 0x88	; 136
    40c4:	92 07       	cpc	r25, r18
    40c6:	08 f0       	brcs	.+2      	; 0x40ca <ADC+0x156>
    40c8:	78 cf       	rjmp	.-272    	; 0x3fba <ADC+0x46>
		{
			DIO_VidSitPintValue(PORTB,PIN7,1);
    40ca:	81 e0       	ldi	r24, 0x01	; 1
    40cc:	67 e0       	ldi	r22, 0x07	; 7
    40ce:	41 e0       	ldi	r20, 0x01	; 1
    40d0:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <DIO_VidSitPintValue>
			DIO_VidSitPintValue(PORTB,PIN0,0);
    40d4:	81 e0       	ldi	r24, 0x01	; 1
    40d6:	60 e0       	ldi	r22, 0x00	; 0
    40d8:	40 e0       	ldi	r20, 0x00	; 0
    40da:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <DIO_VidSitPintValue>
			DIO_VidSitPintValue(PORTB,PIN1,0);
    40de:	81 e0       	ldi	r24, 0x01	; 1
    40e0:	61 e0       	ldi	r22, 0x01	; 1
    40e2:	40 e0       	ldi	r20, 0x00	; 0
    40e4:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <DIO_VidSitPintValue>
    40e8:	68 cf       	rjmp	.-304    	; 0x3fba <ADC+0x46>

000040ea <ADCI>:
#include "../MCAL/DIO/DIO_Interface.h"
#include "../MCAL/ADC/ADC_Interface.h"
#include <avr/delay.h>

void ADCI (void)
{
    40ea:	df 93       	push	r29
    40ec:	cf 93       	push	r28
    40ee:	cd b7       	in	r28, 0x3d	; 61
    40f0:	de b7       	in	r29, 0x3e	; 62

	//lcd int
	LCD_Vid4Initialization();
    40f2:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <LCD_Vid4Initialization>
	LCD_Write4String("analog signal:",0,0);
    40f6:	8f e6       	ldi	r24, 0x6F	; 111
    40f8:	90 e0       	ldi	r25, 0x00	; 0
    40fa:	60 e0       	ldi	r22, 0x00	; 0
    40fc:	40 e0       	ldi	r20, 0x00	; 0
    40fe:	0e 94 ff 14 	call	0x29fe	; 0x29fe <LCD_Write4String>
	//INTRRUPT ENABLE
	GIE_VidEnable();
    4102:	0e 94 a3 05 	call	0xb46	; 0xb46 <GIE_VidEnable>
	//adc init
	ADC_VidInit();
    4106:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <ADC_VidInit>
	DIO_VidSitPintDirection(PORTB,PIN0,OUTPUT);
    410a:	81 e0       	ldi	r24, 0x01	; 1
    410c:	60 e0       	ldi	r22, 0x00	; 0
    410e:	41 e0       	ldi	r20, 0x01	; 1
    4110:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <DIO_VidSitPintDirection>
	DIO_VidSitPintDirection(PORTB,PIN1,OUTPUT);
    4114:	81 e0       	ldi	r24, 0x01	; 1
    4116:	61 e0       	ldi	r22, 0x01	; 1
    4118:	41 e0       	ldi	r20, 0x01	; 1
    411a:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <DIO_VidSitPintDirection>
	DIO_VidSitPintDirection(PORTB,PIN7,OUTPUT);
    411e:	81 e0       	ldi	r24, 0x01	; 1
    4120:	67 e0       	ldi	r22, 0x07	; 7
    4122:	41 e0       	ldi	r20, 0x01	; 1
    4124:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <DIO_VidSitPintDirection>
	/*DIO_VidSitPintValue(PORTB,PIN7,1);
	DIO_VidSitPintValue(PORTB,PIN1,1);
	DIO_VidSitPintValue(PORTB,PIN0,0);
	_delay_ms(3000);*/
	ADC_VidEnableInt();
    4128:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <ADC_VidEnableInt>
	ADC_VidStartConvertion(0);
    412c:	80 e0       	ldi	r24, 0x00	; 0
    412e:	0e 94 ed 0c 	call	0x19da	; 0x19da <ADC_VidStartConvertion>
    4132:	ff cf       	rjmp	.-2      	; 0x4132 <ADCI+0x48>

00004134 <EXI>:
#include "../MCAL/GIE/GIE_Interface.h"
#include "../MCAL/DIO/DIO_Interface.h"
#include "../MCAL/EXI/EXI_Interface.h"
#include <avr/delay.h>
void EXI (void)
{
    4134:	df 93       	push	r29
    4136:	cf 93       	push	r28
    4138:	cd b7       	in	r28, 0x3d	; 61
    413a:	de b7       	in	r29, 0x3e	; 62
    413c:	2f 97       	sbiw	r28, 0x0f	; 15
    413e:	0f b6       	in	r0, 0x3f	; 63
    4140:	f8 94       	cli
    4142:	de bf       	out	0x3e, r29	; 62
    4144:	0f be       	out	0x3f, r0	; 63
    4146:	cd bf       	out	0x3d, r28	; 61
	u8 x=1;
    4148:	81 e0       	ldi	r24, 0x01	; 1
    414a:	8f 87       	std	Y+15, r24	; 0x0f

	//lcd int
	LCD_Vid4Initialization();
    414c:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <LCD_Vid4Initialization>
	LCD_Write4String("TEST:",0,0);
    4150:	8e e7       	ldi	r24, 0x7E	; 126
    4152:	90 e0       	ldi	r25, 0x00	; 0
    4154:	60 e0       	ldi	r22, 0x00	; 0
    4156:	40 e0       	ldi	r20, 0x00	; 0
    4158:	0e 94 ff 14 	call	0x29fe	; 0x29fe <LCD_Write4String>
	//0
	EXI_VidTrigerEdge(EX_INT0,LOW_LVEL);
    415c:	80 e0       	ldi	r24, 0x00	; 0
    415e:	60 e0       	ldi	r22, 0x00	; 0
    4160:	0e 94 2d 06 	call	0xc5a	; 0xc5a <EXI_VidTrigerEdge>
	EXI_VidEnable(EX_INT0);
    4164:	80 e0       	ldi	r24, 0x00	; 0
    4166:	0e 94 bf 05 	call	0xb7e	; 0xb7e <EXI_VidEnable>
	//1
	EXI_VidTrigerEdge(EX_INT1,LOW_LVEL);
    416a:	81 e0       	ldi	r24, 0x01	; 1
    416c:	60 e0       	ldi	r22, 0x00	; 0
    416e:	0e 94 2d 06 	call	0xc5a	; 0xc5a <EXI_VidTrigerEdge>
	EXI_VidEnable(EX_INT1);
    4172:	81 e0       	ldi	r24, 0x01	; 1
    4174:	0e 94 bf 05 	call	0xb7e	; 0xb7e <EXI_VidEnable>
	//2
	EXI_VidTrigerEdge(EX_INT2,LOW_LVEL);
    4178:	82 e0       	ldi	r24, 0x02	; 2
    417a:	60 e0       	ldi	r22, 0x00	; 0
    417c:	0e 94 2d 06 	call	0xc5a	; 0xc5a <EXI_VidTrigerEdge>
	EXI_VidEnable(EX_INT2);
    4180:	82 e0       	ldi	r24, 0x02	; 2
    4182:	0e 94 bf 05 	call	0xb7e	; 0xb7e <EXI_VidEnable>
	//
	GIE_VidEnable();
    4186:	0e 94 a3 05 	call	0xb46	; 0xb46 <GIE_VidEnable>
	DIO_VidSitPintDirection(PORTB,PIN0, OUTPUT);
    418a:	81 e0       	ldi	r24, 0x01	; 1
    418c:	60 e0       	ldi	r22, 0x00	; 0
    418e:	41 e0       	ldi	r20, 0x01	; 1
    4190:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <DIO_VidSitPintDirection>
	DIO_VidSitPintDirection(PORTB,PIN1, OUTPUT);
    4194:	81 e0       	ldi	r24, 0x01	; 1
    4196:	61 e0       	ldi	r22, 0x01	; 1
    4198:	41 e0       	ldi	r20, 0x01	; 1
    419a:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <DIO_VidSitPintDirection>
	DIO_VidSitPintDirection(PORTB,PIN7, OUTPUT);
    419e:	81 e0       	ldi	r24, 0x01	; 1
    41a0:	67 e0       	ldi	r22, 0x07	; 7
    41a2:	41 e0       	ldi	r20, 0x01	; 1
    41a4:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <DIO_VidSitPintDirection>
	while (1)
	{
		LCD_GoToPosition(1,0);
    41a8:	81 e0       	ldi	r24, 0x01	; 1
    41aa:	60 e0       	ldi	r22, 0x00	; 0
    41ac:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <LCD_GoToPosition>
		LCD_VidDisp4Number(x);
    41b0:	8f 85       	ldd	r24, Y+15	; 0x0f
    41b2:	88 2f       	mov	r24, r24
    41b4:	90 e0       	ldi	r25, 0x00	; 0
    41b6:	a0 e0       	ldi	r26, 0x00	; 0
    41b8:	b0 e0       	ldi	r27, 0x00	; 0
    41ba:	bc 01       	movw	r22, r24
    41bc:	cd 01       	movw	r24, r26
    41be:	0e 94 eb 15 	call	0x2bd6	; 0x2bd6 <LCD_VidDisp4Number>
		x++;
    41c2:	8f 85       	ldd	r24, Y+15	; 0x0f
    41c4:	8f 5f       	subi	r24, 0xFF	; 255
    41c6:	8f 87       	std	Y+15, r24	; 0x0f
    41c8:	80 e0       	ldi	r24, 0x00	; 0
    41ca:	90 e0       	ldi	r25, 0x00	; 0
    41cc:	aa e7       	ldi	r26, 0x7A	; 122
    41ce:	b4 e4       	ldi	r27, 0x44	; 68
    41d0:	8b 87       	std	Y+11, r24	; 0x0b
    41d2:	9c 87       	std	Y+12, r25	; 0x0c
    41d4:	ad 87       	std	Y+13, r26	; 0x0d
    41d6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    41d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    41da:	7c 85       	ldd	r23, Y+12	; 0x0c
    41dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    41de:	9e 85       	ldd	r25, Y+14	; 0x0e
    41e0:	20 e0       	ldi	r18, 0x00	; 0
    41e2:	30 e0       	ldi	r19, 0x00	; 0
    41e4:	4a ef       	ldi	r20, 0xFA	; 250
    41e6:	54 e4       	ldi	r21, 0x44	; 68
    41e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41ec:	dc 01       	movw	r26, r24
    41ee:	cb 01       	movw	r24, r22
    41f0:	8f 83       	std	Y+7, r24	; 0x07
    41f2:	98 87       	std	Y+8, r25	; 0x08
    41f4:	a9 87       	std	Y+9, r26	; 0x09
    41f6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    41f8:	6f 81       	ldd	r22, Y+7	; 0x07
    41fa:	78 85       	ldd	r23, Y+8	; 0x08
    41fc:	89 85       	ldd	r24, Y+9	; 0x09
    41fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    4200:	20 e0       	ldi	r18, 0x00	; 0
    4202:	30 e0       	ldi	r19, 0x00	; 0
    4204:	40 e8       	ldi	r20, 0x80	; 128
    4206:	5f e3       	ldi	r21, 0x3F	; 63
    4208:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    420c:	88 23       	and	r24, r24
    420e:	2c f4       	brge	.+10     	; 0x421a <EXI+0xe6>
		__ticks = 1;
    4210:	81 e0       	ldi	r24, 0x01	; 1
    4212:	90 e0       	ldi	r25, 0x00	; 0
    4214:	9e 83       	std	Y+6, r25	; 0x06
    4216:	8d 83       	std	Y+5, r24	; 0x05
    4218:	3f c0       	rjmp	.+126    	; 0x4298 <EXI+0x164>
	else if (__tmp > 65535)
    421a:	6f 81       	ldd	r22, Y+7	; 0x07
    421c:	78 85       	ldd	r23, Y+8	; 0x08
    421e:	89 85       	ldd	r24, Y+9	; 0x09
    4220:	9a 85       	ldd	r25, Y+10	; 0x0a
    4222:	20 e0       	ldi	r18, 0x00	; 0
    4224:	3f ef       	ldi	r19, 0xFF	; 255
    4226:	4f e7       	ldi	r20, 0x7F	; 127
    4228:	57 e4       	ldi	r21, 0x47	; 71
    422a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    422e:	18 16       	cp	r1, r24
    4230:	4c f5       	brge	.+82     	; 0x4284 <EXI+0x150>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4232:	6b 85       	ldd	r22, Y+11	; 0x0b
    4234:	7c 85       	ldd	r23, Y+12	; 0x0c
    4236:	8d 85       	ldd	r24, Y+13	; 0x0d
    4238:	9e 85       	ldd	r25, Y+14	; 0x0e
    423a:	20 e0       	ldi	r18, 0x00	; 0
    423c:	30 e0       	ldi	r19, 0x00	; 0
    423e:	40 e2       	ldi	r20, 0x20	; 32
    4240:	51 e4       	ldi	r21, 0x41	; 65
    4242:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4246:	dc 01       	movw	r26, r24
    4248:	cb 01       	movw	r24, r22
    424a:	bc 01       	movw	r22, r24
    424c:	cd 01       	movw	r24, r26
    424e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4252:	dc 01       	movw	r26, r24
    4254:	cb 01       	movw	r24, r22
    4256:	9e 83       	std	Y+6, r25	; 0x06
    4258:	8d 83       	std	Y+5, r24	; 0x05
    425a:	0f c0       	rjmp	.+30     	; 0x427a <EXI+0x146>
    425c:	88 ec       	ldi	r24, 0xC8	; 200
    425e:	90 e0       	ldi	r25, 0x00	; 0
    4260:	9c 83       	std	Y+4, r25	; 0x04
    4262:	8b 83       	std	Y+3, r24	; 0x03
    4264:	8b 81       	ldd	r24, Y+3	; 0x03
    4266:	9c 81       	ldd	r25, Y+4	; 0x04
    4268:	01 97       	sbiw	r24, 0x01	; 1
    426a:	f1 f7       	brne	.-4      	; 0x4268 <EXI+0x134>
    426c:	9c 83       	std	Y+4, r25	; 0x04
    426e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4270:	8d 81       	ldd	r24, Y+5	; 0x05
    4272:	9e 81       	ldd	r25, Y+6	; 0x06
    4274:	01 97       	sbiw	r24, 0x01	; 1
    4276:	9e 83       	std	Y+6, r25	; 0x06
    4278:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    427a:	8d 81       	ldd	r24, Y+5	; 0x05
    427c:	9e 81       	ldd	r25, Y+6	; 0x06
    427e:	00 97       	sbiw	r24, 0x00	; 0
    4280:	69 f7       	brne	.-38     	; 0x425c <EXI+0x128>
    4282:	14 c0       	rjmp	.+40     	; 0x42ac <EXI+0x178>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4284:	6f 81       	ldd	r22, Y+7	; 0x07
    4286:	78 85       	ldd	r23, Y+8	; 0x08
    4288:	89 85       	ldd	r24, Y+9	; 0x09
    428a:	9a 85       	ldd	r25, Y+10	; 0x0a
    428c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4290:	dc 01       	movw	r26, r24
    4292:	cb 01       	movw	r24, r22
    4294:	9e 83       	std	Y+6, r25	; 0x06
    4296:	8d 83       	std	Y+5, r24	; 0x05
    4298:	8d 81       	ldd	r24, Y+5	; 0x05
    429a:	9e 81       	ldd	r25, Y+6	; 0x06
    429c:	9a 83       	std	Y+2, r25	; 0x02
    429e:	89 83       	std	Y+1, r24	; 0x01
    42a0:	89 81       	ldd	r24, Y+1	; 0x01
    42a2:	9a 81       	ldd	r25, Y+2	; 0x02
    42a4:	01 97       	sbiw	r24, 0x01	; 1
    42a6:	f1 f7       	brne	.-4      	; 0x42a4 <EXI+0x170>
    42a8:	9a 83       	std	Y+2, r25	; 0x02
    42aa:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1000);
		if(x==10)
    42ac:	8f 85       	ldd	r24, Y+15	; 0x0f
    42ae:	8a 30       	cpi	r24, 0x0A	; 10
    42b0:	09 f0       	breq	.+2      	; 0x42b4 <EXI+0x180>
    42b2:	7a cf       	rjmp	.-268    	; 0x41a8 <EXI+0x74>
		{x=1;}
    42b4:	81 e0       	ldi	r24, 0x01	; 1
    42b6:	8f 87       	std	Y+15, r24	; 0x0f
    42b8:	77 cf       	rjmp	.-274    	; 0x41a8 <EXI+0x74>

000042ba <LCD>:
#include <avr/delay.h>
#include "../HAL/LCD/LCD_Interface.h"


void LCD (void)
{
    42ba:	df 93       	push	r29
    42bc:	cf 93       	push	r28
    42be:	cd b7       	in	r28, 0x3d	; 61
    42c0:	de b7       	in	r29, 0x3e	; 62
    42c2:	ac 97       	sbiw	r28, 0x2c	; 44
    42c4:	0f b6       	in	r0, 0x3f	; 63
    42c6:	f8 94       	cli
    42c8:	de bf       	out	0x3e, r29	; 62
    42ca:	0f be       	out	0x3f, r0	; 63
    42cc:	cd bf       	out	0x3d, r28	; 61
	LCD_VidInit();
    42ce:	0e 94 c8 16 	call	0x2d90	; 0x2d90 <LCD_VidInit>
	LCD_VidWriteData('A');
    42d2:	81 e4       	ldi	r24, 0x41	; 65
    42d4:	0e 94 cf 19 	call	0x339e	; 0x339e <LCD_VidWriteData>
	LCD_VidWriteData(2);
	LCD_VidPostion(0,12);
	LCD_VidWriteData(3);*/
	while(1)
	{
		LCD_VidArabicNume();
    42d8:	0e 94 22 1d 	call	0x3a44	; 0x3a44 <LCD_VidArabicNume>
		for(u8 i=15,j=0;i>11;i--,j++)
    42dc:	8f e0       	ldi	r24, 0x0F	; 15
    42de:	8c a7       	std	Y+44, r24	; 0x2c
    42e0:	1b a6       	std	Y+43, r1	; 0x2b
    42e2:	0d c0       	rjmp	.+26     	; 0x42fe <LCD+0x44>
		{
		LCD_VidPostion(0,i);
    42e4:	80 e0       	ldi	r24, 0x00	; 0
    42e6:	6c a5       	ldd	r22, Y+44	; 0x2c
    42e8:	0e 94 0e 1c 	call	0x381c	; 0x381c <LCD_VidPostion>
		LCD_VidWriteData(j);
    42ec:	8b a5       	ldd	r24, Y+43	; 0x2b
    42ee:	0e 94 cf 19 	call	0x339e	; 0x339e <LCD_VidWriteData>
	LCD_VidPostion(0,12);
	LCD_VidWriteData(3);*/
	while(1)
	{
		LCD_VidArabicNume();
		for(u8 i=15,j=0;i>11;i--,j++)
    42f2:	8c a5       	ldd	r24, Y+44	; 0x2c
    42f4:	81 50       	subi	r24, 0x01	; 1
    42f6:	8c a7       	std	Y+44, r24	; 0x2c
    42f8:	8b a5       	ldd	r24, Y+43	; 0x2b
    42fa:	8f 5f       	subi	r24, 0xFF	; 255
    42fc:	8b a7       	std	Y+43, r24	; 0x2b
    42fe:	8c a5       	ldd	r24, Y+44	; 0x2c
    4300:	8c 30       	cpi	r24, 0x0C	; 12
    4302:	80 f7       	brcc	.-32     	; 0x42e4 <LCD+0x2a>
    4304:	80 e0       	ldi	r24, 0x00	; 0
    4306:	90 e0       	ldi	r25, 0x00	; 0
    4308:	aa e7       	ldi	r26, 0x7A	; 122
    430a:	b4 e4       	ldi	r27, 0x44	; 68
    430c:	8f a3       	std	Y+39, r24	; 0x27
    430e:	98 a7       	std	Y+40, r25	; 0x28
    4310:	a9 a7       	std	Y+41, r26	; 0x29
    4312:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4314:	6f a1       	ldd	r22, Y+39	; 0x27
    4316:	78 a5       	ldd	r23, Y+40	; 0x28
    4318:	89 a5       	ldd	r24, Y+41	; 0x29
    431a:	9a a5       	ldd	r25, Y+42	; 0x2a
    431c:	20 e0       	ldi	r18, 0x00	; 0
    431e:	30 e0       	ldi	r19, 0x00	; 0
    4320:	4a ef       	ldi	r20, 0xFA	; 250
    4322:	54 e4       	ldi	r21, 0x44	; 68
    4324:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4328:	dc 01       	movw	r26, r24
    432a:	cb 01       	movw	r24, r22
    432c:	8b a3       	std	Y+35, r24	; 0x23
    432e:	9c a3       	std	Y+36, r25	; 0x24
    4330:	ad a3       	std	Y+37, r26	; 0x25
    4332:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4334:	6b a1       	ldd	r22, Y+35	; 0x23
    4336:	7c a1       	ldd	r23, Y+36	; 0x24
    4338:	8d a1       	ldd	r24, Y+37	; 0x25
    433a:	9e a1       	ldd	r25, Y+38	; 0x26
    433c:	20 e0       	ldi	r18, 0x00	; 0
    433e:	30 e0       	ldi	r19, 0x00	; 0
    4340:	40 e8       	ldi	r20, 0x80	; 128
    4342:	5f e3       	ldi	r21, 0x3F	; 63
    4344:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4348:	88 23       	and	r24, r24
    434a:	2c f4       	brge	.+10     	; 0x4356 <LCD+0x9c>
		__ticks = 1;
    434c:	81 e0       	ldi	r24, 0x01	; 1
    434e:	90 e0       	ldi	r25, 0x00	; 0
    4350:	9a a3       	std	Y+34, r25	; 0x22
    4352:	89 a3       	std	Y+33, r24	; 0x21
    4354:	3f c0       	rjmp	.+126    	; 0x43d4 <LCD+0x11a>
	else if (__tmp > 65535)
    4356:	6b a1       	ldd	r22, Y+35	; 0x23
    4358:	7c a1       	ldd	r23, Y+36	; 0x24
    435a:	8d a1       	ldd	r24, Y+37	; 0x25
    435c:	9e a1       	ldd	r25, Y+38	; 0x26
    435e:	20 e0       	ldi	r18, 0x00	; 0
    4360:	3f ef       	ldi	r19, 0xFF	; 255
    4362:	4f e7       	ldi	r20, 0x7F	; 127
    4364:	57 e4       	ldi	r21, 0x47	; 71
    4366:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    436a:	18 16       	cp	r1, r24
    436c:	4c f5       	brge	.+82     	; 0x43c0 <LCD+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    436e:	6f a1       	ldd	r22, Y+39	; 0x27
    4370:	78 a5       	ldd	r23, Y+40	; 0x28
    4372:	89 a5       	ldd	r24, Y+41	; 0x29
    4374:	9a a5       	ldd	r25, Y+42	; 0x2a
    4376:	20 e0       	ldi	r18, 0x00	; 0
    4378:	30 e0       	ldi	r19, 0x00	; 0
    437a:	40 e2       	ldi	r20, 0x20	; 32
    437c:	51 e4       	ldi	r21, 0x41	; 65
    437e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4382:	dc 01       	movw	r26, r24
    4384:	cb 01       	movw	r24, r22
    4386:	bc 01       	movw	r22, r24
    4388:	cd 01       	movw	r24, r26
    438a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    438e:	dc 01       	movw	r26, r24
    4390:	cb 01       	movw	r24, r22
    4392:	9a a3       	std	Y+34, r25	; 0x22
    4394:	89 a3       	std	Y+33, r24	; 0x21
    4396:	0f c0       	rjmp	.+30     	; 0x43b6 <LCD+0xfc>
    4398:	88 ec       	ldi	r24, 0xC8	; 200
    439a:	90 e0       	ldi	r25, 0x00	; 0
    439c:	98 a3       	std	Y+32, r25	; 0x20
    439e:	8f 8f       	std	Y+31, r24	; 0x1f
    43a0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    43a2:	98 a1       	ldd	r25, Y+32	; 0x20
    43a4:	01 97       	sbiw	r24, 0x01	; 1
    43a6:	f1 f7       	brne	.-4      	; 0x43a4 <LCD+0xea>
    43a8:	98 a3       	std	Y+32, r25	; 0x20
    43aa:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    43ac:	89 a1       	ldd	r24, Y+33	; 0x21
    43ae:	9a a1       	ldd	r25, Y+34	; 0x22
    43b0:	01 97       	sbiw	r24, 0x01	; 1
    43b2:	9a a3       	std	Y+34, r25	; 0x22
    43b4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    43b6:	89 a1       	ldd	r24, Y+33	; 0x21
    43b8:	9a a1       	ldd	r25, Y+34	; 0x22
    43ba:	00 97       	sbiw	r24, 0x00	; 0
    43bc:	69 f7       	brne	.-38     	; 0x4398 <LCD+0xde>
    43be:	14 c0       	rjmp	.+40     	; 0x43e8 <LCD+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    43c0:	6b a1       	ldd	r22, Y+35	; 0x23
    43c2:	7c a1       	ldd	r23, Y+36	; 0x24
    43c4:	8d a1       	ldd	r24, Y+37	; 0x25
    43c6:	9e a1       	ldd	r25, Y+38	; 0x26
    43c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43cc:	dc 01       	movw	r26, r24
    43ce:	cb 01       	movw	r24, r22
    43d0:	9a a3       	std	Y+34, r25	; 0x22
    43d2:	89 a3       	std	Y+33, r24	; 0x21
    43d4:	89 a1       	ldd	r24, Y+33	; 0x21
    43d6:	9a a1       	ldd	r25, Y+34	; 0x22
    43d8:	9e 8f       	std	Y+30, r25	; 0x1e
    43da:	8d 8f       	std	Y+29, r24	; 0x1d
    43dc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    43de:	9e 8d       	ldd	r25, Y+30	; 0x1e
    43e0:	01 97       	sbiw	r24, 0x01	; 1
    43e2:	f1 f7       	brne	.-4      	; 0x43e0 <LCD+0x126>
    43e4:	9e 8f       	std	Y+30, r25	; 0x1e
    43e6:	8d 8f       	std	Y+29, r24	; 0x1d
		{
		LCD_VidPostion(0,i);
		LCD_VidWriteData(j);
		}
		_delay_ms(1000);
		LCD_VidWriteCommand(Clear_Display);
    43e8:	81 e0       	ldi	r24, 0x01	; 1
    43ea:	0e 94 bf 18 	call	0x317e	; 0x317e <LCD_VidWriteCommand>
		LCD_VidArabicNume();
    43ee:	0e 94 22 1d 	call	0x3a44	; 0x3a44 <LCD_VidArabicNume>
		LCD_VidPostion(1,9);
    43f2:	81 e0       	ldi	r24, 0x01	; 1
    43f4:	69 e0       	ldi	r22, 0x09	; 9
    43f6:	0e 94 0e 1c 	call	0x381c	; 0x381c <LCD_VidPostion>
		LCD_VidWriteData(0);
    43fa:	80 e0       	ldi	r24, 0x00	; 0
    43fc:	0e 94 cf 19 	call	0x339e	; 0x339e <LCD_VidWriteData>
		LCD_VidPostion(1,8);
    4400:	81 e0       	ldi	r24, 0x01	; 1
    4402:	68 e0       	ldi	r22, 0x08	; 8
    4404:	0e 94 0e 1c 	call	0x381c	; 0x381c <LCD_VidPostion>
		LCD_VidWriteData(1);
    4408:	81 e0       	ldi	r24, 0x01	; 1
    440a:	0e 94 cf 19 	call	0x339e	; 0x339e <LCD_VidWriteData>
		LCD_VidPostion(1,7);
    440e:	81 e0       	ldi	r24, 0x01	; 1
    4410:	67 e0       	ldi	r22, 0x07	; 7
    4412:	0e 94 0e 1c 	call	0x381c	; 0x381c <LCD_VidPostion>
		LCD_VidWriteData(2);
    4416:	82 e0       	ldi	r24, 0x02	; 2
    4418:	0e 94 cf 19 	call	0x339e	; 0x339e <LCD_VidWriteData>
		LCD_VidPostion(1,6);
    441c:	81 e0       	ldi	r24, 0x01	; 1
    441e:	66 e0       	ldi	r22, 0x06	; 6
    4420:	0e 94 0e 1c 	call	0x381c	; 0x381c <LCD_VidPostion>
		LCD_VidWriteData(3);
    4424:	83 e0       	ldi	r24, 0x03	; 3
    4426:	0e 94 cf 19 	call	0x339e	; 0x339e <LCD_VidWriteData>
    442a:	80 e0       	ldi	r24, 0x00	; 0
    442c:	90 e0       	ldi	r25, 0x00	; 0
    442e:	aa e7       	ldi	r26, 0x7A	; 122
    4430:	b4 e4       	ldi	r27, 0x44	; 68
    4432:	89 8f       	std	Y+25, r24	; 0x19
    4434:	9a 8f       	std	Y+26, r25	; 0x1a
    4436:	ab 8f       	std	Y+27, r26	; 0x1b
    4438:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    443a:	69 8d       	ldd	r22, Y+25	; 0x19
    443c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    443e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4440:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4442:	20 e0       	ldi	r18, 0x00	; 0
    4444:	30 e0       	ldi	r19, 0x00	; 0
    4446:	4a ef       	ldi	r20, 0xFA	; 250
    4448:	54 e4       	ldi	r21, 0x44	; 68
    444a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    444e:	dc 01       	movw	r26, r24
    4450:	cb 01       	movw	r24, r22
    4452:	8d 8b       	std	Y+21, r24	; 0x15
    4454:	9e 8b       	std	Y+22, r25	; 0x16
    4456:	af 8b       	std	Y+23, r26	; 0x17
    4458:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    445a:	6d 89       	ldd	r22, Y+21	; 0x15
    445c:	7e 89       	ldd	r23, Y+22	; 0x16
    445e:	8f 89       	ldd	r24, Y+23	; 0x17
    4460:	98 8d       	ldd	r25, Y+24	; 0x18
    4462:	20 e0       	ldi	r18, 0x00	; 0
    4464:	30 e0       	ldi	r19, 0x00	; 0
    4466:	40 e8       	ldi	r20, 0x80	; 128
    4468:	5f e3       	ldi	r21, 0x3F	; 63
    446a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    446e:	88 23       	and	r24, r24
    4470:	2c f4       	brge	.+10     	; 0x447c <LCD+0x1c2>
		__ticks = 1;
    4472:	81 e0       	ldi	r24, 0x01	; 1
    4474:	90 e0       	ldi	r25, 0x00	; 0
    4476:	9c 8b       	std	Y+20, r25	; 0x14
    4478:	8b 8b       	std	Y+19, r24	; 0x13
    447a:	3f c0       	rjmp	.+126    	; 0x44fa <LCD+0x240>
	else if (__tmp > 65535)
    447c:	6d 89       	ldd	r22, Y+21	; 0x15
    447e:	7e 89       	ldd	r23, Y+22	; 0x16
    4480:	8f 89       	ldd	r24, Y+23	; 0x17
    4482:	98 8d       	ldd	r25, Y+24	; 0x18
    4484:	20 e0       	ldi	r18, 0x00	; 0
    4486:	3f ef       	ldi	r19, 0xFF	; 255
    4488:	4f e7       	ldi	r20, 0x7F	; 127
    448a:	57 e4       	ldi	r21, 0x47	; 71
    448c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4490:	18 16       	cp	r1, r24
    4492:	4c f5       	brge	.+82     	; 0x44e6 <LCD+0x22c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4494:	69 8d       	ldd	r22, Y+25	; 0x19
    4496:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4498:	8b 8d       	ldd	r24, Y+27	; 0x1b
    449a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    449c:	20 e0       	ldi	r18, 0x00	; 0
    449e:	30 e0       	ldi	r19, 0x00	; 0
    44a0:	40 e2       	ldi	r20, 0x20	; 32
    44a2:	51 e4       	ldi	r21, 0x41	; 65
    44a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    44a8:	dc 01       	movw	r26, r24
    44aa:	cb 01       	movw	r24, r22
    44ac:	bc 01       	movw	r22, r24
    44ae:	cd 01       	movw	r24, r26
    44b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44b4:	dc 01       	movw	r26, r24
    44b6:	cb 01       	movw	r24, r22
    44b8:	9c 8b       	std	Y+20, r25	; 0x14
    44ba:	8b 8b       	std	Y+19, r24	; 0x13
    44bc:	0f c0       	rjmp	.+30     	; 0x44dc <LCD+0x222>
    44be:	88 ec       	ldi	r24, 0xC8	; 200
    44c0:	90 e0       	ldi	r25, 0x00	; 0
    44c2:	9a 8b       	std	Y+18, r25	; 0x12
    44c4:	89 8b       	std	Y+17, r24	; 0x11
    44c6:	89 89       	ldd	r24, Y+17	; 0x11
    44c8:	9a 89       	ldd	r25, Y+18	; 0x12
    44ca:	01 97       	sbiw	r24, 0x01	; 1
    44cc:	f1 f7       	brne	.-4      	; 0x44ca <LCD+0x210>
    44ce:	9a 8b       	std	Y+18, r25	; 0x12
    44d0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    44d2:	8b 89       	ldd	r24, Y+19	; 0x13
    44d4:	9c 89       	ldd	r25, Y+20	; 0x14
    44d6:	01 97       	sbiw	r24, 0x01	; 1
    44d8:	9c 8b       	std	Y+20, r25	; 0x14
    44da:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    44dc:	8b 89       	ldd	r24, Y+19	; 0x13
    44de:	9c 89       	ldd	r25, Y+20	; 0x14
    44e0:	00 97       	sbiw	r24, 0x00	; 0
    44e2:	69 f7       	brne	.-38     	; 0x44be <LCD+0x204>
    44e4:	14 c0       	rjmp	.+40     	; 0x450e <LCD+0x254>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    44e6:	6d 89       	ldd	r22, Y+21	; 0x15
    44e8:	7e 89       	ldd	r23, Y+22	; 0x16
    44ea:	8f 89       	ldd	r24, Y+23	; 0x17
    44ec:	98 8d       	ldd	r25, Y+24	; 0x18
    44ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44f2:	dc 01       	movw	r26, r24
    44f4:	cb 01       	movw	r24, r22
    44f6:	9c 8b       	std	Y+20, r25	; 0x14
    44f8:	8b 8b       	std	Y+19, r24	; 0x13
    44fa:	8b 89       	ldd	r24, Y+19	; 0x13
    44fc:	9c 89       	ldd	r25, Y+20	; 0x14
    44fe:	98 8b       	std	Y+16, r25	; 0x10
    4500:	8f 87       	std	Y+15, r24	; 0x0f
    4502:	8f 85       	ldd	r24, Y+15	; 0x0f
    4504:	98 89       	ldd	r25, Y+16	; 0x10
    4506:	01 97       	sbiw	r24, 0x01	; 1
    4508:	f1 f7       	brne	.-4      	; 0x4506 <LCD+0x24c>
    450a:	98 8b       	std	Y+16, r25	; 0x10
    450c:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1000);
		LCD_VidWriteCommand(Clear_Display);
    450e:	81 e0       	ldi	r24, 0x01	; 1
    4510:	0e 94 bf 18 	call	0x317e	; 0x317e <LCD_VidWriteCommand>
		LCD_VidArabicNume();
    4514:	0e 94 22 1d 	call	0x3a44	; 0x3a44 <LCD_VidArabicNume>
		LCD_VidPostion(0,3);
    4518:	80 e0       	ldi	r24, 0x00	; 0
    451a:	63 e0       	ldi	r22, 0x03	; 3
    451c:	0e 94 0e 1c 	call	0x381c	; 0x381c <LCD_VidPostion>
		LCD_VidWriteData(0);
    4520:	80 e0       	ldi	r24, 0x00	; 0
    4522:	0e 94 cf 19 	call	0x339e	; 0x339e <LCD_VidWriteData>
		LCD_VidPostion(0,2);
    4526:	80 e0       	ldi	r24, 0x00	; 0
    4528:	62 e0       	ldi	r22, 0x02	; 2
    452a:	0e 94 0e 1c 	call	0x381c	; 0x381c <LCD_VidPostion>
		LCD_VidWriteData(1);
    452e:	81 e0       	ldi	r24, 0x01	; 1
    4530:	0e 94 cf 19 	call	0x339e	; 0x339e <LCD_VidWriteData>
		LCD_VidPostion(0,1);
    4534:	80 e0       	ldi	r24, 0x00	; 0
    4536:	61 e0       	ldi	r22, 0x01	; 1
    4538:	0e 94 0e 1c 	call	0x381c	; 0x381c <LCD_VidPostion>
		LCD_VidWriteData(2);
    453c:	82 e0       	ldi	r24, 0x02	; 2
    453e:	0e 94 cf 19 	call	0x339e	; 0x339e <LCD_VidWriteData>
		LCD_VidPostion(0,0);
    4542:	80 e0       	ldi	r24, 0x00	; 0
    4544:	60 e0       	ldi	r22, 0x00	; 0
    4546:	0e 94 0e 1c 	call	0x381c	; 0x381c <LCD_VidPostion>
		LCD_VidWriteData(3);
    454a:	83 e0       	ldi	r24, 0x03	; 3
    454c:	0e 94 cf 19 	call	0x339e	; 0x339e <LCD_VidWriteData>
    4550:	80 e0       	ldi	r24, 0x00	; 0
    4552:	90 e0       	ldi	r25, 0x00	; 0
    4554:	aa e7       	ldi	r26, 0x7A	; 122
    4556:	b4 e4       	ldi	r27, 0x44	; 68
    4558:	8b 87       	std	Y+11, r24	; 0x0b
    455a:	9c 87       	std	Y+12, r25	; 0x0c
    455c:	ad 87       	std	Y+13, r26	; 0x0d
    455e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4560:	6b 85       	ldd	r22, Y+11	; 0x0b
    4562:	7c 85       	ldd	r23, Y+12	; 0x0c
    4564:	8d 85       	ldd	r24, Y+13	; 0x0d
    4566:	9e 85       	ldd	r25, Y+14	; 0x0e
    4568:	20 e0       	ldi	r18, 0x00	; 0
    456a:	30 e0       	ldi	r19, 0x00	; 0
    456c:	4a ef       	ldi	r20, 0xFA	; 250
    456e:	54 e4       	ldi	r21, 0x44	; 68
    4570:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4574:	dc 01       	movw	r26, r24
    4576:	cb 01       	movw	r24, r22
    4578:	8f 83       	std	Y+7, r24	; 0x07
    457a:	98 87       	std	Y+8, r25	; 0x08
    457c:	a9 87       	std	Y+9, r26	; 0x09
    457e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4580:	6f 81       	ldd	r22, Y+7	; 0x07
    4582:	78 85       	ldd	r23, Y+8	; 0x08
    4584:	89 85       	ldd	r24, Y+9	; 0x09
    4586:	9a 85       	ldd	r25, Y+10	; 0x0a
    4588:	20 e0       	ldi	r18, 0x00	; 0
    458a:	30 e0       	ldi	r19, 0x00	; 0
    458c:	40 e8       	ldi	r20, 0x80	; 128
    458e:	5f e3       	ldi	r21, 0x3F	; 63
    4590:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4594:	88 23       	and	r24, r24
    4596:	2c f4       	brge	.+10     	; 0x45a2 <LCD+0x2e8>
		__ticks = 1;
    4598:	81 e0       	ldi	r24, 0x01	; 1
    459a:	90 e0       	ldi	r25, 0x00	; 0
    459c:	9e 83       	std	Y+6, r25	; 0x06
    459e:	8d 83       	std	Y+5, r24	; 0x05
    45a0:	3f c0       	rjmp	.+126    	; 0x4620 <LCD+0x366>
	else if (__tmp > 65535)
    45a2:	6f 81       	ldd	r22, Y+7	; 0x07
    45a4:	78 85       	ldd	r23, Y+8	; 0x08
    45a6:	89 85       	ldd	r24, Y+9	; 0x09
    45a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    45aa:	20 e0       	ldi	r18, 0x00	; 0
    45ac:	3f ef       	ldi	r19, 0xFF	; 255
    45ae:	4f e7       	ldi	r20, 0x7F	; 127
    45b0:	57 e4       	ldi	r21, 0x47	; 71
    45b2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    45b6:	18 16       	cp	r1, r24
    45b8:	4c f5       	brge	.+82     	; 0x460c <LCD+0x352>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    45ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    45bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    45be:	8d 85       	ldd	r24, Y+13	; 0x0d
    45c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    45c2:	20 e0       	ldi	r18, 0x00	; 0
    45c4:	30 e0       	ldi	r19, 0x00	; 0
    45c6:	40 e2       	ldi	r20, 0x20	; 32
    45c8:	51 e4       	ldi	r21, 0x41	; 65
    45ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    45ce:	dc 01       	movw	r26, r24
    45d0:	cb 01       	movw	r24, r22
    45d2:	bc 01       	movw	r22, r24
    45d4:	cd 01       	movw	r24, r26
    45d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45da:	dc 01       	movw	r26, r24
    45dc:	cb 01       	movw	r24, r22
    45de:	9e 83       	std	Y+6, r25	; 0x06
    45e0:	8d 83       	std	Y+5, r24	; 0x05
    45e2:	0f c0       	rjmp	.+30     	; 0x4602 <LCD+0x348>
    45e4:	88 ec       	ldi	r24, 0xC8	; 200
    45e6:	90 e0       	ldi	r25, 0x00	; 0
    45e8:	9c 83       	std	Y+4, r25	; 0x04
    45ea:	8b 83       	std	Y+3, r24	; 0x03
    45ec:	8b 81       	ldd	r24, Y+3	; 0x03
    45ee:	9c 81       	ldd	r25, Y+4	; 0x04
    45f0:	01 97       	sbiw	r24, 0x01	; 1
    45f2:	f1 f7       	brne	.-4      	; 0x45f0 <LCD+0x336>
    45f4:	9c 83       	std	Y+4, r25	; 0x04
    45f6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    45f8:	8d 81       	ldd	r24, Y+5	; 0x05
    45fa:	9e 81       	ldd	r25, Y+6	; 0x06
    45fc:	01 97       	sbiw	r24, 0x01	; 1
    45fe:	9e 83       	std	Y+6, r25	; 0x06
    4600:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4602:	8d 81       	ldd	r24, Y+5	; 0x05
    4604:	9e 81       	ldd	r25, Y+6	; 0x06
    4606:	00 97       	sbiw	r24, 0x00	; 0
    4608:	69 f7       	brne	.-38     	; 0x45e4 <LCD+0x32a>
    460a:	14 c0       	rjmp	.+40     	; 0x4634 <LCD+0x37a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    460c:	6f 81       	ldd	r22, Y+7	; 0x07
    460e:	78 85       	ldd	r23, Y+8	; 0x08
    4610:	89 85       	ldd	r24, Y+9	; 0x09
    4612:	9a 85       	ldd	r25, Y+10	; 0x0a
    4614:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4618:	dc 01       	movw	r26, r24
    461a:	cb 01       	movw	r24, r22
    461c:	9e 83       	std	Y+6, r25	; 0x06
    461e:	8d 83       	std	Y+5, r24	; 0x05
    4620:	8d 81       	ldd	r24, Y+5	; 0x05
    4622:	9e 81       	ldd	r25, Y+6	; 0x06
    4624:	9a 83       	std	Y+2, r25	; 0x02
    4626:	89 83       	std	Y+1, r24	; 0x01
    4628:	89 81       	ldd	r24, Y+1	; 0x01
    462a:	9a 81       	ldd	r25, Y+2	; 0x02
    462c:	01 97       	sbiw	r24, 0x01	; 1
    462e:	f1 f7       	brne	.-4      	; 0x462c <LCD+0x372>
    4630:	9a 83       	std	Y+2, r25	; 0x02
    4632:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1000);
		LCD_VidWriteCommand(Clear_Display);
    4634:	81 e0       	ldi	r24, 0x01	; 1
    4636:	0e 94 bf 18 	call	0x317e	; 0x317e <LCD_VidWriteCommand>
    463a:	4e ce       	rjmp	.-868    	; 0x42d8 <LCD+0x1e>

0000463c <LCD_4BIT>:
//#include "../MCAL/DIO/DIO_Interface.h"
#include <avr/delay.h>
#include "../HAL/LCD_4BIT/LCD_4BIT_Interface.h"
//#include "../HAL/LCD/LCD_Interface.h"
void LCD_4BIT(void)
{
    463c:	df 93       	push	r29
    463e:	cf 93       	push	r28
    4640:	cd b7       	in	r28, 0x3d	; 61
    4642:	de b7       	in	r29, 0x3e	; 62
    4644:	e4 97       	sbiw	r28, 0x34	; 52
    4646:	0f b6       	in	r0, 0x3f	; 63
    4648:	f8 94       	cli
    464a:	de bf       	out	0x3e, r29	; 62
    464c:	0f be       	out	0x3f, r0	; 63
    464e:	cd bf       	out	0x3d, r28	; 61

	u8 pattern1[]={0x00, 0x00, 0x04, 0x1A, 0x0A, 0x04, 0x00, 0x00};
    4650:	ce 01       	movw	r24, r28
    4652:	01 96       	adiw	r24, 0x01	; 1
    4654:	9a a3       	std	Y+34, r25	; 0x22
    4656:	89 a3       	std	Y+33, r24	; 0x21
    4658:	eb e0       	ldi	r30, 0x0B	; 11
    465a:	f1 e0       	ldi	r31, 0x01	; 1
    465c:	fc a3       	std	Y+36, r31	; 0x24
    465e:	eb a3       	std	Y+35, r30	; 0x23
    4660:	f8 e0       	ldi	r31, 0x08	; 8
    4662:	fd a3       	std	Y+37, r31	; 0x25
    4664:	eb a1       	ldd	r30, Y+35	; 0x23
    4666:	fc a1       	ldd	r31, Y+36	; 0x24
    4668:	00 80       	ld	r0, Z
    466a:	8b a1       	ldd	r24, Y+35	; 0x23
    466c:	9c a1       	ldd	r25, Y+36	; 0x24
    466e:	01 96       	adiw	r24, 0x01	; 1
    4670:	9c a3       	std	Y+36, r25	; 0x24
    4672:	8b a3       	std	Y+35, r24	; 0x23
    4674:	e9 a1       	ldd	r30, Y+33	; 0x21
    4676:	fa a1       	ldd	r31, Y+34	; 0x22
    4678:	00 82       	st	Z, r0
    467a:	89 a1       	ldd	r24, Y+33	; 0x21
    467c:	9a a1       	ldd	r25, Y+34	; 0x22
    467e:	01 96       	adiw	r24, 0x01	; 1
    4680:	9a a3       	std	Y+34, r25	; 0x22
    4682:	89 a3       	std	Y+33, r24	; 0x21
    4684:	9d a1       	ldd	r25, Y+37	; 0x25
    4686:	91 50       	subi	r25, 0x01	; 1
    4688:	9d a3       	std	Y+37, r25	; 0x25
    468a:	ed a1       	ldd	r30, Y+37	; 0x25
    468c:	ee 23       	and	r30, r30
    468e:	51 f7       	brne	.-44     	; 0x4664 <LCD_4BIT+0x28>
	u8 pattern2[]={0x00, 0x0C, 0x02, 0x1F, 0x00, 0x00, 0x00, 0x00};
    4690:	ce 01       	movw	r24, r28
    4692:	09 96       	adiw	r24, 0x09	; 9
    4694:	9f a3       	std	Y+39, r25	; 0x27
    4696:	8e a3       	std	Y+38, r24	; 0x26
    4698:	e3 e0       	ldi	r30, 0x03	; 3
    469a:	f1 e0       	ldi	r31, 0x01	; 1
    469c:	f9 a7       	std	Y+41, r31	; 0x29
    469e:	e8 a7       	std	Y+40, r30	; 0x28
    46a0:	f8 e0       	ldi	r31, 0x08	; 8
    46a2:	fa a7       	std	Y+42, r31	; 0x2a
    46a4:	e8 a5       	ldd	r30, Y+40	; 0x28
    46a6:	f9 a5       	ldd	r31, Y+41	; 0x29
    46a8:	00 80       	ld	r0, Z
    46aa:	88 a5       	ldd	r24, Y+40	; 0x28
    46ac:	99 a5       	ldd	r25, Y+41	; 0x29
    46ae:	01 96       	adiw	r24, 0x01	; 1
    46b0:	99 a7       	std	Y+41, r25	; 0x29
    46b2:	88 a7       	std	Y+40, r24	; 0x28
    46b4:	ee a1       	ldd	r30, Y+38	; 0x26
    46b6:	ff a1       	ldd	r31, Y+39	; 0x27
    46b8:	00 82       	st	Z, r0
    46ba:	8e a1       	ldd	r24, Y+38	; 0x26
    46bc:	9f a1       	ldd	r25, Y+39	; 0x27
    46be:	01 96       	adiw	r24, 0x01	; 1
    46c0:	9f a3       	std	Y+39, r25	; 0x27
    46c2:	8e a3       	std	Y+38, r24	; 0x26
    46c4:	9a a5       	ldd	r25, Y+42	; 0x2a
    46c6:	91 50       	subi	r25, 0x01	; 1
    46c8:	9a a7       	std	Y+42, r25	; 0x2a
    46ca:	ea a5       	ldd	r30, Y+42	; 0x2a
    46cc:	ee 23       	and	r30, r30
    46ce:	51 f7       	brne	.-44     	; 0x46a4 <LCD_4BIT+0x68>
	u8 pattern3[]={0x00, 0x00, 0x04, 0x1B, 0x0A, 0x04, 0x00, 0x00};
    46d0:	ce 01       	movw	r24, r28
    46d2:	41 96       	adiw	r24, 0x11	; 17
    46d4:	9c a7       	std	Y+44, r25	; 0x2c
    46d6:	8b a7       	std	Y+43, r24	; 0x2b
    46d8:	eb ef       	ldi	r30, 0xFB	; 251
    46da:	f0 e0       	ldi	r31, 0x00	; 0
    46dc:	fe a7       	std	Y+46, r31	; 0x2e
    46de:	ed a7       	std	Y+45, r30	; 0x2d
    46e0:	f8 e0       	ldi	r31, 0x08	; 8
    46e2:	ff a7       	std	Y+47, r31	; 0x2f
    46e4:	ed a5       	ldd	r30, Y+45	; 0x2d
    46e6:	fe a5       	ldd	r31, Y+46	; 0x2e
    46e8:	00 80       	ld	r0, Z
    46ea:	8d a5       	ldd	r24, Y+45	; 0x2d
    46ec:	9e a5       	ldd	r25, Y+46	; 0x2e
    46ee:	01 96       	adiw	r24, 0x01	; 1
    46f0:	9e a7       	std	Y+46, r25	; 0x2e
    46f2:	8d a7       	std	Y+45, r24	; 0x2d
    46f4:	eb a5       	ldd	r30, Y+43	; 0x2b
    46f6:	fc a5       	ldd	r31, Y+44	; 0x2c
    46f8:	00 82       	st	Z, r0
    46fa:	8b a5       	ldd	r24, Y+43	; 0x2b
    46fc:	9c a5       	ldd	r25, Y+44	; 0x2c
    46fe:	01 96       	adiw	r24, 0x01	; 1
    4700:	9c a7       	std	Y+44, r25	; 0x2c
    4702:	8b a7       	std	Y+43, r24	; 0x2b
    4704:	9f a5       	ldd	r25, Y+47	; 0x2f
    4706:	91 50       	subi	r25, 0x01	; 1
    4708:	9f a7       	std	Y+47, r25	; 0x2f
    470a:	ef a5       	ldd	r30, Y+47	; 0x2f
    470c:	ee 23       	and	r30, r30
    470e:	51 f7       	brne	.-44     	; 0x46e4 <LCD_4BIT+0xa8>
	u8 pattern4[]={0x00, 0x04, 0x04, 0x1F, 0x00, 0x00, 0x00, 0x00};
    4710:	ce 01       	movw	r24, r28
    4712:	49 96       	adiw	r24, 0x19	; 25
    4714:	99 ab       	std	Y+49, r25	; 0x31
    4716:	88 ab       	std	Y+48, r24	; 0x30
    4718:	e3 ef       	ldi	r30, 0xF3	; 243
    471a:	f0 e0       	ldi	r31, 0x00	; 0
    471c:	fb ab       	std	Y+51, r31	; 0x33
    471e:	ea ab       	std	Y+50, r30	; 0x32
    4720:	f8 e0       	ldi	r31, 0x08	; 8
    4722:	fc ab       	std	Y+52, r31	; 0x34
    4724:	ea a9       	ldd	r30, Y+50	; 0x32
    4726:	fb a9       	ldd	r31, Y+51	; 0x33
    4728:	00 80       	ld	r0, Z
    472a:	8a a9       	ldd	r24, Y+50	; 0x32
    472c:	9b a9       	ldd	r25, Y+51	; 0x33
    472e:	01 96       	adiw	r24, 0x01	; 1
    4730:	9b ab       	std	Y+51, r25	; 0x33
    4732:	8a ab       	std	Y+50, r24	; 0x32
    4734:	e8 a9       	ldd	r30, Y+48	; 0x30
    4736:	f9 a9       	ldd	r31, Y+49	; 0x31
    4738:	00 82       	st	Z, r0
    473a:	88 a9       	ldd	r24, Y+48	; 0x30
    473c:	99 a9       	ldd	r25, Y+49	; 0x31
    473e:	01 96       	adiw	r24, 0x01	; 1
    4740:	99 ab       	std	Y+49, r25	; 0x31
    4742:	88 ab       	std	Y+48, r24	; 0x30
    4744:	9c a9       	ldd	r25, Y+52	; 0x34
    4746:	91 50       	subi	r25, 0x01	; 1
    4748:	9c ab       	std	Y+52, r25	; 0x34
    474a:	ec a9       	ldd	r30, Y+52	; 0x34
    474c:	ee 23       	and	r30, r30
    474e:	51 f7       	brne	.-44     	; 0x4724 <LCD_4BIT+0xe8>
	LCD_Vid4Initialization();
    4750:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <LCD_Vid4Initialization>
	LCD_Write4String("kaled",0,5);
    4754:	84 e8       	ldi	r24, 0x84	; 132
    4756:	90 e0       	ldi	r25, 0x00	; 0
    4758:	60 e0       	ldi	r22, 0x00	; 0
    475a:	45 e0       	ldi	r20, 0x05	; 5
    475c:	0e 94 ff 14 	call	0x29fe	; 0x29fe <LCD_Write4String>
	LCD_StoreCustomChr(pattern1,0);
    4760:	ce 01       	movw	r24, r28
    4762:	01 96       	adiw	r24, 0x01	; 1
    4764:	60 e0       	ldi	r22, 0x00	; 0
    4766:	0e 94 77 16 	call	0x2cee	; 0x2cee <LCD_StoreCustomChr>
	LCD_StoreCustomChr(pattern2,1);
    476a:	ce 01       	movw	r24, r28
    476c:	09 96       	adiw	r24, 0x09	; 9
    476e:	61 e0       	ldi	r22, 0x01	; 1
    4770:	0e 94 77 16 	call	0x2cee	; 0x2cee <LCD_StoreCustomChr>
	LCD_StoreCustomChr(pattern3,2);
    4774:	ce 01       	movw	r24, r28
    4776:	41 96       	adiw	r24, 0x11	; 17
    4778:	62 e0       	ldi	r22, 0x02	; 2
    477a:	0e 94 77 16 	call	0x2cee	; 0x2cee <LCD_StoreCustomChr>
	LCD_StoreCustomChr(pattern4,3);
    477e:	ce 01       	movw	r24, r28
    4780:	49 96       	adiw	r24, 0x19	; 25
    4782:	63 e0       	ldi	r22, 0x03	; 3
    4784:	0e 94 77 16 	call	0x2cee	; 0x2cee <LCD_StoreCustomChr>
    4788:	ff cf       	rjmp	.-2      	; 0x4788 <LCD_4BIT+0x14c>

0000478a <LED>:
#include "../MCAL/DIO/DIO_TYPE.h"
#include "../MCAL/DIO/DIO_Interface.h"
	#include <avr/delay.h>

void LED (void)
{
    478a:	df 93       	push	r29
    478c:	cf 93       	push	r28
    478e:	cd b7       	in	r28, 0x3d	; 61
    4790:	de b7       	in	r29, 0x3e	; 62
    4792:	6c 97       	sbiw	r28, 0x1c	; 28
    4794:	0f b6       	in	r0, 0x3f	; 63
    4796:	f8 94       	cli
    4798:	de bf       	out	0x3e, r29	; 62
    479a:	0f be       	out	0x3f, r0	; 63
    479c:	cd bf       	out	0x3d, r28	; 61
	DIO_VidSitPintDirection(PORTA,PIN4,OUTPUT);
    479e:	80 e0       	ldi	r24, 0x00	; 0
    47a0:	64 e0       	ldi	r22, 0x04	; 4
    47a2:	41 e0       	ldi	r20, 0x01	; 1
    47a4:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <DIO_VidSitPintDirection>
	while (1)
	{
		DIO_VidSitPintValue(PORTC,PIN0,HIGH);
    47a8:	82 e0       	ldi	r24, 0x02	; 2
    47aa:	60 e0       	ldi	r22, 0x00	; 0
    47ac:	41 e0       	ldi	r20, 0x01	; 1
    47ae:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <DIO_VidSitPintValue>
    47b2:	80 e0       	ldi	r24, 0x00	; 0
    47b4:	90 e0       	ldi	r25, 0x00	; 0
    47b6:	aa ef       	ldi	r26, 0xFA	; 250
    47b8:	b4 e4       	ldi	r27, 0x44	; 68
    47ba:	89 8f       	std	Y+25, r24	; 0x19
    47bc:	9a 8f       	std	Y+26, r25	; 0x1a
    47be:	ab 8f       	std	Y+27, r26	; 0x1b
    47c0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    47c2:	69 8d       	ldd	r22, Y+25	; 0x19
    47c4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    47c6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    47c8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    47ca:	20 e0       	ldi	r18, 0x00	; 0
    47cc:	30 e0       	ldi	r19, 0x00	; 0
    47ce:	4a ef       	ldi	r20, 0xFA	; 250
    47d0:	54 e4       	ldi	r21, 0x44	; 68
    47d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    47d6:	dc 01       	movw	r26, r24
    47d8:	cb 01       	movw	r24, r22
    47da:	8d 8b       	std	Y+21, r24	; 0x15
    47dc:	9e 8b       	std	Y+22, r25	; 0x16
    47de:	af 8b       	std	Y+23, r26	; 0x17
    47e0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    47e2:	6d 89       	ldd	r22, Y+21	; 0x15
    47e4:	7e 89       	ldd	r23, Y+22	; 0x16
    47e6:	8f 89       	ldd	r24, Y+23	; 0x17
    47e8:	98 8d       	ldd	r25, Y+24	; 0x18
    47ea:	20 e0       	ldi	r18, 0x00	; 0
    47ec:	30 e0       	ldi	r19, 0x00	; 0
    47ee:	40 e8       	ldi	r20, 0x80	; 128
    47f0:	5f e3       	ldi	r21, 0x3F	; 63
    47f2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    47f6:	88 23       	and	r24, r24
    47f8:	2c f4       	brge	.+10     	; 0x4804 <LED+0x7a>
		__ticks = 1;
    47fa:	81 e0       	ldi	r24, 0x01	; 1
    47fc:	90 e0       	ldi	r25, 0x00	; 0
    47fe:	9c 8b       	std	Y+20, r25	; 0x14
    4800:	8b 8b       	std	Y+19, r24	; 0x13
    4802:	3f c0       	rjmp	.+126    	; 0x4882 <LED+0xf8>
	else if (__tmp > 65535)
    4804:	6d 89       	ldd	r22, Y+21	; 0x15
    4806:	7e 89       	ldd	r23, Y+22	; 0x16
    4808:	8f 89       	ldd	r24, Y+23	; 0x17
    480a:	98 8d       	ldd	r25, Y+24	; 0x18
    480c:	20 e0       	ldi	r18, 0x00	; 0
    480e:	3f ef       	ldi	r19, 0xFF	; 255
    4810:	4f e7       	ldi	r20, 0x7F	; 127
    4812:	57 e4       	ldi	r21, 0x47	; 71
    4814:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4818:	18 16       	cp	r1, r24
    481a:	4c f5       	brge	.+82     	; 0x486e <LED+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    481c:	69 8d       	ldd	r22, Y+25	; 0x19
    481e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4820:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4822:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4824:	20 e0       	ldi	r18, 0x00	; 0
    4826:	30 e0       	ldi	r19, 0x00	; 0
    4828:	40 e2       	ldi	r20, 0x20	; 32
    482a:	51 e4       	ldi	r21, 0x41	; 65
    482c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4830:	dc 01       	movw	r26, r24
    4832:	cb 01       	movw	r24, r22
    4834:	bc 01       	movw	r22, r24
    4836:	cd 01       	movw	r24, r26
    4838:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    483c:	dc 01       	movw	r26, r24
    483e:	cb 01       	movw	r24, r22
    4840:	9c 8b       	std	Y+20, r25	; 0x14
    4842:	8b 8b       	std	Y+19, r24	; 0x13
    4844:	0f c0       	rjmp	.+30     	; 0x4864 <LED+0xda>
    4846:	88 ec       	ldi	r24, 0xC8	; 200
    4848:	90 e0       	ldi	r25, 0x00	; 0
    484a:	9a 8b       	std	Y+18, r25	; 0x12
    484c:	89 8b       	std	Y+17, r24	; 0x11
    484e:	89 89       	ldd	r24, Y+17	; 0x11
    4850:	9a 89       	ldd	r25, Y+18	; 0x12
    4852:	01 97       	sbiw	r24, 0x01	; 1
    4854:	f1 f7       	brne	.-4      	; 0x4852 <LED+0xc8>
    4856:	9a 8b       	std	Y+18, r25	; 0x12
    4858:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    485a:	8b 89       	ldd	r24, Y+19	; 0x13
    485c:	9c 89       	ldd	r25, Y+20	; 0x14
    485e:	01 97       	sbiw	r24, 0x01	; 1
    4860:	9c 8b       	std	Y+20, r25	; 0x14
    4862:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4864:	8b 89       	ldd	r24, Y+19	; 0x13
    4866:	9c 89       	ldd	r25, Y+20	; 0x14
    4868:	00 97       	sbiw	r24, 0x00	; 0
    486a:	69 f7       	brne	.-38     	; 0x4846 <LED+0xbc>
    486c:	14 c0       	rjmp	.+40     	; 0x4896 <LED+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    486e:	6d 89       	ldd	r22, Y+21	; 0x15
    4870:	7e 89       	ldd	r23, Y+22	; 0x16
    4872:	8f 89       	ldd	r24, Y+23	; 0x17
    4874:	98 8d       	ldd	r25, Y+24	; 0x18
    4876:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    487a:	dc 01       	movw	r26, r24
    487c:	cb 01       	movw	r24, r22
    487e:	9c 8b       	std	Y+20, r25	; 0x14
    4880:	8b 8b       	std	Y+19, r24	; 0x13
    4882:	8b 89       	ldd	r24, Y+19	; 0x13
    4884:	9c 89       	ldd	r25, Y+20	; 0x14
    4886:	98 8b       	std	Y+16, r25	; 0x10
    4888:	8f 87       	std	Y+15, r24	; 0x0f
    488a:	8f 85       	ldd	r24, Y+15	; 0x0f
    488c:	98 89       	ldd	r25, Y+16	; 0x10
    488e:	01 97       	sbiw	r24, 0x01	; 1
    4890:	f1 f7       	brne	.-4      	; 0x488e <LED+0x104>
    4892:	98 8b       	std	Y+16, r25	; 0x10
    4894:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(2000);
		DIO_VidSitPintValue(PORTC,PIN0,LOW);
    4896:	82 e0       	ldi	r24, 0x02	; 2
    4898:	60 e0       	ldi	r22, 0x00	; 0
    489a:	40 e0       	ldi	r20, 0x00	; 0
    489c:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <DIO_VidSitPintValue>
    48a0:	80 e0       	ldi	r24, 0x00	; 0
    48a2:	90 e0       	ldi	r25, 0x00	; 0
    48a4:	aa e7       	ldi	r26, 0x7A	; 122
    48a6:	b4 e4       	ldi	r27, 0x44	; 68
    48a8:	8b 87       	std	Y+11, r24	; 0x0b
    48aa:	9c 87       	std	Y+12, r25	; 0x0c
    48ac:	ad 87       	std	Y+13, r26	; 0x0d
    48ae:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    48b0:	6b 85       	ldd	r22, Y+11	; 0x0b
    48b2:	7c 85       	ldd	r23, Y+12	; 0x0c
    48b4:	8d 85       	ldd	r24, Y+13	; 0x0d
    48b6:	9e 85       	ldd	r25, Y+14	; 0x0e
    48b8:	20 e0       	ldi	r18, 0x00	; 0
    48ba:	30 e0       	ldi	r19, 0x00	; 0
    48bc:	4a ef       	ldi	r20, 0xFA	; 250
    48be:	54 e4       	ldi	r21, 0x44	; 68
    48c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    48c4:	dc 01       	movw	r26, r24
    48c6:	cb 01       	movw	r24, r22
    48c8:	8f 83       	std	Y+7, r24	; 0x07
    48ca:	98 87       	std	Y+8, r25	; 0x08
    48cc:	a9 87       	std	Y+9, r26	; 0x09
    48ce:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    48d0:	6f 81       	ldd	r22, Y+7	; 0x07
    48d2:	78 85       	ldd	r23, Y+8	; 0x08
    48d4:	89 85       	ldd	r24, Y+9	; 0x09
    48d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    48d8:	20 e0       	ldi	r18, 0x00	; 0
    48da:	30 e0       	ldi	r19, 0x00	; 0
    48dc:	40 e8       	ldi	r20, 0x80	; 128
    48de:	5f e3       	ldi	r21, 0x3F	; 63
    48e0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    48e4:	88 23       	and	r24, r24
    48e6:	2c f4       	brge	.+10     	; 0x48f2 <LED+0x168>
		__ticks = 1;
    48e8:	81 e0       	ldi	r24, 0x01	; 1
    48ea:	90 e0       	ldi	r25, 0x00	; 0
    48ec:	9e 83       	std	Y+6, r25	; 0x06
    48ee:	8d 83       	std	Y+5, r24	; 0x05
    48f0:	3f c0       	rjmp	.+126    	; 0x4970 <LED+0x1e6>
	else if (__tmp > 65535)
    48f2:	6f 81       	ldd	r22, Y+7	; 0x07
    48f4:	78 85       	ldd	r23, Y+8	; 0x08
    48f6:	89 85       	ldd	r24, Y+9	; 0x09
    48f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    48fa:	20 e0       	ldi	r18, 0x00	; 0
    48fc:	3f ef       	ldi	r19, 0xFF	; 255
    48fe:	4f e7       	ldi	r20, 0x7F	; 127
    4900:	57 e4       	ldi	r21, 0x47	; 71
    4902:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4906:	18 16       	cp	r1, r24
    4908:	4c f5       	brge	.+82     	; 0x495c <LED+0x1d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    490a:	6b 85       	ldd	r22, Y+11	; 0x0b
    490c:	7c 85       	ldd	r23, Y+12	; 0x0c
    490e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4910:	9e 85       	ldd	r25, Y+14	; 0x0e
    4912:	20 e0       	ldi	r18, 0x00	; 0
    4914:	30 e0       	ldi	r19, 0x00	; 0
    4916:	40 e2       	ldi	r20, 0x20	; 32
    4918:	51 e4       	ldi	r21, 0x41	; 65
    491a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    491e:	dc 01       	movw	r26, r24
    4920:	cb 01       	movw	r24, r22
    4922:	bc 01       	movw	r22, r24
    4924:	cd 01       	movw	r24, r26
    4926:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    492a:	dc 01       	movw	r26, r24
    492c:	cb 01       	movw	r24, r22
    492e:	9e 83       	std	Y+6, r25	; 0x06
    4930:	8d 83       	std	Y+5, r24	; 0x05
    4932:	0f c0       	rjmp	.+30     	; 0x4952 <LED+0x1c8>
    4934:	88 ec       	ldi	r24, 0xC8	; 200
    4936:	90 e0       	ldi	r25, 0x00	; 0
    4938:	9c 83       	std	Y+4, r25	; 0x04
    493a:	8b 83       	std	Y+3, r24	; 0x03
    493c:	8b 81       	ldd	r24, Y+3	; 0x03
    493e:	9c 81       	ldd	r25, Y+4	; 0x04
    4940:	01 97       	sbiw	r24, 0x01	; 1
    4942:	f1 f7       	brne	.-4      	; 0x4940 <LED+0x1b6>
    4944:	9c 83       	std	Y+4, r25	; 0x04
    4946:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4948:	8d 81       	ldd	r24, Y+5	; 0x05
    494a:	9e 81       	ldd	r25, Y+6	; 0x06
    494c:	01 97       	sbiw	r24, 0x01	; 1
    494e:	9e 83       	std	Y+6, r25	; 0x06
    4950:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4952:	8d 81       	ldd	r24, Y+5	; 0x05
    4954:	9e 81       	ldd	r25, Y+6	; 0x06
    4956:	00 97       	sbiw	r24, 0x00	; 0
    4958:	69 f7       	brne	.-38     	; 0x4934 <LED+0x1aa>
    495a:	26 cf       	rjmp	.-436    	; 0x47a8 <LED+0x1e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    495c:	6f 81       	ldd	r22, Y+7	; 0x07
    495e:	78 85       	ldd	r23, Y+8	; 0x08
    4960:	89 85       	ldd	r24, Y+9	; 0x09
    4962:	9a 85       	ldd	r25, Y+10	; 0x0a
    4964:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4968:	dc 01       	movw	r26, r24
    496a:	cb 01       	movw	r24, r22
    496c:	9e 83       	std	Y+6, r25	; 0x06
    496e:	8d 83       	std	Y+5, r24	; 0x05
    4970:	8d 81       	ldd	r24, Y+5	; 0x05
    4972:	9e 81       	ldd	r25, Y+6	; 0x06
    4974:	9a 83       	std	Y+2, r25	; 0x02
    4976:	89 83       	std	Y+1, r24	; 0x01
    4978:	89 81       	ldd	r24, Y+1	; 0x01
    497a:	9a 81       	ldd	r25, Y+2	; 0x02
    497c:	01 97       	sbiw	r24, 0x01	; 1
    497e:	f1 f7       	brne	.-4      	; 0x497c <LED+0x1f2>
    4980:	9a 83       	std	Y+2, r25	; 0x02
    4982:	89 83       	std	Y+1, r24	; 0x01
    4984:	11 cf       	rjmp	.-478    	; 0x47a8 <LED+0x1e>

00004986 <SEGMENT>:
#include "../MCAL/DIO/DIO_Interface.h"
#include "../HAL/SEVEN_SEGMENT/SEVEN_SEGMENT.h"
#include <avr/delay.h>

void SEGMENT(void)
{
    4986:	df 93       	push	r29
    4988:	cf 93       	push	r28
    498a:	cd b7       	in	r28, 0x3d	; 61
    498c:	de b7       	in	r29, 0x3e	; 62
    498e:	e9 97       	sbiw	r28, 0x39	; 57
    4990:	0f b6       	in	r0, 0x3f	; 63
    4992:	f8 94       	cli
    4994:	de bf       	out	0x3e, r29	; 62
    4996:	0f be       	out	0x3f, r0	; 63
    4998:	cd bf       	out	0x3d, r28	; 61
	unsigned char i;
	SEVEN_SEGMENT_INT();
    499a:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <SEVEN_SEGMENT_INT>
	DIO_VidSitPintDirection(PORTC,PIN0, OUTPUT);
    499e:	82 e0       	ldi	r24, 0x02	; 2
    49a0:	60 e0       	ldi	r22, 0x00	; 0
    49a2:	41 e0       	ldi	r20, 0x01	; 1
    49a4:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <DIO_VidSitPintDirection>
	DIO_VidSitPintDirection(PORTC,PIN1, OUTPUT);
    49a8:	82 e0       	ldi	r24, 0x02	; 2
    49aa:	61 e0       	ldi	r22, 0x01	; 1
    49ac:	41 e0       	ldi	r20, 0x01	; 1
    49ae:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <DIO_VidSitPintDirection>
	DIO_VidSitPintDirection(PORTC,PIN2, OUTPUT);
    49b2:	82 e0       	ldi	r24, 0x02	; 2
    49b4:	62 e0       	ldi	r22, 0x02	; 2
    49b6:	41 e0       	ldi	r20, 0x01	; 1
    49b8:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <DIO_VidSitPintDirection>
	DIO_VidSitPintDirection(PORTC,PIN7, INPUT);
    49bc:	82 e0       	ldi	r24, 0x02	; 2
    49be:	67 e0       	ldi	r22, 0x07	; 7
    49c0:	40 e0       	ldi	r20, 0x00	; 0
    49c2:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <DIO_VidSitPintDirection>
	DIO_VidSitPintDirection(PORTC,PIN6, INPUT);
    49c6:	82 e0       	ldi	r24, 0x02	; 2
    49c8:	66 e0       	ldi	r22, 0x06	; 6
    49ca:	40 e0       	ldi	r20, 0x00	; 0
    49cc:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <DIO_VidSitPintDirection>
	DIO_VidSitPintValue(PORTC,PIN7, HIGH);
    49d0:	82 e0       	ldi	r24, 0x02	; 2
    49d2:	67 e0       	ldi	r22, 0x07	; 7
    49d4:	41 e0       	ldi	r20, 0x01	; 1
    49d6:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <DIO_VidSitPintValue>
	DIO_VidSitPintValue(PORTC,PIN6, HIGH);
    49da:	82 e0       	ldi	r24, 0x02	; 2
    49dc:	66 e0       	ldi	r22, 0x06	; 6
    49de:	41 e0       	ldi	r20, 0x01	; 1
    49e0:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <DIO_VidSitPintValue>

	while (1)
	{
		if ((DIO_GitPinVule(PORTC,PIN7)==LOW))
    49e4:	82 e0       	ldi	r24, 0x02	; 2
    49e6:	67 e0       	ldi	r22, 0x07	; 7
    49e8:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <DIO_GitPinVule>
    49ec:	88 23       	and	r24, r24
    49ee:	09 f0       	breq	.+2      	; 0x49f2 <SEGMENT+0x6c>
    49f0:	7c c1       	rjmp	.+760    	; 0x4cea <SEGMENT+0x364>
		{
			SEVEN_SEGMENT_CLEAR();
    49f2:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <SEVEN_SEGMENT_CLEAR>
			DIO_VidSitPintValue(PORTC,PIN0, HIGH);
    49f6:	82 e0       	ldi	r24, 0x02	; 2
    49f8:	60 e0       	ldi	r22, 0x00	; 0
    49fa:	41 e0       	ldi	r20, 0x01	; 1
    49fc:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <DIO_VidSitPintValue>
			DIO_VidSitPintValue(PORTC,PIN1, LOW);
    4a00:	82 e0       	ldi	r24, 0x02	; 2
    4a02:	61 e0       	ldi	r22, 0x01	; 1
    4a04:	40 e0       	ldi	r20, 0x00	; 0
    4a06:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <DIO_VidSitPintValue>
    4a0a:	80 e0       	ldi	r24, 0x00	; 0
    4a0c:	90 e0       	ldi	r25, 0x00	; 0
    4a0e:	aa e7       	ldi	r26, 0x7A	; 122
    4a10:	b4 e4       	ldi	r27, 0x44	; 68
    4a12:	8d ab       	std	Y+53, r24	; 0x35
    4a14:	9e ab       	std	Y+54, r25	; 0x36
    4a16:	af ab       	std	Y+55, r26	; 0x37
    4a18:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4a1a:	6d a9       	ldd	r22, Y+53	; 0x35
    4a1c:	7e a9       	ldd	r23, Y+54	; 0x36
    4a1e:	8f a9       	ldd	r24, Y+55	; 0x37
    4a20:	98 ad       	ldd	r25, Y+56	; 0x38
    4a22:	20 e0       	ldi	r18, 0x00	; 0
    4a24:	30 e0       	ldi	r19, 0x00	; 0
    4a26:	4a ef       	ldi	r20, 0xFA	; 250
    4a28:	54 e4       	ldi	r21, 0x44	; 68
    4a2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a2e:	dc 01       	movw	r26, r24
    4a30:	cb 01       	movw	r24, r22
    4a32:	89 ab       	std	Y+49, r24	; 0x31
    4a34:	9a ab       	std	Y+50, r25	; 0x32
    4a36:	ab ab       	std	Y+51, r26	; 0x33
    4a38:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4a3a:	69 a9       	ldd	r22, Y+49	; 0x31
    4a3c:	7a a9       	ldd	r23, Y+50	; 0x32
    4a3e:	8b a9       	ldd	r24, Y+51	; 0x33
    4a40:	9c a9       	ldd	r25, Y+52	; 0x34
    4a42:	20 e0       	ldi	r18, 0x00	; 0
    4a44:	30 e0       	ldi	r19, 0x00	; 0
    4a46:	40 e8       	ldi	r20, 0x80	; 128
    4a48:	5f e3       	ldi	r21, 0x3F	; 63
    4a4a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4a4e:	88 23       	and	r24, r24
    4a50:	2c f4       	brge	.+10     	; 0x4a5c <SEGMENT+0xd6>
		__ticks = 1;
    4a52:	81 e0       	ldi	r24, 0x01	; 1
    4a54:	90 e0       	ldi	r25, 0x00	; 0
    4a56:	98 ab       	std	Y+48, r25	; 0x30
    4a58:	8f a7       	std	Y+47, r24	; 0x2f
    4a5a:	3f c0       	rjmp	.+126    	; 0x4ada <SEGMENT+0x154>
	else if (__tmp > 65535)
    4a5c:	69 a9       	ldd	r22, Y+49	; 0x31
    4a5e:	7a a9       	ldd	r23, Y+50	; 0x32
    4a60:	8b a9       	ldd	r24, Y+51	; 0x33
    4a62:	9c a9       	ldd	r25, Y+52	; 0x34
    4a64:	20 e0       	ldi	r18, 0x00	; 0
    4a66:	3f ef       	ldi	r19, 0xFF	; 255
    4a68:	4f e7       	ldi	r20, 0x7F	; 127
    4a6a:	57 e4       	ldi	r21, 0x47	; 71
    4a6c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4a70:	18 16       	cp	r1, r24
    4a72:	4c f5       	brge	.+82     	; 0x4ac6 <SEGMENT+0x140>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4a74:	6d a9       	ldd	r22, Y+53	; 0x35
    4a76:	7e a9       	ldd	r23, Y+54	; 0x36
    4a78:	8f a9       	ldd	r24, Y+55	; 0x37
    4a7a:	98 ad       	ldd	r25, Y+56	; 0x38
    4a7c:	20 e0       	ldi	r18, 0x00	; 0
    4a7e:	30 e0       	ldi	r19, 0x00	; 0
    4a80:	40 e2       	ldi	r20, 0x20	; 32
    4a82:	51 e4       	ldi	r21, 0x41	; 65
    4a84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a88:	dc 01       	movw	r26, r24
    4a8a:	cb 01       	movw	r24, r22
    4a8c:	bc 01       	movw	r22, r24
    4a8e:	cd 01       	movw	r24, r26
    4a90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a94:	dc 01       	movw	r26, r24
    4a96:	cb 01       	movw	r24, r22
    4a98:	98 ab       	std	Y+48, r25	; 0x30
    4a9a:	8f a7       	std	Y+47, r24	; 0x2f
    4a9c:	0f c0       	rjmp	.+30     	; 0x4abc <SEGMENT+0x136>
    4a9e:	88 ec       	ldi	r24, 0xC8	; 200
    4aa0:	90 e0       	ldi	r25, 0x00	; 0
    4aa2:	9e a7       	std	Y+46, r25	; 0x2e
    4aa4:	8d a7       	std	Y+45, r24	; 0x2d
    4aa6:	8d a5       	ldd	r24, Y+45	; 0x2d
    4aa8:	9e a5       	ldd	r25, Y+46	; 0x2e
    4aaa:	01 97       	sbiw	r24, 0x01	; 1
    4aac:	f1 f7       	brne	.-4      	; 0x4aaa <SEGMENT+0x124>
    4aae:	9e a7       	std	Y+46, r25	; 0x2e
    4ab0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4ab2:	8f a5       	ldd	r24, Y+47	; 0x2f
    4ab4:	98 a9       	ldd	r25, Y+48	; 0x30
    4ab6:	01 97       	sbiw	r24, 0x01	; 1
    4ab8:	98 ab       	std	Y+48, r25	; 0x30
    4aba:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4abc:	8f a5       	ldd	r24, Y+47	; 0x2f
    4abe:	98 a9       	ldd	r25, Y+48	; 0x30
    4ac0:	00 97       	sbiw	r24, 0x00	; 0
    4ac2:	69 f7       	brne	.-38     	; 0x4a9e <SEGMENT+0x118>
    4ac4:	14 c0       	rjmp	.+40     	; 0x4aee <SEGMENT+0x168>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4ac6:	69 a9       	ldd	r22, Y+49	; 0x31
    4ac8:	7a a9       	ldd	r23, Y+50	; 0x32
    4aca:	8b a9       	ldd	r24, Y+51	; 0x33
    4acc:	9c a9       	ldd	r25, Y+52	; 0x34
    4ace:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ad2:	dc 01       	movw	r26, r24
    4ad4:	cb 01       	movw	r24, r22
    4ad6:	98 ab       	std	Y+48, r25	; 0x30
    4ad8:	8f a7       	std	Y+47, r24	; 0x2f
    4ada:	8f a5       	ldd	r24, Y+47	; 0x2f
    4adc:	98 a9       	ldd	r25, Y+48	; 0x30
    4ade:	9c a7       	std	Y+44, r25	; 0x2c
    4ae0:	8b a7       	std	Y+43, r24	; 0x2b
    4ae2:	8b a5       	ldd	r24, Y+43	; 0x2b
    4ae4:	9c a5       	ldd	r25, Y+44	; 0x2c
    4ae6:	01 97       	sbiw	r24, 0x01	; 1
    4ae8:	f1 f7       	brne	.-4      	; 0x4ae6 <SEGMENT+0x160>
    4aea:	9c a7       	std	Y+44, r25	; 0x2c
    4aec:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(1000);
			DIO_VidSitPintValue(PORTC,PIN0, LOW);
    4aee:	82 e0       	ldi	r24, 0x02	; 2
    4af0:	60 e0       	ldi	r22, 0x00	; 0
    4af2:	40 e0       	ldi	r20, 0x00	; 0
    4af4:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <DIO_VidSitPintValue>
			DIO_VidSitPintValue(PORTC,PIN1, HIGH);
    4af8:	82 e0       	ldi	r24, 0x02	; 2
    4afa:	61 e0       	ldi	r22, 0x01	; 1
    4afc:	41 e0       	ldi	r20, 0x01	; 1
    4afe:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <DIO_VidSitPintValue>
    4b02:	80 e0       	ldi	r24, 0x00	; 0
    4b04:	90 e0       	ldi	r25, 0x00	; 0
    4b06:	aa e7       	ldi	r26, 0x7A	; 122
    4b08:	b4 e4       	ldi	r27, 0x44	; 68
    4b0a:	8f a3       	std	Y+39, r24	; 0x27
    4b0c:	98 a7       	std	Y+40, r25	; 0x28
    4b0e:	a9 a7       	std	Y+41, r26	; 0x29
    4b10:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4b12:	6f a1       	ldd	r22, Y+39	; 0x27
    4b14:	78 a5       	ldd	r23, Y+40	; 0x28
    4b16:	89 a5       	ldd	r24, Y+41	; 0x29
    4b18:	9a a5       	ldd	r25, Y+42	; 0x2a
    4b1a:	20 e0       	ldi	r18, 0x00	; 0
    4b1c:	30 e0       	ldi	r19, 0x00	; 0
    4b1e:	4a ef       	ldi	r20, 0xFA	; 250
    4b20:	54 e4       	ldi	r21, 0x44	; 68
    4b22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b26:	dc 01       	movw	r26, r24
    4b28:	cb 01       	movw	r24, r22
    4b2a:	8b a3       	std	Y+35, r24	; 0x23
    4b2c:	9c a3       	std	Y+36, r25	; 0x24
    4b2e:	ad a3       	std	Y+37, r26	; 0x25
    4b30:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4b32:	6b a1       	ldd	r22, Y+35	; 0x23
    4b34:	7c a1       	ldd	r23, Y+36	; 0x24
    4b36:	8d a1       	ldd	r24, Y+37	; 0x25
    4b38:	9e a1       	ldd	r25, Y+38	; 0x26
    4b3a:	20 e0       	ldi	r18, 0x00	; 0
    4b3c:	30 e0       	ldi	r19, 0x00	; 0
    4b3e:	40 e8       	ldi	r20, 0x80	; 128
    4b40:	5f e3       	ldi	r21, 0x3F	; 63
    4b42:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4b46:	88 23       	and	r24, r24
    4b48:	2c f4       	brge	.+10     	; 0x4b54 <SEGMENT+0x1ce>
		__ticks = 1;
    4b4a:	81 e0       	ldi	r24, 0x01	; 1
    4b4c:	90 e0       	ldi	r25, 0x00	; 0
    4b4e:	9a a3       	std	Y+34, r25	; 0x22
    4b50:	89 a3       	std	Y+33, r24	; 0x21
    4b52:	3f c0       	rjmp	.+126    	; 0x4bd2 <SEGMENT+0x24c>
	else if (__tmp > 65535)
    4b54:	6b a1       	ldd	r22, Y+35	; 0x23
    4b56:	7c a1       	ldd	r23, Y+36	; 0x24
    4b58:	8d a1       	ldd	r24, Y+37	; 0x25
    4b5a:	9e a1       	ldd	r25, Y+38	; 0x26
    4b5c:	20 e0       	ldi	r18, 0x00	; 0
    4b5e:	3f ef       	ldi	r19, 0xFF	; 255
    4b60:	4f e7       	ldi	r20, 0x7F	; 127
    4b62:	57 e4       	ldi	r21, 0x47	; 71
    4b64:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4b68:	18 16       	cp	r1, r24
    4b6a:	4c f5       	brge	.+82     	; 0x4bbe <SEGMENT+0x238>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4b6c:	6f a1       	ldd	r22, Y+39	; 0x27
    4b6e:	78 a5       	ldd	r23, Y+40	; 0x28
    4b70:	89 a5       	ldd	r24, Y+41	; 0x29
    4b72:	9a a5       	ldd	r25, Y+42	; 0x2a
    4b74:	20 e0       	ldi	r18, 0x00	; 0
    4b76:	30 e0       	ldi	r19, 0x00	; 0
    4b78:	40 e2       	ldi	r20, 0x20	; 32
    4b7a:	51 e4       	ldi	r21, 0x41	; 65
    4b7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b80:	dc 01       	movw	r26, r24
    4b82:	cb 01       	movw	r24, r22
    4b84:	bc 01       	movw	r22, r24
    4b86:	cd 01       	movw	r24, r26
    4b88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b8c:	dc 01       	movw	r26, r24
    4b8e:	cb 01       	movw	r24, r22
    4b90:	9a a3       	std	Y+34, r25	; 0x22
    4b92:	89 a3       	std	Y+33, r24	; 0x21
    4b94:	0f c0       	rjmp	.+30     	; 0x4bb4 <SEGMENT+0x22e>
    4b96:	88 ec       	ldi	r24, 0xC8	; 200
    4b98:	90 e0       	ldi	r25, 0x00	; 0
    4b9a:	98 a3       	std	Y+32, r25	; 0x20
    4b9c:	8f 8f       	std	Y+31, r24	; 0x1f
    4b9e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4ba0:	98 a1       	ldd	r25, Y+32	; 0x20
    4ba2:	01 97       	sbiw	r24, 0x01	; 1
    4ba4:	f1 f7       	brne	.-4      	; 0x4ba2 <SEGMENT+0x21c>
    4ba6:	98 a3       	std	Y+32, r25	; 0x20
    4ba8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4baa:	89 a1       	ldd	r24, Y+33	; 0x21
    4bac:	9a a1       	ldd	r25, Y+34	; 0x22
    4bae:	01 97       	sbiw	r24, 0x01	; 1
    4bb0:	9a a3       	std	Y+34, r25	; 0x22
    4bb2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4bb4:	89 a1       	ldd	r24, Y+33	; 0x21
    4bb6:	9a a1       	ldd	r25, Y+34	; 0x22
    4bb8:	00 97       	sbiw	r24, 0x00	; 0
    4bba:	69 f7       	brne	.-38     	; 0x4b96 <SEGMENT+0x210>
    4bbc:	14 c0       	rjmp	.+40     	; 0x4be6 <SEGMENT+0x260>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4bbe:	6b a1       	ldd	r22, Y+35	; 0x23
    4bc0:	7c a1       	ldd	r23, Y+36	; 0x24
    4bc2:	8d a1       	ldd	r24, Y+37	; 0x25
    4bc4:	9e a1       	ldd	r25, Y+38	; 0x26
    4bc6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4bca:	dc 01       	movw	r26, r24
    4bcc:	cb 01       	movw	r24, r22
    4bce:	9a a3       	std	Y+34, r25	; 0x22
    4bd0:	89 a3       	std	Y+33, r24	; 0x21
    4bd2:	89 a1       	ldd	r24, Y+33	; 0x21
    4bd4:	9a a1       	ldd	r25, Y+34	; 0x22
    4bd6:	9e 8f       	std	Y+30, r25	; 0x1e
    4bd8:	8d 8f       	std	Y+29, r24	; 0x1d
    4bda:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4bdc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4bde:	01 97       	sbiw	r24, 0x01	; 1
    4be0:	f1 f7       	brne	.-4      	; 0x4bde <SEGMENT+0x258>
    4be2:	9e 8f       	std	Y+30, r25	; 0x1e
    4be4:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(1000);
			DIO_VidSitPintValue(PORTC,PIN0, LOW);
    4be6:	82 e0       	ldi	r24, 0x02	; 2
    4be8:	60 e0       	ldi	r22, 0x00	; 0
    4bea:	40 e0       	ldi	r20, 0x00	; 0
    4bec:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <DIO_VidSitPintValue>
			DIO_VidSitPintValue(PORTC,PIN1, LOW);
    4bf0:	82 e0       	ldi	r24, 0x02	; 2
    4bf2:	61 e0       	ldi	r22, 0x01	; 1
    4bf4:	40 e0       	ldi	r20, 0x00	; 0
    4bf6:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <DIO_VidSitPintValue>
			DIO_VidSitPintValue(PORTC,PIN2, HIGH);
    4bfa:	82 e0       	ldi	r24, 0x02	; 2
    4bfc:	62 e0       	ldi	r22, 0x02	; 2
    4bfe:	41 e0       	ldi	r20, 0x01	; 1
    4c00:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <DIO_VidSitPintValue>
    4c04:	80 e0       	ldi	r24, 0x00	; 0
    4c06:	90 e0       	ldi	r25, 0x00	; 0
    4c08:	aa e7       	ldi	r26, 0x7A	; 122
    4c0a:	b4 e4       	ldi	r27, 0x44	; 68
    4c0c:	89 8f       	std	Y+25, r24	; 0x19
    4c0e:	9a 8f       	std	Y+26, r25	; 0x1a
    4c10:	ab 8f       	std	Y+27, r26	; 0x1b
    4c12:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4c14:	69 8d       	ldd	r22, Y+25	; 0x19
    4c16:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4c18:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4c1a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4c1c:	20 e0       	ldi	r18, 0x00	; 0
    4c1e:	30 e0       	ldi	r19, 0x00	; 0
    4c20:	4a ef       	ldi	r20, 0xFA	; 250
    4c22:	54 e4       	ldi	r21, 0x44	; 68
    4c24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c28:	dc 01       	movw	r26, r24
    4c2a:	cb 01       	movw	r24, r22
    4c2c:	8d 8b       	std	Y+21, r24	; 0x15
    4c2e:	9e 8b       	std	Y+22, r25	; 0x16
    4c30:	af 8b       	std	Y+23, r26	; 0x17
    4c32:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4c34:	6d 89       	ldd	r22, Y+21	; 0x15
    4c36:	7e 89       	ldd	r23, Y+22	; 0x16
    4c38:	8f 89       	ldd	r24, Y+23	; 0x17
    4c3a:	98 8d       	ldd	r25, Y+24	; 0x18
    4c3c:	20 e0       	ldi	r18, 0x00	; 0
    4c3e:	30 e0       	ldi	r19, 0x00	; 0
    4c40:	40 e8       	ldi	r20, 0x80	; 128
    4c42:	5f e3       	ldi	r21, 0x3F	; 63
    4c44:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4c48:	88 23       	and	r24, r24
    4c4a:	2c f4       	brge	.+10     	; 0x4c56 <SEGMENT+0x2d0>
		__ticks = 1;
    4c4c:	81 e0       	ldi	r24, 0x01	; 1
    4c4e:	90 e0       	ldi	r25, 0x00	; 0
    4c50:	9c 8b       	std	Y+20, r25	; 0x14
    4c52:	8b 8b       	std	Y+19, r24	; 0x13
    4c54:	3f c0       	rjmp	.+126    	; 0x4cd4 <SEGMENT+0x34e>
	else if (__tmp > 65535)
    4c56:	6d 89       	ldd	r22, Y+21	; 0x15
    4c58:	7e 89       	ldd	r23, Y+22	; 0x16
    4c5a:	8f 89       	ldd	r24, Y+23	; 0x17
    4c5c:	98 8d       	ldd	r25, Y+24	; 0x18
    4c5e:	20 e0       	ldi	r18, 0x00	; 0
    4c60:	3f ef       	ldi	r19, 0xFF	; 255
    4c62:	4f e7       	ldi	r20, 0x7F	; 127
    4c64:	57 e4       	ldi	r21, 0x47	; 71
    4c66:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4c6a:	18 16       	cp	r1, r24
    4c6c:	4c f5       	brge	.+82     	; 0x4cc0 <SEGMENT+0x33a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4c6e:	69 8d       	ldd	r22, Y+25	; 0x19
    4c70:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4c72:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4c74:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4c76:	20 e0       	ldi	r18, 0x00	; 0
    4c78:	30 e0       	ldi	r19, 0x00	; 0
    4c7a:	40 e2       	ldi	r20, 0x20	; 32
    4c7c:	51 e4       	ldi	r21, 0x41	; 65
    4c7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c82:	dc 01       	movw	r26, r24
    4c84:	cb 01       	movw	r24, r22
    4c86:	bc 01       	movw	r22, r24
    4c88:	cd 01       	movw	r24, r26
    4c8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c8e:	dc 01       	movw	r26, r24
    4c90:	cb 01       	movw	r24, r22
    4c92:	9c 8b       	std	Y+20, r25	; 0x14
    4c94:	8b 8b       	std	Y+19, r24	; 0x13
    4c96:	0f c0       	rjmp	.+30     	; 0x4cb6 <SEGMENT+0x330>
    4c98:	88 ec       	ldi	r24, 0xC8	; 200
    4c9a:	90 e0       	ldi	r25, 0x00	; 0
    4c9c:	9a 8b       	std	Y+18, r25	; 0x12
    4c9e:	89 8b       	std	Y+17, r24	; 0x11
    4ca0:	89 89       	ldd	r24, Y+17	; 0x11
    4ca2:	9a 89       	ldd	r25, Y+18	; 0x12
    4ca4:	01 97       	sbiw	r24, 0x01	; 1
    4ca6:	f1 f7       	brne	.-4      	; 0x4ca4 <SEGMENT+0x31e>
    4ca8:	9a 8b       	std	Y+18, r25	; 0x12
    4caa:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4cac:	8b 89       	ldd	r24, Y+19	; 0x13
    4cae:	9c 89       	ldd	r25, Y+20	; 0x14
    4cb0:	01 97       	sbiw	r24, 0x01	; 1
    4cb2:	9c 8b       	std	Y+20, r25	; 0x14
    4cb4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4cb6:	8b 89       	ldd	r24, Y+19	; 0x13
    4cb8:	9c 89       	ldd	r25, Y+20	; 0x14
    4cba:	00 97       	sbiw	r24, 0x00	; 0
    4cbc:	69 f7       	brne	.-38     	; 0x4c98 <SEGMENT+0x312>
    4cbe:	92 ce       	rjmp	.-732    	; 0x49e4 <SEGMENT+0x5e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4cc0:	6d 89       	ldd	r22, Y+21	; 0x15
    4cc2:	7e 89       	ldd	r23, Y+22	; 0x16
    4cc4:	8f 89       	ldd	r24, Y+23	; 0x17
    4cc6:	98 8d       	ldd	r25, Y+24	; 0x18
    4cc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ccc:	dc 01       	movw	r26, r24
    4cce:	cb 01       	movw	r24, r22
    4cd0:	9c 8b       	std	Y+20, r25	; 0x14
    4cd2:	8b 8b       	std	Y+19, r24	; 0x13
    4cd4:	8b 89       	ldd	r24, Y+19	; 0x13
    4cd6:	9c 89       	ldd	r25, Y+20	; 0x14
    4cd8:	98 8b       	std	Y+16, r25	; 0x10
    4cda:	8f 87       	std	Y+15, r24	; 0x0f
    4cdc:	8f 85       	ldd	r24, Y+15	; 0x0f
    4cde:	98 89       	ldd	r25, Y+16	; 0x10
    4ce0:	01 97       	sbiw	r24, 0x01	; 1
    4ce2:	f1 f7       	brne	.-4      	; 0x4ce0 <SEGMENT+0x35a>
    4ce4:	98 8b       	std	Y+16, r25	; 0x10
    4ce6:	8f 87       	std	Y+15, r24	; 0x0f
    4ce8:	7d ce       	rjmp	.-774    	; 0x49e4 <SEGMENT+0x5e>
			_delay_ms(1000);
		}
			else if ((DIO_GitPinVule(PORTC,PIN7)==HIGH))
    4cea:	82 e0       	ldi	r24, 0x02	; 2
    4cec:	67 e0       	ldi	r22, 0x07	; 7
    4cee:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <DIO_GitPinVule>
    4cf2:	81 30       	cpi	r24, 0x01	; 1
    4cf4:	09 f0       	breq	.+2      	; 0x4cf8 <SEGMENT+0x372>
    4cf6:	76 ce       	rjmp	.-788    	; 0x49e4 <SEGMENT+0x5e>
			{
				{
					DIO_VidSitPintValue(PORTC,PIN0, LOW);
    4cf8:	82 e0       	ldi	r24, 0x02	; 2
    4cfa:	60 e0       	ldi	r22, 0x00	; 0
    4cfc:	40 e0       	ldi	r20, 0x00	; 0
    4cfe:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <DIO_VidSitPintValue>
					DIO_VidSitPintValue(PORTC,PIN1, LOW);
    4d02:	82 e0       	ldi	r24, 0x02	; 2
    4d04:	61 e0       	ldi	r22, 0x01	; 1
    4d06:	40 e0       	ldi	r20, 0x00	; 0
    4d08:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <DIO_VidSitPintValue>
					DIO_VidSitPintValue(PORTC,PIN2, LOW);
    4d0c:	82 e0       	ldi	r24, 0x02	; 2
    4d0e:	62 e0       	ldi	r22, 0x02	; 2
    4d10:	40 e0       	ldi	r20, 0x00	; 0
    4d12:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <DIO_VidSitPintValue>
					for(i=0;i<10;i++)
    4d16:	19 ae       	std	Y+57, r1	; 0x39
    4d18:	7d c0       	rjmp	.+250    	; 0x4e14 <SEGMENT+0x48e>
					{
						SEVEN_SEGMENT_WRITE(i,INOD);
    4d1a:	89 ad       	ldd	r24, Y+57	; 0x39
    4d1c:	60 e0       	ldi	r22, 0x00	; 0
    4d1e:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <SEVEN_SEGMENT_WRITE>
    4d22:	80 e0       	ldi	r24, 0x00	; 0
    4d24:	90 e0       	ldi	r25, 0x00	; 0
    4d26:	aa e7       	ldi	r26, 0x7A	; 122
    4d28:	b4 e4       	ldi	r27, 0x44	; 68
    4d2a:	8b 87       	std	Y+11, r24	; 0x0b
    4d2c:	9c 87       	std	Y+12, r25	; 0x0c
    4d2e:	ad 87       	std	Y+13, r26	; 0x0d
    4d30:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4d32:	6b 85       	ldd	r22, Y+11	; 0x0b
    4d34:	7c 85       	ldd	r23, Y+12	; 0x0c
    4d36:	8d 85       	ldd	r24, Y+13	; 0x0d
    4d38:	9e 85       	ldd	r25, Y+14	; 0x0e
    4d3a:	20 e0       	ldi	r18, 0x00	; 0
    4d3c:	30 e0       	ldi	r19, 0x00	; 0
    4d3e:	4a ef       	ldi	r20, 0xFA	; 250
    4d40:	54 e4       	ldi	r21, 0x44	; 68
    4d42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d46:	dc 01       	movw	r26, r24
    4d48:	cb 01       	movw	r24, r22
    4d4a:	8f 83       	std	Y+7, r24	; 0x07
    4d4c:	98 87       	std	Y+8, r25	; 0x08
    4d4e:	a9 87       	std	Y+9, r26	; 0x09
    4d50:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4d52:	6f 81       	ldd	r22, Y+7	; 0x07
    4d54:	78 85       	ldd	r23, Y+8	; 0x08
    4d56:	89 85       	ldd	r24, Y+9	; 0x09
    4d58:	9a 85       	ldd	r25, Y+10	; 0x0a
    4d5a:	20 e0       	ldi	r18, 0x00	; 0
    4d5c:	30 e0       	ldi	r19, 0x00	; 0
    4d5e:	40 e8       	ldi	r20, 0x80	; 128
    4d60:	5f e3       	ldi	r21, 0x3F	; 63
    4d62:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4d66:	88 23       	and	r24, r24
    4d68:	2c f4       	brge	.+10     	; 0x4d74 <SEGMENT+0x3ee>
		__ticks = 1;
    4d6a:	81 e0       	ldi	r24, 0x01	; 1
    4d6c:	90 e0       	ldi	r25, 0x00	; 0
    4d6e:	9e 83       	std	Y+6, r25	; 0x06
    4d70:	8d 83       	std	Y+5, r24	; 0x05
    4d72:	3f c0       	rjmp	.+126    	; 0x4df2 <SEGMENT+0x46c>
	else if (__tmp > 65535)
    4d74:	6f 81       	ldd	r22, Y+7	; 0x07
    4d76:	78 85       	ldd	r23, Y+8	; 0x08
    4d78:	89 85       	ldd	r24, Y+9	; 0x09
    4d7a:	9a 85       	ldd	r25, Y+10	; 0x0a
    4d7c:	20 e0       	ldi	r18, 0x00	; 0
    4d7e:	3f ef       	ldi	r19, 0xFF	; 255
    4d80:	4f e7       	ldi	r20, 0x7F	; 127
    4d82:	57 e4       	ldi	r21, 0x47	; 71
    4d84:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4d88:	18 16       	cp	r1, r24
    4d8a:	4c f5       	brge	.+82     	; 0x4dde <SEGMENT+0x458>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4d8c:	6b 85       	ldd	r22, Y+11	; 0x0b
    4d8e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4d90:	8d 85       	ldd	r24, Y+13	; 0x0d
    4d92:	9e 85       	ldd	r25, Y+14	; 0x0e
    4d94:	20 e0       	ldi	r18, 0x00	; 0
    4d96:	30 e0       	ldi	r19, 0x00	; 0
    4d98:	40 e2       	ldi	r20, 0x20	; 32
    4d9a:	51 e4       	ldi	r21, 0x41	; 65
    4d9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4da0:	dc 01       	movw	r26, r24
    4da2:	cb 01       	movw	r24, r22
    4da4:	bc 01       	movw	r22, r24
    4da6:	cd 01       	movw	r24, r26
    4da8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4dac:	dc 01       	movw	r26, r24
    4dae:	cb 01       	movw	r24, r22
    4db0:	9e 83       	std	Y+6, r25	; 0x06
    4db2:	8d 83       	std	Y+5, r24	; 0x05
    4db4:	0f c0       	rjmp	.+30     	; 0x4dd4 <SEGMENT+0x44e>
    4db6:	88 ec       	ldi	r24, 0xC8	; 200
    4db8:	90 e0       	ldi	r25, 0x00	; 0
    4dba:	9c 83       	std	Y+4, r25	; 0x04
    4dbc:	8b 83       	std	Y+3, r24	; 0x03
    4dbe:	8b 81       	ldd	r24, Y+3	; 0x03
    4dc0:	9c 81       	ldd	r25, Y+4	; 0x04
    4dc2:	01 97       	sbiw	r24, 0x01	; 1
    4dc4:	f1 f7       	brne	.-4      	; 0x4dc2 <SEGMENT+0x43c>
    4dc6:	9c 83       	std	Y+4, r25	; 0x04
    4dc8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4dca:	8d 81       	ldd	r24, Y+5	; 0x05
    4dcc:	9e 81       	ldd	r25, Y+6	; 0x06
    4dce:	01 97       	sbiw	r24, 0x01	; 1
    4dd0:	9e 83       	std	Y+6, r25	; 0x06
    4dd2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4dd4:	8d 81       	ldd	r24, Y+5	; 0x05
    4dd6:	9e 81       	ldd	r25, Y+6	; 0x06
    4dd8:	00 97       	sbiw	r24, 0x00	; 0
    4dda:	69 f7       	brne	.-38     	; 0x4db6 <SEGMENT+0x430>
    4ddc:	14 c0       	rjmp	.+40     	; 0x4e06 <SEGMENT+0x480>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4dde:	6f 81       	ldd	r22, Y+7	; 0x07
    4de0:	78 85       	ldd	r23, Y+8	; 0x08
    4de2:	89 85       	ldd	r24, Y+9	; 0x09
    4de4:	9a 85       	ldd	r25, Y+10	; 0x0a
    4de6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4dea:	dc 01       	movw	r26, r24
    4dec:	cb 01       	movw	r24, r22
    4dee:	9e 83       	std	Y+6, r25	; 0x06
    4df0:	8d 83       	std	Y+5, r24	; 0x05
    4df2:	8d 81       	ldd	r24, Y+5	; 0x05
    4df4:	9e 81       	ldd	r25, Y+6	; 0x06
    4df6:	9a 83       	std	Y+2, r25	; 0x02
    4df8:	89 83       	std	Y+1, r24	; 0x01
    4dfa:	89 81       	ldd	r24, Y+1	; 0x01
    4dfc:	9a 81       	ldd	r25, Y+2	; 0x02
    4dfe:	01 97       	sbiw	r24, 0x01	; 1
    4e00:	f1 f7       	brne	.-4      	; 0x4dfe <SEGMENT+0x478>
    4e02:	9a 83       	std	Y+2, r25	; 0x02
    4e04:	89 83       	std	Y+1, r24	; 0x01
						_delay_ms(1000);
						if (i==9)
    4e06:	89 ad       	ldd	r24, Y+57	; 0x39
    4e08:	89 30       	cpi	r24, 0x09	; 9
    4e0a:	09 f4       	brne	.+2      	; 0x4e0e <SEGMENT+0x488>
    4e0c:	eb cd       	rjmp	.-1066   	; 0x49e4 <SEGMENT+0x5e>
			{
				{
					DIO_VidSitPintValue(PORTC,PIN0, LOW);
					DIO_VidSitPintValue(PORTC,PIN1, LOW);
					DIO_VidSitPintValue(PORTC,PIN2, LOW);
					for(i=0;i<10;i++)
    4e0e:	89 ad       	ldd	r24, Y+57	; 0x39
    4e10:	8f 5f       	subi	r24, 0xFF	; 255
    4e12:	89 af       	std	Y+57, r24	; 0x39
    4e14:	89 ad       	ldd	r24, Y+57	; 0x39
    4e16:	8a 30       	cpi	r24, 0x0A	; 10
    4e18:	08 f4       	brcc	.+2      	; 0x4e1c <SEGMENT+0x496>
    4e1a:	7f cf       	rjmp	.-258    	; 0x4d1a <SEGMENT+0x394>
    4e1c:	e3 cd       	rjmp	.-1082   	; 0x49e4 <SEGMENT+0x5e>

00004e1e <dc_motor>:
#include "../MCAL/DIO/DIO_Interface.h"
#include <avr/delay.h>

void dc_motor (void)

{
    4e1e:	df 93       	push	r29
    4e20:	cf 93       	push	r28
    4e22:	cd b7       	in	r28, 0x3d	; 61
    4e24:	de b7       	in	r29, 0x3e	; 62
    4e26:	e8 97       	sbiw	r28, 0x38	; 56
    4e28:	0f b6       	in	r0, 0x3f	; 63
    4e2a:	f8 94       	cli
    4e2c:	de bf       	out	0x3e, r29	; 62
    4e2e:	0f be       	out	0x3f, r0	; 63
    4e30:	cd bf       	out	0x3d, r28	; 61
	DIO_VidSitPintDirection(PORTB,PIN0,OUTPUT);
    4e32:	81 e0       	ldi	r24, 0x01	; 1
    4e34:	60 e0       	ldi	r22, 0x00	; 0
    4e36:	41 e0       	ldi	r20, 0x01	; 1
    4e38:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <DIO_VidSitPintDirection>
	DIO_VidSitPintDirection(PORTB,PIN1,OUTPUT);
    4e3c:	81 e0       	ldi	r24, 0x01	; 1
    4e3e:	61 e0       	ldi	r22, 0x01	; 1
    4e40:	41 e0       	ldi	r20, 0x01	; 1
    4e42:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <DIO_VidSitPintDirection>

while (1)
	{
		DIO_VidSitPintValue(PORTB,PIN0,HIGH);
    4e46:	81 e0       	ldi	r24, 0x01	; 1
    4e48:	60 e0       	ldi	r22, 0x00	; 0
    4e4a:	41 e0       	ldi	r20, 0x01	; 1
    4e4c:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <DIO_VidSitPintValue>
		DIO_VidSitPintValue(PORTB,PIN1,LOW);
    4e50:	81 e0       	ldi	r24, 0x01	; 1
    4e52:	61 e0       	ldi	r22, 0x01	; 1
    4e54:	40 e0       	ldi	r20, 0x00	; 0
    4e56:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <DIO_VidSitPintValue>
    4e5a:	80 e0       	ldi	r24, 0x00	; 0
    4e5c:	90 e0       	ldi	r25, 0x00	; 0
    4e5e:	aa ef       	ldi	r26, 0xFA	; 250
    4e60:	b4 e4       	ldi	r27, 0x44	; 68
    4e62:	8d ab       	std	Y+53, r24	; 0x35
    4e64:	9e ab       	std	Y+54, r25	; 0x36
    4e66:	af ab       	std	Y+55, r26	; 0x37
    4e68:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4e6a:	6d a9       	ldd	r22, Y+53	; 0x35
    4e6c:	7e a9       	ldd	r23, Y+54	; 0x36
    4e6e:	8f a9       	ldd	r24, Y+55	; 0x37
    4e70:	98 ad       	ldd	r25, Y+56	; 0x38
    4e72:	20 e0       	ldi	r18, 0x00	; 0
    4e74:	30 e0       	ldi	r19, 0x00	; 0
    4e76:	4a ef       	ldi	r20, 0xFA	; 250
    4e78:	54 e4       	ldi	r21, 0x44	; 68
    4e7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e7e:	dc 01       	movw	r26, r24
    4e80:	cb 01       	movw	r24, r22
    4e82:	89 ab       	std	Y+49, r24	; 0x31
    4e84:	9a ab       	std	Y+50, r25	; 0x32
    4e86:	ab ab       	std	Y+51, r26	; 0x33
    4e88:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4e8a:	69 a9       	ldd	r22, Y+49	; 0x31
    4e8c:	7a a9       	ldd	r23, Y+50	; 0x32
    4e8e:	8b a9       	ldd	r24, Y+51	; 0x33
    4e90:	9c a9       	ldd	r25, Y+52	; 0x34
    4e92:	20 e0       	ldi	r18, 0x00	; 0
    4e94:	30 e0       	ldi	r19, 0x00	; 0
    4e96:	40 e8       	ldi	r20, 0x80	; 128
    4e98:	5f e3       	ldi	r21, 0x3F	; 63
    4e9a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4e9e:	88 23       	and	r24, r24
    4ea0:	2c f4       	brge	.+10     	; 0x4eac <dc_motor+0x8e>
		__ticks = 1;
    4ea2:	81 e0       	ldi	r24, 0x01	; 1
    4ea4:	90 e0       	ldi	r25, 0x00	; 0
    4ea6:	98 ab       	std	Y+48, r25	; 0x30
    4ea8:	8f a7       	std	Y+47, r24	; 0x2f
    4eaa:	3f c0       	rjmp	.+126    	; 0x4f2a <dc_motor+0x10c>
	else if (__tmp > 65535)
    4eac:	69 a9       	ldd	r22, Y+49	; 0x31
    4eae:	7a a9       	ldd	r23, Y+50	; 0x32
    4eb0:	8b a9       	ldd	r24, Y+51	; 0x33
    4eb2:	9c a9       	ldd	r25, Y+52	; 0x34
    4eb4:	20 e0       	ldi	r18, 0x00	; 0
    4eb6:	3f ef       	ldi	r19, 0xFF	; 255
    4eb8:	4f e7       	ldi	r20, 0x7F	; 127
    4eba:	57 e4       	ldi	r21, 0x47	; 71
    4ebc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4ec0:	18 16       	cp	r1, r24
    4ec2:	4c f5       	brge	.+82     	; 0x4f16 <dc_motor+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4ec4:	6d a9       	ldd	r22, Y+53	; 0x35
    4ec6:	7e a9       	ldd	r23, Y+54	; 0x36
    4ec8:	8f a9       	ldd	r24, Y+55	; 0x37
    4eca:	98 ad       	ldd	r25, Y+56	; 0x38
    4ecc:	20 e0       	ldi	r18, 0x00	; 0
    4ece:	30 e0       	ldi	r19, 0x00	; 0
    4ed0:	40 e2       	ldi	r20, 0x20	; 32
    4ed2:	51 e4       	ldi	r21, 0x41	; 65
    4ed4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ed8:	dc 01       	movw	r26, r24
    4eda:	cb 01       	movw	r24, r22
    4edc:	bc 01       	movw	r22, r24
    4ede:	cd 01       	movw	r24, r26
    4ee0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ee4:	dc 01       	movw	r26, r24
    4ee6:	cb 01       	movw	r24, r22
    4ee8:	98 ab       	std	Y+48, r25	; 0x30
    4eea:	8f a7       	std	Y+47, r24	; 0x2f
    4eec:	0f c0       	rjmp	.+30     	; 0x4f0c <dc_motor+0xee>
    4eee:	88 ec       	ldi	r24, 0xC8	; 200
    4ef0:	90 e0       	ldi	r25, 0x00	; 0
    4ef2:	9e a7       	std	Y+46, r25	; 0x2e
    4ef4:	8d a7       	std	Y+45, r24	; 0x2d
    4ef6:	8d a5       	ldd	r24, Y+45	; 0x2d
    4ef8:	9e a5       	ldd	r25, Y+46	; 0x2e
    4efa:	01 97       	sbiw	r24, 0x01	; 1
    4efc:	f1 f7       	brne	.-4      	; 0x4efa <dc_motor+0xdc>
    4efe:	9e a7       	std	Y+46, r25	; 0x2e
    4f00:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4f02:	8f a5       	ldd	r24, Y+47	; 0x2f
    4f04:	98 a9       	ldd	r25, Y+48	; 0x30
    4f06:	01 97       	sbiw	r24, 0x01	; 1
    4f08:	98 ab       	std	Y+48, r25	; 0x30
    4f0a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4f0c:	8f a5       	ldd	r24, Y+47	; 0x2f
    4f0e:	98 a9       	ldd	r25, Y+48	; 0x30
    4f10:	00 97       	sbiw	r24, 0x00	; 0
    4f12:	69 f7       	brne	.-38     	; 0x4eee <dc_motor+0xd0>
    4f14:	14 c0       	rjmp	.+40     	; 0x4f3e <dc_motor+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4f16:	69 a9       	ldd	r22, Y+49	; 0x31
    4f18:	7a a9       	ldd	r23, Y+50	; 0x32
    4f1a:	8b a9       	ldd	r24, Y+51	; 0x33
    4f1c:	9c a9       	ldd	r25, Y+52	; 0x34
    4f1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f22:	dc 01       	movw	r26, r24
    4f24:	cb 01       	movw	r24, r22
    4f26:	98 ab       	std	Y+48, r25	; 0x30
    4f28:	8f a7       	std	Y+47, r24	; 0x2f
    4f2a:	8f a5       	ldd	r24, Y+47	; 0x2f
    4f2c:	98 a9       	ldd	r25, Y+48	; 0x30
    4f2e:	9c a7       	std	Y+44, r25	; 0x2c
    4f30:	8b a7       	std	Y+43, r24	; 0x2b
    4f32:	8b a5       	ldd	r24, Y+43	; 0x2b
    4f34:	9c a5       	ldd	r25, Y+44	; 0x2c
    4f36:	01 97       	sbiw	r24, 0x01	; 1
    4f38:	f1 f7       	brne	.-4      	; 0x4f36 <dc_motor+0x118>
    4f3a:	9c a7       	std	Y+44, r25	; 0x2c
    4f3c:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(2000);
		DIO_VidSitPintValue(PORTB,PIN0,LOW);
    4f3e:	81 e0       	ldi	r24, 0x01	; 1
    4f40:	60 e0       	ldi	r22, 0x00	; 0
    4f42:	40 e0       	ldi	r20, 0x00	; 0
    4f44:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <DIO_VidSitPintValue>
		DIO_VidSitPintValue(PORTB,PIN1,LOW);
    4f48:	81 e0       	ldi	r24, 0x01	; 1
    4f4a:	61 e0       	ldi	r22, 0x01	; 1
    4f4c:	40 e0       	ldi	r20, 0x00	; 0
    4f4e:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <DIO_VidSitPintValue>
    4f52:	80 e0       	ldi	r24, 0x00	; 0
    4f54:	90 e4       	ldi	r25, 0x40	; 64
    4f56:	ac e9       	ldi	r26, 0x9C	; 156
    4f58:	b5 e4       	ldi	r27, 0x45	; 69
    4f5a:	8f a3       	std	Y+39, r24	; 0x27
    4f5c:	98 a7       	std	Y+40, r25	; 0x28
    4f5e:	a9 a7       	std	Y+41, r26	; 0x29
    4f60:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4f62:	6f a1       	ldd	r22, Y+39	; 0x27
    4f64:	78 a5       	ldd	r23, Y+40	; 0x28
    4f66:	89 a5       	ldd	r24, Y+41	; 0x29
    4f68:	9a a5       	ldd	r25, Y+42	; 0x2a
    4f6a:	20 e0       	ldi	r18, 0x00	; 0
    4f6c:	30 e0       	ldi	r19, 0x00	; 0
    4f6e:	4a ef       	ldi	r20, 0xFA	; 250
    4f70:	54 e4       	ldi	r21, 0x44	; 68
    4f72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4f76:	dc 01       	movw	r26, r24
    4f78:	cb 01       	movw	r24, r22
    4f7a:	8b a3       	std	Y+35, r24	; 0x23
    4f7c:	9c a3       	std	Y+36, r25	; 0x24
    4f7e:	ad a3       	std	Y+37, r26	; 0x25
    4f80:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4f82:	6b a1       	ldd	r22, Y+35	; 0x23
    4f84:	7c a1       	ldd	r23, Y+36	; 0x24
    4f86:	8d a1       	ldd	r24, Y+37	; 0x25
    4f88:	9e a1       	ldd	r25, Y+38	; 0x26
    4f8a:	20 e0       	ldi	r18, 0x00	; 0
    4f8c:	30 e0       	ldi	r19, 0x00	; 0
    4f8e:	40 e8       	ldi	r20, 0x80	; 128
    4f90:	5f e3       	ldi	r21, 0x3F	; 63
    4f92:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4f96:	88 23       	and	r24, r24
    4f98:	2c f4       	brge	.+10     	; 0x4fa4 <dc_motor+0x186>
		__ticks = 1;
    4f9a:	81 e0       	ldi	r24, 0x01	; 1
    4f9c:	90 e0       	ldi	r25, 0x00	; 0
    4f9e:	9a a3       	std	Y+34, r25	; 0x22
    4fa0:	89 a3       	std	Y+33, r24	; 0x21
    4fa2:	3f c0       	rjmp	.+126    	; 0x5022 <dc_motor+0x204>
	else if (__tmp > 65535)
    4fa4:	6b a1       	ldd	r22, Y+35	; 0x23
    4fa6:	7c a1       	ldd	r23, Y+36	; 0x24
    4fa8:	8d a1       	ldd	r24, Y+37	; 0x25
    4faa:	9e a1       	ldd	r25, Y+38	; 0x26
    4fac:	20 e0       	ldi	r18, 0x00	; 0
    4fae:	3f ef       	ldi	r19, 0xFF	; 255
    4fb0:	4f e7       	ldi	r20, 0x7F	; 127
    4fb2:	57 e4       	ldi	r21, 0x47	; 71
    4fb4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4fb8:	18 16       	cp	r1, r24
    4fba:	4c f5       	brge	.+82     	; 0x500e <dc_motor+0x1f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4fbc:	6f a1       	ldd	r22, Y+39	; 0x27
    4fbe:	78 a5       	ldd	r23, Y+40	; 0x28
    4fc0:	89 a5       	ldd	r24, Y+41	; 0x29
    4fc2:	9a a5       	ldd	r25, Y+42	; 0x2a
    4fc4:	20 e0       	ldi	r18, 0x00	; 0
    4fc6:	30 e0       	ldi	r19, 0x00	; 0
    4fc8:	40 e2       	ldi	r20, 0x20	; 32
    4fca:	51 e4       	ldi	r21, 0x41	; 65
    4fcc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4fd0:	dc 01       	movw	r26, r24
    4fd2:	cb 01       	movw	r24, r22
    4fd4:	bc 01       	movw	r22, r24
    4fd6:	cd 01       	movw	r24, r26
    4fd8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4fdc:	dc 01       	movw	r26, r24
    4fde:	cb 01       	movw	r24, r22
    4fe0:	9a a3       	std	Y+34, r25	; 0x22
    4fe2:	89 a3       	std	Y+33, r24	; 0x21
    4fe4:	0f c0       	rjmp	.+30     	; 0x5004 <dc_motor+0x1e6>
    4fe6:	88 ec       	ldi	r24, 0xC8	; 200
    4fe8:	90 e0       	ldi	r25, 0x00	; 0
    4fea:	98 a3       	std	Y+32, r25	; 0x20
    4fec:	8f 8f       	std	Y+31, r24	; 0x1f
    4fee:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4ff0:	98 a1       	ldd	r25, Y+32	; 0x20
    4ff2:	01 97       	sbiw	r24, 0x01	; 1
    4ff4:	f1 f7       	brne	.-4      	; 0x4ff2 <dc_motor+0x1d4>
    4ff6:	98 a3       	std	Y+32, r25	; 0x20
    4ff8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4ffa:	89 a1       	ldd	r24, Y+33	; 0x21
    4ffc:	9a a1       	ldd	r25, Y+34	; 0x22
    4ffe:	01 97       	sbiw	r24, 0x01	; 1
    5000:	9a a3       	std	Y+34, r25	; 0x22
    5002:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5004:	89 a1       	ldd	r24, Y+33	; 0x21
    5006:	9a a1       	ldd	r25, Y+34	; 0x22
    5008:	00 97       	sbiw	r24, 0x00	; 0
    500a:	69 f7       	brne	.-38     	; 0x4fe6 <dc_motor+0x1c8>
    500c:	14 c0       	rjmp	.+40     	; 0x5036 <dc_motor+0x218>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    500e:	6b a1       	ldd	r22, Y+35	; 0x23
    5010:	7c a1       	ldd	r23, Y+36	; 0x24
    5012:	8d a1       	ldd	r24, Y+37	; 0x25
    5014:	9e a1       	ldd	r25, Y+38	; 0x26
    5016:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    501a:	dc 01       	movw	r26, r24
    501c:	cb 01       	movw	r24, r22
    501e:	9a a3       	std	Y+34, r25	; 0x22
    5020:	89 a3       	std	Y+33, r24	; 0x21
    5022:	89 a1       	ldd	r24, Y+33	; 0x21
    5024:	9a a1       	ldd	r25, Y+34	; 0x22
    5026:	9e 8f       	std	Y+30, r25	; 0x1e
    5028:	8d 8f       	std	Y+29, r24	; 0x1d
    502a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    502c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    502e:	01 97       	sbiw	r24, 0x01	; 1
    5030:	f1 f7       	brne	.-4      	; 0x502e <dc_motor+0x210>
    5032:	9e 8f       	std	Y+30, r25	; 0x1e
    5034:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(5000);
		DIO_VidSitPintValue(PORTB,PIN0,LOW);
    5036:	81 e0       	ldi	r24, 0x01	; 1
    5038:	60 e0       	ldi	r22, 0x00	; 0
    503a:	40 e0       	ldi	r20, 0x00	; 0
    503c:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <DIO_VidSitPintValue>
		DIO_VidSitPintValue(PORTB,PIN1,HIGH);
    5040:	81 e0       	ldi	r24, 0x01	; 1
    5042:	61 e0       	ldi	r22, 0x01	; 1
    5044:	41 e0       	ldi	r20, 0x01	; 1
    5046:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <DIO_VidSitPintValue>
    504a:	80 e0       	ldi	r24, 0x00	; 0
    504c:	90 e0       	ldi	r25, 0x00	; 0
    504e:	aa ef       	ldi	r26, 0xFA	; 250
    5050:	b4 e4       	ldi	r27, 0x44	; 68
    5052:	89 8f       	std	Y+25, r24	; 0x19
    5054:	9a 8f       	std	Y+26, r25	; 0x1a
    5056:	ab 8f       	std	Y+27, r26	; 0x1b
    5058:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    505a:	69 8d       	ldd	r22, Y+25	; 0x19
    505c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    505e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5060:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5062:	20 e0       	ldi	r18, 0x00	; 0
    5064:	30 e0       	ldi	r19, 0x00	; 0
    5066:	4a ef       	ldi	r20, 0xFA	; 250
    5068:	54 e4       	ldi	r21, 0x44	; 68
    506a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    506e:	dc 01       	movw	r26, r24
    5070:	cb 01       	movw	r24, r22
    5072:	8d 8b       	std	Y+21, r24	; 0x15
    5074:	9e 8b       	std	Y+22, r25	; 0x16
    5076:	af 8b       	std	Y+23, r26	; 0x17
    5078:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    507a:	6d 89       	ldd	r22, Y+21	; 0x15
    507c:	7e 89       	ldd	r23, Y+22	; 0x16
    507e:	8f 89       	ldd	r24, Y+23	; 0x17
    5080:	98 8d       	ldd	r25, Y+24	; 0x18
    5082:	20 e0       	ldi	r18, 0x00	; 0
    5084:	30 e0       	ldi	r19, 0x00	; 0
    5086:	40 e8       	ldi	r20, 0x80	; 128
    5088:	5f e3       	ldi	r21, 0x3F	; 63
    508a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    508e:	88 23       	and	r24, r24
    5090:	2c f4       	brge	.+10     	; 0x509c <dc_motor+0x27e>
		__ticks = 1;
    5092:	81 e0       	ldi	r24, 0x01	; 1
    5094:	90 e0       	ldi	r25, 0x00	; 0
    5096:	9c 8b       	std	Y+20, r25	; 0x14
    5098:	8b 8b       	std	Y+19, r24	; 0x13
    509a:	3f c0       	rjmp	.+126    	; 0x511a <dc_motor+0x2fc>
	else if (__tmp > 65535)
    509c:	6d 89       	ldd	r22, Y+21	; 0x15
    509e:	7e 89       	ldd	r23, Y+22	; 0x16
    50a0:	8f 89       	ldd	r24, Y+23	; 0x17
    50a2:	98 8d       	ldd	r25, Y+24	; 0x18
    50a4:	20 e0       	ldi	r18, 0x00	; 0
    50a6:	3f ef       	ldi	r19, 0xFF	; 255
    50a8:	4f e7       	ldi	r20, 0x7F	; 127
    50aa:	57 e4       	ldi	r21, 0x47	; 71
    50ac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    50b0:	18 16       	cp	r1, r24
    50b2:	4c f5       	brge	.+82     	; 0x5106 <dc_motor+0x2e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    50b4:	69 8d       	ldd	r22, Y+25	; 0x19
    50b6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    50b8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    50ba:	9c 8d       	ldd	r25, Y+28	; 0x1c
    50bc:	20 e0       	ldi	r18, 0x00	; 0
    50be:	30 e0       	ldi	r19, 0x00	; 0
    50c0:	40 e2       	ldi	r20, 0x20	; 32
    50c2:	51 e4       	ldi	r21, 0x41	; 65
    50c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    50c8:	dc 01       	movw	r26, r24
    50ca:	cb 01       	movw	r24, r22
    50cc:	bc 01       	movw	r22, r24
    50ce:	cd 01       	movw	r24, r26
    50d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    50d4:	dc 01       	movw	r26, r24
    50d6:	cb 01       	movw	r24, r22
    50d8:	9c 8b       	std	Y+20, r25	; 0x14
    50da:	8b 8b       	std	Y+19, r24	; 0x13
    50dc:	0f c0       	rjmp	.+30     	; 0x50fc <dc_motor+0x2de>
    50de:	88 ec       	ldi	r24, 0xC8	; 200
    50e0:	90 e0       	ldi	r25, 0x00	; 0
    50e2:	9a 8b       	std	Y+18, r25	; 0x12
    50e4:	89 8b       	std	Y+17, r24	; 0x11
    50e6:	89 89       	ldd	r24, Y+17	; 0x11
    50e8:	9a 89       	ldd	r25, Y+18	; 0x12
    50ea:	01 97       	sbiw	r24, 0x01	; 1
    50ec:	f1 f7       	brne	.-4      	; 0x50ea <dc_motor+0x2cc>
    50ee:	9a 8b       	std	Y+18, r25	; 0x12
    50f0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    50f2:	8b 89       	ldd	r24, Y+19	; 0x13
    50f4:	9c 89       	ldd	r25, Y+20	; 0x14
    50f6:	01 97       	sbiw	r24, 0x01	; 1
    50f8:	9c 8b       	std	Y+20, r25	; 0x14
    50fa:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    50fc:	8b 89       	ldd	r24, Y+19	; 0x13
    50fe:	9c 89       	ldd	r25, Y+20	; 0x14
    5100:	00 97       	sbiw	r24, 0x00	; 0
    5102:	69 f7       	brne	.-38     	; 0x50de <dc_motor+0x2c0>
    5104:	14 c0       	rjmp	.+40     	; 0x512e <dc_motor+0x310>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5106:	6d 89       	ldd	r22, Y+21	; 0x15
    5108:	7e 89       	ldd	r23, Y+22	; 0x16
    510a:	8f 89       	ldd	r24, Y+23	; 0x17
    510c:	98 8d       	ldd	r25, Y+24	; 0x18
    510e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5112:	dc 01       	movw	r26, r24
    5114:	cb 01       	movw	r24, r22
    5116:	9c 8b       	std	Y+20, r25	; 0x14
    5118:	8b 8b       	std	Y+19, r24	; 0x13
    511a:	8b 89       	ldd	r24, Y+19	; 0x13
    511c:	9c 89       	ldd	r25, Y+20	; 0x14
    511e:	98 8b       	std	Y+16, r25	; 0x10
    5120:	8f 87       	std	Y+15, r24	; 0x0f
    5122:	8f 85       	ldd	r24, Y+15	; 0x0f
    5124:	98 89       	ldd	r25, Y+16	; 0x10
    5126:	01 97       	sbiw	r24, 0x01	; 1
    5128:	f1 f7       	brne	.-4      	; 0x5126 <dc_motor+0x308>
    512a:	98 8b       	std	Y+16, r25	; 0x10
    512c:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(2000);
		DIO_VidSitPintValue(PORTB,PIN0,LOW);
    512e:	81 e0       	ldi	r24, 0x01	; 1
    5130:	60 e0       	ldi	r22, 0x00	; 0
    5132:	40 e0       	ldi	r20, 0x00	; 0
    5134:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <DIO_VidSitPintValue>
		DIO_VidSitPintValue(PORTB,PIN1,LOW);
    5138:	81 e0       	ldi	r24, 0x01	; 1
    513a:	61 e0       	ldi	r22, 0x01	; 1
    513c:	40 e0       	ldi	r20, 0x00	; 0
    513e:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <DIO_VidSitPintValue>
    5142:	80 e0       	ldi	r24, 0x00	; 0
    5144:	90 e4       	ldi	r25, 0x40	; 64
    5146:	ac e9       	ldi	r26, 0x9C	; 156
    5148:	b5 e4       	ldi	r27, 0x45	; 69
    514a:	8b 87       	std	Y+11, r24	; 0x0b
    514c:	9c 87       	std	Y+12, r25	; 0x0c
    514e:	ad 87       	std	Y+13, r26	; 0x0d
    5150:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5152:	6b 85       	ldd	r22, Y+11	; 0x0b
    5154:	7c 85       	ldd	r23, Y+12	; 0x0c
    5156:	8d 85       	ldd	r24, Y+13	; 0x0d
    5158:	9e 85       	ldd	r25, Y+14	; 0x0e
    515a:	20 e0       	ldi	r18, 0x00	; 0
    515c:	30 e0       	ldi	r19, 0x00	; 0
    515e:	4a ef       	ldi	r20, 0xFA	; 250
    5160:	54 e4       	ldi	r21, 0x44	; 68
    5162:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5166:	dc 01       	movw	r26, r24
    5168:	cb 01       	movw	r24, r22
    516a:	8f 83       	std	Y+7, r24	; 0x07
    516c:	98 87       	std	Y+8, r25	; 0x08
    516e:	a9 87       	std	Y+9, r26	; 0x09
    5170:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5172:	6f 81       	ldd	r22, Y+7	; 0x07
    5174:	78 85       	ldd	r23, Y+8	; 0x08
    5176:	89 85       	ldd	r24, Y+9	; 0x09
    5178:	9a 85       	ldd	r25, Y+10	; 0x0a
    517a:	20 e0       	ldi	r18, 0x00	; 0
    517c:	30 e0       	ldi	r19, 0x00	; 0
    517e:	40 e8       	ldi	r20, 0x80	; 128
    5180:	5f e3       	ldi	r21, 0x3F	; 63
    5182:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5186:	88 23       	and	r24, r24
    5188:	2c f4       	brge	.+10     	; 0x5194 <dc_motor+0x376>
		__ticks = 1;
    518a:	81 e0       	ldi	r24, 0x01	; 1
    518c:	90 e0       	ldi	r25, 0x00	; 0
    518e:	9e 83       	std	Y+6, r25	; 0x06
    5190:	8d 83       	std	Y+5, r24	; 0x05
    5192:	3f c0       	rjmp	.+126    	; 0x5212 <dc_motor+0x3f4>
	else if (__tmp > 65535)
    5194:	6f 81       	ldd	r22, Y+7	; 0x07
    5196:	78 85       	ldd	r23, Y+8	; 0x08
    5198:	89 85       	ldd	r24, Y+9	; 0x09
    519a:	9a 85       	ldd	r25, Y+10	; 0x0a
    519c:	20 e0       	ldi	r18, 0x00	; 0
    519e:	3f ef       	ldi	r19, 0xFF	; 255
    51a0:	4f e7       	ldi	r20, 0x7F	; 127
    51a2:	57 e4       	ldi	r21, 0x47	; 71
    51a4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    51a8:	18 16       	cp	r1, r24
    51aa:	4c f5       	brge	.+82     	; 0x51fe <dc_motor+0x3e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    51ac:	6b 85       	ldd	r22, Y+11	; 0x0b
    51ae:	7c 85       	ldd	r23, Y+12	; 0x0c
    51b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    51b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    51b4:	20 e0       	ldi	r18, 0x00	; 0
    51b6:	30 e0       	ldi	r19, 0x00	; 0
    51b8:	40 e2       	ldi	r20, 0x20	; 32
    51ba:	51 e4       	ldi	r21, 0x41	; 65
    51bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    51c0:	dc 01       	movw	r26, r24
    51c2:	cb 01       	movw	r24, r22
    51c4:	bc 01       	movw	r22, r24
    51c6:	cd 01       	movw	r24, r26
    51c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    51cc:	dc 01       	movw	r26, r24
    51ce:	cb 01       	movw	r24, r22
    51d0:	9e 83       	std	Y+6, r25	; 0x06
    51d2:	8d 83       	std	Y+5, r24	; 0x05
    51d4:	0f c0       	rjmp	.+30     	; 0x51f4 <dc_motor+0x3d6>
    51d6:	88 ec       	ldi	r24, 0xC8	; 200
    51d8:	90 e0       	ldi	r25, 0x00	; 0
    51da:	9c 83       	std	Y+4, r25	; 0x04
    51dc:	8b 83       	std	Y+3, r24	; 0x03
    51de:	8b 81       	ldd	r24, Y+3	; 0x03
    51e0:	9c 81       	ldd	r25, Y+4	; 0x04
    51e2:	01 97       	sbiw	r24, 0x01	; 1
    51e4:	f1 f7       	brne	.-4      	; 0x51e2 <dc_motor+0x3c4>
    51e6:	9c 83       	std	Y+4, r25	; 0x04
    51e8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    51ea:	8d 81       	ldd	r24, Y+5	; 0x05
    51ec:	9e 81       	ldd	r25, Y+6	; 0x06
    51ee:	01 97       	sbiw	r24, 0x01	; 1
    51f0:	9e 83       	std	Y+6, r25	; 0x06
    51f2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    51f4:	8d 81       	ldd	r24, Y+5	; 0x05
    51f6:	9e 81       	ldd	r25, Y+6	; 0x06
    51f8:	00 97       	sbiw	r24, 0x00	; 0
    51fa:	69 f7       	brne	.-38     	; 0x51d6 <dc_motor+0x3b8>
    51fc:	24 ce       	rjmp	.-952    	; 0x4e46 <dc_motor+0x28>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    51fe:	6f 81       	ldd	r22, Y+7	; 0x07
    5200:	78 85       	ldd	r23, Y+8	; 0x08
    5202:	89 85       	ldd	r24, Y+9	; 0x09
    5204:	9a 85       	ldd	r25, Y+10	; 0x0a
    5206:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    520a:	dc 01       	movw	r26, r24
    520c:	cb 01       	movw	r24, r22
    520e:	9e 83       	std	Y+6, r25	; 0x06
    5210:	8d 83       	std	Y+5, r24	; 0x05
    5212:	8d 81       	ldd	r24, Y+5	; 0x05
    5214:	9e 81       	ldd	r25, Y+6	; 0x06
    5216:	9a 83       	std	Y+2, r25	; 0x02
    5218:	89 83       	std	Y+1, r24	; 0x01
    521a:	89 81       	ldd	r24, Y+1	; 0x01
    521c:	9a 81       	ldd	r25, Y+2	; 0x02
    521e:	01 97       	sbiw	r24, 0x01	; 1
    5220:	f1 f7       	brne	.-4      	; 0x521e <dc_motor+0x400>
    5222:	9a 83       	std	Y+2, r25	; 0x02
    5224:	89 83       	std	Y+1, r24	; 0x01
    5226:	0f ce       	rjmp	.-994    	; 0x4e46 <dc_motor+0x28>

00005228 <key_pad>:
#include <avr/delay.h>
#include "../HAL/LCD_4BIT/LCD_4BIT_Interface.h"
#include "../HAL/KEY_PAD/KEY_PAD_Interface.h"

void key_pad(void)
{
    5228:	0f 93       	push	r16
    522a:	1f 93       	push	r17
    522c:	df 93       	push	r29
    522e:	cf 93       	push	r28
    5230:	cd b7       	in	r28, 0x3d	; 61
    5232:	de b7       	in	r29, 0x3e	; 62
    5234:	c0 51       	subi	r28, 0x10	; 16
    5236:	d1 40       	sbci	r29, 0x01	; 1
    5238:	0f b6       	in	r0, 0x3f	; 63
    523a:	f8 94       	cli
    523c:	de bf       	out	0x3e, r29	; 62
    523e:	0f be       	out	0x3f, r0	; 63
    5240:	cd bf       	out	0x3d, r28	; 61
	/*u8 pattern1[]={0x00, 0x00, 0x04, 0x1A, 0x0A, 0x04, 0x00, 0x00};
	u8 pattern2[]={0x00, 0x0C, 0x02, 0x1F, 0x00, 0x00, 0x00, 0x00};
	u8 pattern3[]={0x00, 0x00, 0x04, 0x1B, 0x0A, 0x04, 0x00, 0x00};
	u8 pattern4[]={0x00, 0x04, 0x04, 0x1F, 0x00, 0x00, 0x00, 0x00};*/
	u8 pattern1[]={0x04, 0x0A, 0x04, 0x0E, 0x15, 0x04, 0x0A, 0x11};
    5242:	ce 01       	movw	r24, r28
    5244:	8e 51       	subi	r24, 0x1E	; 30
    5246:	9f 4f       	sbci	r25, 0xFF	; 255
    5248:	ce 5f       	subi	r28, 0xFE	; 254
    524a:	de 4f       	sbci	r29, 0xFE	; 254
    524c:	99 83       	std	Y+1, r25	; 0x01
    524e:	88 83       	st	Y, r24
    5250:	c2 50       	subi	r28, 0x02	; 2
    5252:	d1 40       	sbci	r29, 0x01	; 1
    5254:	83 e2       	ldi	r24, 0x23	; 35
    5256:	91 e0       	ldi	r25, 0x01	; 1
    5258:	cc 5f       	subi	r28, 0xFC	; 252
    525a:	de 4f       	sbci	r29, 0xFE	; 254
    525c:	99 83       	std	Y+1, r25	; 0x01
    525e:	88 83       	st	Y, r24
    5260:	c4 50       	subi	r28, 0x04	; 4
    5262:	d1 40       	sbci	r29, 0x01	; 1
    5264:	98 e0       	ldi	r25, 0x08	; 8
    5266:	ca 5f       	subi	r28, 0xFA	; 250
    5268:	de 4f       	sbci	r29, 0xFE	; 254
    526a:	98 83       	st	Y, r25
    526c:	c6 50       	subi	r28, 0x06	; 6
    526e:	d1 40       	sbci	r29, 0x01	; 1
    5270:	cc 5f       	subi	r28, 0xFC	; 252
    5272:	de 4f       	sbci	r29, 0xFE	; 254
    5274:	a8 81       	ld	r26, Y
    5276:	b9 81       	ldd	r27, Y+1	; 0x01
    5278:	c4 50       	subi	r28, 0x04	; 4
    527a:	d1 40       	sbci	r29, 0x01	; 1
    527c:	0c 90       	ld	r0, X
    527e:	cc 5f       	subi	r28, 0xFC	; 252
    5280:	de 4f       	sbci	r29, 0xFE	; 254
    5282:	e8 81       	ld	r30, Y
    5284:	f9 81       	ldd	r31, Y+1	; 0x01
    5286:	c4 50       	subi	r28, 0x04	; 4
    5288:	d1 40       	sbci	r29, 0x01	; 1
    528a:	31 96       	adiw	r30, 0x01	; 1
    528c:	cc 5f       	subi	r28, 0xFC	; 252
    528e:	de 4f       	sbci	r29, 0xFE	; 254
    5290:	f9 83       	std	Y+1, r31	; 0x01
    5292:	e8 83       	st	Y, r30
    5294:	c4 50       	subi	r28, 0x04	; 4
    5296:	d1 40       	sbci	r29, 0x01	; 1
    5298:	ce 5f       	subi	r28, 0xFE	; 254
    529a:	de 4f       	sbci	r29, 0xFE	; 254
    529c:	a8 81       	ld	r26, Y
    529e:	b9 81       	ldd	r27, Y+1	; 0x01
    52a0:	c2 50       	subi	r28, 0x02	; 2
    52a2:	d1 40       	sbci	r29, 0x01	; 1
    52a4:	0c 92       	st	X, r0
    52a6:	ce 5f       	subi	r28, 0xFE	; 254
    52a8:	de 4f       	sbci	r29, 0xFE	; 254
    52aa:	e8 81       	ld	r30, Y
    52ac:	f9 81       	ldd	r31, Y+1	; 0x01
    52ae:	c2 50       	subi	r28, 0x02	; 2
    52b0:	d1 40       	sbci	r29, 0x01	; 1
    52b2:	31 96       	adiw	r30, 0x01	; 1
    52b4:	ce 5f       	subi	r28, 0xFE	; 254
    52b6:	de 4f       	sbci	r29, 0xFE	; 254
    52b8:	f9 83       	std	Y+1, r31	; 0x01
    52ba:	e8 83       	st	Y, r30
    52bc:	c2 50       	subi	r28, 0x02	; 2
    52be:	d1 40       	sbci	r29, 0x01	; 1
    52c0:	ca 5f       	subi	r28, 0xFA	; 250
    52c2:	de 4f       	sbci	r29, 0xFE	; 254
    52c4:	f8 81       	ld	r31, Y
    52c6:	c6 50       	subi	r28, 0x06	; 6
    52c8:	d1 40       	sbci	r29, 0x01	; 1
    52ca:	f1 50       	subi	r31, 0x01	; 1
    52cc:	ca 5f       	subi	r28, 0xFA	; 250
    52ce:	de 4f       	sbci	r29, 0xFE	; 254
    52d0:	f8 83       	st	Y, r31
    52d2:	c6 50       	subi	r28, 0x06	; 6
    52d4:	d1 40       	sbci	r29, 0x01	; 1
    52d6:	ca 5f       	subi	r28, 0xFA	; 250
    52d8:	de 4f       	sbci	r29, 0xFE	; 254
    52da:	88 81       	ld	r24, Y
    52dc:	c6 50       	subi	r28, 0x06	; 6
    52de:	d1 40       	sbci	r29, 0x01	; 1
    52e0:	88 23       	and	r24, r24
    52e2:	31 f6       	brne	.-116    	; 0x5270 <key_pad+0x48>
	u8 pattern2[]={0x00, 0x00, 0x00, 0x0C, 0x12, 0x12, 0x0C, 0x00};
    52e4:	ce 01       	movw	r24, r28
    52e6:	86 51       	subi	r24, 0x16	; 22
    52e8:	9f 4f       	sbci	r25, 0xFF	; 255
    52ea:	c9 5f       	subi	r28, 0xF9	; 249
    52ec:	de 4f       	sbci	r29, 0xFE	; 254
    52ee:	99 83       	std	Y+1, r25	; 0x01
    52f0:	88 83       	st	Y, r24
    52f2:	c7 50       	subi	r28, 0x07	; 7
    52f4:	d1 40       	sbci	r29, 0x01	; 1
    52f6:	ab e1       	ldi	r26, 0x1B	; 27
    52f8:	b1 e0       	ldi	r27, 0x01	; 1
    52fa:	c7 5f       	subi	r28, 0xF7	; 247
    52fc:	de 4f       	sbci	r29, 0xFE	; 254
    52fe:	b9 83       	std	Y+1, r27	; 0x01
    5300:	a8 83       	st	Y, r26
    5302:	c9 50       	subi	r28, 0x09	; 9
    5304:	d1 40       	sbci	r29, 0x01	; 1
    5306:	b8 e0       	ldi	r27, 0x08	; 8
    5308:	c5 5f       	subi	r28, 0xF5	; 245
    530a:	de 4f       	sbci	r29, 0xFE	; 254
    530c:	b8 83       	st	Y, r27
    530e:	cb 50       	subi	r28, 0x0B	; 11
    5310:	d1 40       	sbci	r29, 0x01	; 1
    5312:	c7 5f       	subi	r28, 0xF7	; 247
    5314:	de 4f       	sbci	r29, 0xFE	; 254
    5316:	e8 81       	ld	r30, Y
    5318:	f9 81       	ldd	r31, Y+1	; 0x01
    531a:	c9 50       	subi	r28, 0x09	; 9
    531c:	d1 40       	sbci	r29, 0x01	; 1
    531e:	00 80       	ld	r0, Z
    5320:	c7 5f       	subi	r28, 0xF7	; 247
    5322:	de 4f       	sbci	r29, 0xFE	; 254
    5324:	88 81       	ld	r24, Y
    5326:	99 81       	ldd	r25, Y+1	; 0x01
    5328:	c9 50       	subi	r28, 0x09	; 9
    532a:	d1 40       	sbci	r29, 0x01	; 1
    532c:	01 96       	adiw	r24, 0x01	; 1
    532e:	c7 5f       	subi	r28, 0xF7	; 247
    5330:	de 4f       	sbci	r29, 0xFE	; 254
    5332:	99 83       	std	Y+1, r25	; 0x01
    5334:	88 83       	st	Y, r24
    5336:	c9 50       	subi	r28, 0x09	; 9
    5338:	d1 40       	sbci	r29, 0x01	; 1
    533a:	c9 5f       	subi	r28, 0xF9	; 249
    533c:	de 4f       	sbci	r29, 0xFE	; 254
    533e:	a8 81       	ld	r26, Y
    5340:	b9 81       	ldd	r27, Y+1	; 0x01
    5342:	c7 50       	subi	r28, 0x07	; 7
    5344:	d1 40       	sbci	r29, 0x01	; 1
    5346:	0c 92       	st	X, r0
    5348:	c9 5f       	subi	r28, 0xF9	; 249
    534a:	de 4f       	sbci	r29, 0xFE	; 254
    534c:	e8 81       	ld	r30, Y
    534e:	f9 81       	ldd	r31, Y+1	; 0x01
    5350:	c7 50       	subi	r28, 0x07	; 7
    5352:	d1 40       	sbci	r29, 0x01	; 1
    5354:	31 96       	adiw	r30, 0x01	; 1
    5356:	c9 5f       	subi	r28, 0xF9	; 249
    5358:	de 4f       	sbci	r29, 0xFE	; 254
    535a:	f9 83       	std	Y+1, r31	; 0x01
    535c:	e8 83       	st	Y, r30
    535e:	c7 50       	subi	r28, 0x07	; 7
    5360:	d1 40       	sbci	r29, 0x01	; 1
    5362:	c5 5f       	subi	r28, 0xF5	; 245
    5364:	de 4f       	sbci	r29, 0xFE	; 254
    5366:	f8 81       	ld	r31, Y
    5368:	cb 50       	subi	r28, 0x0B	; 11
    536a:	d1 40       	sbci	r29, 0x01	; 1
    536c:	f1 50       	subi	r31, 0x01	; 1
    536e:	c5 5f       	subi	r28, 0xF5	; 245
    5370:	de 4f       	sbci	r29, 0xFE	; 254
    5372:	f8 83       	st	Y, r31
    5374:	cb 50       	subi	r28, 0x0B	; 11
    5376:	d1 40       	sbci	r29, 0x01	; 1
    5378:	c5 5f       	subi	r28, 0xF5	; 245
    537a:	de 4f       	sbci	r29, 0xFE	; 254
    537c:	88 81       	ld	r24, Y
    537e:	cb 50       	subi	r28, 0x0B	; 11
    5380:	d1 40       	sbci	r29, 0x01	; 1
    5382:	88 23       	and	r24, r24
    5384:	31 f6       	brne	.-116    	; 0x5312 <key_pad+0xea>
	u8 pattern3[]={0x0F, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x0F};
    5386:	ce 01       	movw	r24, r28
    5388:	8e 50       	subi	r24, 0x0E	; 14
    538a:	9f 4f       	sbci	r25, 0xFF	; 255
    538c:	c4 5f       	subi	r28, 0xF4	; 244
    538e:	de 4f       	sbci	r29, 0xFE	; 254
    5390:	99 83       	std	Y+1, r25	; 0x01
    5392:	88 83       	st	Y, r24
    5394:	cc 50       	subi	r28, 0x0C	; 12
    5396:	d1 40       	sbci	r29, 0x01	; 1
    5398:	a3 e1       	ldi	r26, 0x13	; 19
    539a:	b1 e0       	ldi	r27, 0x01	; 1
    539c:	c2 5f       	subi	r28, 0xF2	; 242
    539e:	de 4f       	sbci	r29, 0xFE	; 254
    53a0:	b9 83       	std	Y+1, r27	; 0x01
    53a2:	a8 83       	st	Y, r26
    53a4:	ce 50       	subi	r28, 0x0E	; 14
    53a6:	d1 40       	sbci	r29, 0x01	; 1
    53a8:	b8 e0       	ldi	r27, 0x08	; 8
    53aa:	c0 5f       	subi	r28, 0xF0	; 240
    53ac:	de 4f       	sbci	r29, 0xFE	; 254
    53ae:	b8 83       	st	Y, r27
    53b0:	c0 51       	subi	r28, 0x10	; 16
    53b2:	d1 40       	sbci	r29, 0x01	; 1
    53b4:	c2 5f       	subi	r28, 0xF2	; 242
    53b6:	de 4f       	sbci	r29, 0xFE	; 254
    53b8:	e8 81       	ld	r30, Y
    53ba:	f9 81       	ldd	r31, Y+1	; 0x01
    53bc:	ce 50       	subi	r28, 0x0E	; 14
    53be:	d1 40       	sbci	r29, 0x01	; 1
    53c0:	00 80       	ld	r0, Z
    53c2:	c2 5f       	subi	r28, 0xF2	; 242
    53c4:	de 4f       	sbci	r29, 0xFE	; 254
    53c6:	88 81       	ld	r24, Y
    53c8:	99 81       	ldd	r25, Y+1	; 0x01
    53ca:	ce 50       	subi	r28, 0x0E	; 14
    53cc:	d1 40       	sbci	r29, 0x01	; 1
    53ce:	01 96       	adiw	r24, 0x01	; 1
    53d0:	c2 5f       	subi	r28, 0xF2	; 242
    53d2:	de 4f       	sbci	r29, 0xFE	; 254
    53d4:	99 83       	std	Y+1, r25	; 0x01
    53d6:	88 83       	st	Y, r24
    53d8:	ce 50       	subi	r28, 0x0E	; 14
    53da:	d1 40       	sbci	r29, 0x01	; 1
    53dc:	c4 5f       	subi	r28, 0xF4	; 244
    53de:	de 4f       	sbci	r29, 0xFE	; 254
    53e0:	a8 81       	ld	r26, Y
    53e2:	b9 81       	ldd	r27, Y+1	; 0x01
    53e4:	cc 50       	subi	r28, 0x0C	; 12
    53e6:	d1 40       	sbci	r29, 0x01	; 1
    53e8:	0c 92       	st	X, r0
    53ea:	c4 5f       	subi	r28, 0xF4	; 244
    53ec:	de 4f       	sbci	r29, 0xFE	; 254
    53ee:	e8 81       	ld	r30, Y
    53f0:	f9 81       	ldd	r31, Y+1	; 0x01
    53f2:	cc 50       	subi	r28, 0x0C	; 12
    53f4:	d1 40       	sbci	r29, 0x01	; 1
    53f6:	31 96       	adiw	r30, 0x01	; 1
    53f8:	c4 5f       	subi	r28, 0xF4	; 244
    53fa:	de 4f       	sbci	r29, 0xFE	; 254
    53fc:	f9 83       	std	Y+1, r31	; 0x01
    53fe:	e8 83       	st	Y, r30
    5400:	cc 50       	subi	r28, 0x0C	; 12
    5402:	d1 40       	sbci	r29, 0x01	; 1
    5404:	c0 5f       	subi	r28, 0xF0	; 240
    5406:	de 4f       	sbci	r29, 0xFE	; 254
    5408:	f8 81       	ld	r31, Y
    540a:	c0 51       	subi	r28, 0x10	; 16
    540c:	d1 40       	sbci	r29, 0x01	; 1
    540e:	f1 50       	subi	r31, 0x01	; 1
    5410:	c0 5f       	subi	r28, 0xF0	; 240
    5412:	de 4f       	sbci	r29, 0xFE	; 254
    5414:	f8 83       	st	Y, r31
    5416:	c0 51       	subi	r28, 0x10	; 16
    5418:	d1 40       	sbci	r29, 0x01	; 1
    541a:	c0 5f       	subi	r28, 0xF0	; 240
    541c:	de 4f       	sbci	r29, 0xFE	; 254
    541e:	88 81       	ld	r24, Y
    5420:	c0 51       	subi	r28, 0x10	; 16
    5422:	d1 40       	sbci	r29, 0x01	; 1
    5424:	88 23       	and	r24, r24
    5426:	31 f6       	brne	.-116    	; 0x53b4 <key_pad+0x18c>
	u8 pattern4[]={0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
    5428:	ce 01       	movw	r24, r28
    542a:	86 50       	subi	r24, 0x06	; 6
    542c:	9f 4f       	sbci	r25, 0xFF	; 255
    542e:	28 e0       	ldi	r18, 0x08	; 8
    5430:	fc 01       	movw	r30, r24
    5432:	df 01       	movw	r26, r30
    5434:	82 2f       	mov	r24, r18
    5436:	1d 92       	st	X+, r1
    5438:	8a 95       	dec	r24
    543a:	e9 f7       	brne	.-6      	; 0x5436 <key_pad+0x20e>
	u8 Number;
	KEY_PAD_VidInit();
    543c:	0e 94 8b 1d 	call	0x3b16	; 0x3b16 <KEY_PAD_VidInit>
	LCD_Vid4Initialization();
    5440:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <LCD_Vid4Initialization>
	//LCD_Write4String("Mohamed",0,5);
	LCD_StoreCustomChr(pattern1,0);
    5444:	ce 01       	movw	r24, r28
    5446:	8e 51       	subi	r24, 0x1E	; 30
    5448:	9f 4f       	sbci	r25, 0xFF	; 255
    544a:	60 e0       	ldi	r22, 0x00	; 0
    544c:	0e 94 77 16 	call	0x2cee	; 0x2cee <LCD_StoreCustomChr>
	LCD_StoreCustomChr(pattern2,1);
    5450:	ce 01       	movw	r24, r28
    5452:	86 51       	subi	r24, 0x16	; 22
    5454:	9f 4f       	sbci	r25, 0xFF	; 255
    5456:	61 e0       	ldi	r22, 0x01	; 1
    5458:	0e 94 77 16 	call	0x2cee	; 0x2cee <LCD_StoreCustomChr>
	LCD_StoreCustomChr(pattern3,2);
    545c:	ce 01       	movw	r24, r28
    545e:	8e 50       	subi	r24, 0x0E	; 14
    5460:	9f 4f       	sbci	r25, 0xFF	; 255
    5462:	62 e0       	ldi	r22, 0x02	; 2
    5464:	0e 94 77 16 	call	0x2cee	; 0x2cee <LCD_StoreCustomChr>
	LCD_StoreCustomChr(pattern4,3);
    5468:	ce 01       	movw	r24, r28
    546a:	86 50       	subi	r24, 0x06	; 6
    546c:	9f 4f       	sbci	r25, 0xFF	; 255
    546e:	63 e0       	ldi	r22, 0x03	; 3
    5470:	0e 94 77 16 	call	0x2cee	; 0x2cee <LCD_StoreCustomChr>
	LCD_Write4String("geam kaled",0,3);
    5474:	8a e8       	ldi	r24, 0x8A	; 138
    5476:	90 e0       	ldi	r25, 0x00	; 0
    5478:	60 e0       	ldi	r22, 0x00	; 0
    547a:	43 e0       	ldi	r20, 0x03	; 3
    547c:	0e 94 ff 14 	call	0x29fe	; 0x29fe <LCD_Write4String>
	LCD_VidWriteData(0);
	LCD_VidPostion(0,14);
	LCD_VidWriteData(1);*/
	while(1)
	{
		Number= KEY_PAD_VidGitPresed();
    5480:	0e 94 9a 1d 	call	0x3b34	; 0x3b34 <KEY_PAD_VidGitPresed>
    5484:	fe 01       	movw	r30, r28
    5486:	ef 51       	subi	r30, 0x1F	; 31
    5488:	ff 4f       	sbci	r31, 0xFF	; 255
    548a:	80 83       	st	Z, r24
		if (Number==1)
    548c:	fe 01       	movw	r30, r28
    548e:	ef 51       	subi	r30, 0x1F	; 31
    5490:	ff 4f       	sbci	r31, 0xFF	; 255
    5492:	80 81       	ld	r24, Z
    5494:	81 30       	cpi	r24, 0x01	; 1
    5496:	09 f0       	breq	.+2      	; 0x549a <key_pad+0x272>
    5498:	d6 c0       	rjmp	.+428    	; 0x5646 <key_pad+0x41e>
		{
			LCD_VidWrite4Cmd(Clear_Display);
    549a:	81 e0       	ldi	r24, 0x01	; 1
    549c:	0e 94 30 10 	call	0x2060	; 0x2060 <LCD_VidWrite4Cmd>
			LCD_Disply(0,0,0);
    54a0:	80 e0       	ldi	r24, 0x00	; 0
    54a2:	60 e0       	ldi	r22, 0x00	; 0
    54a4:	40 e0       	ldi	r20, 0x00	; 0
    54a6:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <LCD_Disply>
			LCD_Disply(1,0,3);
    54aa:	81 e0       	ldi	r24, 0x01	; 1
    54ac:	60 e0       	ldi	r22, 0x00	; 0
    54ae:	43 e0       	ldi	r20, 0x03	; 3
    54b0:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <LCD_Disply>
			LCD_Disply(2,0,15);
    54b4:	82 e0       	ldi	r24, 0x02	; 2
    54b6:	60 e0       	ldi	r22, 0x00	; 0
    54b8:	4f e0       	ldi	r20, 0x0F	; 15
    54ba:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <LCD_Disply>
			LCD_Disply(0,1,0);
    54be:	80 e0       	ldi	r24, 0x00	; 0
    54c0:	61 e0       	ldi	r22, 0x01	; 1
    54c2:	40 e0       	ldi	r20, 0x00	; 0
    54c4:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <LCD_Disply>
			LCD_Disply(1,1,3);
    54c8:	81 e0       	ldi	r24, 0x01	; 1
    54ca:	61 e0       	ldi	r22, 0x01	; 1
    54cc:	43 e0       	ldi	r20, 0x03	; 3
    54ce:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <LCD_Disply>
			LCD_Disply(2,1,15);
    54d2:	82 e0       	ldi	r24, 0x02	; 2
    54d4:	61 e0       	ldi	r22, 0x01	; 1
    54d6:	4f e0       	ldi	r20, 0x0F	; 15
    54d8:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <LCD_Disply>
    54dc:	fe 01       	movw	r30, r28
    54de:	e3 52       	subi	r30, 0x23	; 35
    54e0:	ff 4f       	sbci	r31, 0xFF	; 255
    54e2:	80 e0       	ldi	r24, 0x00	; 0
    54e4:	90 e0       	ldi	r25, 0x00	; 0
    54e6:	aa e7       	ldi	r26, 0x7A	; 122
    54e8:	b4 e4       	ldi	r27, 0x44	; 68
    54ea:	80 83       	st	Z, r24
    54ec:	91 83       	std	Z+1, r25	; 0x01
    54ee:	a2 83       	std	Z+2, r26	; 0x02
    54f0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    54f2:	8e 01       	movw	r16, r28
    54f4:	07 52       	subi	r16, 0x27	; 39
    54f6:	1f 4f       	sbci	r17, 0xFF	; 255
    54f8:	fe 01       	movw	r30, r28
    54fa:	e3 52       	subi	r30, 0x23	; 35
    54fc:	ff 4f       	sbci	r31, 0xFF	; 255
    54fe:	60 81       	ld	r22, Z
    5500:	71 81       	ldd	r23, Z+1	; 0x01
    5502:	82 81       	ldd	r24, Z+2	; 0x02
    5504:	93 81       	ldd	r25, Z+3	; 0x03
    5506:	20 e0       	ldi	r18, 0x00	; 0
    5508:	30 e0       	ldi	r19, 0x00	; 0
    550a:	4a ef       	ldi	r20, 0xFA	; 250
    550c:	54 e4       	ldi	r21, 0x44	; 68
    550e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5512:	dc 01       	movw	r26, r24
    5514:	cb 01       	movw	r24, r22
    5516:	f8 01       	movw	r30, r16
    5518:	80 83       	st	Z, r24
    551a:	91 83       	std	Z+1, r25	; 0x01
    551c:	a2 83       	std	Z+2, r26	; 0x02
    551e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5520:	fe 01       	movw	r30, r28
    5522:	e7 52       	subi	r30, 0x27	; 39
    5524:	ff 4f       	sbci	r31, 0xFF	; 255
    5526:	60 81       	ld	r22, Z
    5528:	71 81       	ldd	r23, Z+1	; 0x01
    552a:	82 81       	ldd	r24, Z+2	; 0x02
    552c:	93 81       	ldd	r25, Z+3	; 0x03
    552e:	20 e0       	ldi	r18, 0x00	; 0
    5530:	30 e0       	ldi	r19, 0x00	; 0
    5532:	40 e8       	ldi	r20, 0x80	; 128
    5534:	5f e3       	ldi	r21, 0x3F	; 63
    5536:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    553a:	88 23       	and	r24, r24
    553c:	44 f4       	brge	.+16     	; 0x554e <key_pad+0x326>
		__ticks = 1;
    553e:	fe 01       	movw	r30, r28
    5540:	e9 52       	subi	r30, 0x29	; 41
    5542:	ff 4f       	sbci	r31, 0xFF	; 255
    5544:	81 e0       	ldi	r24, 0x01	; 1
    5546:	90 e0       	ldi	r25, 0x00	; 0
    5548:	91 83       	std	Z+1, r25	; 0x01
    554a:	80 83       	st	Z, r24
    554c:	64 c0       	rjmp	.+200    	; 0x5616 <key_pad+0x3ee>
	else if (__tmp > 65535)
    554e:	fe 01       	movw	r30, r28
    5550:	e7 52       	subi	r30, 0x27	; 39
    5552:	ff 4f       	sbci	r31, 0xFF	; 255
    5554:	60 81       	ld	r22, Z
    5556:	71 81       	ldd	r23, Z+1	; 0x01
    5558:	82 81       	ldd	r24, Z+2	; 0x02
    555a:	93 81       	ldd	r25, Z+3	; 0x03
    555c:	20 e0       	ldi	r18, 0x00	; 0
    555e:	3f ef       	ldi	r19, 0xFF	; 255
    5560:	4f e7       	ldi	r20, 0x7F	; 127
    5562:	57 e4       	ldi	r21, 0x47	; 71
    5564:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5568:	18 16       	cp	r1, r24
    556a:	0c f0       	brlt	.+2      	; 0x556e <key_pad+0x346>
    556c:	43 c0       	rjmp	.+134    	; 0x55f4 <key_pad+0x3cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    556e:	fe 01       	movw	r30, r28
    5570:	e3 52       	subi	r30, 0x23	; 35
    5572:	ff 4f       	sbci	r31, 0xFF	; 255
    5574:	60 81       	ld	r22, Z
    5576:	71 81       	ldd	r23, Z+1	; 0x01
    5578:	82 81       	ldd	r24, Z+2	; 0x02
    557a:	93 81       	ldd	r25, Z+3	; 0x03
    557c:	20 e0       	ldi	r18, 0x00	; 0
    557e:	30 e0       	ldi	r19, 0x00	; 0
    5580:	40 e2       	ldi	r20, 0x20	; 32
    5582:	51 e4       	ldi	r21, 0x41	; 65
    5584:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5588:	dc 01       	movw	r26, r24
    558a:	cb 01       	movw	r24, r22
    558c:	8e 01       	movw	r16, r28
    558e:	09 52       	subi	r16, 0x29	; 41
    5590:	1f 4f       	sbci	r17, 0xFF	; 255
    5592:	bc 01       	movw	r22, r24
    5594:	cd 01       	movw	r24, r26
    5596:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    559a:	dc 01       	movw	r26, r24
    559c:	cb 01       	movw	r24, r22
    559e:	f8 01       	movw	r30, r16
    55a0:	91 83       	std	Z+1, r25	; 0x01
    55a2:	80 83       	st	Z, r24
    55a4:	1f c0       	rjmp	.+62     	; 0x55e4 <key_pad+0x3bc>
    55a6:	fe 01       	movw	r30, r28
    55a8:	eb 52       	subi	r30, 0x2B	; 43
    55aa:	ff 4f       	sbci	r31, 0xFF	; 255
    55ac:	88 ec       	ldi	r24, 0xC8	; 200
    55ae:	90 e0       	ldi	r25, 0x00	; 0
    55b0:	91 83       	std	Z+1, r25	; 0x01
    55b2:	80 83       	st	Z, r24
    55b4:	fe 01       	movw	r30, r28
    55b6:	eb 52       	subi	r30, 0x2B	; 43
    55b8:	ff 4f       	sbci	r31, 0xFF	; 255
    55ba:	80 81       	ld	r24, Z
    55bc:	91 81       	ldd	r25, Z+1	; 0x01
    55be:	01 97       	sbiw	r24, 0x01	; 1
    55c0:	f1 f7       	brne	.-4      	; 0x55be <key_pad+0x396>
    55c2:	fe 01       	movw	r30, r28
    55c4:	eb 52       	subi	r30, 0x2B	; 43
    55c6:	ff 4f       	sbci	r31, 0xFF	; 255
    55c8:	91 83       	std	Z+1, r25	; 0x01
    55ca:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    55cc:	de 01       	movw	r26, r28
    55ce:	a9 52       	subi	r26, 0x29	; 41
    55d0:	bf 4f       	sbci	r27, 0xFF	; 255
    55d2:	fe 01       	movw	r30, r28
    55d4:	e9 52       	subi	r30, 0x29	; 41
    55d6:	ff 4f       	sbci	r31, 0xFF	; 255
    55d8:	80 81       	ld	r24, Z
    55da:	91 81       	ldd	r25, Z+1	; 0x01
    55dc:	01 97       	sbiw	r24, 0x01	; 1
    55de:	11 96       	adiw	r26, 0x01	; 1
    55e0:	9c 93       	st	X, r25
    55e2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    55e4:	fe 01       	movw	r30, r28
    55e6:	e9 52       	subi	r30, 0x29	; 41
    55e8:	ff 4f       	sbci	r31, 0xFF	; 255
    55ea:	80 81       	ld	r24, Z
    55ec:	91 81       	ldd	r25, Z+1	; 0x01
    55ee:	00 97       	sbiw	r24, 0x00	; 0
    55f0:	d1 f6       	brne	.-76     	; 0x55a6 <key_pad+0x37e>
    55f2:	46 cf       	rjmp	.-372    	; 0x5480 <key_pad+0x258>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    55f4:	8e 01       	movw	r16, r28
    55f6:	09 52       	subi	r16, 0x29	; 41
    55f8:	1f 4f       	sbci	r17, 0xFF	; 255
    55fa:	fe 01       	movw	r30, r28
    55fc:	e7 52       	subi	r30, 0x27	; 39
    55fe:	ff 4f       	sbci	r31, 0xFF	; 255
    5600:	60 81       	ld	r22, Z
    5602:	71 81       	ldd	r23, Z+1	; 0x01
    5604:	82 81       	ldd	r24, Z+2	; 0x02
    5606:	93 81       	ldd	r25, Z+3	; 0x03
    5608:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    560c:	dc 01       	movw	r26, r24
    560e:	cb 01       	movw	r24, r22
    5610:	f8 01       	movw	r30, r16
    5612:	91 83       	std	Z+1, r25	; 0x01
    5614:	80 83       	st	Z, r24
    5616:	de 01       	movw	r26, r28
    5618:	ad 52       	subi	r26, 0x2D	; 45
    561a:	bf 4f       	sbci	r27, 0xFF	; 255
    561c:	fe 01       	movw	r30, r28
    561e:	e9 52       	subi	r30, 0x29	; 41
    5620:	ff 4f       	sbci	r31, 0xFF	; 255
    5622:	80 81       	ld	r24, Z
    5624:	91 81       	ldd	r25, Z+1	; 0x01
    5626:	11 96       	adiw	r26, 0x01	; 1
    5628:	9c 93       	st	X, r25
    562a:	8e 93       	st	-X, r24
    562c:	fe 01       	movw	r30, r28
    562e:	ed 52       	subi	r30, 0x2D	; 45
    5630:	ff 4f       	sbci	r31, 0xFF	; 255
    5632:	80 81       	ld	r24, Z
    5634:	91 81       	ldd	r25, Z+1	; 0x01
    5636:	01 97       	sbiw	r24, 0x01	; 1
    5638:	f1 f7       	brne	.-4      	; 0x5636 <key_pad+0x40e>
    563a:	fe 01       	movw	r30, r28
    563c:	ed 52       	subi	r30, 0x2D	; 45
    563e:	ff 4f       	sbci	r31, 0xFF	; 255
    5640:	91 83       	std	Z+1, r25	; 0x01
    5642:	80 83       	st	Z, r24
    5644:	1d cf       	rjmp	.-454    	; 0x5480 <key_pad+0x258>
			_delay_ms(1000);
		}
		else if (Number==2)
    5646:	fe 01       	movw	r30, r28
    5648:	ef 51       	subi	r30, 0x1F	; 31
    564a:	ff 4f       	sbci	r31, 0xFF	; 255
    564c:	80 81       	ld	r24, Z
    564e:	82 30       	cpi	r24, 0x02	; 2
    5650:	09 f0       	breq	.+2      	; 0x5654 <key_pad+0x42c>
    5652:	16 cf       	rjmp	.-468    	; 0x5480 <key_pad+0x258>
		{
			LCD_VidWrite4Cmd(Clear_Display);
    5654:	81 e0       	ldi	r24, 0x01	; 1
    5656:	0e 94 30 10 	call	0x2060	; 0x2060 <LCD_VidWrite4Cmd>
			LCD_Disply(0,0,0);
    565a:	80 e0       	ldi	r24, 0x00	; 0
    565c:	60 e0       	ldi	r22, 0x00	; 0
    565e:	40 e0       	ldi	r20, 0x00	; 0
    5660:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <LCD_Disply>
			LCD_Disply(1,0,3);
    5664:	81 e0       	ldi	r24, 0x01	; 1
    5666:	60 e0       	ldi	r22, 0x00	; 0
    5668:	43 e0       	ldi	r20, 0x03	; 3
    566a:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <LCD_Disply>
			LCD_Disply(2,0,15);
    566e:	82 e0       	ldi	r24, 0x02	; 2
    5670:	60 e0       	ldi	r22, 0x00	; 0
    5672:	4f e0       	ldi	r20, 0x0F	; 15
    5674:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <LCD_Disply>
			LCD_Disply(0,1,0);
    5678:	80 e0       	ldi	r24, 0x00	; 0
    567a:	61 e0       	ldi	r22, 0x01	; 1
    567c:	40 e0       	ldi	r20, 0x00	; 0
    567e:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <LCD_Disply>
			LCD_Disply(1,1,3);
    5682:	81 e0       	ldi	r24, 0x01	; 1
    5684:	61 e0       	ldi	r22, 0x01	; 1
    5686:	43 e0       	ldi	r20, 0x03	; 3
    5688:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <LCD_Disply>
			LCD_Disply(2,1,15);
    568c:	82 e0       	ldi	r24, 0x02	; 2
    568e:	61 e0       	ldi	r22, 0x01	; 1
    5690:	4f e0       	ldi	r20, 0x0F	; 15
    5692:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <LCD_Disply>
    5696:	fe 01       	movw	r30, r28
    5698:	e1 53       	subi	r30, 0x31	; 49
    569a:	ff 4f       	sbci	r31, 0xFF	; 255
    569c:	80 e0       	ldi	r24, 0x00	; 0
    569e:	90 e0       	ldi	r25, 0x00	; 0
    56a0:	aa ef       	ldi	r26, 0xFA	; 250
    56a2:	b3 e4       	ldi	r27, 0x43	; 67
    56a4:	80 83       	st	Z, r24
    56a6:	91 83       	std	Z+1, r25	; 0x01
    56a8:	a2 83       	std	Z+2, r26	; 0x02
    56aa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    56ac:	8e 01       	movw	r16, r28
    56ae:	05 53       	subi	r16, 0x35	; 53
    56b0:	1f 4f       	sbci	r17, 0xFF	; 255
    56b2:	fe 01       	movw	r30, r28
    56b4:	e1 53       	subi	r30, 0x31	; 49
    56b6:	ff 4f       	sbci	r31, 0xFF	; 255
    56b8:	60 81       	ld	r22, Z
    56ba:	71 81       	ldd	r23, Z+1	; 0x01
    56bc:	82 81       	ldd	r24, Z+2	; 0x02
    56be:	93 81       	ldd	r25, Z+3	; 0x03
    56c0:	20 e0       	ldi	r18, 0x00	; 0
    56c2:	30 e0       	ldi	r19, 0x00	; 0
    56c4:	4a ef       	ldi	r20, 0xFA	; 250
    56c6:	54 e4       	ldi	r21, 0x44	; 68
    56c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    56cc:	dc 01       	movw	r26, r24
    56ce:	cb 01       	movw	r24, r22
    56d0:	f8 01       	movw	r30, r16
    56d2:	80 83       	st	Z, r24
    56d4:	91 83       	std	Z+1, r25	; 0x01
    56d6:	a2 83       	std	Z+2, r26	; 0x02
    56d8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    56da:	fe 01       	movw	r30, r28
    56dc:	e5 53       	subi	r30, 0x35	; 53
    56de:	ff 4f       	sbci	r31, 0xFF	; 255
    56e0:	60 81       	ld	r22, Z
    56e2:	71 81       	ldd	r23, Z+1	; 0x01
    56e4:	82 81       	ldd	r24, Z+2	; 0x02
    56e6:	93 81       	ldd	r25, Z+3	; 0x03
    56e8:	20 e0       	ldi	r18, 0x00	; 0
    56ea:	30 e0       	ldi	r19, 0x00	; 0
    56ec:	40 e8       	ldi	r20, 0x80	; 128
    56ee:	5f e3       	ldi	r21, 0x3F	; 63
    56f0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    56f4:	88 23       	and	r24, r24
    56f6:	44 f4       	brge	.+16     	; 0x5708 <key_pad+0x4e0>
		__ticks = 1;
    56f8:	fe 01       	movw	r30, r28
    56fa:	e7 53       	subi	r30, 0x37	; 55
    56fc:	ff 4f       	sbci	r31, 0xFF	; 255
    56fe:	81 e0       	ldi	r24, 0x01	; 1
    5700:	90 e0       	ldi	r25, 0x00	; 0
    5702:	91 83       	std	Z+1, r25	; 0x01
    5704:	80 83       	st	Z, r24
    5706:	64 c0       	rjmp	.+200    	; 0x57d0 <key_pad+0x5a8>
	else if (__tmp > 65535)
    5708:	fe 01       	movw	r30, r28
    570a:	e5 53       	subi	r30, 0x35	; 53
    570c:	ff 4f       	sbci	r31, 0xFF	; 255
    570e:	60 81       	ld	r22, Z
    5710:	71 81       	ldd	r23, Z+1	; 0x01
    5712:	82 81       	ldd	r24, Z+2	; 0x02
    5714:	93 81       	ldd	r25, Z+3	; 0x03
    5716:	20 e0       	ldi	r18, 0x00	; 0
    5718:	3f ef       	ldi	r19, 0xFF	; 255
    571a:	4f e7       	ldi	r20, 0x7F	; 127
    571c:	57 e4       	ldi	r21, 0x47	; 71
    571e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5722:	18 16       	cp	r1, r24
    5724:	0c f0       	brlt	.+2      	; 0x5728 <key_pad+0x500>
    5726:	43 c0       	rjmp	.+134    	; 0x57ae <key_pad+0x586>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5728:	fe 01       	movw	r30, r28
    572a:	e1 53       	subi	r30, 0x31	; 49
    572c:	ff 4f       	sbci	r31, 0xFF	; 255
    572e:	60 81       	ld	r22, Z
    5730:	71 81       	ldd	r23, Z+1	; 0x01
    5732:	82 81       	ldd	r24, Z+2	; 0x02
    5734:	93 81       	ldd	r25, Z+3	; 0x03
    5736:	20 e0       	ldi	r18, 0x00	; 0
    5738:	30 e0       	ldi	r19, 0x00	; 0
    573a:	40 e2       	ldi	r20, 0x20	; 32
    573c:	51 e4       	ldi	r21, 0x41	; 65
    573e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5742:	dc 01       	movw	r26, r24
    5744:	cb 01       	movw	r24, r22
    5746:	8e 01       	movw	r16, r28
    5748:	07 53       	subi	r16, 0x37	; 55
    574a:	1f 4f       	sbci	r17, 0xFF	; 255
    574c:	bc 01       	movw	r22, r24
    574e:	cd 01       	movw	r24, r26
    5750:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5754:	dc 01       	movw	r26, r24
    5756:	cb 01       	movw	r24, r22
    5758:	f8 01       	movw	r30, r16
    575a:	91 83       	std	Z+1, r25	; 0x01
    575c:	80 83       	st	Z, r24
    575e:	1f c0       	rjmp	.+62     	; 0x579e <key_pad+0x576>
    5760:	fe 01       	movw	r30, r28
    5762:	e9 53       	subi	r30, 0x39	; 57
    5764:	ff 4f       	sbci	r31, 0xFF	; 255
    5766:	88 ec       	ldi	r24, 0xC8	; 200
    5768:	90 e0       	ldi	r25, 0x00	; 0
    576a:	91 83       	std	Z+1, r25	; 0x01
    576c:	80 83       	st	Z, r24
    576e:	fe 01       	movw	r30, r28
    5770:	e9 53       	subi	r30, 0x39	; 57
    5772:	ff 4f       	sbci	r31, 0xFF	; 255
    5774:	80 81       	ld	r24, Z
    5776:	91 81       	ldd	r25, Z+1	; 0x01
    5778:	01 97       	sbiw	r24, 0x01	; 1
    577a:	f1 f7       	brne	.-4      	; 0x5778 <key_pad+0x550>
    577c:	fe 01       	movw	r30, r28
    577e:	e9 53       	subi	r30, 0x39	; 57
    5780:	ff 4f       	sbci	r31, 0xFF	; 255
    5782:	91 83       	std	Z+1, r25	; 0x01
    5784:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5786:	de 01       	movw	r26, r28
    5788:	a7 53       	subi	r26, 0x37	; 55
    578a:	bf 4f       	sbci	r27, 0xFF	; 255
    578c:	fe 01       	movw	r30, r28
    578e:	e7 53       	subi	r30, 0x37	; 55
    5790:	ff 4f       	sbci	r31, 0xFF	; 255
    5792:	80 81       	ld	r24, Z
    5794:	91 81       	ldd	r25, Z+1	; 0x01
    5796:	01 97       	sbiw	r24, 0x01	; 1
    5798:	11 96       	adiw	r26, 0x01	; 1
    579a:	9c 93       	st	X, r25
    579c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    579e:	fe 01       	movw	r30, r28
    57a0:	e7 53       	subi	r30, 0x37	; 55
    57a2:	ff 4f       	sbci	r31, 0xFF	; 255
    57a4:	80 81       	ld	r24, Z
    57a6:	91 81       	ldd	r25, Z+1	; 0x01
    57a8:	00 97       	sbiw	r24, 0x00	; 0
    57aa:	d1 f6       	brne	.-76     	; 0x5760 <key_pad+0x538>
    57ac:	27 c0       	rjmp	.+78     	; 0x57fc <key_pad+0x5d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    57ae:	8e 01       	movw	r16, r28
    57b0:	07 53       	subi	r16, 0x37	; 55
    57b2:	1f 4f       	sbci	r17, 0xFF	; 255
    57b4:	fe 01       	movw	r30, r28
    57b6:	e5 53       	subi	r30, 0x35	; 53
    57b8:	ff 4f       	sbci	r31, 0xFF	; 255
    57ba:	60 81       	ld	r22, Z
    57bc:	71 81       	ldd	r23, Z+1	; 0x01
    57be:	82 81       	ldd	r24, Z+2	; 0x02
    57c0:	93 81       	ldd	r25, Z+3	; 0x03
    57c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    57c6:	dc 01       	movw	r26, r24
    57c8:	cb 01       	movw	r24, r22
    57ca:	f8 01       	movw	r30, r16
    57cc:	91 83       	std	Z+1, r25	; 0x01
    57ce:	80 83       	st	Z, r24
    57d0:	de 01       	movw	r26, r28
    57d2:	ab 53       	subi	r26, 0x3B	; 59
    57d4:	bf 4f       	sbci	r27, 0xFF	; 255
    57d6:	fe 01       	movw	r30, r28
    57d8:	e7 53       	subi	r30, 0x37	; 55
    57da:	ff 4f       	sbci	r31, 0xFF	; 255
    57dc:	80 81       	ld	r24, Z
    57de:	91 81       	ldd	r25, Z+1	; 0x01
    57e0:	8d 93       	st	X+, r24
    57e2:	9c 93       	st	X, r25
    57e4:	fe 01       	movw	r30, r28
    57e6:	eb 53       	subi	r30, 0x3B	; 59
    57e8:	ff 4f       	sbci	r31, 0xFF	; 255
    57ea:	80 81       	ld	r24, Z
    57ec:	91 81       	ldd	r25, Z+1	; 0x01
    57ee:	01 97       	sbiw	r24, 0x01	; 1
    57f0:	f1 f7       	brne	.-4      	; 0x57ee <key_pad+0x5c6>
    57f2:	fe 01       	movw	r30, r28
    57f4:	eb 53       	subi	r30, 0x3B	; 59
    57f6:	ff 4f       	sbci	r31, 0xFF	; 255
    57f8:	91 83       	std	Z+1, r25	; 0x01
    57fa:	80 83       	st	Z, r24
			_delay_ms(500);
			LCD_Disply(3,0,0);
    57fc:	83 e0       	ldi	r24, 0x03	; 3
    57fe:	60 e0       	ldi	r22, 0x00	; 0
    5800:	40 e0       	ldi	r20, 0x00	; 0
    5802:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <LCD_Disply>
			LCD_Disply(0,0,1);
    5806:	80 e0       	ldi	r24, 0x00	; 0
    5808:	60 e0       	ldi	r22, 0x00	; 0
    580a:	41 e0       	ldi	r20, 0x01	; 1
    580c:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <LCD_Disply>
			LCD_Disply(1,0,3);
    5810:	81 e0       	ldi	r24, 0x01	; 1
    5812:	60 e0       	ldi	r22, 0x00	; 0
    5814:	43 e0       	ldi	r20, 0x03	; 3
    5816:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <LCD_Disply>
			LCD_Disply(2,0,15);
    581a:	82 e0       	ldi	r24, 0x02	; 2
    581c:	60 e0       	ldi	r22, 0x00	; 0
    581e:	4f e0       	ldi	r20, 0x0F	; 15
    5820:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <LCD_Disply>
			LCD_Disply(3,1,0);
    5824:	83 e0       	ldi	r24, 0x03	; 3
    5826:	61 e0       	ldi	r22, 0x01	; 1
    5828:	40 e0       	ldi	r20, 0x00	; 0
    582a:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <LCD_Disply>
			LCD_Disply(0,1,1);
    582e:	80 e0       	ldi	r24, 0x00	; 0
    5830:	61 e0       	ldi	r22, 0x01	; 1
    5832:	41 e0       	ldi	r20, 0x01	; 1
    5834:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <LCD_Disply>
			LCD_Disply(1,1,3);
    5838:	81 e0       	ldi	r24, 0x01	; 1
    583a:	61 e0       	ldi	r22, 0x01	; 1
    583c:	43 e0       	ldi	r20, 0x03	; 3
    583e:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <LCD_Disply>
    5842:	fe 01       	movw	r30, r28
    5844:	ef 53       	subi	r30, 0x3F	; 63
    5846:	ff 4f       	sbci	r31, 0xFF	; 255
    5848:	80 e0       	ldi	r24, 0x00	; 0
    584a:	90 e0       	ldi	r25, 0x00	; 0
    584c:	aa ef       	ldi	r26, 0xFA	; 250
    584e:	b3 e4       	ldi	r27, 0x43	; 67
    5850:	80 83       	st	Z, r24
    5852:	91 83       	std	Z+1, r25	; 0x01
    5854:	a2 83       	std	Z+2, r26	; 0x02
    5856:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5858:	8e 01       	movw	r16, r28
    585a:	03 54       	subi	r16, 0x43	; 67
    585c:	1f 4f       	sbci	r17, 0xFF	; 255
    585e:	fe 01       	movw	r30, r28
    5860:	ef 53       	subi	r30, 0x3F	; 63
    5862:	ff 4f       	sbci	r31, 0xFF	; 255
    5864:	60 81       	ld	r22, Z
    5866:	71 81       	ldd	r23, Z+1	; 0x01
    5868:	82 81       	ldd	r24, Z+2	; 0x02
    586a:	93 81       	ldd	r25, Z+3	; 0x03
    586c:	20 e0       	ldi	r18, 0x00	; 0
    586e:	30 e0       	ldi	r19, 0x00	; 0
    5870:	4a ef       	ldi	r20, 0xFA	; 250
    5872:	54 e4       	ldi	r21, 0x44	; 68
    5874:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5878:	dc 01       	movw	r26, r24
    587a:	cb 01       	movw	r24, r22
    587c:	f8 01       	movw	r30, r16
    587e:	80 83       	st	Z, r24
    5880:	91 83       	std	Z+1, r25	; 0x01
    5882:	a2 83       	std	Z+2, r26	; 0x02
    5884:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5886:	fe 01       	movw	r30, r28
    5888:	e3 54       	subi	r30, 0x43	; 67
    588a:	ff 4f       	sbci	r31, 0xFF	; 255
    588c:	60 81       	ld	r22, Z
    588e:	71 81       	ldd	r23, Z+1	; 0x01
    5890:	82 81       	ldd	r24, Z+2	; 0x02
    5892:	93 81       	ldd	r25, Z+3	; 0x03
    5894:	20 e0       	ldi	r18, 0x00	; 0
    5896:	30 e0       	ldi	r19, 0x00	; 0
    5898:	40 e8       	ldi	r20, 0x80	; 128
    589a:	5f e3       	ldi	r21, 0x3F	; 63
    589c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    58a0:	88 23       	and	r24, r24
    58a2:	44 f4       	brge	.+16     	; 0x58b4 <key_pad+0x68c>
		__ticks = 1;
    58a4:	fe 01       	movw	r30, r28
    58a6:	e5 54       	subi	r30, 0x45	; 69
    58a8:	ff 4f       	sbci	r31, 0xFF	; 255
    58aa:	81 e0       	ldi	r24, 0x01	; 1
    58ac:	90 e0       	ldi	r25, 0x00	; 0
    58ae:	91 83       	std	Z+1, r25	; 0x01
    58b0:	80 83       	st	Z, r24
    58b2:	64 c0       	rjmp	.+200    	; 0x597c <key_pad+0x754>
	else if (__tmp > 65535)
    58b4:	fe 01       	movw	r30, r28
    58b6:	e3 54       	subi	r30, 0x43	; 67
    58b8:	ff 4f       	sbci	r31, 0xFF	; 255
    58ba:	60 81       	ld	r22, Z
    58bc:	71 81       	ldd	r23, Z+1	; 0x01
    58be:	82 81       	ldd	r24, Z+2	; 0x02
    58c0:	93 81       	ldd	r25, Z+3	; 0x03
    58c2:	20 e0       	ldi	r18, 0x00	; 0
    58c4:	3f ef       	ldi	r19, 0xFF	; 255
    58c6:	4f e7       	ldi	r20, 0x7F	; 127
    58c8:	57 e4       	ldi	r21, 0x47	; 71
    58ca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    58ce:	18 16       	cp	r1, r24
    58d0:	0c f0       	brlt	.+2      	; 0x58d4 <key_pad+0x6ac>
    58d2:	43 c0       	rjmp	.+134    	; 0x595a <key_pad+0x732>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    58d4:	fe 01       	movw	r30, r28
    58d6:	ef 53       	subi	r30, 0x3F	; 63
    58d8:	ff 4f       	sbci	r31, 0xFF	; 255
    58da:	60 81       	ld	r22, Z
    58dc:	71 81       	ldd	r23, Z+1	; 0x01
    58de:	82 81       	ldd	r24, Z+2	; 0x02
    58e0:	93 81       	ldd	r25, Z+3	; 0x03
    58e2:	20 e0       	ldi	r18, 0x00	; 0
    58e4:	30 e0       	ldi	r19, 0x00	; 0
    58e6:	40 e2       	ldi	r20, 0x20	; 32
    58e8:	51 e4       	ldi	r21, 0x41	; 65
    58ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    58ee:	dc 01       	movw	r26, r24
    58f0:	cb 01       	movw	r24, r22
    58f2:	8e 01       	movw	r16, r28
    58f4:	05 54       	subi	r16, 0x45	; 69
    58f6:	1f 4f       	sbci	r17, 0xFF	; 255
    58f8:	bc 01       	movw	r22, r24
    58fa:	cd 01       	movw	r24, r26
    58fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5900:	dc 01       	movw	r26, r24
    5902:	cb 01       	movw	r24, r22
    5904:	f8 01       	movw	r30, r16
    5906:	91 83       	std	Z+1, r25	; 0x01
    5908:	80 83       	st	Z, r24
    590a:	1f c0       	rjmp	.+62     	; 0x594a <key_pad+0x722>
    590c:	fe 01       	movw	r30, r28
    590e:	e7 54       	subi	r30, 0x47	; 71
    5910:	ff 4f       	sbci	r31, 0xFF	; 255
    5912:	88 ec       	ldi	r24, 0xC8	; 200
    5914:	90 e0       	ldi	r25, 0x00	; 0
    5916:	91 83       	std	Z+1, r25	; 0x01
    5918:	80 83       	st	Z, r24
    591a:	fe 01       	movw	r30, r28
    591c:	e7 54       	subi	r30, 0x47	; 71
    591e:	ff 4f       	sbci	r31, 0xFF	; 255
    5920:	80 81       	ld	r24, Z
    5922:	91 81       	ldd	r25, Z+1	; 0x01
    5924:	01 97       	sbiw	r24, 0x01	; 1
    5926:	f1 f7       	brne	.-4      	; 0x5924 <key_pad+0x6fc>
    5928:	fe 01       	movw	r30, r28
    592a:	e7 54       	subi	r30, 0x47	; 71
    592c:	ff 4f       	sbci	r31, 0xFF	; 255
    592e:	91 83       	std	Z+1, r25	; 0x01
    5930:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5932:	de 01       	movw	r26, r28
    5934:	a5 54       	subi	r26, 0x45	; 69
    5936:	bf 4f       	sbci	r27, 0xFF	; 255
    5938:	fe 01       	movw	r30, r28
    593a:	e5 54       	subi	r30, 0x45	; 69
    593c:	ff 4f       	sbci	r31, 0xFF	; 255
    593e:	80 81       	ld	r24, Z
    5940:	91 81       	ldd	r25, Z+1	; 0x01
    5942:	01 97       	sbiw	r24, 0x01	; 1
    5944:	11 96       	adiw	r26, 0x01	; 1
    5946:	9c 93       	st	X, r25
    5948:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    594a:	fe 01       	movw	r30, r28
    594c:	e5 54       	subi	r30, 0x45	; 69
    594e:	ff 4f       	sbci	r31, 0xFF	; 255
    5950:	80 81       	ld	r24, Z
    5952:	91 81       	ldd	r25, Z+1	; 0x01
    5954:	00 97       	sbiw	r24, 0x00	; 0
    5956:	d1 f6       	brne	.-76     	; 0x590c <key_pad+0x6e4>
    5958:	27 c0       	rjmp	.+78     	; 0x59a8 <key_pad+0x780>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    595a:	8e 01       	movw	r16, r28
    595c:	05 54       	subi	r16, 0x45	; 69
    595e:	1f 4f       	sbci	r17, 0xFF	; 255
    5960:	fe 01       	movw	r30, r28
    5962:	e3 54       	subi	r30, 0x43	; 67
    5964:	ff 4f       	sbci	r31, 0xFF	; 255
    5966:	60 81       	ld	r22, Z
    5968:	71 81       	ldd	r23, Z+1	; 0x01
    596a:	82 81       	ldd	r24, Z+2	; 0x02
    596c:	93 81       	ldd	r25, Z+3	; 0x03
    596e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5972:	dc 01       	movw	r26, r24
    5974:	cb 01       	movw	r24, r22
    5976:	f8 01       	movw	r30, r16
    5978:	91 83       	std	Z+1, r25	; 0x01
    597a:	80 83       	st	Z, r24
    597c:	de 01       	movw	r26, r28
    597e:	a9 54       	subi	r26, 0x49	; 73
    5980:	bf 4f       	sbci	r27, 0xFF	; 255
    5982:	fe 01       	movw	r30, r28
    5984:	e5 54       	subi	r30, 0x45	; 69
    5986:	ff 4f       	sbci	r31, 0xFF	; 255
    5988:	80 81       	ld	r24, Z
    598a:	91 81       	ldd	r25, Z+1	; 0x01
    598c:	8d 93       	st	X+, r24
    598e:	9c 93       	st	X, r25
    5990:	fe 01       	movw	r30, r28
    5992:	e9 54       	subi	r30, 0x49	; 73
    5994:	ff 4f       	sbci	r31, 0xFF	; 255
    5996:	80 81       	ld	r24, Z
    5998:	91 81       	ldd	r25, Z+1	; 0x01
    599a:	01 97       	sbiw	r24, 0x01	; 1
    599c:	f1 f7       	brne	.-4      	; 0x599a <key_pad+0x772>
    599e:	fe 01       	movw	r30, r28
    59a0:	e9 54       	subi	r30, 0x49	; 73
    59a2:	ff 4f       	sbci	r31, 0xFF	; 255
    59a4:	91 83       	std	Z+1, r25	; 0x01
    59a6:	80 83       	st	Z, r24
			_delay_ms(500);
			LCD_Disply(3,0,1);
    59a8:	83 e0       	ldi	r24, 0x03	; 3
    59aa:	60 e0       	ldi	r22, 0x00	; 0
    59ac:	41 e0       	ldi	r20, 0x01	; 1
    59ae:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <LCD_Disply>
			LCD_Disply(0,0,2);
    59b2:	80 e0       	ldi	r24, 0x00	; 0
    59b4:	60 e0       	ldi	r22, 0x00	; 0
    59b6:	42 e0       	ldi	r20, 0x02	; 2
    59b8:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <LCD_Disply>
			LCD_Disply(1,0,3);
    59bc:	81 e0       	ldi	r24, 0x01	; 1
    59be:	60 e0       	ldi	r22, 0x00	; 0
    59c0:	43 e0       	ldi	r20, 0x03	; 3
    59c2:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <LCD_Disply>
			LCD_Disply(2,0,15);
    59c6:	82 e0       	ldi	r24, 0x02	; 2
    59c8:	60 e0       	ldi	r22, 0x00	; 0
    59ca:	4f e0       	ldi	r20, 0x0F	; 15
    59cc:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <LCD_Disply>
			LCD_Disply(3,1,1);
    59d0:	83 e0       	ldi	r24, 0x03	; 3
    59d2:	61 e0       	ldi	r22, 0x01	; 1
    59d4:	41 e0       	ldi	r20, 0x01	; 1
    59d6:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <LCD_Disply>
			LCD_Disply(0,1,2);
    59da:	80 e0       	ldi	r24, 0x00	; 0
    59dc:	61 e0       	ldi	r22, 0x01	; 1
    59de:	42 e0       	ldi	r20, 0x02	; 2
    59e0:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <LCD_Disply>
			LCD_Disply(1,1,3);
    59e4:	81 e0       	ldi	r24, 0x01	; 1
    59e6:	61 e0       	ldi	r22, 0x01	; 1
    59e8:	43 e0       	ldi	r20, 0x03	; 3
    59ea:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <LCD_Disply>
			LCD_Disply(2,1,15);
    59ee:	82 e0       	ldi	r24, 0x02	; 2
    59f0:	61 e0       	ldi	r22, 0x01	; 1
    59f2:	4f e0       	ldi	r20, 0x0F	; 15
    59f4:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <LCD_Disply>
    59f8:	fe 01       	movw	r30, r28
    59fa:	ed 54       	subi	r30, 0x4D	; 77
    59fc:	ff 4f       	sbci	r31, 0xFF	; 255
    59fe:	80 e0       	ldi	r24, 0x00	; 0
    5a00:	90 e0       	ldi	r25, 0x00	; 0
    5a02:	a8 e4       	ldi	r26, 0x48	; 72
    5a04:	b3 e4       	ldi	r27, 0x43	; 67
    5a06:	80 83       	st	Z, r24
    5a08:	91 83       	std	Z+1, r25	; 0x01
    5a0a:	a2 83       	std	Z+2, r26	; 0x02
    5a0c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5a0e:	8e 01       	movw	r16, r28
    5a10:	01 55       	subi	r16, 0x51	; 81
    5a12:	1f 4f       	sbci	r17, 0xFF	; 255
    5a14:	fe 01       	movw	r30, r28
    5a16:	ed 54       	subi	r30, 0x4D	; 77
    5a18:	ff 4f       	sbci	r31, 0xFF	; 255
    5a1a:	60 81       	ld	r22, Z
    5a1c:	71 81       	ldd	r23, Z+1	; 0x01
    5a1e:	82 81       	ldd	r24, Z+2	; 0x02
    5a20:	93 81       	ldd	r25, Z+3	; 0x03
    5a22:	20 e0       	ldi	r18, 0x00	; 0
    5a24:	30 e0       	ldi	r19, 0x00	; 0
    5a26:	4a ef       	ldi	r20, 0xFA	; 250
    5a28:	54 e4       	ldi	r21, 0x44	; 68
    5a2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5a2e:	dc 01       	movw	r26, r24
    5a30:	cb 01       	movw	r24, r22
    5a32:	f8 01       	movw	r30, r16
    5a34:	80 83       	st	Z, r24
    5a36:	91 83       	std	Z+1, r25	; 0x01
    5a38:	a2 83       	std	Z+2, r26	; 0x02
    5a3a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5a3c:	fe 01       	movw	r30, r28
    5a3e:	e1 55       	subi	r30, 0x51	; 81
    5a40:	ff 4f       	sbci	r31, 0xFF	; 255
    5a42:	60 81       	ld	r22, Z
    5a44:	71 81       	ldd	r23, Z+1	; 0x01
    5a46:	82 81       	ldd	r24, Z+2	; 0x02
    5a48:	93 81       	ldd	r25, Z+3	; 0x03
    5a4a:	20 e0       	ldi	r18, 0x00	; 0
    5a4c:	30 e0       	ldi	r19, 0x00	; 0
    5a4e:	40 e8       	ldi	r20, 0x80	; 128
    5a50:	5f e3       	ldi	r21, 0x3F	; 63
    5a52:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5a56:	88 23       	and	r24, r24
    5a58:	44 f4       	brge	.+16     	; 0x5a6a <key_pad+0x842>
		__ticks = 1;
    5a5a:	fe 01       	movw	r30, r28
    5a5c:	e3 55       	subi	r30, 0x53	; 83
    5a5e:	ff 4f       	sbci	r31, 0xFF	; 255
    5a60:	81 e0       	ldi	r24, 0x01	; 1
    5a62:	90 e0       	ldi	r25, 0x00	; 0
    5a64:	91 83       	std	Z+1, r25	; 0x01
    5a66:	80 83       	st	Z, r24
    5a68:	64 c0       	rjmp	.+200    	; 0x5b32 <key_pad+0x90a>
	else if (__tmp > 65535)
    5a6a:	fe 01       	movw	r30, r28
    5a6c:	e1 55       	subi	r30, 0x51	; 81
    5a6e:	ff 4f       	sbci	r31, 0xFF	; 255
    5a70:	60 81       	ld	r22, Z
    5a72:	71 81       	ldd	r23, Z+1	; 0x01
    5a74:	82 81       	ldd	r24, Z+2	; 0x02
    5a76:	93 81       	ldd	r25, Z+3	; 0x03
    5a78:	20 e0       	ldi	r18, 0x00	; 0
    5a7a:	3f ef       	ldi	r19, 0xFF	; 255
    5a7c:	4f e7       	ldi	r20, 0x7F	; 127
    5a7e:	57 e4       	ldi	r21, 0x47	; 71
    5a80:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5a84:	18 16       	cp	r1, r24
    5a86:	0c f0       	brlt	.+2      	; 0x5a8a <key_pad+0x862>
    5a88:	43 c0       	rjmp	.+134    	; 0x5b10 <key_pad+0x8e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5a8a:	fe 01       	movw	r30, r28
    5a8c:	ed 54       	subi	r30, 0x4D	; 77
    5a8e:	ff 4f       	sbci	r31, 0xFF	; 255
    5a90:	60 81       	ld	r22, Z
    5a92:	71 81       	ldd	r23, Z+1	; 0x01
    5a94:	82 81       	ldd	r24, Z+2	; 0x02
    5a96:	93 81       	ldd	r25, Z+3	; 0x03
    5a98:	20 e0       	ldi	r18, 0x00	; 0
    5a9a:	30 e0       	ldi	r19, 0x00	; 0
    5a9c:	40 e2       	ldi	r20, 0x20	; 32
    5a9e:	51 e4       	ldi	r21, 0x41	; 65
    5aa0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5aa4:	dc 01       	movw	r26, r24
    5aa6:	cb 01       	movw	r24, r22
    5aa8:	8e 01       	movw	r16, r28
    5aaa:	03 55       	subi	r16, 0x53	; 83
    5aac:	1f 4f       	sbci	r17, 0xFF	; 255
    5aae:	bc 01       	movw	r22, r24
    5ab0:	cd 01       	movw	r24, r26
    5ab2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5ab6:	dc 01       	movw	r26, r24
    5ab8:	cb 01       	movw	r24, r22
    5aba:	f8 01       	movw	r30, r16
    5abc:	91 83       	std	Z+1, r25	; 0x01
    5abe:	80 83       	st	Z, r24
    5ac0:	1f c0       	rjmp	.+62     	; 0x5b00 <key_pad+0x8d8>
    5ac2:	fe 01       	movw	r30, r28
    5ac4:	e5 55       	subi	r30, 0x55	; 85
    5ac6:	ff 4f       	sbci	r31, 0xFF	; 255
    5ac8:	88 ec       	ldi	r24, 0xC8	; 200
    5aca:	90 e0       	ldi	r25, 0x00	; 0
    5acc:	91 83       	std	Z+1, r25	; 0x01
    5ace:	80 83       	st	Z, r24
    5ad0:	fe 01       	movw	r30, r28
    5ad2:	e5 55       	subi	r30, 0x55	; 85
    5ad4:	ff 4f       	sbci	r31, 0xFF	; 255
    5ad6:	80 81       	ld	r24, Z
    5ad8:	91 81       	ldd	r25, Z+1	; 0x01
    5ada:	01 97       	sbiw	r24, 0x01	; 1
    5adc:	f1 f7       	brne	.-4      	; 0x5ada <key_pad+0x8b2>
    5ade:	fe 01       	movw	r30, r28
    5ae0:	e5 55       	subi	r30, 0x55	; 85
    5ae2:	ff 4f       	sbci	r31, 0xFF	; 255
    5ae4:	91 83       	std	Z+1, r25	; 0x01
    5ae6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5ae8:	de 01       	movw	r26, r28
    5aea:	a3 55       	subi	r26, 0x53	; 83
    5aec:	bf 4f       	sbci	r27, 0xFF	; 255
    5aee:	fe 01       	movw	r30, r28
    5af0:	e3 55       	subi	r30, 0x53	; 83
    5af2:	ff 4f       	sbci	r31, 0xFF	; 255
    5af4:	80 81       	ld	r24, Z
    5af6:	91 81       	ldd	r25, Z+1	; 0x01
    5af8:	01 97       	sbiw	r24, 0x01	; 1
    5afa:	11 96       	adiw	r26, 0x01	; 1
    5afc:	9c 93       	st	X, r25
    5afe:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5b00:	fe 01       	movw	r30, r28
    5b02:	e3 55       	subi	r30, 0x53	; 83
    5b04:	ff 4f       	sbci	r31, 0xFF	; 255
    5b06:	80 81       	ld	r24, Z
    5b08:	91 81       	ldd	r25, Z+1	; 0x01
    5b0a:	00 97       	sbiw	r24, 0x00	; 0
    5b0c:	d1 f6       	brne	.-76     	; 0x5ac2 <key_pad+0x89a>
    5b0e:	27 c0       	rjmp	.+78     	; 0x5b5e <key_pad+0x936>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5b10:	8e 01       	movw	r16, r28
    5b12:	03 55       	subi	r16, 0x53	; 83
    5b14:	1f 4f       	sbci	r17, 0xFF	; 255
    5b16:	fe 01       	movw	r30, r28
    5b18:	e1 55       	subi	r30, 0x51	; 81
    5b1a:	ff 4f       	sbci	r31, 0xFF	; 255
    5b1c:	60 81       	ld	r22, Z
    5b1e:	71 81       	ldd	r23, Z+1	; 0x01
    5b20:	82 81       	ldd	r24, Z+2	; 0x02
    5b22:	93 81       	ldd	r25, Z+3	; 0x03
    5b24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5b28:	dc 01       	movw	r26, r24
    5b2a:	cb 01       	movw	r24, r22
    5b2c:	f8 01       	movw	r30, r16
    5b2e:	91 83       	std	Z+1, r25	; 0x01
    5b30:	80 83       	st	Z, r24
    5b32:	de 01       	movw	r26, r28
    5b34:	a7 55       	subi	r26, 0x57	; 87
    5b36:	bf 4f       	sbci	r27, 0xFF	; 255
    5b38:	fe 01       	movw	r30, r28
    5b3a:	e3 55       	subi	r30, 0x53	; 83
    5b3c:	ff 4f       	sbci	r31, 0xFF	; 255
    5b3e:	80 81       	ld	r24, Z
    5b40:	91 81       	ldd	r25, Z+1	; 0x01
    5b42:	8d 93       	st	X+, r24
    5b44:	9c 93       	st	X, r25
    5b46:	fe 01       	movw	r30, r28
    5b48:	e7 55       	subi	r30, 0x57	; 87
    5b4a:	ff 4f       	sbci	r31, 0xFF	; 255
    5b4c:	80 81       	ld	r24, Z
    5b4e:	91 81       	ldd	r25, Z+1	; 0x01
    5b50:	01 97       	sbiw	r24, 0x01	; 1
    5b52:	f1 f7       	brne	.-4      	; 0x5b50 <key_pad+0x928>
    5b54:	fe 01       	movw	r30, r28
    5b56:	e7 55       	subi	r30, 0x57	; 87
    5b58:	ff 4f       	sbci	r31, 0xFF	; 255
    5b5a:	91 83       	std	Z+1, r25	; 0x01
    5b5c:	80 83       	st	Z, r24
			//pool
			_delay_ms(200);
			LCD_Disply(3,0,1);
    5b5e:	83 e0       	ldi	r24, 0x03	; 3
    5b60:	60 e0       	ldi	r22, 0x00	; 0
    5b62:	41 e0       	ldi	r20, 0x01	; 1
    5b64:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <LCD_Disply>
			LCD_Disply(0,0,2);
    5b68:	80 e0       	ldi	r24, 0x00	; 0
    5b6a:	60 e0       	ldi	r22, 0x00	; 0
    5b6c:	42 e0       	ldi	r20, 0x02	; 2
    5b6e:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <LCD_Disply>
			LCD_Disply(3,0,3);
    5b72:	83 e0       	ldi	r24, 0x03	; 3
    5b74:	60 e0       	ldi	r22, 0x00	; 0
    5b76:	43 e0       	ldi	r20, 0x03	; 3
    5b78:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <LCD_Disply>
			LCD_Disply(1,0,4);
    5b7c:	81 e0       	ldi	r24, 0x01	; 1
    5b7e:	60 e0       	ldi	r22, 0x00	; 0
    5b80:	44 e0       	ldi	r20, 0x04	; 4
    5b82:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <LCD_Disply>
			LCD_Disply(2,0,15);
    5b86:	82 e0       	ldi	r24, 0x02	; 2
    5b88:	60 e0       	ldi	r22, 0x00	; 0
    5b8a:	4f e0       	ldi	r20, 0x0F	; 15
    5b8c:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <LCD_Disply>
			LCD_Disply(3,1,1);
    5b90:	83 e0       	ldi	r24, 0x03	; 3
    5b92:	61 e0       	ldi	r22, 0x01	; 1
    5b94:	41 e0       	ldi	r20, 0x01	; 1
    5b96:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <LCD_Disply>
			LCD_Disply(0,1,2);
    5b9a:	80 e0       	ldi	r24, 0x00	; 0
    5b9c:	61 e0       	ldi	r22, 0x01	; 1
    5b9e:	42 e0       	ldi	r20, 0x02	; 2
    5ba0:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <LCD_Disply>
			LCD_Disply(3,1,3);
    5ba4:	83 e0       	ldi	r24, 0x03	; 3
    5ba6:	61 e0       	ldi	r22, 0x01	; 1
    5ba8:	43 e0       	ldi	r20, 0x03	; 3
    5baa:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <LCD_Disply>
			LCD_Disply(1,1,4);
    5bae:	81 e0       	ldi	r24, 0x01	; 1
    5bb0:	61 e0       	ldi	r22, 0x01	; 1
    5bb2:	44 e0       	ldi	r20, 0x04	; 4
    5bb4:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <LCD_Disply>
			LCD_Disply(2,1,15);
    5bb8:	82 e0       	ldi	r24, 0x02	; 2
    5bba:	61 e0       	ldi	r22, 0x01	; 1
    5bbc:	4f e0       	ldi	r20, 0x0F	; 15
    5bbe:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <LCD_Disply>
    5bc2:	fe 01       	movw	r30, r28
    5bc4:	eb 55       	subi	r30, 0x5B	; 91
    5bc6:	ff 4f       	sbci	r31, 0xFF	; 255
    5bc8:	80 e0       	ldi	r24, 0x00	; 0
    5bca:	90 e0       	ldi	r25, 0x00	; 0
    5bcc:	a8 e4       	ldi	r26, 0x48	; 72
    5bce:	b3 e4       	ldi	r27, 0x43	; 67
    5bd0:	80 83       	st	Z, r24
    5bd2:	91 83       	std	Z+1, r25	; 0x01
    5bd4:	a2 83       	std	Z+2, r26	; 0x02
    5bd6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5bd8:	8e 01       	movw	r16, r28
    5bda:	0f 55       	subi	r16, 0x5F	; 95
    5bdc:	1f 4f       	sbci	r17, 0xFF	; 255
    5bde:	fe 01       	movw	r30, r28
    5be0:	eb 55       	subi	r30, 0x5B	; 91
    5be2:	ff 4f       	sbci	r31, 0xFF	; 255
    5be4:	60 81       	ld	r22, Z
    5be6:	71 81       	ldd	r23, Z+1	; 0x01
    5be8:	82 81       	ldd	r24, Z+2	; 0x02
    5bea:	93 81       	ldd	r25, Z+3	; 0x03
    5bec:	20 e0       	ldi	r18, 0x00	; 0
    5bee:	30 e0       	ldi	r19, 0x00	; 0
    5bf0:	4a ef       	ldi	r20, 0xFA	; 250
    5bf2:	54 e4       	ldi	r21, 0x44	; 68
    5bf4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5bf8:	dc 01       	movw	r26, r24
    5bfa:	cb 01       	movw	r24, r22
    5bfc:	f8 01       	movw	r30, r16
    5bfe:	80 83       	st	Z, r24
    5c00:	91 83       	std	Z+1, r25	; 0x01
    5c02:	a2 83       	std	Z+2, r26	; 0x02
    5c04:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5c06:	fe 01       	movw	r30, r28
    5c08:	ef 55       	subi	r30, 0x5F	; 95
    5c0a:	ff 4f       	sbci	r31, 0xFF	; 255
    5c0c:	60 81       	ld	r22, Z
    5c0e:	71 81       	ldd	r23, Z+1	; 0x01
    5c10:	82 81       	ldd	r24, Z+2	; 0x02
    5c12:	93 81       	ldd	r25, Z+3	; 0x03
    5c14:	20 e0       	ldi	r18, 0x00	; 0
    5c16:	30 e0       	ldi	r19, 0x00	; 0
    5c18:	40 e8       	ldi	r20, 0x80	; 128
    5c1a:	5f e3       	ldi	r21, 0x3F	; 63
    5c1c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5c20:	88 23       	and	r24, r24
    5c22:	44 f4       	brge	.+16     	; 0x5c34 <key_pad+0xa0c>
		__ticks = 1;
    5c24:	fe 01       	movw	r30, r28
    5c26:	e1 56       	subi	r30, 0x61	; 97
    5c28:	ff 4f       	sbci	r31, 0xFF	; 255
    5c2a:	81 e0       	ldi	r24, 0x01	; 1
    5c2c:	90 e0       	ldi	r25, 0x00	; 0
    5c2e:	91 83       	std	Z+1, r25	; 0x01
    5c30:	80 83       	st	Z, r24
    5c32:	64 c0       	rjmp	.+200    	; 0x5cfc <key_pad+0xad4>
	else if (__tmp > 65535)
    5c34:	fe 01       	movw	r30, r28
    5c36:	ef 55       	subi	r30, 0x5F	; 95
    5c38:	ff 4f       	sbci	r31, 0xFF	; 255
    5c3a:	60 81       	ld	r22, Z
    5c3c:	71 81       	ldd	r23, Z+1	; 0x01
    5c3e:	82 81       	ldd	r24, Z+2	; 0x02
    5c40:	93 81       	ldd	r25, Z+3	; 0x03
    5c42:	20 e0       	ldi	r18, 0x00	; 0
    5c44:	3f ef       	ldi	r19, 0xFF	; 255
    5c46:	4f e7       	ldi	r20, 0x7F	; 127
    5c48:	57 e4       	ldi	r21, 0x47	; 71
    5c4a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5c4e:	18 16       	cp	r1, r24
    5c50:	0c f0       	brlt	.+2      	; 0x5c54 <key_pad+0xa2c>
    5c52:	43 c0       	rjmp	.+134    	; 0x5cda <key_pad+0xab2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5c54:	fe 01       	movw	r30, r28
    5c56:	eb 55       	subi	r30, 0x5B	; 91
    5c58:	ff 4f       	sbci	r31, 0xFF	; 255
    5c5a:	60 81       	ld	r22, Z
    5c5c:	71 81       	ldd	r23, Z+1	; 0x01
    5c5e:	82 81       	ldd	r24, Z+2	; 0x02
    5c60:	93 81       	ldd	r25, Z+3	; 0x03
    5c62:	20 e0       	ldi	r18, 0x00	; 0
    5c64:	30 e0       	ldi	r19, 0x00	; 0
    5c66:	40 e2       	ldi	r20, 0x20	; 32
    5c68:	51 e4       	ldi	r21, 0x41	; 65
    5c6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5c6e:	dc 01       	movw	r26, r24
    5c70:	cb 01       	movw	r24, r22
    5c72:	8e 01       	movw	r16, r28
    5c74:	01 56       	subi	r16, 0x61	; 97
    5c76:	1f 4f       	sbci	r17, 0xFF	; 255
    5c78:	bc 01       	movw	r22, r24
    5c7a:	cd 01       	movw	r24, r26
    5c7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5c80:	dc 01       	movw	r26, r24
    5c82:	cb 01       	movw	r24, r22
    5c84:	f8 01       	movw	r30, r16
    5c86:	91 83       	std	Z+1, r25	; 0x01
    5c88:	80 83       	st	Z, r24
    5c8a:	1f c0       	rjmp	.+62     	; 0x5cca <key_pad+0xaa2>
    5c8c:	fe 01       	movw	r30, r28
    5c8e:	e3 56       	subi	r30, 0x63	; 99
    5c90:	ff 4f       	sbci	r31, 0xFF	; 255
    5c92:	88 ec       	ldi	r24, 0xC8	; 200
    5c94:	90 e0       	ldi	r25, 0x00	; 0
    5c96:	91 83       	std	Z+1, r25	; 0x01
    5c98:	80 83       	st	Z, r24
    5c9a:	fe 01       	movw	r30, r28
    5c9c:	e3 56       	subi	r30, 0x63	; 99
    5c9e:	ff 4f       	sbci	r31, 0xFF	; 255
    5ca0:	80 81       	ld	r24, Z
    5ca2:	91 81       	ldd	r25, Z+1	; 0x01
    5ca4:	01 97       	sbiw	r24, 0x01	; 1
    5ca6:	f1 f7       	brne	.-4      	; 0x5ca4 <key_pad+0xa7c>
    5ca8:	fe 01       	movw	r30, r28
    5caa:	e3 56       	subi	r30, 0x63	; 99
    5cac:	ff 4f       	sbci	r31, 0xFF	; 255
    5cae:	91 83       	std	Z+1, r25	; 0x01
    5cb0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5cb2:	de 01       	movw	r26, r28
    5cb4:	a1 56       	subi	r26, 0x61	; 97
    5cb6:	bf 4f       	sbci	r27, 0xFF	; 255
    5cb8:	fe 01       	movw	r30, r28
    5cba:	e1 56       	subi	r30, 0x61	; 97
    5cbc:	ff 4f       	sbci	r31, 0xFF	; 255
    5cbe:	80 81       	ld	r24, Z
    5cc0:	91 81       	ldd	r25, Z+1	; 0x01
    5cc2:	01 97       	sbiw	r24, 0x01	; 1
    5cc4:	11 96       	adiw	r26, 0x01	; 1
    5cc6:	9c 93       	st	X, r25
    5cc8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5cca:	fe 01       	movw	r30, r28
    5ccc:	e1 56       	subi	r30, 0x61	; 97
    5cce:	ff 4f       	sbci	r31, 0xFF	; 255
    5cd0:	80 81       	ld	r24, Z
    5cd2:	91 81       	ldd	r25, Z+1	; 0x01
    5cd4:	00 97       	sbiw	r24, 0x00	; 0
    5cd6:	d1 f6       	brne	.-76     	; 0x5c8c <key_pad+0xa64>
    5cd8:	27 c0       	rjmp	.+78     	; 0x5d28 <key_pad+0xb00>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5cda:	8e 01       	movw	r16, r28
    5cdc:	01 56       	subi	r16, 0x61	; 97
    5cde:	1f 4f       	sbci	r17, 0xFF	; 255
    5ce0:	fe 01       	movw	r30, r28
    5ce2:	ef 55       	subi	r30, 0x5F	; 95
    5ce4:	ff 4f       	sbci	r31, 0xFF	; 255
    5ce6:	60 81       	ld	r22, Z
    5ce8:	71 81       	ldd	r23, Z+1	; 0x01
    5cea:	82 81       	ldd	r24, Z+2	; 0x02
    5cec:	93 81       	ldd	r25, Z+3	; 0x03
    5cee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5cf2:	dc 01       	movw	r26, r24
    5cf4:	cb 01       	movw	r24, r22
    5cf6:	f8 01       	movw	r30, r16
    5cf8:	91 83       	std	Z+1, r25	; 0x01
    5cfa:	80 83       	st	Z, r24
    5cfc:	de 01       	movw	r26, r28
    5cfe:	a5 56       	subi	r26, 0x65	; 101
    5d00:	bf 4f       	sbci	r27, 0xFF	; 255
    5d02:	fe 01       	movw	r30, r28
    5d04:	e1 56       	subi	r30, 0x61	; 97
    5d06:	ff 4f       	sbci	r31, 0xFF	; 255
    5d08:	80 81       	ld	r24, Z
    5d0a:	91 81       	ldd	r25, Z+1	; 0x01
    5d0c:	8d 93       	st	X+, r24
    5d0e:	9c 93       	st	X, r25
    5d10:	fe 01       	movw	r30, r28
    5d12:	e5 56       	subi	r30, 0x65	; 101
    5d14:	ff 4f       	sbci	r31, 0xFF	; 255
    5d16:	80 81       	ld	r24, Z
    5d18:	91 81       	ldd	r25, Z+1	; 0x01
    5d1a:	01 97       	sbiw	r24, 0x01	; 1
    5d1c:	f1 f7       	brne	.-4      	; 0x5d1a <key_pad+0xaf2>
    5d1e:	fe 01       	movw	r30, r28
    5d20:	e5 56       	subi	r30, 0x65	; 101
    5d22:	ff 4f       	sbci	r31, 0xFF	; 255
    5d24:	91 83       	std	Z+1, r25	; 0x01
    5d26:	80 83       	st	Z, r24
			_delay_ms(200);
			LCD_Disply(3,0,1);
    5d28:	83 e0       	ldi	r24, 0x03	; 3
    5d2a:	60 e0       	ldi	r22, 0x00	; 0
    5d2c:	41 e0       	ldi	r20, 0x01	; 1
    5d2e:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <LCD_Disply>
			LCD_Disply(0,0,2);
    5d32:	80 e0       	ldi	r24, 0x00	; 0
    5d34:	60 e0       	ldi	r22, 0x00	; 0
    5d36:	42 e0       	ldi	r20, 0x02	; 2
    5d38:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <LCD_Disply>
			LCD_Disply(3,0,4);
    5d3c:	83 e0       	ldi	r24, 0x03	; 3
    5d3e:	60 e0       	ldi	r22, 0x00	; 0
    5d40:	44 e0       	ldi	r20, 0x04	; 4
    5d42:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <LCD_Disply>
			LCD_Disply(1,0,5);
    5d46:	81 e0       	ldi	r24, 0x01	; 1
    5d48:	60 e0       	ldi	r22, 0x00	; 0
    5d4a:	45 e0       	ldi	r20, 0x05	; 5
    5d4c:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <LCD_Disply>
			LCD_Disply(2,0,15);
    5d50:	82 e0       	ldi	r24, 0x02	; 2
    5d52:	60 e0       	ldi	r22, 0x00	; 0
    5d54:	4f e0       	ldi	r20, 0x0F	; 15
    5d56:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <LCD_Disply>
			LCD_Disply(3,1,1);
    5d5a:	83 e0       	ldi	r24, 0x03	; 3
    5d5c:	61 e0       	ldi	r22, 0x01	; 1
    5d5e:	41 e0       	ldi	r20, 0x01	; 1
    5d60:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <LCD_Disply>
			LCD_Disply(0,1,2);
    5d64:	80 e0       	ldi	r24, 0x00	; 0
    5d66:	61 e0       	ldi	r22, 0x01	; 1
    5d68:	42 e0       	ldi	r20, 0x02	; 2
    5d6a:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <LCD_Disply>
			LCD_Disply(3,1,4);
    5d6e:	83 e0       	ldi	r24, 0x03	; 3
    5d70:	61 e0       	ldi	r22, 0x01	; 1
    5d72:	44 e0       	ldi	r20, 0x04	; 4
    5d74:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <LCD_Disply>
			LCD_Disply(1,1,5);
    5d78:	81 e0       	ldi	r24, 0x01	; 1
    5d7a:	61 e0       	ldi	r22, 0x01	; 1
    5d7c:	45 e0       	ldi	r20, 0x05	; 5
    5d7e:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <LCD_Disply>
			LCD_Disply(2,1,15);
    5d82:	82 e0       	ldi	r24, 0x02	; 2
    5d84:	61 e0       	ldi	r22, 0x01	; 1
    5d86:	4f e0       	ldi	r20, 0x0F	; 15
    5d88:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <LCD_Disply>
    5d8c:	fe 01       	movw	r30, r28
    5d8e:	e9 56       	subi	r30, 0x69	; 105
    5d90:	ff 4f       	sbci	r31, 0xFF	; 255
    5d92:	80 e0       	ldi	r24, 0x00	; 0
    5d94:	90 e0       	ldi	r25, 0x00	; 0
    5d96:	a8 e4       	ldi	r26, 0x48	; 72
    5d98:	b3 e4       	ldi	r27, 0x43	; 67
    5d9a:	80 83       	st	Z, r24
    5d9c:	91 83       	std	Z+1, r25	; 0x01
    5d9e:	a2 83       	std	Z+2, r26	; 0x02
    5da0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5da2:	8e 01       	movw	r16, r28
    5da4:	0d 56       	subi	r16, 0x6D	; 109
    5da6:	1f 4f       	sbci	r17, 0xFF	; 255
    5da8:	fe 01       	movw	r30, r28
    5daa:	e9 56       	subi	r30, 0x69	; 105
    5dac:	ff 4f       	sbci	r31, 0xFF	; 255
    5dae:	60 81       	ld	r22, Z
    5db0:	71 81       	ldd	r23, Z+1	; 0x01
    5db2:	82 81       	ldd	r24, Z+2	; 0x02
    5db4:	93 81       	ldd	r25, Z+3	; 0x03
    5db6:	20 e0       	ldi	r18, 0x00	; 0
    5db8:	30 e0       	ldi	r19, 0x00	; 0
    5dba:	4a ef       	ldi	r20, 0xFA	; 250
    5dbc:	54 e4       	ldi	r21, 0x44	; 68
    5dbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5dc2:	dc 01       	movw	r26, r24
    5dc4:	cb 01       	movw	r24, r22
    5dc6:	f8 01       	movw	r30, r16
    5dc8:	80 83       	st	Z, r24
    5dca:	91 83       	std	Z+1, r25	; 0x01
    5dcc:	a2 83       	std	Z+2, r26	; 0x02
    5dce:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5dd0:	fe 01       	movw	r30, r28
    5dd2:	ed 56       	subi	r30, 0x6D	; 109
    5dd4:	ff 4f       	sbci	r31, 0xFF	; 255
    5dd6:	60 81       	ld	r22, Z
    5dd8:	71 81       	ldd	r23, Z+1	; 0x01
    5dda:	82 81       	ldd	r24, Z+2	; 0x02
    5ddc:	93 81       	ldd	r25, Z+3	; 0x03
    5dde:	20 e0       	ldi	r18, 0x00	; 0
    5de0:	30 e0       	ldi	r19, 0x00	; 0
    5de2:	40 e8       	ldi	r20, 0x80	; 128
    5de4:	5f e3       	ldi	r21, 0x3F	; 63
    5de6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5dea:	88 23       	and	r24, r24
    5dec:	44 f4       	brge	.+16     	; 0x5dfe <key_pad+0xbd6>
		__ticks = 1;
    5dee:	fe 01       	movw	r30, r28
    5df0:	ef 56       	subi	r30, 0x6F	; 111
    5df2:	ff 4f       	sbci	r31, 0xFF	; 255
    5df4:	81 e0       	ldi	r24, 0x01	; 1
    5df6:	90 e0       	ldi	r25, 0x00	; 0
    5df8:	91 83       	std	Z+1, r25	; 0x01
    5dfa:	80 83       	st	Z, r24
    5dfc:	64 c0       	rjmp	.+200    	; 0x5ec6 <key_pad+0xc9e>
	else if (__tmp > 65535)
    5dfe:	fe 01       	movw	r30, r28
    5e00:	ed 56       	subi	r30, 0x6D	; 109
    5e02:	ff 4f       	sbci	r31, 0xFF	; 255
    5e04:	60 81       	ld	r22, Z
    5e06:	71 81       	ldd	r23, Z+1	; 0x01
    5e08:	82 81       	ldd	r24, Z+2	; 0x02
    5e0a:	93 81       	ldd	r25, Z+3	; 0x03
    5e0c:	20 e0       	ldi	r18, 0x00	; 0
    5e0e:	3f ef       	ldi	r19, 0xFF	; 255
    5e10:	4f e7       	ldi	r20, 0x7F	; 127
    5e12:	57 e4       	ldi	r21, 0x47	; 71
    5e14:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5e18:	18 16       	cp	r1, r24
    5e1a:	0c f0       	brlt	.+2      	; 0x5e1e <key_pad+0xbf6>
    5e1c:	43 c0       	rjmp	.+134    	; 0x5ea4 <key_pad+0xc7c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5e1e:	fe 01       	movw	r30, r28
    5e20:	e9 56       	subi	r30, 0x69	; 105
    5e22:	ff 4f       	sbci	r31, 0xFF	; 255
    5e24:	60 81       	ld	r22, Z
    5e26:	71 81       	ldd	r23, Z+1	; 0x01
    5e28:	82 81       	ldd	r24, Z+2	; 0x02
    5e2a:	93 81       	ldd	r25, Z+3	; 0x03
    5e2c:	20 e0       	ldi	r18, 0x00	; 0
    5e2e:	30 e0       	ldi	r19, 0x00	; 0
    5e30:	40 e2       	ldi	r20, 0x20	; 32
    5e32:	51 e4       	ldi	r21, 0x41	; 65
    5e34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5e38:	dc 01       	movw	r26, r24
    5e3a:	cb 01       	movw	r24, r22
    5e3c:	8e 01       	movw	r16, r28
    5e3e:	0f 56       	subi	r16, 0x6F	; 111
    5e40:	1f 4f       	sbci	r17, 0xFF	; 255
    5e42:	bc 01       	movw	r22, r24
    5e44:	cd 01       	movw	r24, r26
    5e46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5e4a:	dc 01       	movw	r26, r24
    5e4c:	cb 01       	movw	r24, r22
    5e4e:	f8 01       	movw	r30, r16
    5e50:	91 83       	std	Z+1, r25	; 0x01
    5e52:	80 83       	st	Z, r24
    5e54:	1f c0       	rjmp	.+62     	; 0x5e94 <key_pad+0xc6c>
    5e56:	fe 01       	movw	r30, r28
    5e58:	e1 57       	subi	r30, 0x71	; 113
    5e5a:	ff 4f       	sbci	r31, 0xFF	; 255
    5e5c:	88 ec       	ldi	r24, 0xC8	; 200
    5e5e:	90 e0       	ldi	r25, 0x00	; 0
    5e60:	91 83       	std	Z+1, r25	; 0x01
    5e62:	80 83       	st	Z, r24
    5e64:	fe 01       	movw	r30, r28
    5e66:	e1 57       	subi	r30, 0x71	; 113
    5e68:	ff 4f       	sbci	r31, 0xFF	; 255
    5e6a:	80 81       	ld	r24, Z
    5e6c:	91 81       	ldd	r25, Z+1	; 0x01
    5e6e:	01 97       	sbiw	r24, 0x01	; 1
    5e70:	f1 f7       	brne	.-4      	; 0x5e6e <key_pad+0xc46>
    5e72:	fe 01       	movw	r30, r28
    5e74:	e1 57       	subi	r30, 0x71	; 113
    5e76:	ff 4f       	sbci	r31, 0xFF	; 255
    5e78:	91 83       	std	Z+1, r25	; 0x01
    5e7a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5e7c:	de 01       	movw	r26, r28
    5e7e:	af 56       	subi	r26, 0x6F	; 111
    5e80:	bf 4f       	sbci	r27, 0xFF	; 255
    5e82:	fe 01       	movw	r30, r28
    5e84:	ef 56       	subi	r30, 0x6F	; 111
    5e86:	ff 4f       	sbci	r31, 0xFF	; 255
    5e88:	80 81       	ld	r24, Z
    5e8a:	91 81       	ldd	r25, Z+1	; 0x01
    5e8c:	01 97       	sbiw	r24, 0x01	; 1
    5e8e:	11 96       	adiw	r26, 0x01	; 1
    5e90:	9c 93       	st	X, r25
    5e92:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5e94:	fe 01       	movw	r30, r28
    5e96:	ef 56       	subi	r30, 0x6F	; 111
    5e98:	ff 4f       	sbci	r31, 0xFF	; 255
    5e9a:	80 81       	ld	r24, Z
    5e9c:	91 81       	ldd	r25, Z+1	; 0x01
    5e9e:	00 97       	sbiw	r24, 0x00	; 0
    5ea0:	d1 f6       	brne	.-76     	; 0x5e56 <key_pad+0xc2e>
    5ea2:	27 c0       	rjmp	.+78     	; 0x5ef2 <key_pad+0xcca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5ea4:	8e 01       	movw	r16, r28
    5ea6:	0f 56       	subi	r16, 0x6F	; 111
    5ea8:	1f 4f       	sbci	r17, 0xFF	; 255
    5eaa:	fe 01       	movw	r30, r28
    5eac:	ed 56       	subi	r30, 0x6D	; 109
    5eae:	ff 4f       	sbci	r31, 0xFF	; 255
    5eb0:	60 81       	ld	r22, Z
    5eb2:	71 81       	ldd	r23, Z+1	; 0x01
    5eb4:	82 81       	ldd	r24, Z+2	; 0x02
    5eb6:	93 81       	ldd	r25, Z+3	; 0x03
    5eb8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5ebc:	dc 01       	movw	r26, r24
    5ebe:	cb 01       	movw	r24, r22
    5ec0:	f8 01       	movw	r30, r16
    5ec2:	91 83       	std	Z+1, r25	; 0x01
    5ec4:	80 83       	st	Z, r24
    5ec6:	de 01       	movw	r26, r28
    5ec8:	a3 57       	subi	r26, 0x73	; 115
    5eca:	bf 4f       	sbci	r27, 0xFF	; 255
    5ecc:	fe 01       	movw	r30, r28
    5ece:	ef 56       	subi	r30, 0x6F	; 111
    5ed0:	ff 4f       	sbci	r31, 0xFF	; 255
    5ed2:	80 81       	ld	r24, Z
    5ed4:	91 81       	ldd	r25, Z+1	; 0x01
    5ed6:	8d 93       	st	X+, r24
    5ed8:	9c 93       	st	X, r25
    5eda:	fe 01       	movw	r30, r28
    5edc:	e3 57       	subi	r30, 0x73	; 115
    5ede:	ff 4f       	sbci	r31, 0xFF	; 255
    5ee0:	80 81       	ld	r24, Z
    5ee2:	91 81       	ldd	r25, Z+1	; 0x01
    5ee4:	01 97       	sbiw	r24, 0x01	; 1
    5ee6:	f1 f7       	brne	.-4      	; 0x5ee4 <key_pad+0xcbc>
    5ee8:	fe 01       	movw	r30, r28
    5eea:	e3 57       	subi	r30, 0x73	; 115
    5eec:	ff 4f       	sbci	r31, 0xFF	; 255
    5eee:	91 83       	std	Z+1, r25	; 0x01
    5ef0:	80 83       	st	Z, r24
			_delay_ms(200);
			LCD_Disply(3,0,1);
    5ef2:	83 e0       	ldi	r24, 0x03	; 3
    5ef4:	60 e0       	ldi	r22, 0x00	; 0
    5ef6:	41 e0       	ldi	r20, 0x01	; 1
    5ef8:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <LCD_Disply>
			LCD_Disply(0,0,2);
    5efc:	80 e0       	ldi	r24, 0x00	; 0
    5efe:	60 e0       	ldi	r22, 0x00	; 0
    5f00:	42 e0       	ldi	r20, 0x02	; 2
    5f02:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <LCD_Disply>
			LCD_Disply(3,0,5);
    5f06:	83 e0       	ldi	r24, 0x03	; 3
    5f08:	60 e0       	ldi	r22, 0x00	; 0
    5f0a:	45 e0       	ldi	r20, 0x05	; 5
    5f0c:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <LCD_Disply>
			LCD_Disply(1,0,6);
    5f10:	81 e0       	ldi	r24, 0x01	; 1
    5f12:	60 e0       	ldi	r22, 0x00	; 0
    5f14:	46 e0       	ldi	r20, 0x06	; 6
    5f16:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <LCD_Disply>
			LCD_Disply(2,0,15);
    5f1a:	82 e0       	ldi	r24, 0x02	; 2
    5f1c:	60 e0       	ldi	r22, 0x00	; 0
    5f1e:	4f e0       	ldi	r20, 0x0F	; 15
    5f20:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <LCD_Disply>
			LCD_Disply(3,1,1);
    5f24:	83 e0       	ldi	r24, 0x03	; 3
    5f26:	61 e0       	ldi	r22, 0x01	; 1
    5f28:	41 e0       	ldi	r20, 0x01	; 1
    5f2a:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <LCD_Disply>
			LCD_Disply(0,1,2);
    5f2e:	80 e0       	ldi	r24, 0x00	; 0
    5f30:	61 e0       	ldi	r22, 0x01	; 1
    5f32:	42 e0       	ldi	r20, 0x02	; 2
    5f34:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <LCD_Disply>
			LCD_Disply(3,1,5);
    5f38:	83 e0       	ldi	r24, 0x03	; 3
    5f3a:	61 e0       	ldi	r22, 0x01	; 1
    5f3c:	45 e0       	ldi	r20, 0x05	; 5
    5f3e:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <LCD_Disply>
			LCD_Disply(1,1,6);
    5f42:	81 e0       	ldi	r24, 0x01	; 1
    5f44:	61 e0       	ldi	r22, 0x01	; 1
    5f46:	46 e0       	ldi	r20, 0x06	; 6
    5f48:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <LCD_Disply>
			LCD_Disply(2,1,15);
    5f4c:	82 e0       	ldi	r24, 0x02	; 2
    5f4e:	61 e0       	ldi	r22, 0x01	; 1
    5f50:	4f e0       	ldi	r20, 0x0F	; 15
    5f52:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <LCD_Disply>
    5f56:	fe 01       	movw	r30, r28
    5f58:	e7 57       	subi	r30, 0x77	; 119
    5f5a:	ff 4f       	sbci	r31, 0xFF	; 255
    5f5c:	80 e0       	ldi	r24, 0x00	; 0
    5f5e:	90 e0       	ldi	r25, 0x00	; 0
    5f60:	a8 e4       	ldi	r26, 0x48	; 72
    5f62:	b3 e4       	ldi	r27, 0x43	; 67
    5f64:	80 83       	st	Z, r24
    5f66:	91 83       	std	Z+1, r25	; 0x01
    5f68:	a2 83       	std	Z+2, r26	; 0x02
    5f6a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5f6c:	8e 01       	movw	r16, r28
    5f6e:	0b 57       	subi	r16, 0x7B	; 123
    5f70:	1f 4f       	sbci	r17, 0xFF	; 255
    5f72:	fe 01       	movw	r30, r28
    5f74:	e7 57       	subi	r30, 0x77	; 119
    5f76:	ff 4f       	sbci	r31, 0xFF	; 255
    5f78:	60 81       	ld	r22, Z
    5f7a:	71 81       	ldd	r23, Z+1	; 0x01
    5f7c:	82 81       	ldd	r24, Z+2	; 0x02
    5f7e:	93 81       	ldd	r25, Z+3	; 0x03
    5f80:	20 e0       	ldi	r18, 0x00	; 0
    5f82:	30 e0       	ldi	r19, 0x00	; 0
    5f84:	4a ef       	ldi	r20, 0xFA	; 250
    5f86:	54 e4       	ldi	r21, 0x44	; 68
    5f88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5f8c:	dc 01       	movw	r26, r24
    5f8e:	cb 01       	movw	r24, r22
    5f90:	f8 01       	movw	r30, r16
    5f92:	80 83       	st	Z, r24
    5f94:	91 83       	std	Z+1, r25	; 0x01
    5f96:	a2 83       	std	Z+2, r26	; 0x02
    5f98:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5f9a:	fe 01       	movw	r30, r28
    5f9c:	eb 57       	subi	r30, 0x7B	; 123
    5f9e:	ff 4f       	sbci	r31, 0xFF	; 255
    5fa0:	60 81       	ld	r22, Z
    5fa2:	71 81       	ldd	r23, Z+1	; 0x01
    5fa4:	82 81       	ldd	r24, Z+2	; 0x02
    5fa6:	93 81       	ldd	r25, Z+3	; 0x03
    5fa8:	20 e0       	ldi	r18, 0x00	; 0
    5faa:	30 e0       	ldi	r19, 0x00	; 0
    5fac:	40 e8       	ldi	r20, 0x80	; 128
    5fae:	5f e3       	ldi	r21, 0x3F	; 63
    5fb0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5fb4:	88 23       	and	r24, r24
    5fb6:	44 f4       	brge	.+16     	; 0x5fc8 <key_pad+0xda0>
		__ticks = 1;
    5fb8:	fe 01       	movw	r30, r28
    5fba:	ed 57       	subi	r30, 0x7D	; 125
    5fbc:	ff 4f       	sbci	r31, 0xFF	; 255
    5fbe:	81 e0       	ldi	r24, 0x01	; 1
    5fc0:	90 e0       	ldi	r25, 0x00	; 0
    5fc2:	91 83       	std	Z+1, r25	; 0x01
    5fc4:	80 83       	st	Z, r24
    5fc6:	64 c0       	rjmp	.+200    	; 0x6090 <key_pad+0xe68>
	else if (__tmp > 65535)
    5fc8:	fe 01       	movw	r30, r28
    5fca:	eb 57       	subi	r30, 0x7B	; 123
    5fcc:	ff 4f       	sbci	r31, 0xFF	; 255
    5fce:	60 81       	ld	r22, Z
    5fd0:	71 81       	ldd	r23, Z+1	; 0x01
    5fd2:	82 81       	ldd	r24, Z+2	; 0x02
    5fd4:	93 81       	ldd	r25, Z+3	; 0x03
    5fd6:	20 e0       	ldi	r18, 0x00	; 0
    5fd8:	3f ef       	ldi	r19, 0xFF	; 255
    5fda:	4f e7       	ldi	r20, 0x7F	; 127
    5fdc:	57 e4       	ldi	r21, 0x47	; 71
    5fde:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5fe2:	18 16       	cp	r1, r24
    5fe4:	0c f0       	brlt	.+2      	; 0x5fe8 <key_pad+0xdc0>
    5fe6:	43 c0       	rjmp	.+134    	; 0x606e <key_pad+0xe46>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5fe8:	fe 01       	movw	r30, r28
    5fea:	e7 57       	subi	r30, 0x77	; 119
    5fec:	ff 4f       	sbci	r31, 0xFF	; 255
    5fee:	60 81       	ld	r22, Z
    5ff0:	71 81       	ldd	r23, Z+1	; 0x01
    5ff2:	82 81       	ldd	r24, Z+2	; 0x02
    5ff4:	93 81       	ldd	r25, Z+3	; 0x03
    5ff6:	20 e0       	ldi	r18, 0x00	; 0
    5ff8:	30 e0       	ldi	r19, 0x00	; 0
    5ffa:	40 e2       	ldi	r20, 0x20	; 32
    5ffc:	51 e4       	ldi	r21, 0x41	; 65
    5ffe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6002:	dc 01       	movw	r26, r24
    6004:	cb 01       	movw	r24, r22
    6006:	8e 01       	movw	r16, r28
    6008:	0d 57       	subi	r16, 0x7D	; 125
    600a:	1f 4f       	sbci	r17, 0xFF	; 255
    600c:	bc 01       	movw	r22, r24
    600e:	cd 01       	movw	r24, r26
    6010:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6014:	dc 01       	movw	r26, r24
    6016:	cb 01       	movw	r24, r22
    6018:	f8 01       	movw	r30, r16
    601a:	91 83       	std	Z+1, r25	; 0x01
    601c:	80 83       	st	Z, r24
    601e:	1f c0       	rjmp	.+62     	; 0x605e <key_pad+0xe36>
    6020:	fe 01       	movw	r30, r28
    6022:	ef 57       	subi	r30, 0x7F	; 127
    6024:	ff 4f       	sbci	r31, 0xFF	; 255
    6026:	88 ec       	ldi	r24, 0xC8	; 200
    6028:	90 e0       	ldi	r25, 0x00	; 0
    602a:	91 83       	std	Z+1, r25	; 0x01
    602c:	80 83       	st	Z, r24
    602e:	fe 01       	movw	r30, r28
    6030:	ef 57       	subi	r30, 0x7F	; 127
    6032:	ff 4f       	sbci	r31, 0xFF	; 255
    6034:	80 81       	ld	r24, Z
    6036:	91 81       	ldd	r25, Z+1	; 0x01
    6038:	01 97       	sbiw	r24, 0x01	; 1
    603a:	f1 f7       	brne	.-4      	; 0x6038 <key_pad+0xe10>
    603c:	fe 01       	movw	r30, r28
    603e:	ef 57       	subi	r30, 0x7F	; 127
    6040:	ff 4f       	sbci	r31, 0xFF	; 255
    6042:	91 83       	std	Z+1, r25	; 0x01
    6044:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6046:	de 01       	movw	r26, r28
    6048:	ad 57       	subi	r26, 0x7D	; 125
    604a:	bf 4f       	sbci	r27, 0xFF	; 255
    604c:	fe 01       	movw	r30, r28
    604e:	ed 57       	subi	r30, 0x7D	; 125
    6050:	ff 4f       	sbci	r31, 0xFF	; 255
    6052:	80 81       	ld	r24, Z
    6054:	91 81       	ldd	r25, Z+1	; 0x01
    6056:	01 97       	sbiw	r24, 0x01	; 1
    6058:	11 96       	adiw	r26, 0x01	; 1
    605a:	9c 93       	st	X, r25
    605c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    605e:	fe 01       	movw	r30, r28
    6060:	ed 57       	subi	r30, 0x7D	; 125
    6062:	ff 4f       	sbci	r31, 0xFF	; 255
    6064:	80 81       	ld	r24, Z
    6066:	91 81       	ldd	r25, Z+1	; 0x01
    6068:	00 97       	sbiw	r24, 0x00	; 0
    606a:	d1 f6       	brne	.-76     	; 0x6020 <key_pad+0xdf8>
    606c:	27 c0       	rjmp	.+78     	; 0x60bc <key_pad+0xe94>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    606e:	8e 01       	movw	r16, r28
    6070:	0d 57       	subi	r16, 0x7D	; 125
    6072:	1f 4f       	sbci	r17, 0xFF	; 255
    6074:	fe 01       	movw	r30, r28
    6076:	eb 57       	subi	r30, 0x7B	; 123
    6078:	ff 4f       	sbci	r31, 0xFF	; 255
    607a:	60 81       	ld	r22, Z
    607c:	71 81       	ldd	r23, Z+1	; 0x01
    607e:	82 81       	ldd	r24, Z+2	; 0x02
    6080:	93 81       	ldd	r25, Z+3	; 0x03
    6082:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6086:	dc 01       	movw	r26, r24
    6088:	cb 01       	movw	r24, r22
    608a:	f8 01       	movw	r30, r16
    608c:	91 83       	std	Z+1, r25	; 0x01
    608e:	80 83       	st	Z, r24
    6090:	de 01       	movw	r26, r28
    6092:	a1 58       	subi	r26, 0x81	; 129
    6094:	bf 4f       	sbci	r27, 0xFF	; 255
    6096:	fe 01       	movw	r30, r28
    6098:	ed 57       	subi	r30, 0x7D	; 125
    609a:	ff 4f       	sbci	r31, 0xFF	; 255
    609c:	80 81       	ld	r24, Z
    609e:	91 81       	ldd	r25, Z+1	; 0x01
    60a0:	8d 93       	st	X+, r24
    60a2:	9c 93       	st	X, r25
    60a4:	fe 01       	movw	r30, r28
    60a6:	e1 58       	subi	r30, 0x81	; 129
    60a8:	ff 4f       	sbci	r31, 0xFF	; 255
    60aa:	80 81       	ld	r24, Z
    60ac:	91 81       	ldd	r25, Z+1	; 0x01
    60ae:	01 97       	sbiw	r24, 0x01	; 1
    60b0:	f1 f7       	brne	.-4      	; 0x60ae <key_pad+0xe86>
    60b2:	fe 01       	movw	r30, r28
    60b4:	e1 58       	subi	r30, 0x81	; 129
    60b6:	ff 4f       	sbci	r31, 0xFF	; 255
    60b8:	91 83       	std	Z+1, r25	; 0x01
    60ba:	80 83       	st	Z, r24
			_delay_ms(200);
			LCD_Disply(3,0,1);
    60bc:	83 e0       	ldi	r24, 0x03	; 3
    60be:	60 e0       	ldi	r22, 0x00	; 0
    60c0:	41 e0       	ldi	r20, 0x01	; 1
    60c2:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <LCD_Disply>
			LCD_Disply(0,0,2);
    60c6:	80 e0       	ldi	r24, 0x00	; 0
    60c8:	60 e0       	ldi	r22, 0x00	; 0
    60ca:	42 e0       	ldi	r20, 0x02	; 2
    60cc:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <LCD_Disply>
			LCD_Disply(3,0,6);
    60d0:	83 e0       	ldi	r24, 0x03	; 3
    60d2:	60 e0       	ldi	r22, 0x00	; 0
    60d4:	46 e0       	ldi	r20, 0x06	; 6
    60d6:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <LCD_Disply>
			LCD_Disply(1,0,7);
    60da:	81 e0       	ldi	r24, 0x01	; 1
    60dc:	60 e0       	ldi	r22, 0x00	; 0
    60de:	47 e0       	ldi	r20, 0x07	; 7
    60e0:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <LCD_Disply>
			LCD_Disply(2,0,15);
    60e4:	82 e0       	ldi	r24, 0x02	; 2
    60e6:	60 e0       	ldi	r22, 0x00	; 0
    60e8:	4f e0       	ldi	r20, 0x0F	; 15
    60ea:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <LCD_Disply>
			LCD_Disply(3,1,1);
    60ee:	83 e0       	ldi	r24, 0x03	; 3
    60f0:	61 e0       	ldi	r22, 0x01	; 1
    60f2:	41 e0       	ldi	r20, 0x01	; 1
    60f4:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <LCD_Disply>
			LCD_Disply(0,1,2);
    60f8:	80 e0       	ldi	r24, 0x00	; 0
    60fa:	61 e0       	ldi	r22, 0x01	; 1
    60fc:	42 e0       	ldi	r20, 0x02	; 2
    60fe:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <LCD_Disply>
			LCD_Disply(3,1,6);
    6102:	83 e0       	ldi	r24, 0x03	; 3
    6104:	61 e0       	ldi	r22, 0x01	; 1
    6106:	46 e0       	ldi	r20, 0x06	; 6
    6108:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <LCD_Disply>
			LCD_Disply(1,1,7);
    610c:	81 e0       	ldi	r24, 0x01	; 1
    610e:	61 e0       	ldi	r22, 0x01	; 1
    6110:	47 e0       	ldi	r20, 0x07	; 7
    6112:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <LCD_Disply>
			LCD_Disply(2,1,15);
    6116:	82 e0       	ldi	r24, 0x02	; 2
    6118:	61 e0       	ldi	r22, 0x01	; 1
    611a:	4f e0       	ldi	r20, 0x0F	; 15
    611c:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <LCD_Disply>
    6120:	fe 01       	movw	r30, r28
    6122:	e5 58       	subi	r30, 0x85	; 133
    6124:	ff 4f       	sbci	r31, 0xFF	; 255
    6126:	80 e0       	ldi	r24, 0x00	; 0
    6128:	90 e0       	ldi	r25, 0x00	; 0
    612a:	a8 e4       	ldi	r26, 0x48	; 72
    612c:	b3 e4       	ldi	r27, 0x43	; 67
    612e:	80 83       	st	Z, r24
    6130:	91 83       	std	Z+1, r25	; 0x01
    6132:	a2 83       	std	Z+2, r26	; 0x02
    6134:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6136:	8e 01       	movw	r16, r28
    6138:	09 58       	subi	r16, 0x89	; 137
    613a:	1f 4f       	sbci	r17, 0xFF	; 255
    613c:	fe 01       	movw	r30, r28
    613e:	e5 58       	subi	r30, 0x85	; 133
    6140:	ff 4f       	sbci	r31, 0xFF	; 255
    6142:	60 81       	ld	r22, Z
    6144:	71 81       	ldd	r23, Z+1	; 0x01
    6146:	82 81       	ldd	r24, Z+2	; 0x02
    6148:	93 81       	ldd	r25, Z+3	; 0x03
    614a:	20 e0       	ldi	r18, 0x00	; 0
    614c:	30 e0       	ldi	r19, 0x00	; 0
    614e:	4a ef       	ldi	r20, 0xFA	; 250
    6150:	54 e4       	ldi	r21, 0x44	; 68
    6152:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6156:	dc 01       	movw	r26, r24
    6158:	cb 01       	movw	r24, r22
    615a:	f8 01       	movw	r30, r16
    615c:	80 83       	st	Z, r24
    615e:	91 83       	std	Z+1, r25	; 0x01
    6160:	a2 83       	std	Z+2, r26	; 0x02
    6162:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    6164:	fe 01       	movw	r30, r28
    6166:	e9 58       	subi	r30, 0x89	; 137
    6168:	ff 4f       	sbci	r31, 0xFF	; 255
    616a:	60 81       	ld	r22, Z
    616c:	71 81       	ldd	r23, Z+1	; 0x01
    616e:	82 81       	ldd	r24, Z+2	; 0x02
    6170:	93 81       	ldd	r25, Z+3	; 0x03
    6172:	20 e0       	ldi	r18, 0x00	; 0
    6174:	30 e0       	ldi	r19, 0x00	; 0
    6176:	40 e8       	ldi	r20, 0x80	; 128
    6178:	5f e3       	ldi	r21, 0x3F	; 63
    617a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    617e:	88 23       	and	r24, r24
    6180:	44 f4       	brge	.+16     	; 0x6192 <key_pad+0xf6a>
		__ticks = 1;
    6182:	fe 01       	movw	r30, r28
    6184:	eb 58       	subi	r30, 0x8B	; 139
    6186:	ff 4f       	sbci	r31, 0xFF	; 255
    6188:	81 e0       	ldi	r24, 0x01	; 1
    618a:	90 e0       	ldi	r25, 0x00	; 0
    618c:	91 83       	std	Z+1, r25	; 0x01
    618e:	80 83       	st	Z, r24
    6190:	64 c0       	rjmp	.+200    	; 0x625a <key_pad+0x1032>
	else if (__tmp > 65535)
    6192:	fe 01       	movw	r30, r28
    6194:	e9 58       	subi	r30, 0x89	; 137
    6196:	ff 4f       	sbci	r31, 0xFF	; 255
    6198:	60 81       	ld	r22, Z
    619a:	71 81       	ldd	r23, Z+1	; 0x01
    619c:	82 81       	ldd	r24, Z+2	; 0x02
    619e:	93 81       	ldd	r25, Z+3	; 0x03
    61a0:	20 e0       	ldi	r18, 0x00	; 0
    61a2:	3f ef       	ldi	r19, 0xFF	; 255
    61a4:	4f e7       	ldi	r20, 0x7F	; 127
    61a6:	57 e4       	ldi	r21, 0x47	; 71
    61a8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    61ac:	18 16       	cp	r1, r24
    61ae:	0c f0       	brlt	.+2      	; 0x61b2 <key_pad+0xf8a>
    61b0:	43 c0       	rjmp	.+134    	; 0x6238 <key_pad+0x1010>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    61b2:	fe 01       	movw	r30, r28
    61b4:	e5 58       	subi	r30, 0x85	; 133
    61b6:	ff 4f       	sbci	r31, 0xFF	; 255
    61b8:	60 81       	ld	r22, Z
    61ba:	71 81       	ldd	r23, Z+1	; 0x01
    61bc:	82 81       	ldd	r24, Z+2	; 0x02
    61be:	93 81       	ldd	r25, Z+3	; 0x03
    61c0:	20 e0       	ldi	r18, 0x00	; 0
    61c2:	30 e0       	ldi	r19, 0x00	; 0
    61c4:	40 e2       	ldi	r20, 0x20	; 32
    61c6:	51 e4       	ldi	r21, 0x41	; 65
    61c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    61cc:	dc 01       	movw	r26, r24
    61ce:	cb 01       	movw	r24, r22
    61d0:	8e 01       	movw	r16, r28
    61d2:	0b 58       	subi	r16, 0x8B	; 139
    61d4:	1f 4f       	sbci	r17, 0xFF	; 255
    61d6:	bc 01       	movw	r22, r24
    61d8:	cd 01       	movw	r24, r26
    61da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    61de:	dc 01       	movw	r26, r24
    61e0:	cb 01       	movw	r24, r22
    61e2:	f8 01       	movw	r30, r16
    61e4:	91 83       	std	Z+1, r25	; 0x01
    61e6:	80 83       	st	Z, r24
    61e8:	1f c0       	rjmp	.+62     	; 0x6228 <key_pad+0x1000>
    61ea:	fe 01       	movw	r30, r28
    61ec:	ed 58       	subi	r30, 0x8D	; 141
    61ee:	ff 4f       	sbci	r31, 0xFF	; 255
    61f0:	88 ec       	ldi	r24, 0xC8	; 200
    61f2:	90 e0       	ldi	r25, 0x00	; 0
    61f4:	91 83       	std	Z+1, r25	; 0x01
    61f6:	80 83       	st	Z, r24
    61f8:	fe 01       	movw	r30, r28
    61fa:	ed 58       	subi	r30, 0x8D	; 141
    61fc:	ff 4f       	sbci	r31, 0xFF	; 255
    61fe:	80 81       	ld	r24, Z
    6200:	91 81       	ldd	r25, Z+1	; 0x01
    6202:	01 97       	sbiw	r24, 0x01	; 1
    6204:	f1 f7       	brne	.-4      	; 0x6202 <key_pad+0xfda>
    6206:	fe 01       	movw	r30, r28
    6208:	ed 58       	subi	r30, 0x8D	; 141
    620a:	ff 4f       	sbci	r31, 0xFF	; 255
    620c:	91 83       	std	Z+1, r25	; 0x01
    620e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6210:	de 01       	movw	r26, r28
    6212:	ab 58       	subi	r26, 0x8B	; 139
    6214:	bf 4f       	sbci	r27, 0xFF	; 255
    6216:	fe 01       	movw	r30, r28
    6218:	eb 58       	subi	r30, 0x8B	; 139
    621a:	ff 4f       	sbci	r31, 0xFF	; 255
    621c:	80 81       	ld	r24, Z
    621e:	91 81       	ldd	r25, Z+1	; 0x01
    6220:	01 97       	sbiw	r24, 0x01	; 1
    6222:	11 96       	adiw	r26, 0x01	; 1
    6224:	9c 93       	st	X, r25
    6226:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6228:	fe 01       	movw	r30, r28
    622a:	eb 58       	subi	r30, 0x8B	; 139
    622c:	ff 4f       	sbci	r31, 0xFF	; 255
    622e:	80 81       	ld	r24, Z
    6230:	91 81       	ldd	r25, Z+1	; 0x01
    6232:	00 97       	sbiw	r24, 0x00	; 0
    6234:	d1 f6       	brne	.-76     	; 0x61ea <key_pad+0xfc2>
    6236:	27 c0       	rjmp	.+78     	; 0x6286 <key_pad+0x105e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6238:	8e 01       	movw	r16, r28
    623a:	0b 58       	subi	r16, 0x8B	; 139
    623c:	1f 4f       	sbci	r17, 0xFF	; 255
    623e:	fe 01       	movw	r30, r28
    6240:	e9 58       	subi	r30, 0x89	; 137
    6242:	ff 4f       	sbci	r31, 0xFF	; 255
    6244:	60 81       	ld	r22, Z
    6246:	71 81       	ldd	r23, Z+1	; 0x01
    6248:	82 81       	ldd	r24, Z+2	; 0x02
    624a:	93 81       	ldd	r25, Z+3	; 0x03
    624c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6250:	dc 01       	movw	r26, r24
    6252:	cb 01       	movw	r24, r22
    6254:	f8 01       	movw	r30, r16
    6256:	91 83       	std	Z+1, r25	; 0x01
    6258:	80 83       	st	Z, r24
    625a:	de 01       	movw	r26, r28
    625c:	af 58       	subi	r26, 0x8F	; 143
    625e:	bf 4f       	sbci	r27, 0xFF	; 255
    6260:	fe 01       	movw	r30, r28
    6262:	eb 58       	subi	r30, 0x8B	; 139
    6264:	ff 4f       	sbci	r31, 0xFF	; 255
    6266:	80 81       	ld	r24, Z
    6268:	91 81       	ldd	r25, Z+1	; 0x01
    626a:	8d 93       	st	X+, r24
    626c:	9c 93       	st	X, r25
    626e:	fe 01       	movw	r30, r28
    6270:	ef 58       	subi	r30, 0x8F	; 143
    6272:	ff 4f       	sbci	r31, 0xFF	; 255
    6274:	80 81       	ld	r24, Z
    6276:	91 81       	ldd	r25, Z+1	; 0x01
    6278:	01 97       	sbiw	r24, 0x01	; 1
    627a:	f1 f7       	brne	.-4      	; 0x6278 <key_pad+0x1050>
    627c:	fe 01       	movw	r30, r28
    627e:	ef 58       	subi	r30, 0x8F	; 143
    6280:	ff 4f       	sbci	r31, 0xFF	; 255
    6282:	91 83       	std	Z+1, r25	; 0x01
    6284:	80 83       	st	Z, r24
			_delay_ms(200);
			LCD_Disply(3,0,1);
    6286:	83 e0       	ldi	r24, 0x03	; 3
    6288:	60 e0       	ldi	r22, 0x00	; 0
    628a:	41 e0       	ldi	r20, 0x01	; 1
    628c:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <LCD_Disply>
			LCD_Disply(0,0,2);
    6290:	80 e0       	ldi	r24, 0x00	; 0
    6292:	60 e0       	ldi	r22, 0x00	; 0
    6294:	42 e0       	ldi	r20, 0x02	; 2
    6296:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <LCD_Disply>
			LCD_Disply(3,0,7);
    629a:	83 e0       	ldi	r24, 0x03	; 3
    629c:	60 e0       	ldi	r22, 0x00	; 0
    629e:	47 e0       	ldi	r20, 0x07	; 7
    62a0:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <LCD_Disply>
			LCD_Disply(1,0,8);
    62a4:	81 e0       	ldi	r24, 0x01	; 1
    62a6:	60 e0       	ldi	r22, 0x00	; 0
    62a8:	48 e0       	ldi	r20, 0x08	; 8
    62aa:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <LCD_Disply>
			LCD_Disply(2,0,15);
    62ae:	82 e0       	ldi	r24, 0x02	; 2
    62b0:	60 e0       	ldi	r22, 0x00	; 0
    62b2:	4f e0       	ldi	r20, 0x0F	; 15
    62b4:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <LCD_Disply>
			//
			LCD_Disply(3,1,1);
    62b8:	83 e0       	ldi	r24, 0x03	; 3
    62ba:	61 e0       	ldi	r22, 0x01	; 1
    62bc:	41 e0       	ldi	r20, 0x01	; 1
    62be:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <LCD_Disply>
			LCD_Disply(0,1,2);
    62c2:	80 e0       	ldi	r24, 0x00	; 0
    62c4:	61 e0       	ldi	r22, 0x01	; 1
    62c6:	42 e0       	ldi	r20, 0x02	; 2
    62c8:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <LCD_Disply>
			LCD_Disply(3,1,7);
    62cc:	83 e0       	ldi	r24, 0x03	; 3
    62ce:	61 e0       	ldi	r22, 0x01	; 1
    62d0:	47 e0       	ldi	r20, 0x07	; 7
    62d2:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <LCD_Disply>
			LCD_Disply(1,1,8);
    62d6:	81 e0       	ldi	r24, 0x01	; 1
    62d8:	61 e0       	ldi	r22, 0x01	; 1
    62da:	48 e0       	ldi	r20, 0x08	; 8
    62dc:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <LCD_Disply>
			LCD_Disply(2,1,15);
    62e0:	82 e0       	ldi	r24, 0x02	; 2
    62e2:	61 e0       	ldi	r22, 0x01	; 1
    62e4:	4f e0       	ldi	r20, 0x0F	; 15
    62e6:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <LCD_Disply>
    62ea:	fe 01       	movw	r30, r28
    62ec:	e3 59       	subi	r30, 0x93	; 147
    62ee:	ff 4f       	sbci	r31, 0xFF	; 255
    62f0:	80 e0       	ldi	r24, 0x00	; 0
    62f2:	90 e0       	ldi	r25, 0x00	; 0
    62f4:	a8 e4       	ldi	r26, 0x48	; 72
    62f6:	b3 e4       	ldi	r27, 0x43	; 67
    62f8:	80 83       	st	Z, r24
    62fa:	91 83       	std	Z+1, r25	; 0x01
    62fc:	a2 83       	std	Z+2, r26	; 0x02
    62fe:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6300:	8e 01       	movw	r16, r28
    6302:	07 59       	subi	r16, 0x97	; 151
    6304:	1f 4f       	sbci	r17, 0xFF	; 255
    6306:	fe 01       	movw	r30, r28
    6308:	e3 59       	subi	r30, 0x93	; 147
    630a:	ff 4f       	sbci	r31, 0xFF	; 255
    630c:	60 81       	ld	r22, Z
    630e:	71 81       	ldd	r23, Z+1	; 0x01
    6310:	82 81       	ldd	r24, Z+2	; 0x02
    6312:	93 81       	ldd	r25, Z+3	; 0x03
    6314:	20 e0       	ldi	r18, 0x00	; 0
    6316:	30 e0       	ldi	r19, 0x00	; 0
    6318:	4a ef       	ldi	r20, 0xFA	; 250
    631a:	54 e4       	ldi	r21, 0x44	; 68
    631c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6320:	dc 01       	movw	r26, r24
    6322:	cb 01       	movw	r24, r22
    6324:	f8 01       	movw	r30, r16
    6326:	80 83       	st	Z, r24
    6328:	91 83       	std	Z+1, r25	; 0x01
    632a:	a2 83       	std	Z+2, r26	; 0x02
    632c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    632e:	fe 01       	movw	r30, r28
    6330:	e7 59       	subi	r30, 0x97	; 151
    6332:	ff 4f       	sbci	r31, 0xFF	; 255
    6334:	60 81       	ld	r22, Z
    6336:	71 81       	ldd	r23, Z+1	; 0x01
    6338:	82 81       	ldd	r24, Z+2	; 0x02
    633a:	93 81       	ldd	r25, Z+3	; 0x03
    633c:	20 e0       	ldi	r18, 0x00	; 0
    633e:	30 e0       	ldi	r19, 0x00	; 0
    6340:	40 e8       	ldi	r20, 0x80	; 128
    6342:	5f e3       	ldi	r21, 0x3F	; 63
    6344:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    6348:	88 23       	and	r24, r24
    634a:	44 f4       	brge	.+16     	; 0x635c <key_pad+0x1134>
		__ticks = 1;
    634c:	fe 01       	movw	r30, r28
    634e:	e9 59       	subi	r30, 0x99	; 153
    6350:	ff 4f       	sbci	r31, 0xFF	; 255
    6352:	81 e0       	ldi	r24, 0x01	; 1
    6354:	90 e0       	ldi	r25, 0x00	; 0
    6356:	91 83       	std	Z+1, r25	; 0x01
    6358:	80 83       	st	Z, r24
    635a:	64 c0       	rjmp	.+200    	; 0x6424 <key_pad+0x11fc>
	else if (__tmp > 65535)
    635c:	fe 01       	movw	r30, r28
    635e:	e7 59       	subi	r30, 0x97	; 151
    6360:	ff 4f       	sbci	r31, 0xFF	; 255
    6362:	60 81       	ld	r22, Z
    6364:	71 81       	ldd	r23, Z+1	; 0x01
    6366:	82 81       	ldd	r24, Z+2	; 0x02
    6368:	93 81       	ldd	r25, Z+3	; 0x03
    636a:	20 e0       	ldi	r18, 0x00	; 0
    636c:	3f ef       	ldi	r19, 0xFF	; 255
    636e:	4f e7       	ldi	r20, 0x7F	; 127
    6370:	57 e4       	ldi	r21, 0x47	; 71
    6372:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    6376:	18 16       	cp	r1, r24
    6378:	0c f0       	brlt	.+2      	; 0x637c <key_pad+0x1154>
    637a:	43 c0       	rjmp	.+134    	; 0x6402 <key_pad+0x11da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    637c:	fe 01       	movw	r30, r28
    637e:	e3 59       	subi	r30, 0x93	; 147
    6380:	ff 4f       	sbci	r31, 0xFF	; 255
    6382:	60 81       	ld	r22, Z
    6384:	71 81       	ldd	r23, Z+1	; 0x01
    6386:	82 81       	ldd	r24, Z+2	; 0x02
    6388:	93 81       	ldd	r25, Z+3	; 0x03
    638a:	20 e0       	ldi	r18, 0x00	; 0
    638c:	30 e0       	ldi	r19, 0x00	; 0
    638e:	40 e2       	ldi	r20, 0x20	; 32
    6390:	51 e4       	ldi	r21, 0x41	; 65
    6392:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6396:	dc 01       	movw	r26, r24
    6398:	cb 01       	movw	r24, r22
    639a:	8e 01       	movw	r16, r28
    639c:	09 59       	subi	r16, 0x99	; 153
    639e:	1f 4f       	sbci	r17, 0xFF	; 255
    63a0:	bc 01       	movw	r22, r24
    63a2:	cd 01       	movw	r24, r26
    63a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    63a8:	dc 01       	movw	r26, r24
    63aa:	cb 01       	movw	r24, r22
    63ac:	f8 01       	movw	r30, r16
    63ae:	91 83       	std	Z+1, r25	; 0x01
    63b0:	80 83       	st	Z, r24
    63b2:	1f c0       	rjmp	.+62     	; 0x63f2 <key_pad+0x11ca>
    63b4:	fe 01       	movw	r30, r28
    63b6:	eb 59       	subi	r30, 0x9B	; 155
    63b8:	ff 4f       	sbci	r31, 0xFF	; 255
    63ba:	88 ec       	ldi	r24, 0xC8	; 200
    63bc:	90 e0       	ldi	r25, 0x00	; 0
    63be:	91 83       	std	Z+1, r25	; 0x01
    63c0:	80 83       	st	Z, r24
    63c2:	fe 01       	movw	r30, r28
    63c4:	eb 59       	subi	r30, 0x9B	; 155
    63c6:	ff 4f       	sbci	r31, 0xFF	; 255
    63c8:	80 81       	ld	r24, Z
    63ca:	91 81       	ldd	r25, Z+1	; 0x01
    63cc:	01 97       	sbiw	r24, 0x01	; 1
    63ce:	f1 f7       	brne	.-4      	; 0x63cc <key_pad+0x11a4>
    63d0:	fe 01       	movw	r30, r28
    63d2:	eb 59       	subi	r30, 0x9B	; 155
    63d4:	ff 4f       	sbci	r31, 0xFF	; 255
    63d6:	91 83       	std	Z+1, r25	; 0x01
    63d8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    63da:	de 01       	movw	r26, r28
    63dc:	a9 59       	subi	r26, 0x99	; 153
    63de:	bf 4f       	sbci	r27, 0xFF	; 255
    63e0:	fe 01       	movw	r30, r28
    63e2:	e9 59       	subi	r30, 0x99	; 153
    63e4:	ff 4f       	sbci	r31, 0xFF	; 255
    63e6:	80 81       	ld	r24, Z
    63e8:	91 81       	ldd	r25, Z+1	; 0x01
    63ea:	01 97       	sbiw	r24, 0x01	; 1
    63ec:	11 96       	adiw	r26, 0x01	; 1
    63ee:	9c 93       	st	X, r25
    63f0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    63f2:	fe 01       	movw	r30, r28
    63f4:	e9 59       	subi	r30, 0x99	; 153
    63f6:	ff 4f       	sbci	r31, 0xFF	; 255
    63f8:	80 81       	ld	r24, Z
    63fa:	91 81       	ldd	r25, Z+1	; 0x01
    63fc:	00 97       	sbiw	r24, 0x00	; 0
    63fe:	d1 f6       	brne	.-76     	; 0x63b4 <key_pad+0x118c>
    6400:	27 c0       	rjmp	.+78     	; 0x6450 <key_pad+0x1228>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6402:	8e 01       	movw	r16, r28
    6404:	09 59       	subi	r16, 0x99	; 153
    6406:	1f 4f       	sbci	r17, 0xFF	; 255
    6408:	fe 01       	movw	r30, r28
    640a:	e7 59       	subi	r30, 0x97	; 151
    640c:	ff 4f       	sbci	r31, 0xFF	; 255
    640e:	60 81       	ld	r22, Z
    6410:	71 81       	ldd	r23, Z+1	; 0x01
    6412:	82 81       	ldd	r24, Z+2	; 0x02
    6414:	93 81       	ldd	r25, Z+3	; 0x03
    6416:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    641a:	dc 01       	movw	r26, r24
    641c:	cb 01       	movw	r24, r22
    641e:	f8 01       	movw	r30, r16
    6420:	91 83       	std	Z+1, r25	; 0x01
    6422:	80 83       	st	Z, r24
    6424:	de 01       	movw	r26, r28
    6426:	ad 59       	subi	r26, 0x9D	; 157
    6428:	bf 4f       	sbci	r27, 0xFF	; 255
    642a:	fe 01       	movw	r30, r28
    642c:	e9 59       	subi	r30, 0x99	; 153
    642e:	ff 4f       	sbci	r31, 0xFF	; 255
    6430:	80 81       	ld	r24, Z
    6432:	91 81       	ldd	r25, Z+1	; 0x01
    6434:	8d 93       	st	X+, r24
    6436:	9c 93       	st	X, r25
    6438:	fe 01       	movw	r30, r28
    643a:	ed 59       	subi	r30, 0x9D	; 157
    643c:	ff 4f       	sbci	r31, 0xFF	; 255
    643e:	80 81       	ld	r24, Z
    6440:	91 81       	ldd	r25, Z+1	; 0x01
    6442:	01 97       	sbiw	r24, 0x01	; 1
    6444:	f1 f7       	brne	.-4      	; 0x6442 <key_pad+0x121a>
    6446:	fe 01       	movw	r30, r28
    6448:	ed 59       	subi	r30, 0x9D	; 157
    644a:	ff 4f       	sbci	r31, 0xFF	; 255
    644c:	91 83       	std	Z+1, r25	; 0x01
    644e:	80 83       	st	Z, r24
			//
			_delay_ms(200);
			LCD_Disply(3,0,1);
    6450:	83 e0       	ldi	r24, 0x03	; 3
    6452:	60 e0       	ldi	r22, 0x00	; 0
    6454:	41 e0       	ldi	r20, 0x01	; 1
    6456:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <LCD_Disply>
			LCD_Disply(0,0,2);
    645a:	80 e0       	ldi	r24, 0x00	; 0
    645c:	60 e0       	ldi	r22, 0x00	; 0
    645e:	42 e0       	ldi	r20, 0x02	; 2
    6460:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <LCD_Disply>
			LCD_Disply(3,0,8);
    6464:	83 e0       	ldi	r24, 0x03	; 3
    6466:	60 e0       	ldi	r22, 0x00	; 0
    6468:	48 e0       	ldi	r20, 0x08	; 8
    646a:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <LCD_Disply>
			LCD_Disply(1,0,9);
    646e:	81 e0       	ldi	r24, 0x01	; 1
    6470:	60 e0       	ldi	r22, 0x00	; 0
    6472:	49 e0       	ldi	r20, 0x09	; 9
    6474:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <LCD_Disply>
			LCD_Disply(2,0,15);
    6478:	82 e0       	ldi	r24, 0x02	; 2
    647a:	60 e0       	ldi	r22, 0x00	; 0
    647c:	4f e0       	ldi	r20, 0x0F	; 15
    647e:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <LCD_Disply>
			LCD_Disply(3,1,1);
    6482:	83 e0       	ldi	r24, 0x03	; 3
    6484:	61 e0       	ldi	r22, 0x01	; 1
    6486:	41 e0       	ldi	r20, 0x01	; 1
    6488:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <LCD_Disply>
			LCD_Disply(0,1,2);
    648c:	80 e0       	ldi	r24, 0x00	; 0
    648e:	61 e0       	ldi	r22, 0x01	; 1
    6490:	42 e0       	ldi	r20, 0x02	; 2
    6492:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <LCD_Disply>
			LCD_Disply(3,1,8);
    6496:	83 e0       	ldi	r24, 0x03	; 3
    6498:	61 e0       	ldi	r22, 0x01	; 1
    649a:	48 e0       	ldi	r20, 0x08	; 8
    649c:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <LCD_Disply>
			LCD_Disply(1,1,9);
    64a0:	81 e0       	ldi	r24, 0x01	; 1
    64a2:	61 e0       	ldi	r22, 0x01	; 1
    64a4:	49 e0       	ldi	r20, 0x09	; 9
    64a6:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <LCD_Disply>
			LCD_Disply(2,1,15);
    64aa:	82 e0       	ldi	r24, 0x02	; 2
    64ac:	61 e0       	ldi	r22, 0x01	; 1
    64ae:	4f e0       	ldi	r20, 0x0F	; 15
    64b0:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <LCD_Disply>
    64b4:	fe 01       	movw	r30, r28
    64b6:	e1 5a       	subi	r30, 0xA1	; 161
    64b8:	ff 4f       	sbci	r31, 0xFF	; 255
    64ba:	80 e0       	ldi	r24, 0x00	; 0
    64bc:	90 e0       	ldi	r25, 0x00	; 0
    64be:	a8 e4       	ldi	r26, 0x48	; 72
    64c0:	b3 e4       	ldi	r27, 0x43	; 67
    64c2:	80 83       	st	Z, r24
    64c4:	91 83       	std	Z+1, r25	; 0x01
    64c6:	a2 83       	std	Z+2, r26	; 0x02
    64c8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    64ca:	8e 01       	movw	r16, r28
    64cc:	05 5a       	subi	r16, 0xA5	; 165
    64ce:	1f 4f       	sbci	r17, 0xFF	; 255
    64d0:	fe 01       	movw	r30, r28
    64d2:	e1 5a       	subi	r30, 0xA1	; 161
    64d4:	ff 4f       	sbci	r31, 0xFF	; 255
    64d6:	60 81       	ld	r22, Z
    64d8:	71 81       	ldd	r23, Z+1	; 0x01
    64da:	82 81       	ldd	r24, Z+2	; 0x02
    64dc:	93 81       	ldd	r25, Z+3	; 0x03
    64de:	20 e0       	ldi	r18, 0x00	; 0
    64e0:	30 e0       	ldi	r19, 0x00	; 0
    64e2:	4a ef       	ldi	r20, 0xFA	; 250
    64e4:	54 e4       	ldi	r21, 0x44	; 68
    64e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    64ea:	dc 01       	movw	r26, r24
    64ec:	cb 01       	movw	r24, r22
    64ee:	f8 01       	movw	r30, r16
    64f0:	80 83       	st	Z, r24
    64f2:	91 83       	std	Z+1, r25	; 0x01
    64f4:	a2 83       	std	Z+2, r26	; 0x02
    64f6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    64f8:	fe 01       	movw	r30, r28
    64fa:	e5 5a       	subi	r30, 0xA5	; 165
    64fc:	ff 4f       	sbci	r31, 0xFF	; 255
    64fe:	60 81       	ld	r22, Z
    6500:	71 81       	ldd	r23, Z+1	; 0x01
    6502:	82 81       	ldd	r24, Z+2	; 0x02
    6504:	93 81       	ldd	r25, Z+3	; 0x03
    6506:	20 e0       	ldi	r18, 0x00	; 0
    6508:	30 e0       	ldi	r19, 0x00	; 0
    650a:	40 e8       	ldi	r20, 0x80	; 128
    650c:	5f e3       	ldi	r21, 0x3F	; 63
    650e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    6512:	88 23       	and	r24, r24
    6514:	44 f4       	brge	.+16     	; 0x6526 <key_pad+0x12fe>
		__ticks = 1;
    6516:	fe 01       	movw	r30, r28
    6518:	e7 5a       	subi	r30, 0xA7	; 167
    651a:	ff 4f       	sbci	r31, 0xFF	; 255
    651c:	81 e0       	ldi	r24, 0x01	; 1
    651e:	90 e0       	ldi	r25, 0x00	; 0
    6520:	91 83       	std	Z+1, r25	; 0x01
    6522:	80 83       	st	Z, r24
    6524:	64 c0       	rjmp	.+200    	; 0x65ee <key_pad+0x13c6>
	else if (__tmp > 65535)
    6526:	fe 01       	movw	r30, r28
    6528:	e5 5a       	subi	r30, 0xA5	; 165
    652a:	ff 4f       	sbci	r31, 0xFF	; 255
    652c:	60 81       	ld	r22, Z
    652e:	71 81       	ldd	r23, Z+1	; 0x01
    6530:	82 81       	ldd	r24, Z+2	; 0x02
    6532:	93 81       	ldd	r25, Z+3	; 0x03
    6534:	20 e0       	ldi	r18, 0x00	; 0
    6536:	3f ef       	ldi	r19, 0xFF	; 255
    6538:	4f e7       	ldi	r20, 0x7F	; 127
    653a:	57 e4       	ldi	r21, 0x47	; 71
    653c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    6540:	18 16       	cp	r1, r24
    6542:	0c f0       	brlt	.+2      	; 0x6546 <key_pad+0x131e>
    6544:	43 c0       	rjmp	.+134    	; 0x65cc <key_pad+0x13a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6546:	fe 01       	movw	r30, r28
    6548:	e1 5a       	subi	r30, 0xA1	; 161
    654a:	ff 4f       	sbci	r31, 0xFF	; 255
    654c:	60 81       	ld	r22, Z
    654e:	71 81       	ldd	r23, Z+1	; 0x01
    6550:	82 81       	ldd	r24, Z+2	; 0x02
    6552:	93 81       	ldd	r25, Z+3	; 0x03
    6554:	20 e0       	ldi	r18, 0x00	; 0
    6556:	30 e0       	ldi	r19, 0x00	; 0
    6558:	40 e2       	ldi	r20, 0x20	; 32
    655a:	51 e4       	ldi	r21, 0x41	; 65
    655c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6560:	dc 01       	movw	r26, r24
    6562:	cb 01       	movw	r24, r22
    6564:	8e 01       	movw	r16, r28
    6566:	07 5a       	subi	r16, 0xA7	; 167
    6568:	1f 4f       	sbci	r17, 0xFF	; 255
    656a:	bc 01       	movw	r22, r24
    656c:	cd 01       	movw	r24, r26
    656e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6572:	dc 01       	movw	r26, r24
    6574:	cb 01       	movw	r24, r22
    6576:	f8 01       	movw	r30, r16
    6578:	91 83       	std	Z+1, r25	; 0x01
    657a:	80 83       	st	Z, r24
    657c:	1f c0       	rjmp	.+62     	; 0x65bc <key_pad+0x1394>
    657e:	fe 01       	movw	r30, r28
    6580:	e9 5a       	subi	r30, 0xA9	; 169
    6582:	ff 4f       	sbci	r31, 0xFF	; 255
    6584:	88 ec       	ldi	r24, 0xC8	; 200
    6586:	90 e0       	ldi	r25, 0x00	; 0
    6588:	91 83       	std	Z+1, r25	; 0x01
    658a:	80 83       	st	Z, r24
    658c:	fe 01       	movw	r30, r28
    658e:	e9 5a       	subi	r30, 0xA9	; 169
    6590:	ff 4f       	sbci	r31, 0xFF	; 255
    6592:	80 81       	ld	r24, Z
    6594:	91 81       	ldd	r25, Z+1	; 0x01
    6596:	01 97       	sbiw	r24, 0x01	; 1
    6598:	f1 f7       	brne	.-4      	; 0x6596 <key_pad+0x136e>
    659a:	fe 01       	movw	r30, r28
    659c:	e9 5a       	subi	r30, 0xA9	; 169
    659e:	ff 4f       	sbci	r31, 0xFF	; 255
    65a0:	91 83       	std	Z+1, r25	; 0x01
    65a2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    65a4:	de 01       	movw	r26, r28
    65a6:	a7 5a       	subi	r26, 0xA7	; 167
    65a8:	bf 4f       	sbci	r27, 0xFF	; 255
    65aa:	fe 01       	movw	r30, r28
    65ac:	e7 5a       	subi	r30, 0xA7	; 167
    65ae:	ff 4f       	sbci	r31, 0xFF	; 255
    65b0:	80 81       	ld	r24, Z
    65b2:	91 81       	ldd	r25, Z+1	; 0x01
    65b4:	01 97       	sbiw	r24, 0x01	; 1
    65b6:	11 96       	adiw	r26, 0x01	; 1
    65b8:	9c 93       	st	X, r25
    65ba:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    65bc:	fe 01       	movw	r30, r28
    65be:	e7 5a       	subi	r30, 0xA7	; 167
    65c0:	ff 4f       	sbci	r31, 0xFF	; 255
    65c2:	80 81       	ld	r24, Z
    65c4:	91 81       	ldd	r25, Z+1	; 0x01
    65c6:	00 97       	sbiw	r24, 0x00	; 0
    65c8:	d1 f6       	brne	.-76     	; 0x657e <key_pad+0x1356>
    65ca:	27 c0       	rjmp	.+78     	; 0x661a <key_pad+0x13f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    65cc:	8e 01       	movw	r16, r28
    65ce:	07 5a       	subi	r16, 0xA7	; 167
    65d0:	1f 4f       	sbci	r17, 0xFF	; 255
    65d2:	fe 01       	movw	r30, r28
    65d4:	e5 5a       	subi	r30, 0xA5	; 165
    65d6:	ff 4f       	sbci	r31, 0xFF	; 255
    65d8:	60 81       	ld	r22, Z
    65da:	71 81       	ldd	r23, Z+1	; 0x01
    65dc:	82 81       	ldd	r24, Z+2	; 0x02
    65de:	93 81       	ldd	r25, Z+3	; 0x03
    65e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    65e4:	dc 01       	movw	r26, r24
    65e6:	cb 01       	movw	r24, r22
    65e8:	f8 01       	movw	r30, r16
    65ea:	91 83       	std	Z+1, r25	; 0x01
    65ec:	80 83       	st	Z, r24
    65ee:	de 01       	movw	r26, r28
    65f0:	ab 5a       	subi	r26, 0xAB	; 171
    65f2:	bf 4f       	sbci	r27, 0xFF	; 255
    65f4:	fe 01       	movw	r30, r28
    65f6:	e7 5a       	subi	r30, 0xA7	; 167
    65f8:	ff 4f       	sbci	r31, 0xFF	; 255
    65fa:	80 81       	ld	r24, Z
    65fc:	91 81       	ldd	r25, Z+1	; 0x01
    65fe:	8d 93       	st	X+, r24
    6600:	9c 93       	st	X, r25
    6602:	fe 01       	movw	r30, r28
    6604:	eb 5a       	subi	r30, 0xAB	; 171
    6606:	ff 4f       	sbci	r31, 0xFF	; 255
    6608:	80 81       	ld	r24, Z
    660a:	91 81       	ldd	r25, Z+1	; 0x01
    660c:	01 97       	sbiw	r24, 0x01	; 1
    660e:	f1 f7       	brne	.-4      	; 0x660c <key_pad+0x13e4>
    6610:	fe 01       	movw	r30, r28
    6612:	eb 5a       	subi	r30, 0xAB	; 171
    6614:	ff 4f       	sbci	r31, 0xFF	; 255
    6616:	91 83       	std	Z+1, r25	; 0x01
    6618:	80 83       	st	Z, r24
			_delay_ms(200);
			LCD_Disply(3,0,1);
    661a:	83 e0       	ldi	r24, 0x03	; 3
    661c:	60 e0       	ldi	r22, 0x00	; 0
    661e:	41 e0       	ldi	r20, 0x01	; 1
    6620:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <LCD_Disply>
			LCD_Disply(0,0,2);
    6624:	80 e0       	ldi	r24, 0x00	; 0
    6626:	60 e0       	ldi	r22, 0x00	; 0
    6628:	42 e0       	ldi	r20, 0x02	; 2
    662a:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <LCD_Disply>
			LCD_Disply(3,0,9);
    662e:	83 e0       	ldi	r24, 0x03	; 3
    6630:	60 e0       	ldi	r22, 0x00	; 0
    6632:	49 e0       	ldi	r20, 0x09	; 9
    6634:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <LCD_Disply>
			LCD_Disply(1,0,10);
    6638:	81 e0       	ldi	r24, 0x01	; 1
    663a:	60 e0       	ldi	r22, 0x00	; 0
    663c:	4a e0       	ldi	r20, 0x0A	; 10
    663e:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <LCD_Disply>
			LCD_Disply(2,0,15);
    6642:	82 e0       	ldi	r24, 0x02	; 2
    6644:	60 e0       	ldi	r22, 0x00	; 0
    6646:	4f e0       	ldi	r20, 0x0F	; 15
    6648:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <LCD_Disply>
			LCD_Disply(3,1,1);
    664c:	83 e0       	ldi	r24, 0x03	; 3
    664e:	61 e0       	ldi	r22, 0x01	; 1
    6650:	41 e0       	ldi	r20, 0x01	; 1
    6652:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <LCD_Disply>
			LCD_Disply(0,1,2);
    6656:	80 e0       	ldi	r24, 0x00	; 0
    6658:	61 e0       	ldi	r22, 0x01	; 1
    665a:	42 e0       	ldi	r20, 0x02	; 2
    665c:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <LCD_Disply>
			LCD_Disply(3,1,9);
    6660:	83 e0       	ldi	r24, 0x03	; 3
    6662:	61 e0       	ldi	r22, 0x01	; 1
    6664:	49 e0       	ldi	r20, 0x09	; 9
    6666:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <LCD_Disply>
			LCD_Disply(1,1,10);
    666a:	81 e0       	ldi	r24, 0x01	; 1
    666c:	61 e0       	ldi	r22, 0x01	; 1
    666e:	4a e0       	ldi	r20, 0x0A	; 10
    6670:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <LCD_Disply>
			LCD_Disply(2,1,15);
    6674:	82 e0       	ldi	r24, 0x02	; 2
    6676:	61 e0       	ldi	r22, 0x01	; 1
    6678:	4f e0       	ldi	r20, 0x0F	; 15
    667a:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <LCD_Disply>
    667e:	fe 01       	movw	r30, r28
    6680:	ef 5a       	subi	r30, 0xAF	; 175
    6682:	ff 4f       	sbci	r31, 0xFF	; 255
    6684:	80 e0       	ldi	r24, 0x00	; 0
    6686:	90 e0       	ldi	r25, 0x00	; 0
    6688:	a8 e4       	ldi	r26, 0x48	; 72
    668a:	b3 e4       	ldi	r27, 0x43	; 67
    668c:	80 83       	st	Z, r24
    668e:	91 83       	std	Z+1, r25	; 0x01
    6690:	a2 83       	std	Z+2, r26	; 0x02
    6692:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6694:	8e 01       	movw	r16, r28
    6696:	03 5b       	subi	r16, 0xB3	; 179
    6698:	1f 4f       	sbci	r17, 0xFF	; 255
    669a:	fe 01       	movw	r30, r28
    669c:	ef 5a       	subi	r30, 0xAF	; 175
    669e:	ff 4f       	sbci	r31, 0xFF	; 255
    66a0:	60 81       	ld	r22, Z
    66a2:	71 81       	ldd	r23, Z+1	; 0x01
    66a4:	82 81       	ldd	r24, Z+2	; 0x02
    66a6:	93 81       	ldd	r25, Z+3	; 0x03
    66a8:	20 e0       	ldi	r18, 0x00	; 0
    66aa:	30 e0       	ldi	r19, 0x00	; 0
    66ac:	4a ef       	ldi	r20, 0xFA	; 250
    66ae:	54 e4       	ldi	r21, 0x44	; 68
    66b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    66b4:	dc 01       	movw	r26, r24
    66b6:	cb 01       	movw	r24, r22
    66b8:	f8 01       	movw	r30, r16
    66ba:	80 83       	st	Z, r24
    66bc:	91 83       	std	Z+1, r25	; 0x01
    66be:	a2 83       	std	Z+2, r26	; 0x02
    66c0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    66c2:	fe 01       	movw	r30, r28
    66c4:	e3 5b       	subi	r30, 0xB3	; 179
    66c6:	ff 4f       	sbci	r31, 0xFF	; 255
    66c8:	60 81       	ld	r22, Z
    66ca:	71 81       	ldd	r23, Z+1	; 0x01
    66cc:	82 81       	ldd	r24, Z+2	; 0x02
    66ce:	93 81       	ldd	r25, Z+3	; 0x03
    66d0:	20 e0       	ldi	r18, 0x00	; 0
    66d2:	30 e0       	ldi	r19, 0x00	; 0
    66d4:	40 e8       	ldi	r20, 0x80	; 128
    66d6:	5f e3       	ldi	r21, 0x3F	; 63
    66d8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    66dc:	88 23       	and	r24, r24
    66de:	44 f4       	brge	.+16     	; 0x66f0 <key_pad+0x14c8>
		__ticks = 1;
    66e0:	fe 01       	movw	r30, r28
    66e2:	e5 5b       	subi	r30, 0xB5	; 181
    66e4:	ff 4f       	sbci	r31, 0xFF	; 255
    66e6:	81 e0       	ldi	r24, 0x01	; 1
    66e8:	90 e0       	ldi	r25, 0x00	; 0
    66ea:	91 83       	std	Z+1, r25	; 0x01
    66ec:	80 83       	st	Z, r24
    66ee:	64 c0       	rjmp	.+200    	; 0x67b8 <key_pad+0x1590>
	else if (__tmp > 65535)
    66f0:	fe 01       	movw	r30, r28
    66f2:	e3 5b       	subi	r30, 0xB3	; 179
    66f4:	ff 4f       	sbci	r31, 0xFF	; 255
    66f6:	60 81       	ld	r22, Z
    66f8:	71 81       	ldd	r23, Z+1	; 0x01
    66fa:	82 81       	ldd	r24, Z+2	; 0x02
    66fc:	93 81       	ldd	r25, Z+3	; 0x03
    66fe:	20 e0       	ldi	r18, 0x00	; 0
    6700:	3f ef       	ldi	r19, 0xFF	; 255
    6702:	4f e7       	ldi	r20, 0x7F	; 127
    6704:	57 e4       	ldi	r21, 0x47	; 71
    6706:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    670a:	18 16       	cp	r1, r24
    670c:	0c f0       	brlt	.+2      	; 0x6710 <key_pad+0x14e8>
    670e:	43 c0       	rjmp	.+134    	; 0x6796 <key_pad+0x156e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6710:	fe 01       	movw	r30, r28
    6712:	ef 5a       	subi	r30, 0xAF	; 175
    6714:	ff 4f       	sbci	r31, 0xFF	; 255
    6716:	60 81       	ld	r22, Z
    6718:	71 81       	ldd	r23, Z+1	; 0x01
    671a:	82 81       	ldd	r24, Z+2	; 0x02
    671c:	93 81       	ldd	r25, Z+3	; 0x03
    671e:	20 e0       	ldi	r18, 0x00	; 0
    6720:	30 e0       	ldi	r19, 0x00	; 0
    6722:	40 e2       	ldi	r20, 0x20	; 32
    6724:	51 e4       	ldi	r21, 0x41	; 65
    6726:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    672a:	dc 01       	movw	r26, r24
    672c:	cb 01       	movw	r24, r22
    672e:	8e 01       	movw	r16, r28
    6730:	05 5b       	subi	r16, 0xB5	; 181
    6732:	1f 4f       	sbci	r17, 0xFF	; 255
    6734:	bc 01       	movw	r22, r24
    6736:	cd 01       	movw	r24, r26
    6738:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    673c:	dc 01       	movw	r26, r24
    673e:	cb 01       	movw	r24, r22
    6740:	f8 01       	movw	r30, r16
    6742:	91 83       	std	Z+1, r25	; 0x01
    6744:	80 83       	st	Z, r24
    6746:	1f c0       	rjmp	.+62     	; 0x6786 <key_pad+0x155e>
    6748:	fe 01       	movw	r30, r28
    674a:	e7 5b       	subi	r30, 0xB7	; 183
    674c:	ff 4f       	sbci	r31, 0xFF	; 255
    674e:	88 ec       	ldi	r24, 0xC8	; 200
    6750:	90 e0       	ldi	r25, 0x00	; 0
    6752:	91 83       	std	Z+1, r25	; 0x01
    6754:	80 83       	st	Z, r24
    6756:	fe 01       	movw	r30, r28
    6758:	e7 5b       	subi	r30, 0xB7	; 183
    675a:	ff 4f       	sbci	r31, 0xFF	; 255
    675c:	80 81       	ld	r24, Z
    675e:	91 81       	ldd	r25, Z+1	; 0x01
    6760:	01 97       	sbiw	r24, 0x01	; 1
    6762:	f1 f7       	brne	.-4      	; 0x6760 <key_pad+0x1538>
    6764:	fe 01       	movw	r30, r28
    6766:	e7 5b       	subi	r30, 0xB7	; 183
    6768:	ff 4f       	sbci	r31, 0xFF	; 255
    676a:	91 83       	std	Z+1, r25	; 0x01
    676c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    676e:	de 01       	movw	r26, r28
    6770:	a5 5b       	subi	r26, 0xB5	; 181
    6772:	bf 4f       	sbci	r27, 0xFF	; 255
    6774:	fe 01       	movw	r30, r28
    6776:	e5 5b       	subi	r30, 0xB5	; 181
    6778:	ff 4f       	sbci	r31, 0xFF	; 255
    677a:	80 81       	ld	r24, Z
    677c:	91 81       	ldd	r25, Z+1	; 0x01
    677e:	01 97       	sbiw	r24, 0x01	; 1
    6780:	11 96       	adiw	r26, 0x01	; 1
    6782:	9c 93       	st	X, r25
    6784:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6786:	fe 01       	movw	r30, r28
    6788:	e5 5b       	subi	r30, 0xB5	; 181
    678a:	ff 4f       	sbci	r31, 0xFF	; 255
    678c:	80 81       	ld	r24, Z
    678e:	91 81       	ldd	r25, Z+1	; 0x01
    6790:	00 97       	sbiw	r24, 0x00	; 0
    6792:	d1 f6       	brne	.-76     	; 0x6748 <key_pad+0x1520>
    6794:	27 c0       	rjmp	.+78     	; 0x67e4 <key_pad+0x15bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6796:	8e 01       	movw	r16, r28
    6798:	05 5b       	subi	r16, 0xB5	; 181
    679a:	1f 4f       	sbci	r17, 0xFF	; 255
    679c:	fe 01       	movw	r30, r28
    679e:	e3 5b       	subi	r30, 0xB3	; 179
    67a0:	ff 4f       	sbci	r31, 0xFF	; 255
    67a2:	60 81       	ld	r22, Z
    67a4:	71 81       	ldd	r23, Z+1	; 0x01
    67a6:	82 81       	ldd	r24, Z+2	; 0x02
    67a8:	93 81       	ldd	r25, Z+3	; 0x03
    67aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    67ae:	dc 01       	movw	r26, r24
    67b0:	cb 01       	movw	r24, r22
    67b2:	f8 01       	movw	r30, r16
    67b4:	91 83       	std	Z+1, r25	; 0x01
    67b6:	80 83       	st	Z, r24
    67b8:	de 01       	movw	r26, r28
    67ba:	a9 5b       	subi	r26, 0xB9	; 185
    67bc:	bf 4f       	sbci	r27, 0xFF	; 255
    67be:	fe 01       	movw	r30, r28
    67c0:	e5 5b       	subi	r30, 0xB5	; 181
    67c2:	ff 4f       	sbci	r31, 0xFF	; 255
    67c4:	80 81       	ld	r24, Z
    67c6:	91 81       	ldd	r25, Z+1	; 0x01
    67c8:	8d 93       	st	X+, r24
    67ca:	9c 93       	st	X, r25
    67cc:	fe 01       	movw	r30, r28
    67ce:	e9 5b       	subi	r30, 0xB9	; 185
    67d0:	ff 4f       	sbci	r31, 0xFF	; 255
    67d2:	80 81       	ld	r24, Z
    67d4:	91 81       	ldd	r25, Z+1	; 0x01
    67d6:	01 97       	sbiw	r24, 0x01	; 1
    67d8:	f1 f7       	brne	.-4      	; 0x67d6 <key_pad+0x15ae>
    67da:	fe 01       	movw	r30, r28
    67dc:	e9 5b       	subi	r30, 0xB9	; 185
    67de:	ff 4f       	sbci	r31, 0xFF	; 255
    67e0:	91 83       	std	Z+1, r25	; 0x01
    67e2:	80 83       	st	Z, r24
			_delay_ms(200);
			LCD_Disply(3,0,1);
    67e4:	83 e0       	ldi	r24, 0x03	; 3
    67e6:	60 e0       	ldi	r22, 0x00	; 0
    67e8:	41 e0       	ldi	r20, 0x01	; 1
    67ea:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <LCD_Disply>
			LCD_Disply(0,0,2);
    67ee:	80 e0       	ldi	r24, 0x00	; 0
    67f0:	60 e0       	ldi	r22, 0x00	; 0
    67f2:	42 e0       	ldi	r20, 0x02	; 2
    67f4:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <LCD_Disply>
			LCD_Disply(3,0,10);
    67f8:	83 e0       	ldi	r24, 0x03	; 3
    67fa:	60 e0       	ldi	r22, 0x00	; 0
    67fc:	4a e0       	ldi	r20, 0x0A	; 10
    67fe:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <LCD_Disply>
			LCD_Disply(1,0,11);
    6802:	81 e0       	ldi	r24, 0x01	; 1
    6804:	60 e0       	ldi	r22, 0x00	; 0
    6806:	4b e0       	ldi	r20, 0x0B	; 11
    6808:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <LCD_Disply>
			LCD_Disply(2,0,15);
    680c:	82 e0       	ldi	r24, 0x02	; 2
    680e:	60 e0       	ldi	r22, 0x00	; 0
    6810:	4f e0       	ldi	r20, 0x0F	; 15
    6812:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <LCD_Disply>
			LCD_Disply(3,1,1);
    6816:	83 e0       	ldi	r24, 0x03	; 3
    6818:	61 e0       	ldi	r22, 0x01	; 1
    681a:	41 e0       	ldi	r20, 0x01	; 1
    681c:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <LCD_Disply>
			LCD_Disply(0,1,2);
    6820:	80 e0       	ldi	r24, 0x00	; 0
    6822:	61 e0       	ldi	r22, 0x01	; 1
    6824:	42 e0       	ldi	r20, 0x02	; 2
    6826:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <LCD_Disply>
			LCD_Disply(3,1,10);
    682a:	83 e0       	ldi	r24, 0x03	; 3
    682c:	61 e0       	ldi	r22, 0x01	; 1
    682e:	4a e0       	ldi	r20, 0x0A	; 10
    6830:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <LCD_Disply>
			LCD_Disply(1,1,11);
    6834:	81 e0       	ldi	r24, 0x01	; 1
    6836:	61 e0       	ldi	r22, 0x01	; 1
    6838:	4b e0       	ldi	r20, 0x0B	; 11
    683a:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <LCD_Disply>
			LCD_Disply(2,1,15);
    683e:	82 e0       	ldi	r24, 0x02	; 2
    6840:	61 e0       	ldi	r22, 0x01	; 1
    6842:	4f e0       	ldi	r20, 0x0F	; 15
    6844:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <LCD_Disply>
    6848:	fe 01       	movw	r30, r28
    684a:	ed 5b       	subi	r30, 0xBD	; 189
    684c:	ff 4f       	sbci	r31, 0xFF	; 255
    684e:	80 e0       	ldi	r24, 0x00	; 0
    6850:	90 e0       	ldi	r25, 0x00	; 0
    6852:	a8 e4       	ldi	r26, 0x48	; 72
    6854:	b3 e4       	ldi	r27, 0x43	; 67
    6856:	80 83       	st	Z, r24
    6858:	91 83       	std	Z+1, r25	; 0x01
    685a:	a2 83       	std	Z+2, r26	; 0x02
    685c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    685e:	8e 01       	movw	r16, r28
    6860:	01 5c       	subi	r16, 0xC1	; 193
    6862:	1f 4f       	sbci	r17, 0xFF	; 255
    6864:	fe 01       	movw	r30, r28
    6866:	ed 5b       	subi	r30, 0xBD	; 189
    6868:	ff 4f       	sbci	r31, 0xFF	; 255
    686a:	60 81       	ld	r22, Z
    686c:	71 81       	ldd	r23, Z+1	; 0x01
    686e:	82 81       	ldd	r24, Z+2	; 0x02
    6870:	93 81       	ldd	r25, Z+3	; 0x03
    6872:	20 e0       	ldi	r18, 0x00	; 0
    6874:	30 e0       	ldi	r19, 0x00	; 0
    6876:	4a ef       	ldi	r20, 0xFA	; 250
    6878:	54 e4       	ldi	r21, 0x44	; 68
    687a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    687e:	dc 01       	movw	r26, r24
    6880:	cb 01       	movw	r24, r22
    6882:	f8 01       	movw	r30, r16
    6884:	80 83       	st	Z, r24
    6886:	91 83       	std	Z+1, r25	; 0x01
    6888:	a2 83       	std	Z+2, r26	; 0x02
    688a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    688c:	fe 01       	movw	r30, r28
    688e:	ff 96       	adiw	r30, 0x3f	; 63
    6890:	60 81       	ld	r22, Z
    6892:	71 81       	ldd	r23, Z+1	; 0x01
    6894:	82 81       	ldd	r24, Z+2	; 0x02
    6896:	93 81       	ldd	r25, Z+3	; 0x03
    6898:	20 e0       	ldi	r18, 0x00	; 0
    689a:	30 e0       	ldi	r19, 0x00	; 0
    689c:	40 e8       	ldi	r20, 0x80	; 128
    689e:	5f e3       	ldi	r21, 0x3F	; 63
    68a0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    68a4:	88 23       	and	r24, r24
    68a6:	2c f4       	brge	.+10     	; 0x68b2 <key_pad+0x168a>
		__ticks = 1;
    68a8:	81 e0       	ldi	r24, 0x01	; 1
    68aa:	90 e0       	ldi	r25, 0x00	; 0
    68ac:	9e af       	std	Y+62, r25	; 0x3e
    68ae:	8d af       	std	Y+61, r24	; 0x3d
    68b0:	46 c0       	rjmp	.+140    	; 0x693e <key_pad+0x1716>
	else if (__tmp > 65535)
    68b2:	fe 01       	movw	r30, r28
    68b4:	ff 96       	adiw	r30, 0x3f	; 63
    68b6:	60 81       	ld	r22, Z
    68b8:	71 81       	ldd	r23, Z+1	; 0x01
    68ba:	82 81       	ldd	r24, Z+2	; 0x02
    68bc:	93 81       	ldd	r25, Z+3	; 0x03
    68be:	20 e0       	ldi	r18, 0x00	; 0
    68c0:	3f ef       	ldi	r19, 0xFF	; 255
    68c2:	4f e7       	ldi	r20, 0x7F	; 127
    68c4:	57 e4       	ldi	r21, 0x47	; 71
    68c6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    68ca:	18 16       	cp	r1, r24
    68cc:	64 f5       	brge	.+88     	; 0x6926 <key_pad+0x16fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    68ce:	fe 01       	movw	r30, r28
    68d0:	ed 5b       	subi	r30, 0xBD	; 189
    68d2:	ff 4f       	sbci	r31, 0xFF	; 255
    68d4:	60 81       	ld	r22, Z
    68d6:	71 81       	ldd	r23, Z+1	; 0x01
    68d8:	82 81       	ldd	r24, Z+2	; 0x02
    68da:	93 81       	ldd	r25, Z+3	; 0x03
    68dc:	20 e0       	ldi	r18, 0x00	; 0
    68de:	30 e0       	ldi	r19, 0x00	; 0
    68e0:	40 e2       	ldi	r20, 0x20	; 32
    68e2:	51 e4       	ldi	r21, 0x41	; 65
    68e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    68e8:	dc 01       	movw	r26, r24
    68ea:	cb 01       	movw	r24, r22
    68ec:	bc 01       	movw	r22, r24
    68ee:	cd 01       	movw	r24, r26
    68f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    68f4:	dc 01       	movw	r26, r24
    68f6:	cb 01       	movw	r24, r22
    68f8:	9e af       	std	Y+62, r25	; 0x3e
    68fa:	8d af       	std	Y+61, r24	; 0x3d
    68fc:	0f c0       	rjmp	.+30     	; 0x691c <key_pad+0x16f4>
    68fe:	88 ec       	ldi	r24, 0xC8	; 200
    6900:	90 e0       	ldi	r25, 0x00	; 0
    6902:	9c af       	std	Y+60, r25	; 0x3c
    6904:	8b af       	std	Y+59, r24	; 0x3b
    6906:	8b ad       	ldd	r24, Y+59	; 0x3b
    6908:	9c ad       	ldd	r25, Y+60	; 0x3c
    690a:	01 97       	sbiw	r24, 0x01	; 1
    690c:	f1 f7       	brne	.-4      	; 0x690a <key_pad+0x16e2>
    690e:	9c af       	std	Y+60, r25	; 0x3c
    6910:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6912:	8d ad       	ldd	r24, Y+61	; 0x3d
    6914:	9e ad       	ldd	r25, Y+62	; 0x3e
    6916:	01 97       	sbiw	r24, 0x01	; 1
    6918:	9e af       	std	Y+62, r25	; 0x3e
    691a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    691c:	8d ad       	ldd	r24, Y+61	; 0x3d
    691e:	9e ad       	ldd	r25, Y+62	; 0x3e
    6920:	00 97       	sbiw	r24, 0x00	; 0
    6922:	69 f7       	brne	.-38     	; 0x68fe <key_pad+0x16d6>
    6924:	16 c0       	rjmp	.+44     	; 0x6952 <key_pad+0x172a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6926:	fe 01       	movw	r30, r28
    6928:	ff 96       	adiw	r30, 0x3f	; 63
    692a:	60 81       	ld	r22, Z
    692c:	71 81       	ldd	r23, Z+1	; 0x01
    692e:	82 81       	ldd	r24, Z+2	; 0x02
    6930:	93 81       	ldd	r25, Z+3	; 0x03
    6932:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6936:	dc 01       	movw	r26, r24
    6938:	cb 01       	movw	r24, r22
    693a:	9e af       	std	Y+62, r25	; 0x3e
    693c:	8d af       	std	Y+61, r24	; 0x3d
    693e:	8d ad       	ldd	r24, Y+61	; 0x3d
    6940:	9e ad       	ldd	r25, Y+62	; 0x3e
    6942:	9a af       	std	Y+58, r25	; 0x3a
    6944:	89 af       	std	Y+57, r24	; 0x39
    6946:	89 ad       	ldd	r24, Y+57	; 0x39
    6948:	9a ad       	ldd	r25, Y+58	; 0x3a
    694a:	01 97       	sbiw	r24, 0x01	; 1
    694c:	f1 f7       	brne	.-4      	; 0x694a <key_pad+0x1722>
    694e:	9a af       	std	Y+58, r25	; 0x3a
    6950:	89 af       	std	Y+57, r24	; 0x39
			_delay_ms(200);
			LCD_Disply(3,0,1);
    6952:	83 e0       	ldi	r24, 0x03	; 3
    6954:	60 e0       	ldi	r22, 0x00	; 0
    6956:	41 e0       	ldi	r20, 0x01	; 1
    6958:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <LCD_Disply>
			LCD_Disply(0,0,2);
    695c:	80 e0       	ldi	r24, 0x00	; 0
    695e:	60 e0       	ldi	r22, 0x00	; 0
    6960:	42 e0       	ldi	r20, 0x02	; 2
    6962:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <LCD_Disply>
			LCD_Disply(3,0,11);
    6966:	83 e0       	ldi	r24, 0x03	; 3
    6968:	60 e0       	ldi	r22, 0x00	; 0
    696a:	4b e0       	ldi	r20, 0x0B	; 11
    696c:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <LCD_Disply>
			LCD_Disply(1,0,12);
    6970:	81 e0       	ldi	r24, 0x01	; 1
    6972:	60 e0       	ldi	r22, 0x00	; 0
    6974:	4c e0       	ldi	r20, 0x0C	; 12
    6976:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <LCD_Disply>
			LCD_Disply(2,0,15);
    697a:	82 e0       	ldi	r24, 0x02	; 2
    697c:	60 e0       	ldi	r22, 0x00	; 0
    697e:	4f e0       	ldi	r20, 0x0F	; 15
    6980:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <LCD_Disply>
			LCD_Disply(3,0,1);
    6984:	83 e0       	ldi	r24, 0x03	; 3
    6986:	60 e0       	ldi	r22, 0x00	; 0
    6988:	41 e0       	ldi	r20, 0x01	; 1
    698a:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <LCD_Disply>
			LCD_Disply(0,1,2);
    698e:	80 e0       	ldi	r24, 0x00	; 0
    6990:	61 e0       	ldi	r22, 0x01	; 1
    6992:	42 e0       	ldi	r20, 0x02	; 2
    6994:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <LCD_Disply>
			LCD_Disply(3,1,11);
    6998:	83 e0       	ldi	r24, 0x03	; 3
    699a:	61 e0       	ldi	r22, 0x01	; 1
    699c:	4b e0       	ldi	r20, 0x0B	; 11
    699e:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <LCD_Disply>
			LCD_Disply(1,1,12);
    69a2:	81 e0       	ldi	r24, 0x01	; 1
    69a4:	61 e0       	ldi	r22, 0x01	; 1
    69a6:	4c e0       	ldi	r20, 0x0C	; 12
    69a8:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <LCD_Disply>
			LCD_Disply(2,1,15);
    69ac:	82 e0       	ldi	r24, 0x02	; 2
    69ae:	61 e0       	ldi	r22, 0x01	; 1
    69b0:	4f e0       	ldi	r20, 0x0F	; 15
    69b2:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <LCD_Disply>
    69b6:	80 e0       	ldi	r24, 0x00	; 0
    69b8:	90 e0       	ldi	r25, 0x00	; 0
    69ba:	a8 e4       	ldi	r26, 0x48	; 72
    69bc:	b3 e4       	ldi	r27, 0x43	; 67
    69be:	8d ab       	std	Y+53, r24	; 0x35
    69c0:	9e ab       	std	Y+54, r25	; 0x36
    69c2:	af ab       	std	Y+55, r26	; 0x37
    69c4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    69c6:	6d a9       	ldd	r22, Y+53	; 0x35
    69c8:	7e a9       	ldd	r23, Y+54	; 0x36
    69ca:	8f a9       	ldd	r24, Y+55	; 0x37
    69cc:	98 ad       	ldd	r25, Y+56	; 0x38
    69ce:	20 e0       	ldi	r18, 0x00	; 0
    69d0:	30 e0       	ldi	r19, 0x00	; 0
    69d2:	4a ef       	ldi	r20, 0xFA	; 250
    69d4:	54 e4       	ldi	r21, 0x44	; 68
    69d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    69da:	dc 01       	movw	r26, r24
    69dc:	cb 01       	movw	r24, r22
    69de:	89 ab       	std	Y+49, r24	; 0x31
    69e0:	9a ab       	std	Y+50, r25	; 0x32
    69e2:	ab ab       	std	Y+51, r26	; 0x33
    69e4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    69e6:	69 a9       	ldd	r22, Y+49	; 0x31
    69e8:	7a a9       	ldd	r23, Y+50	; 0x32
    69ea:	8b a9       	ldd	r24, Y+51	; 0x33
    69ec:	9c a9       	ldd	r25, Y+52	; 0x34
    69ee:	20 e0       	ldi	r18, 0x00	; 0
    69f0:	30 e0       	ldi	r19, 0x00	; 0
    69f2:	40 e8       	ldi	r20, 0x80	; 128
    69f4:	5f e3       	ldi	r21, 0x3F	; 63
    69f6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    69fa:	88 23       	and	r24, r24
    69fc:	2c f4       	brge	.+10     	; 0x6a08 <key_pad+0x17e0>
		__ticks = 1;
    69fe:	81 e0       	ldi	r24, 0x01	; 1
    6a00:	90 e0       	ldi	r25, 0x00	; 0
    6a02:	98 ab       	std	Y+48, r25	; 0x30
    6a04:	8f a7       	std	Y+47, r24	; 0x2f
    6a06:	3f c0       	rjmp	.+126    	; 0x6a86 <key_pad+0x185e>
	else if (__tmp > 65535)
    6a08:	69 a9       	ldd	r22, Y+49	; 0x31
    6a0a:	7a a9       	ldd	r23, Y+50	; 0x32
    6a0c:	8b a9       	ldd	r24, Y+51	; 0x33
    6a0e:	9c a9       	ldd	r25, Y+52	; 0x34
    6a10:	20 e0       	ldi	r18, 0x00	; 0
    6a12:	3f ef       	ldi	r19, 0xFF	; 255
    6a14:	4f e7       	ldi	r20, 0x7F	; 127
    6a16:	57 e4       	ldi	r21, 0x47	; 71
    6a18:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    6a1c:	18 16       	cp	r1, r24
    6a1e:	4c f5       	brge	.+82     	; 0x6a72 <key_pad+0x184a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6a20:	6d a9       	ldd	r22, Y+53	; 0x35
    6a22:	7e a9       	ldd	r23, Y+54	; 0x36
    6a24:	8f a9       	ldd	r24, Y+55	; 0x37
    6a26:	98 ad       	ldd	r25, Y+56	; 0x38
    6a28:	20 e0       	ldi	r18, 0x00	; 0
    6a2a:	30 e0       	ldi	r19, 0x00	; 0
    6a2c:	40 e2       	ldi	r20, 0x20	; 32
    6a2e:	51 e4       	ldi	r21, 0x41	; 65
    6a30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6a34:	dc 01       	movw	r26, r24
    6a36:	cb 01       	movw	r24, r22
    6a38:	bc 01       	movw	r22, r24
    6a3a:	cd 01       	movw	r24, r26
    6a3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6a40:	dc 01       	movw	r26, r24
    6a42:	cb 01       	movw	r24, r22
    6a44:	98 ab       	std	Y+48, r25	; 0x30
    6a46:	8f a7       	std	Y+47, r24	; 0x2f
    6a48:	0f c0       	rjmp	.+30     	; 0x6a68 <key_pad+0x1840>
    6a4a:	88 ec       	ldi	r24, 0xC8	; 200
    6a4c:	90 e0       	ldi	r25, 0x00	; 0
    6a4e:	9e a7       	std	Y+46, r25	; 0x2e
    6a50:	8d a7       	std	Y+45, r24	; 0x2d
    6a52:	8d a5       	ldd	r24, Y+45	; 0x2d
    6a54:	9e a5       	ldd	r25, Y+46	; 0x2e
    6a56:	01 97       	sbiw	r24, 0x01	; 1
    6a58:	f1 f7       	brne	.-4      	; 0x6a56 <key_pad+0x182e>
    6a5a:	9e a7       	std	Y+46, r25	; 0x2e
    6a5c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6a5e:	8f a5       	ldd	r24, Y+47	; 0x2f
    6a60:	98 a9       	ldd	r25, Y+48	; 0x30
    6a62:	01 97       	sbiw	r24, 0x01	; 1
    6a64:	98 ab       	std	Y+48, r25	; 0x30
    6a66:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6a68:	8f a5       	ldd	r24, Y+47	; 0x2f
    6a6a:	98 a9       	ldd	r25, Y+48	; 0x30
    6a6c:	00 97       	sbiw	r24, 0x00	; 0
    6a6e:	69 f7       	brne	.-38     	; 0x6a4a <key_pad+0x1822>
    6a70:	14 c0       	rjmp	.+40     	; 0x6a9a <key_pad+0x1872>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6a72:	69 a9       	ldd	r22, Y+49	; 0x31
    6a74:	7a a9       	ldd	r23, Y+50	; 0x32
    6a76:	8b a9       	ldd	r24, Y+51	; 0x33
    6a78:	9c a9       	ldd	r25, Y+52	; 0x34
    6a7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6a7e:	dc 01       	movw	r26, r24
    6a80:	cb 01       	movw	r24, r22
    6a82:	98 ab       	std	Y+48, r25	; 0x30
    6a84:	8f a7       	std	Y+47, r24	; 0x2f
    6a86:	8f a5       	ldd	r24, Y+47	; 0x2f
    6a88:	98 a9       	ldd	r25, Y+48	; 0x30
    6a8a:	9c a7       	std	Y+44, r25	; 0x2c
    6a8c:	8b a7       	std	Y+43, r24	; 0x2b
    6a8e:	8b a5       	ldd	r24, Y+43	; 0x2b
    6a90:	9c a5       	ldd	r25, Y+44	; 0x2c
    6a92:	01 97       	sbiw	r24, 0x01	; 1
    6a94:	f1 f7       	brne	.-4      	; 0x6a92 <key_pad+0x186a>
    6a96:	9c a7       	std	Y+44, r25	; 0x2c
    6a98:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(200);
			LCD_Disply(3,0,1);
    6a9a:	83 e0       	ldi	r24, 0x03	; 3
    6a9c:	60 e0       	ldi	r22, 0x00	; 0
    6a9e:	41 e0       	ldi	r20, 0x01	; 1
    6aa0:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <LCD_Disply>
			LCD_Disply(0,0,2);
    6aa4:	80 e0       	ldi	r24, 0x00	; 0
    6aa6:	60 e0       	ldi	r22, 0x00	; 0
    6aa8:	42 e0       	ldi	r20, 0x02	; 2
    6aaa:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <LCD_Disply>
			LCD_Disply(3,0,12);
    6aae:	83 e0       	ldi	r24, 0x03	; 3
    6ab0:	60 e0       	ldi	r22, 0x00	; 0
    6ab2:	4c e0       	ldi	r20, 0x0C	; 12
    6ab4:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <LCD_Disply>
			LCD_Disply(1,0,13);
    6ab8:	81 e0       	ldi	r24, 0x01	; 1
    6aba:	60 e0       	ldi	r22, 0x00	; 0
    6abc:	4d e0       	ldi	r20, 0x0D	; 13
    6abe:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <LCD_Disply>
			LCD_Disply(2,0,15);
    6ac2:	82 e0       	ldi	r24, 0x02	; 2
    6ac4:	60 e0       	ldi	r22, 0x00	; 0
    6ac6:	4f e0       	ldi	r20, 0x0F	; 15
    6ac8:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <LCD_Disply>
			LCD_Disply(3,0,1);
    6acc:	83 e0       	ldi	r24, 0x03	; 3
    6ace:	60 e0       	ldi	r22, 0x00	; 0
    6ad0:	41 e0       	ldi	r20, 0x01	; 1
    6ad2:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <LCD_Disply>
			LCD_Disply(0,1,2);
    6ad6:	80 e0       	ldi	r24, 0x00	; 0
    6ad8:	61 e0       	ldi	r22, 0x01	; 1
    6ada:	42 e0       	ldi	r20, 0x02	; 2
    6adc:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <LCD_Disply>
			LCD_Disply(3,1,12);
    6ae0:	83 e0       	ldi	r24, 0x03	; 3
    6ae2:	61 e0       	ldi	r22, 0x01	; 1
    6ae4:	4c e0       	ldi	r20, 0x0C	; 12
    6ae6:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <LCD_Disply>
			LCD_Disply(1,1,13);
    6aea:	81 e0       	ldi	r24, 0x01	; 1
    6aec:	61 e0       	ldi	r22, 0x01	; 1
    6aee:	4d e0       	ldi	r20, 0x0D	; 13
    6af0:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <LCD_Disply>
			LCD_Disply(2,1,15);
    6af4:	82 e0       	ldi	r24, 0x02	; 2
    6af6:	61 e0       	ldi	r22, 0x01	; 1
    6af8:	4f e0       	ldi	r20, 0x0F	; 15
    6afa:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <LCD_Disply>
    6afe:	80 e0       	ldi	r24, 0x00	; 0
    6b00:	90 e0       	ldi	r25, 0x00	; 0
    6b02:	a8 e4       	ldi	r26, 0x48	; 72
    6b04:	b3 e4       	ldi	r27, 0x43	; 67
    6b06:	8f a3       	std	Y+39, r24	; 0x27
    6b08:	98 a7       	std	Y+40, r25	; 0x28
    6b0a:	a9 a7       	std	Y+41, r26	; 0x29
    6b0c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6b0e:	6f a1       	ldd	r22, Y+39	; 0x27
    6b10:	78 a5       	ldd	r23, Y+40	; 0x28
    6b12:	89 a5       	ldd	r24, Y+41	; 0x29
    6b14:	9a a5       	ldd	r25, Y+42	; 0x2a
    6b16:	20 e0       	ldi	r18, 0x00	; 0
    6b18:	30 e0       	ldi	r19, 0x00	; 0
    6b1a:	4a ef       	ldi	r20, 0xFA	; 250
    6b1c:	54 e4       	ldi	r21, 0x44	; 68
    6b1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6b22:	dc 01       	movw	r26, r24
    6b24:	cb 01       	movw	r24, r22
    6b26:	8b a3       	std	Y+35, r24	; 0x23
    6b28:	9c a3       	std	Y+36, r25	; 0x24
    6b2a:	ad a3       	std	Y+37, r26	; 0x25
    6b2c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    6b2e:	6b a1       	ldd	r22, Y+35	; 0x23
    6b30:	7c a1       	ldd	r23, Y+36	; 0x24
    6b32:	8d a1       	ldd	r24, Y+37	; 0x25
    6b34:	9e a1       	ldd	r25, Y+38	; 0x26
    6b36:	20 e0       	ldi	r18, 0x00	; 0
    6b38:	30 e0       	ldi	r19, 0x00	; 0
    6b3a:	40 e8       	ldi	r20, 0x80	; 128
    6b3c:	5f e3       	ldi	r21, 0x3F	; 63
    6b3e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    6b42:	88 23       	and	r24, r24
    6b44:	2c f4       	brge	.+10     	; 0x6b50 <key_pad+0x1928>
		__ticks = 1;
    6b46:	81 e0       	ldi	r24, 0x01	; 1
    6b48:	90 e0       	ldi	r25, 0x00	; 0
    6b4a:	9a a3       	std	Y+34, r25	; 0x22
    6b4c:	89 a3       	std	Y+33, r24	; 0x21
    6b4e:	3f c0       	rjmp	.+126    	; 0x6bce <key_pad+0x19a6>
	else if (__tmp > 65535)
    6b50:	6b a1       	ldd	r22, Y+35	; 0x23
    6b52:	7c a1       	ldd	r23, Y+36	; 0x24
    6b54:	8d a1       	ldd	r24, Y+37	; 0x25
    6b56:	9e a1       	ldd	r25, Y+38	; 0x26
    6b58:	20 e0       	ldi	r18, 0x00	; 0
    6b5a:	3f ef       	ldi	r19, 0xFF	; 255
    6b5c:	4f e7       	ldi	r20, 0x7F	; 127
    6b5e:	57 e4       	ldi	r21, 0x47	; 71
    6b60:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    6b64:	18 16       	cp	r1, r24
    6b66:	4c f5       	brge	.+82     	; 0x6bba <key_pad+0x1992>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6b68:	6f a1       	ldd	r22, Y+39	; 0x27
    6b6a:	78 a5       	ldd	r23, Y+40	; 0x28
    6b6c:	89 a5       	ldd	r24, Y+41	; 0x29
    6b6e:	9a a5       	ldd	r25, Y+42	; 0x2a
    6b70:	20 e0       	ldi	r18, 0x00	; 0
    6b72:	30 e0       	ldi	r19, 0x00	; 0
    6b74:	40 e2       	ldi	r20, 0x20	; 32
    6b76:	51 e4       	ldi	r21, 0x41	; 65
    6b78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6b7c:	dc 01       	movw	r26, r24
    6b7e:	cb 01       	movw	r24, r22
    6b80:	bc 01       	movw	r22, r24
    6b82:	cd 01       	movw	r24, r26
    6b84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6b88:	dc 01       	movw	r26, r24
    6b8a:	cb 01       	movw	r24, r22
    6b8c:	9a a3       	std	Y+34, r25	; 0x22
    6b8e:	89 a3       	std	Y+33, r24	; 0x21
    6b90:	0f c0       	rjmp	.+30     	; 0x6bb0 <key_pad+0x1988>
    6b92:	88 ec       	ldi	r24, 0xC8	; 200
    6b94:	90 e0       	ldi	r25, 0x00	; 0
    6b96:	98 a3       	std	Y+32, r25	; 0x20
    6b98:	8f 8f       	std	Y+31, r24	; 0x1f
    6b9a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    6b9c:	98 a1       	ldd	r25, Y+32	; 0x20
    6b9e:	01 97       	sbiw	r24, 0x01	; 1
    6ba0:	f1 f7       	brne	.-4      	; 0x6b9e <key_pad+0x1976>
    6ba2:	98 a3       	std	Y+32, r25	; 0x20
    6ba4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6ba6:	89 a1       	ldd	r24, Y+33	; 0x21
    6ba8:	9a a1       	ldd	r25, Y+34	; 0x22
    6baa:	01 97       	sbiw	r24, 0x01	; 1
    6bac:	9a a3       	std	Y+34, r25	; 0x22
    6bae:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6bb0:	89 a1       	ldd	r24, Y+33	; 0x21
    6bb2:	9a a1       	ldd	r25, Y+34	; 0x22
    6bb4:	00 97       	sbiw	r24, 0x00	; 0
    6bb6:	69 f7       	brne	.-38     	; 0x6b92 <key_pad+0x196a>
    6bb8:	14 c0       	rjmp	.+40     	; 0x6be2 <key_pad+0x19ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6bba:	6b a1       	ldd	r22, Y+35	; 0x23
    6bbc:	7c a1       	ldd	r23, Y+36	; 0x24
    6bbe:	8d a1       	ldd	r24, Y+37	; 0x25
    6bc0:	9e a1       	ldd	r25, Y+38	; 0x26
    6bc2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6bc6:	dc 01       	movw	r26, r24
    6bc8:	cb 01       	movw	r24, r22
    6bca:	9a a3       	std	Y+34, r25	; 0x22
    6bcc:	89 a3       	std	Y+33, r24	; 0x21
    6bce:	89 a1       	ldd	r24, Y+33	; 0x21
    6bd0:	9a a1       	ldd	r25, Y+34	; 0x22
    6bd2:	9e 8f       	std	Y+30, r25	; 0x1e
    6bd4:	8d 8f       	std	Y+29, r24	; 0x1d
    6bd6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    6bd8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    6bda:	01 97       	sbiw	r24, 0x01	; 1
    6bdc:	f1 f7       	brne	.-4      	; 0x6bda <key_pad+0x19b2>
    6bde:	9e 8f       	std	Y+30, r25	; 0x1e
    6be0:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(200);
			LCD_Disply(3,0,1);
    6be2:	83 e0       	ldi	r24, 0x03	; 3
    6be4:	60 e0       	ldi	r22, 0x00	; 0
    6be6:	41 e0       	ldi	r20, 0x01	; 1
    6be8:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <LCD_Disply>
			LCD_Disply(0,0,2);
    6bec:	80 e0       	ldi	r24, 0x00	; 0
    6bee:	60 e0       	ldi	r22, 0x00	; 0
    6bf0:	42 e0       	ldi	r20, 0x02	; 2
    6bf2:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <LCD_Disply>
			LCD_Disply(3,0,13);
    6bf6:	83 e0       	ldi	r24, 0x03	; 3
    6bf8:	60 e0       	ldi	r22, 0x00	; 0
    6bfa:	4d e0       	ldi	r20, 0x0D	; 13
    6bfc:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <LCD_Disply>
			LCD_Disply(1,0,14);
    6c00:	81 e0       	ldi	r24, 0x01	; 1
    6c02:	60 e0       	ldi	r22, 0x00	; 0
    6c04:	4e e0       	ldi	r20, 0x0E	; 14
    6c06:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <LCD_Disply>
			LCD_Disply(2,0,15);
    6c0a:	82 e0       	ldi	r24, 0x02	; 2
    6c0c:	60 e0       	ldi	r22, 0x00	; 0
    6c0e:	4f e0       	ldi	r20, 0x0F	; 15
    6c10:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <LCD_Disply>
			LCD_Disply(3,1,1);
    6c14:	83 e0       	ldi	r24, 0x03	; 3
    6c16:	61 e0       	ldi	r22, 0x01	; 1
    6c18:	41 e0       	ldi	r20, 0x01	; 1
    6c1a:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <LCD_Disply>
			LCD_Disply(0,1,2);
    6c1e:	80 e0       	ldi	r24, 0x00	; 0
    6c20:	61 e0       	ldi	r22, 0x01	; 1
    6c22:	42 e0       	ldi	r20, 0x02	; 2
    6c24:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <LCD_Disply>
			LCD_Disply(3,1,13);
    6c28:	83 e0       	ldi	r24, 0x03	; 3
    6c2a:	61 e0       	ldi	r22, 0x01	; 1
    6c2c:	4d e0       	ldi	r20, 0x0D	; 13
    6c2e:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <LCD_Disply>
			LCD_Disply(1,1,14);
    6c32:	81 e0       	ldi	r24, 0x01	; 1
    6c34:	61 e0       	ldi	r22, 0x01	; 1
    6c36:	4e e0       	ldi	r20, 0x0E	; 14
    6c38:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <LCD_Disply>
			LCD_Disply(2,1,15);
    6c3c:	82 e0       	ldi	r24, 0x02	; 2
    6c3e:	61 e0       	ldi	r22, 0x01	; 1
    6c40:	4f e0       	ldi	r20, 0x0F	; 15
    6c42:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <LCD_Disply>
    6c46:	80 e0       	ldi	r24, 0x00	; 0
    6c48:	90 e0       	ldi	r25, 0x00	; 0
    6c4a:	a8 e4       	ldi	r26, 0x48	; 72
    6c4c:	b3 e4       	ldi	r27, 0x43	; 67
    6c4e:	89 8f       	std	Y+25, r24	; 0x19
    6c50:	9a 8f       	std	Y+26, r25	; 0x1a
    6c52:	ab 8f       	std	Y+27, r26	; 0x1b
    6c54:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6c56:	69 8d       	ldd	r22, Y+25	; 0x19
    6c58:	7a 8d       	ldd	r23, Y+26	; 0x1a
    6c5a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6c5c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6c5e:	20 e0       	ldi	r18, 0x00	; 0
    6c60:	30 e0       	ldi	r19, 0x00	; 0
    6c62:	4a ef       	ldi	r20, 0xFA	; 250
    6c64:	54 e4       	ldi	r21, 0x44	; 68
    6c66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6c6a:	dc 01       	movw	r26, r24
    6c6c:	cb 01       	movw	r24, r22
    6c6e:	8d 8b       	std	Y+21, r24	; 0x15
    6c70:	9e 8b       	std	Y+22, r25	; 0x16
    6c72:	af 8b       	std	Y+23, r26	; 0x17
    6c74:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    6c76:	6d 89       	ldd	r22, Y+21	; 0x15
    6c78:	7e 89       	ldd	r23, Y+22	; 0x16
    6c7a:	8f 89       	ldd	r24, Y+23	; 0x17
    6c7c:	98 8d       	ldd	r25, Y+24	; 0x18
    6c7e:	20 e0       	ldi	r18, 0x00	; 0
    6c80:	30 e0       	ldi	r19, 0x00	; 0
    6c82:	40 e8       	ldi	r20, 0x80	; 128
    6c84:	5f e3       	ldi	r21, 0x3F	; 63
    6c86:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    6c8a:	88 23       	and	r24, r24
    6c8c:	2c f4       	brge	.+10     	; 0x6c98 <key_pad+0x1a70>
		__ticks = 1;
    6c8e:	81 e0       	ldi	r24, 0x01	; 1
    6c90:	90 e0       	ldi	r25, 0x00	; 0
    6c92:	9c 8b       	std	Y+20, r25	; 0x14
    6c94:	8b 8b       	std	Y+19, r24	; 0x13
    6c96:	3f c0       	rjmp	.+126    	; 0x6d16 <key_pad+0x1aee>
	else if (__tmp > 65535)
    6c98:	6d 89       	ldd	r22, Y+21	; 0x15
    6c9a:	7e 89       	ldd	r23, Y+22	; 0x16
    6c9c:	8f 89       	ldd	r24, Y+23	; 0x17
    6c9e:	98 8d       	ldd	r25, Y+24	; 0x18
    6ca0:	20 e0       	ldi	r18, 0x00	; 0
    6ca2:	3f ef       	ldi	r19, 0xFF	; 255
    6ca4:	4f e7       	ldi	r20, 0x7F	; 127
    6ca6:	57 e4       	ldi	r21, 0x47	; 71
    6ca8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    6cac:	18 16       	cp	r1, r24
    6cae:	4c f5       	brge	.+82     	; 0x6d02 <key_pad+0x1ada>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6cb0:	69 8d       	ldd	r22, Y+25	; 0x19
    6cb2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    6cb4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6cb6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6cb8:	20 e0       	ldi	r18, 0x00	; 0
    6cba:	30 e0       	ldi	r19, 0x00	; 0
    6cbc:	40 e2       	ldi	r20, 0x20	; 32
    6cbe:	51 e4       	ldi	r21, 0x41	; 65
    6cc0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6cc4:	dc 01       	movw	r26, r24
    6cc6:	cb 01       	movw	r24, r22
    6cc8:	bc 01       	movw	r22, r24
    6cca:	cd 01       	movw	r24, r26
    6ccc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6cd0:	dc 01       	movw	r26, r24
    6cd2:	cb 01       	movw	r24, r22
    6cd4:	9c 8b       	std	Y+20, r25	; 0x14
    6cd6:	8b 8b       	std	Y+19, r24	; 0x13
    6cd8:	0f c0       	rjmp	.+30     	; 0x6cf8 <key_pad+0x1ad0>
    6cda:	88 ec       	ldi	r24, 0xC8	; 200
    6cdc:	90 e0       	ldi	r25, 0x00	; 0
    6cde:	9a 8b       	std	Y+18, r25	; 0x12
    6ce0:	89 8b       	std	Y+17, r24	; 0x11
    6ce2:	89 89       	ldd	r24, Y+17	; 0x11
    6ce4:	9a 89       	ldd	r25, Y+18	; 0x12
    6ce6:	01 97       	sbiw	r24, 0x01	; 1
    6ce8:	f1 f7       	brne	.-4      	; 0x6ce6 <key_pad+0x1abe>
    6cea:	9a 8b       	std	Y+18, r25	; 0x12
    6cec:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6cee:	8b 89       	ldd	r24, Y+19	; 0x13
    6cf0:	9c 89       	ldd	r25, Y+20	; 0x14
    6cf2:	01 97       	sbiw	r24, 0x01	; 1
    6cf4:	9c 8b       	std	Y+20, r25	; 0x14
    6cf6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6cf8:	8b 89       	ldd	r24, Y+19	; 0x13
    6cfa:	9c 89       	ldd	r25, Y+20	; 0x14
    6cfc:	00 97       	sbiw	r24, 0x00	; 0
    6cfe:	69 f7       	brne	.-38     	; 0x6cda <key_pad+0x1ab2>
    6d00:	14 c0       	rjmp	.+40     	; 0x6d2a <key_pad+0x1b02>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6d02:	6d 89       	ldd	r22, Y+21	; 0x15
    6d04:	7e 89       	ldd	r23, Y+22	; 0x16
    6d06:	8f 89       	ldd	r24, Y+23	; 0x17
    6d08:	98 8d       	ldd	r25, Y+24	; 0x18
    6d0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6d0e:	dc 01       	movw	r26, r24
    6d10:	cb 01       	movw	r24, r22
    6d12:	9c 8b       	std	Y+20, r25	; 0x14
    6d14:	8b 8b       	std	Y+19, r24	; 0x13
    6d16:	8b 89       	ldd	r24, Y+19	; 0x13
    6d18:	9c 89       	ldd	r25, Y+20	; 0x14
    6d1a:	98 8b       	std	Y+16, r25	; 0x10
    6d1c:	8f 87       	std	Y+15, r24	; 0x0f
    6d1e:	8f 85       	ldd	r24, Y+15	; 0x0f
    6d20:	98 89       	ldd	r25, Y+16	; 0x10
    6d22:	01 97       	sbiw	r24, 0x01	; 1
    6d24:	f1 f7       	brne	.-4      	; 0x6d22 <key_pad+0x1afa>
    6d26:	98 8b       	std	Y+16, r25	; 0x10
    6d28:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(200);
			LCD_VidWrite4Cmd(Clear_Display);
    6d2a:	81 e0       	ldi	r24, 0x01	; 1
    6d2c:	0e 94 30 10 	call	0x2060	; 0x2060 <LCD_VidWrite4Cmd>
			LCD_Write4String("Gooooool!!!",0,3);
    6d30:	85 e9       	ldi	r24, 0x95	; 149
    6d32:	90 e0       	ldi	r25, 0x00	; 0
    6d34:	60 e0       	ldi	r22, 0x00	; 0
    6d36:	43 e0       	ldi	r20, 0x03	; 3
    6d38:	0e 94 ff 14 	call	0x29fe	; 0x29fe <LCD_Write4String>
			LCD_Write4String("Gooooool!!!",1,3);
    6d3c:	85 e9       	ldi	r24, 0x95	; 149
    6d3e:	90 e0       	ldi	r25, 0x00	; 0
    6d40:	61 e0       	ldi	r22, 0x01	; 1
    6d42:	43 e0       	ldi	r20, 0x03	; 3
    6d44:	0e 94 ff 14 	call	0x29fe	; 0x29fe <LCD_Write4String>
    6d48:	80 e0       	ldi	r24, 0x00	; 0
    6d4a:	90 e0       	ldi	r25, 0x00	; 0
    6d4c:	aa e7       	ldi	r26, 0x7A	; 122
    6d4e:	b4 e4       	ldi	r27, 0x44	; 68
    6d50:	8b 87       	std	Y+11, r24	; 0x0b
    6d52:	9c 87       	std	Y+12, r25	; 0x0c
    6d54:	ad 87       	std	Y+13, r26	; 0x0d
    6d56:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6d58:	6b 85       	ldd	r22, Y+11	; 0x0b
    6d5a:	7c 85       	ldd	r23, Y+12	; 0x0c
    6d5c:	8d 85       	ldd	r24, Y+13	; 0x0d
    6d5e:	9e 85       	ldd	r25, Y+14	; 0x0e
    6d60:	20 e0       	ldi	r18, 0x00	; 0
    6d62:	30 e0       	ldi	r19, 0x00	; 0
    6d64:	4a ef       	ldi	r20, 0xFA	; 250
    6d66:	54 e4       	ldi	r21, 0x44	; 68
    6d68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6d6c:	dc 01       	movw	r26, r24
    6d6e:	cb 01       	movw	r24, r22
    6d70:	8f 83       	std	Y+7, r24	; 0x07
    6d72:	98 87       	std	Y+8, r25	; 0x08
    6d74:	a9 87       	std	Y+9, r26	; 0x09
    6d76:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6d78:	6f 81       	ldd	r22, Y+7	; 0x07
    6d7a:	78 85       	ldd	r23, Y+8	; 0x08
    6d7c:	89 85       	ldd	r24, Y+9	; 0x09
    6d7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    6d80:	20 e0       	ldi	r18, 0x00	; 0
    6d82:	30 e0       	ldi	r19, 0x00	; 0
    6d84:	40 e8       	ldi	r20, 0x80	; 128
    6d86:	5f e3       	ldi	r21, 0x3F	; 63
    6d88:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    6d8c:	88 23       	and	r24, r24
    6d8e:	2c f4       	brge	.+10     	; 0x6d9a <key_pad+0x1b72>
		__ticks = 1;
    6d90:	81 e0       	ldi	r24, 0x01	; 1
    6d92:	90 e0       	ldi	r25, 0x00	; 0
    6d94:	9e 83       	std	Y+6, r25	; 0x06
    6d96:	8d 83       	std	Y+5, r24	; 0x05
    6d98:	40 c0       	rjmp	.+128    	; 0x6e1a <key_pad+0x1bf2>
	else if (__tmp > 65535)
    6d9a:	6f 81       	ldd	r22, Y+7	; 0x07
    6d9c:	78 85       	ldd	r23, Y+8	; 0x08
    6d9e:	89 85       	ldd	r24, Y+9	; 0x09
    6da0:	9a 85       	ldd	r25, Y+10	; 0x0a
    6da2:	20 e0       	ldi	r18, 0x00	; 0
    6da4:	3f ef       	ldi	r19, 0xFF	; 255
    6da6:	4f e7       	ldi	r20, 0x7F	; 127
    6da8:	57 e4       	ldi	r21, 0x47	; 71
    6daa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    6dae:	18 16       	cp	r1, r24
    6db0:	54 f5       	brge	.+84     	; 0x6e06 <key_pad+0x1bde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6db2:	6b 85       	ldd	r22, Y+11	; 0x0b
    6db4:	7c 85       	ldd	r23, Y+12	; 0x0c
    6db6:	8d 85       	ldd	r24, Y+13	; 0x0d
    6db8:	9e 85       	ldd	r25, Y+14	; 0x0e
    6dba:	20 e0       	ldi	r18, 0x00	; 0
    6dbc:	30 e0       	ldi	r19, 0x00	; 0
    6dbe:	40 e2       	ldi	r20, 0x20	; 32
    6dc0:	51 e4       	ldi	r21, 0x41	; 65
    6dc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6dc6:	dc 01       	movw	r26, r24
    6dc8:	cb 01       	movw	r24, r22
    6dca:	bc 01       	movw	r22, r24
    6dcc:	cd 01       	movw	r24, r26
    6dce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6dd2:	dc 01       	movw	r26, r24
    6dd4:	cb 01       	movw	r24, r22
    6dd6:	9e 83       	std	Y+6, r25	; 0x06
    6dd8:	8d 83       	std	Y+5, r24	; 0x05
    6dda:	0f c0       	rjmp	.+30     	; 0x6dfa <key_pad+0x1bd2>
    6ddc:	88 ec       	ldi	r24, 0xC8	; 200
    6dde:	90 e0       	ldi	r25, 0x00	; 0
    6de0:	9c 83       	std	Y+4, r25	; 0x04
    6de2:	8b 83       	std	Y+3, r24	; 0x03
    6de4:	8b 81       	ldd	r24, Y+3	; 0x03
    6de6:	9c 81       	ldd	r25, Y+4	; 0x04
    6de8:	01 97       	sbiw	r24, 0x01	; 1
    6dea:	f1 f7       	brne	.-4      	; 0x6de8 <key_pad+0x1bc0>
    6dec:	9c 83       	std	Y+4, r25	; 0x04
    6dee:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6df0:	8d 81       	ldd	r24, Y+5	; 0x05
    6df2:	9e 81       	ldd	r25, Y+6	; 0x06
    6df4:	01 97       	sbiw	r24, 0x01	; 1
    6df6:	9e 83       	std	Y+6, r25	; 0x06
    6df8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6dfa:	8d 81       	ldd	r24, Y+5	; 0x05
    6dfc:	9e 81       	ldd	r25, Y+6	; 0x06
    6dfe:	00 97       	sbiw	r24, 0x00	; 0
    6e00:	69 f7       	brne	.-38     	; 0x6ddc <key_pad+0x1bb4>
    6e02:	0c 94 40 2a 	jmp	0x5480	; 0x5480 <key_pad+0x258>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6e06:	6f 81       	ldd	r22, Y+7	; 0x07
    6e08:	78 85       	ldd	r23, Y+8	; 0x08
    6e0a:	89 85       	ldd	r24, Y+9	; 0x09
    6e0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    6e0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6e12:	dc 01       	movw	r26, r24
    6e14:	cb 01       	movw	r24, r22
    6e16:	9e 83       	std	Y+6, r25	; 0x06
    6e18:	8d 83       	std	Y+5, r24	; 0x05
    6e1a:	8d 81       	ldd	r24, Y+5	; 0x05
    6e1c:	9e 81       	ldd	r25, Y+6	; 0x06
    6e1e:	9a 83       	std	Y+2, r25	; 0x02
    6e20:	89 83       	std	Y+1, r24	; 0x01
    6e22:	89 81       	ldd	r24, Y+1	; 0x01
    6e24:	9a 81       	ldd	r25, Y+2	; 0x02
    6e26:	01 97       	sbiw	r24, 0x01	; 1
    6e28:	f1 f7       	brne	.-4      	; 0x6e26 <key_pad+0x1bfe>
    6e2a:	9a 83       	std	Y+2, r25	; 0x02
    6e2c:	89 83       	std	Y+1, r24	; 0x01
    6e2e:	0c 94 40 2a 	jmp	0x5480	; 0x5480 <key_pad+0x258>

00006e32 <push_button>:
#include "../LIB/STD_TYPE.h"
#include "../MCAL/DIO/DIO_TYPE.h"
#include "../MCAL/DIO/DIO_Interface.h"
#include <avr/delay.h>
void push_button (void)
{
    6e32:	df 93       	push	r29
    6e34:	cf 93       	push	r28
    6e36:	cd b7       	in	r28, 0x3d	; 61
    6e38:	de b7       	in	r29, 0x3e	; 62
    6e3a:	6c 97       	sbiw	r28, 0x1c	; 28
    6e3c:	0f b6       	in	r0, 0x3f	; 63
    6e3e:	f8 94       	cli
    6e40:	de bf       	out	0x3e, r29	; 62
    6e42:	0f be       	out	0x3f, r0	; 63
    6e44:	cd bf       	out	0x3d, r28	; 61
	DIO_VidSitPintDirection(PORTC,PIN0, OUTPUT);
    6e46:	82 e0       	ldi	r24, 0x02	; 2
    6e48:	60 e0       	ldi	r22, 0x00	; 0
    6e4a:	41 e0       	ldi	r20, 0x01	; 1
    6e4c:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <DIO_VidSitPintDirection>
	DIO_VidSitPintDirection(PORTC,PIN1, OUTPUT);
    6e50:	82 e0       	ldi	r24, 0x02	; 2
    6e52:	61 e0       	ldi	r22, 0x01	; 1
    6e54:	41 e0       	ldi	r20, 0x01	; 1
    6e56:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <DIO_VidSitPintDirection>
	DIO_VidSitPintDirection(PORTC,PIN2, OUTPUT);
    6e5a:	82 e0       	ldi	r24, 0x02	; 2
    6e5c:	62 e0       	ldi	r22, 0x02	; 2
    6e5e:	41 e0       	ldi	r20, 0x01	; 1
    6e60:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <DIO_VidSitPintDirection>
	DIO_VidSitPintDirection(PORTC,PIN7, INPUT);
    6e64:	82 e0       	ldi	r24, 0x02	; 2
    6e66:	67 e0       	ldi	r22, 0x07	; 7
    6e68:	40 e0       	ldi	r20, 0x00	; 0
    6e6a:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <DIO_VidSitPintDirection>
	DIO_VidSitPintDirection(PORTC,PIN6, INPUT);
    6e6e:	82 e0       	ldi	r24, 0x02	; 2
    6e70:	66 e0       	ldi	r22, 0x06	; 6
    6e72:	40 e0       	ldi	r20, 0x00	; 0
    6e74:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <DIO_VidSitPintDirection>
	DIO_VidSitPintValue(PORTC,PIN7, HIGH);
    6e78:	82 e0       	ldi	r24, 0x02	; 2
    6e7a:	67 e0       	ldi	r22, 0x07	; 7
    6e7c:	41 e0       	ldi	r20, 0x01	; 1
    6e7e:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <DIO_VidSitPintValue>
	DIO_VidSitPintValue(PORTC,PIN6, HIGH);
    6e82:	82 e0       	ldi	r24, 0x02	; 2
    6e84:	66 e0       	ldi	r22, 0x06	; 6
    6e86:	41 e0       	ldi	r20, 0x01	; 1
    6e88:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <DIO_VidSitPintValue>

	while (1)
	{
		if (DIO_GitPinVule(PORTC,PIN7)==LOW)
    6e8c:	82 e0       	ldi	r24, 0x02	; 2
    6e8e:	67 e0       	ldi	r22, 0x07	; 7
    6e90:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <DIO_GitPinVule>
    6e94:	88 23       	and	r24, r24
    6e96:	09 f0       	breq	.+2      	; 0x6e9a <push_button+0x68>
    6e98:	f9 c0       	rjmp	.+498    	; 0x708c <push_button+0x25a>
		{
			DIO_VidSitPintValue(PORTC,PIN0, HIGH);
    6e9a:	82 e0       	ldi	r24, 0x02	; 2
    6e9c:	60 e0       	ldi	r22, 0x00	; 0
    6e9e:	41 e0       	ldi	r20, 0x01	; 1
    6ea0:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <DIO_VidSitPintValue>
			DIO_VidSitPintValue(PORTC,PIN1, LOW);
    6ea4:	82 e0       	ldi	r24, 0x02	; 2
    6ea6:	61 e0       	ldi	r22, 0x01	; 1
    6ea8:	40 e0       	ldi	r20, 0x00	; 0
    6eaa:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <DIO_VidSitPintValue>
    6eae:	80 e0       	ldi	r24, 0x00	; 0
    6eb0:	90 e0       	ldi	r25, 0x00	; 0
    6eb2:	aa e7       	ldi	r26, 0x7A	; 122
    6eb4:	b4 e4       	ldi	r27, 0x44	; 68
    6eb6:	89 8f       	std	Y+25, r24	; 0x19
    6eb8:	9a 8f       	std	Y+26, r25	; 0x1a
    6eba:	ab 8f       	std	Y+27, r26	; 0x1b
    6ebc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6ebe:	69 8d       	ldd	r22, Y+25	; 0x19
    6ec0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    6ec2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6ec4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6ec6:	20 e0       	ldi	r18, 0x00	; 0
    6ec8:	30 e0       	ldi	r19, 0x00	; 0
    6eca:	4a ef       	ldi	r20, 0xFA	; 250
    6ecc:	54 e4       	ldi	r21, 0x44	; 68
    6ece:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6ed2:	dc 01       	movw	r26, r24
    6ed4:	cb 01       	movw	r24, r22
    6ed6:	8d 8b       	std	Y+21, r24	; 0x15
    6ed8:	9e 8b       	std	Y+22, r25	; 0x16
    6eda:	af 8b       	std	Y+23, r26	; 0x17
    6edc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    6ede:	6d 89       	ldd	r22, Y+21	; 0x15
    6ee0:	7e 89       	ldd	r23, Y+22	; 0x16
    6ee2:	8f 89       	ldd	r24, Y+23	; 0x17
    6ee4:	98 8d       	ldd	r25, Y+24	; 0x18
    6ee6:	20 e0       	ldi	r18, 0x00	; 0
    6ee8:	30 e0       	ldi	r19, 0x00	; 0
    6eea:	40 e8       	ldi	r20, 0x80	; 128
    6eec:	5f e3       	ldi	r21, 0x3F	; 63
    6eee:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    6ef2:	88 23       	and	r24, r24
    6ef4:	2c f4       	brge	.+10     	; 0x6f00 <push_button+0xce>
		__ticks = 1;
    6ef6:	81 e0       	ldi	r24, 0x01	; 1
    6ef8:	90 e0       	ldi	r25, 0x00	; 0
    6efa:	9c 8b       	std	Y+20, r25	; 0x14
    6efc:	8b 8b       	std	Y+19, r24	; 0x13
    6efe:	3f c0       	rjmp	.+126    	; 0x6f7e <push_button+0x14c>
	else if (__tmp > 65535)
    6f00:	6d 89       	ldd	r22, Y+21	; 0x15
    6f02:	7e 89       	ldd	r23, Y+22	; 0x16
    6f04:	8f 89       	ldd	r24, Y+23	; 0x17
    6f06:	98 8d       	ldd	r25, Y+24	; 0x18
    6f08:	20 e0       	ldi	r18, 0x00	; 0
    6f0a:	3f ef       	ldi	r19, 0xFF	; 255
    6f0c:	4f e7       	ldi	r20, 0x7F	; 127
    6f0e:	57 e4       	ldi	r21, 0x47	; 71
    6f10:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    6f14:	18 16       	cp	r1, r24
    6f16:	4c f5       	brge	.+82     	; 0x6f6a <push_button+0x138>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6f18:	69 8d       	ldd	r22, Y+25	; 0x19
    6f1a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    6f1c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6f1e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6f20:	20 e0       	ldi	r18, 0x00	; 0
    6f22:	30 e0       	ldi	r19, 0x00	; 0
    6f24:	40 e2       	ldi	r20, 0x20	; 32
    6f26:	51 e4       	ldi	r21, 0x41	; 65
    6f28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6f2c:	dc 01       	movw	r26, r24
    6f2e:	cb 01       	movw	r24, r22
    6f30:	bc 01       	movw	r22, r24
    6f32:	cd 01       	movw	r24, r26
    6f34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6f38:	dc 01       	movw	r26, r24
    6f3a:	cb 01       	movw	r24, r22
    6f3c:	9c 8b       	std	Y+20, r25	; 0x14
    6f3e:	8b 8b       	std	Y+19, r24	; 0x13
    6f40:	0f c0       	rjmp	.+30     	; 0x6f60 <push_button+0x12e>
    6f42:	88 ec       	ldi	r24, 0xC8	; 200
    6f44:	90 e0       	ldi	r25, 0x00	; 0
    6f46:	9a 8b       	std	Y+18, r25	; 0x12
    6f48:	89 8b       	std	Y+17, r24	; 0x11
    6f4a:	89 89       	ldd	r24, Y+17	; 0x11
    6f4c:	9a 89       	ldd	r25, Y+18	; 0x12
    6f4e:	01 97       	sbiw	r24, 0x01	; 1
    6f50:	f1 f7       	brne	.-4      	; 0x6f4e <push_button+0x11c>
    6f52:	9a 8b       	std	Y+18, r25	; 0x12
    6f54:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6f56:	8b 89       	ldd	r24, Y+19	; 0x13
    6f58:	9c 89       	ldd	r25, Y+20	; 0x14
    6f5a:	01 97       	sbiw	r24, 0x01	; 1
    6f5c:	9c 8b       	std	Y+20, r25	; 0x14
    6f5e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6f60:	8b 89       	ldd	r24, Y+19	; 0x13
    6f62:	9c 89       	ldd	r25, Y+20	; 0x14
    6f64:	00 97       	sbiw	r24, 0x00	; 0
    6f66:	69 f7       	brne	.-38     	; 0x6f42 <push_button+0x110>
    6f68:	14 c0       	rjmp	.+40     	; 0x6f92 <push_button+0x160>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6f6a:	6d 89       	ldd	r22, Y+21	; 0x15
    6f6c:	7e 89       	ldd	r23, Y+22	; 0x16
    6f6e:	8f 89       	ldd	r24, Y+23	; 0x17
    6f70:	98 8d       	ldd	r25, Y+24	; 0x18
    6f72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6f76:	dc 01       	movw	r26, r24
    6f78:	cb 01       	movw	r24, r22
    6f7a:	9c 8b       	std	Y+20, r25	; 0x14
    6f7c:	8b 8b       	std	Y+19, r24	; 0x13
    6f7e:	8b 89       	ldd	r24, Y+19	; 0x13
    6f80:	9c 89       	ldd	r25, Y+20	; 0x14
    6f82:	98 8b       	std	Y+16, r25	; 0x10
    6f84:	8f 87       	std	Y+15, r24	; 0x0f
    6f86:	8f 85       	ldd	r24, Y+15	; 0x0f
    6f88:	98 89       	ldd	r25, Y+16	; 0x10
    6f8a:	01 97       	sbiw	r24, 0x01	; 1
    6f8c:	f1 f7       	brne	.-4      	; 0x6f8a <push_button+0x158>
    6f8e:	98 8b       	std	Y+16, r25	; 0x10
    6f90:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(1000);
			DIO_VidSitPintValue(PORTC,PIN0, LOW);
    6f92:	82 e0       	ldi	r24, 0x02	; 2
    6f94:	60 e0       	ldi	r22, 0x00	; 0
    6f96:	40 e0       	ldi	r20, 0x00	; 0
    6f98:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <DIO_VidSitPintValue>
			DIO_VidSitPintValue(PORTC,PIN1, HIGH);
    6f9c:	82 e0       	ldi	r24, 0x02	; 2
    6f9e:	61 e0       	ldi	r22, 0x01	; 1
    6fa0:	41 e0       	ldi	r20, 0x01	; 1
    6fa2:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <DIO_VidSitPintValue>
    6fa6:	80 e0       	ldi	r24, 0x00	; 0
    6fa8:	90 e0       	ldi	r25, 0x00	; 0
    6faa:	aa e7       	ldi	r26, 0x7A	; 122
    6fac:	b4 e4       	ldi	r27, 0x44	; 68
    6fae:	8b 87       	std	Y+11, r24	; 0x0b
    6fb0:	9c 87       	std	Y+12, r25	; 0x0c
    6fb2:	ad 87       	std	Y+13, r26	; 0x0d
    6fb4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6fb6:	6b 85       	ldd	r22, Y+11	; 0x0b
    6fb8:	7c 85       	ldd	r23, Y+12	; 0x0c
    6fba:	8d 85       	ldd	r24, Y+13	; 0x0d
    6fbc:	9e 85       	ldd	r25, Y+14	; 0x0e
    6fbe:	20 e0       	ldi	r18, 0x00	; 0
    6fc0:	30 e0       	ldi	r19, 0x00	; 0
    6fc2:	4a ef       	ldi	r20, 0xFA	; 250
    6fc4:	54 e4       	ldi	r21, 0x44	; 68
    6fc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6fca:	dc 01       	movw	r26, r24
    6fcc:	cb 01       	movw	r24, r22
    6fce:	8f 83       	std	Y+7, r24	; 0x07
    6fd0:	98 87       	std	Y+8, r25	; 0x08
    6fd2:	a9 87       	std	Y+9, r26	; 0x09
    6fd4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6fd6:	6f 81       	ldd	r22, Y+7	; 0x07
    6fd8:	78 85       	ldd	r23, Y+8	; 0x08
    6fda:	89 85       	ldd	r24, Y+9	; 0x09
    6fdc:	9a 85       	ldd	r25, Y+10	; 0x0a
    6fde:	20 e0       	ldi	r18, 0x00	; 0
    6fe0:	30 e0       	ldi	r19, 0x00	; 0
    6fe2:	40 e8       	ldi	r20, 0x80	; 128
    6fe4:	5f e3       	ldi	r21, 0x3F	; 63
    6fe6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    6fea:	88 23       	and	r24, r24
    6fec:	2c f4       	brge	.+10     	; 0x6ff8 <push_button+0x1c6>
		__ticks = 1;
    6fee:	81 e0       	ldi	r24, 0x01	; 1
    6ff0:	90 e0       	ldi	r25, 0x00	; 0
    6ff2:	9e 83       	std	Y+6, r25	; 0x06
    6ff4:	8d 83       	std	Y+5, r24	; 0x05
    6ff6:	3f c0       	rjmp	.+126    	; 0x7076 <push_button+0x244>
	else if (__tmp > 65535)
    6ff8:	6f 81       	ldd	r22, Y+7	; 0x07
    6ffa:	78 85       	ldd	r23, Y+8	; 0x08
    6ffc:	89 85       	ldd	r24, Y+9	; 0x09
    6ffe:	9a 85       	ldd	r25, Y+10	; 0x0a
    7000:	20 e0       	ldi	r18, 0x00	; 0
    7002:	3f ef       	ldi	r19, 0xFF	; 255
    7004:	4f e7       	ldi	r20, 0x7F	; 127
    7006:	57 e4       	ldi	r21, 0x47	; 71
    7008:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    700c:	18 16       	cp	r1, r24
    700e:	4c f5       	brge	.+82     	; 0x7062 <push_button+0x230>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7010:	6b 85       	ldd	r22, Y+11	; 0x0b
    7012:	7c 85       	ldd	r23, Y+12	; 0x0c
    7014:	8d 85       	ldd	r24, Y+13	; 0x0d
    7016:	9e 85       	ldd	r25, Y+14	; 0x0e
    7018:	20 e0       	ldi	r18, 0x00	; 0
    701a:	30 e0       	ldi	r19, 0x00	; 0
    701c:	40 e2       	ldi	r20, 0x20	; 32
    701e:	51 e4       	ldi	r21, 0x41	; 65
    7020:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    7024:	dc 01       	movw	r26, r24
    7026:	cb 01       	movw	r24, r22
    7028:	bc 01       	movw	r22, r24
    702a:	cd 01       	movw	r24, r26
    702c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7030:	dc 01       	movw	r26, r24
    7032:	cb 01       	movw	r24, r22
    7034:	9e 83       	std	Y+6, r25	; 0x06
    7036:	8d 83       	std	Y+5, r24	; 0x05
    7038:	0f c0       	rjmp	.+30     	; 0x7058 <push_button+0x226>
    703a:	88 ec       	ldi	r24, 0xC8	; 200
    703c:	90 e0       	ldi	r25, 0x00	; 0
    703e:	9c 83       	std	Y+4, r25	; 0x04
    7040:	8b 83       	std	Y+3, r24	; 0x03
    7042:	8b 81       	ldd	r24, Y+3	; 0x03
    7044:	9c 81       	ldd	r25, Y+4	; 0x04
    7046:	01 97       	sbiw	r24, 0x01	; 1
    7048:	f1 f7       	brne	.-4      	; 0x7046 <push_button+0x214>
    704a:	9c 83       	std	Y+4, r25	; 0x04
    704c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    704e:	8d 81       	ldd	r24, Y+5	; 0x05
    7050:	9e 81       	ldd	r25, Y+6	; 0x06
    7052:	01 97       	sbiw	r24, 0x01	; 1
    7054:	9e 83       	std	Y+6, r25	; 0x06
    7056:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7058:	8d 81       	ldd	r24, Y+5	; 0x05
    705a:	9e 81       	ldd	r25, Y+6	; 0x06
    705c:	00 97       	sbiw	r24, 0x00	; 0
    705e:	69 f7       	brne	.-38     	; 0x703a <push_button+0x208>
    7060:	15 cf       	rjmp	.-470    	; 0x6e8c <push_button+0x5a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7062:	6f 81       	ldd	r22, Y+7	; 0x07
    7064:	78 85       	ldd	r23, Y+8	; 0x08
    7066:	89 85       	ldd	r24, Y+9	; 0x09
    7068:	9a 85       	ldd	r25, Y+10	; 0x0a
    706a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    706e:	dc 01       	movw	r26, r24
    7070:	cb 01       	movw	r24, r22
    7072:	9e 83       	std	Y+6, r25	; 0x06
    7074:	8d 83       	std	Y+5, r24	; 0x05
    7076:	8d 81       	ldd	r24, Y+5	; 0x05
    7078:	9e 81       	ldd	r25, Y+6	; 0x06
    707a:	9a 83       	std	Y+2, r25	; 0x02
    707c:	89 83       	std	Y+1, r24	; 0x01
    707e:	89 81       	ldd	r24, Y+1	; 0x01
    7080:	9a 81       	ldd	r25, Y+2	; 0x02
    7082:	01 97       	sbiw	r24, 0x01	; 1
    7084:	f1 f7       	brne	.-4      	; 0x7082 <push_button+0x250>
    7086:	9a 83       	std	Y+2, r25	; 0x02
    7088:	89 83       	std	Y+1, r24	; 0x01
    708a:	00 cf       	rjmp	.-512    	; 0x6e8c <push_button+0x5a>
			_delay_ms(1000);

		}
		else if (DIO_GitPinVule(PORTC,PIN6)==LOW)
    708c:	82 e0       	ldi	r24, 0x02	; 2
    708e:	66 e0       	ldi	r22, 0x06	; 6
    7090:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <DIO_GitPinVule>
    7094:	88 23       	and	r24, r24
    7096:	09 f0       	breq	.+2      	; 0x709a <push_button+0x268>
    7098:	f9 ce       	rjmp	.-526    	; 0x6e8c <push_button+0x5a>
		{
			DIO_VidSitPintValue(PORTC,PIN0, LOW);
    709a:	82 e0       	ldi	r24, 0x02	; 2
    709c:	60 e0       	ldi	r22, 0x00	; 0
    709e:	40 e0       	ldi	r20, 0x00	; 0
    70a0:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <DIO_VidSitPintValue>
			DIO_VidSitPintValue(PORTC,PIN1, LOW);
    70a4:	82 e0       	ldi	r24, 0x02	; 2
    70a6:	61 e0       	ldi	r22, 0x01	; 1
    70a8:	40 e0       	ldi	r20, 0x00	; 0
    70aa:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <DIO_VidSitPintValue>
			DIO_VidSitPintValue(PORTC,PIN2, HIGH);
    70ae:	82 e0       	ldi	r24, 0x02	; 2
    70b0:	62 e0       	ldi	r22, 0x02	; 2
    70b2:	41 e0       	ldi	r20, 0x01	; 1
    70b4:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <DIO_VidSitPintValue>
    70b8:	e9 ce       	rjmp	.-558    	; 0x6e8c <push_button+0x5a>

000070ba <main>:
 *      Author: shafek
 */


void main (void)
{
    70ba:	df 93       	push	r29
    70bc:	cf 93       	push	r28
    70be:	cd b7       	in	r28, 0x3d	; 61
    70c0:	de b7       	in	r29, 0x3e	; 62

	//calculator ();
	key_pad();
    70c2:	0e 94 14 29 	call	0x5228	; 0x5228 <key_pad>
	//LCD_4BIT();
	//dc_motor ();
	//EXI();
	//ADC();
	//ADCI();
}
    70c6:	cf 91       	pop	r28
    70c8:	df 91       	pop	r29
    70ca:	08 95       	ret

000070cc <__mulsi3>:
    70cc:	62 9f       	mul	r22, r18
    70ce:	d0 01       	movw	r26, r0
    70d0:	73 9f       	mul	r23, r19
    70d2:	f0 01       	movw	r30, r0
    70d4:	82 9f       	mul	r24, r18
    70d6:	e0 0d       	add	r30, r0
    70d8:	f1 1d       	adc	r31, r1
    70da:	64 9f       	mul	r22, r20
    70dc:	e0 0d       	add	r30, r0
    70de:	f1 1d       	adc	r31, r1
    70e0:	92 9f       	mul	r25, r18
    70e2:	f0 0d       	add	r31, r0
    70e4:	83 9f       	mul	r24, r19
    70e6:	f0 0d       	add	r31, r0
    70e8:	74 9f       	mul	r23, r20
    70ea:	f0 0d       	add	r31, r0
    70ec:	65 9f       	mul	r22, r21
    70ee:	f0 0d       	add	r31, r0
    70f0:	99 27       	eor	r25, r25
    70f2:	72 9f       	mul	r23, r18
    70f4:	b0 0d       	add	r27, r0
    70f6:	e1 1d       	adc	r30, r1
    70f8:	f9 1f       	adc	r31, r25
    70fa:	63 9f       	mul	r22, r19
    70fc:	b0 0d       	add	r27, r0
    70fe:	e1 1d       	adc	r30, r1
    7100:	f9 1f       	adc	r31, r25
    7102:	bd 01       	movw	r22, r26
    7104:	cf 01       	movw	r24, r30
    7106:	11 24       	eor	r1, r1
    7108:	08 95       	ret

0000710a <__udivmodsi4>:
    710a:	a1 e2       	ldi	r26, 0x21	; 33
    710c:	1a 2e       	mov	r1, r26
    710e:	aa 1b       	sub	r26, r26
    7110:	bb 1b       	sub	r27, r27
    7112:	fd 01       	movw	r30, r26
    7114:	0d c0       	rjmp	.+26     	; 0x7130 <__udivmodsi4_ep>

00007116 <__udivmodsi4_loop>:
    7116:	aa 1f       	adc	r26, r26
    7118:	bb 1f       	adc	r27, r27
    711a:	ee 1f       	adc	r30, r30
    711c:	ff 1f       	adc	r31, r31
    711e:	a2 17       	cp	r26, r18
    7120:	b3 07       	cpc	r27, r19
    7122:	e4 07       	cpc	r30, r20
    7124:	f5 07       	cpc	r31, r21
    7126:	20 f0       	brcs	.+8      	; 0x7130 <__udivmodsi4_ep>
    7128:	a2 1b       	sub	r26, r18
    712a:	b3 0b       	sbc	r27, r19
    712c:	e4 0b       	sbc	r30, r20
    712e:	f5 0b       	sbc	r31, r21

00007130 <__udivmodsi4_ep>:
    7130:	66 1f       	adc	r22, r22
    7132:	77 1f       	adc	r23, r23
    7134:	88 1f       	adc	r24, r24
    7136:	99 1f       	adc	r25, r25
    7138:	1a 94       	dec	r1
    713a:	69 f7       	brne	.-38     	; 0x7116 <__udivmodsi4_loop>
    713c:	60 95       	com	r22
    713e:	70 95       	com	r23
    7140:	80 95       	com	r24
    7142:	90 95       	com	r25
    7144:	9b 01       	movw	r18, r22
    7146:	ac 01       	movw	r20, r24
    7148:	bd 01       	movw	r22, r26
    714a:	cf 01       	movw	r24, r30
    714c:	08 95       	ret

0000714e <__prologue_saves__>:
    714e:	2f 92       	push	r2
    7150:	3f 92       	push	r3
    7152:	4f 92       	push	r4
    7154:	5f 92       	push	r5
    7156:	6f 92       	push	r6
    7158:	7f 92       	push	r7
    715a:	8f 92       	push	r8
    715c:	9f 92       	push	r9
    715e:	af 92       	push	r10
    7160:	bf 92       	push	r11
    7162:	cf 92       	push	r12
    7164:	df 92       	push	r13
    7166:	ef 92       	push	r14
    7168:	ff 92       	push	r15
    716a:	0f 93       	push	r16
    716c:	1f 93       	push	r17
    716e:	cf 93       	push	r28
    7170:	df 93       	push	r29
    7172:	cd b7       	in	r28, 0x3d	; 61
    7174:	de b7       	in	r29, 0x3e	; 62
    7176:	ca 1b       	sub	r28, r26
    7178:	db 0b       	sbc	r29, r27
    717a:	0f b6       	in	r0, 0x3f	; 63
    717c:	f8 94       	cli
    717e:	de bf       	out	0x3e, r29	; 62
    7180:	0f be       	out	0x3f, r0	; 63
    7182:	cd bf       	out	0x3d, r28	; 61
    7184:	09 94       	ijmp

00007186 <__epilogue_restores__>:
    7186:	2a 88       	ldd	r2, Y+18	; 0x12
    7188:	39 88       	ldd	r3, Y+17	; 0x11
    718a:	48 88       	ldd	r4, Y+16	; 0x10
    718c:	5f 84       	ldd	r5, Y+15	; 0x0f
    718e:	6e 84       	ldd	r6, Y+14	; 0x0e
    7190:	7d 84       	ldd	r7, Y+13	; 0x0d
    7192:	8c 84       	ldd	r8, Y+12	; 0x0c
    7194:	9b 84       	ldd	r9, Y+11	; 0x0b
    7196:	aa 84       	ldd	r10, Y+10	; 0x0a
    7198:	b9 84       	ldd	r11, Y+9	; 0x09
    719a:	c8 84       	ldd	r12, Y+8	; 0x08
    719c:	df 80       	ldd	r13, Y+7	; 0x07
    719e:	ee 80       	ldd	r14, Y+6	; 0x06
    71a0:	fd 80       	ldd	r15, Y+5	; 0x05
    71a2:	0c 81       	ldd	r16, Y+4	; 0x04
    71a4:	1b 81       	ldd	r17, Y+3	; 0x03
    71a6:	aa 81       	ldd	r26, Y+2	; 0x02
    71a8:	b9 81       	ldd	r27, Y+1	; 0x01
    71aa:	ce 0f       	add	r28, r30
    71ac:	d1 1d       	adc	r29, r1
    71ae:	0f b6       	in	r0, 0x3f	; 63
    71b0:	f8 94       	cli
    71b2:	de bf       	out	0x3e, r29	; 62
    71b4:	0f be       	out	0x3f, r0	; 63
    71b6:	cd bf       	out	0x3d, r28	; 61
    71b8:	ed 01       	movw	r28, r26
    71ba:	08 95       	ret

000071bc <_exit>:
    71bc:	f8 94       	cli

000071be <__stop_program>:
    71be:	ff cf       	rjmp	.-2      	; 0x71be <__stop_program>
