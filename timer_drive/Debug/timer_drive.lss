
timer_drive.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002db6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  00002db6  00002e4a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800078  00800078  00002e62  2**0
                  ALLOC
  3 .stab         0000258c  00000000  00000000  00002e64  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000010f1  00000000  00000000  000053f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  000064e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00006641  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  000067d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  00008815  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  00009916  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000a898  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000aa18  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000acda  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b568  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 25 15 	jmp	0x2a4a	; 0x2a4a <__vector_10>
      2c:	0c 94 45 16 	jmp	0x2c8a	; 0x2c8a <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 1d 07 	jmp	0xe3a	; 0xe3a <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 eb       	ldi	r30, 0xB6	; 182
      68:	fd e2       	ldi	r31, 0x2D	; 45
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 37       	cpi	r26, 0x78	; 120
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a8 e7       	ldi	r26, 0x78	; 120
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 37       	cpi	r26, 0x7E	; 126
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 58 15 	call	0x2ab0	; 0x2ab0 <main>
      8a:	0c 94 d9 16 	jmp	0x2db2	; 0x2db2 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 a2 16 	jmp	0x2d44	; 0x2d44 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	af e6       	ldi	r26, 0x6F	; 111
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 be 16 	jmp	0x2d7c	; 0x2d7c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 ae 16 	jmp	0x2d5c	; 0x2d5c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 ca 16 	jmp	0x2d94	; 0x2d94 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 ae 16 	jmp	0x2d5c	; 0x2d5c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 ca 16 	jmp	0x2d94	; 0x2d94 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 a2 16 	jmp	0x2d44	; 0x2d44 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8f e6       	ldi	r24, 0x6F	; 111
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 be 16 	jmp	0x2d7c	; 0x2d7c <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 aa 16 	jmp	0x2d54	; 0x2d54 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6f e6       	ldi	r22, 0x6F	; 111
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 c6 16 	jmp	0x2d8c	; 0x2d8c <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 ae 16 	jmp	0x2d5c	; 0x2d5c <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 ca 16 	jmp	0x2d94	; 0x2d94 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 ae 16 	jmp	0x2d5c	; 0x2d5c <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 ca 16 	jmp	0x2d94	; 0x2d94 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 ae 16 	jmp	0x2d5c	; 0x2d5c <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 ca 16 	jmp	0x2d94	; 0x2d94 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 b2 16 	jmp	0x2d64	; 0x2d64 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 ce 16 	jmp	0x2d9c	; 0x2d9c <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <ADC_VidSetCallBack>:

static void  (*CallBackFuncPtr)(void)= NULL;


void  ADC_VidSetCallBack (void (*LOC_funcptr)(void) )
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	00 d0       	rcall	.+0      	; 0xca4 <ADC_VidSetCallBack+0x6>
     ca4:	cd b7       	in	r28, 0x3d	; 61
     ca6:	de b7       	in	r29, 0x3e	; 62
     ca8:	9a 83       	std	Y+2, r25	; 0x02
     caa:	89 83       	std	Y+1, r24	; 0x01
	if(LOC_funcptr  != NULL )
     cac:	89 81       	ldd	r24, Y+1	; 0x01
     cae:	9a 81       	ldd	r25, Y+2	; 0x02
     cb0:	00 97       	sbiw	r24, 0x00	; 0
     cb2:	31 f0       	breq	.+12     	; 0xcc0 <ADC_VidSetCallBack+0x22>
	{
		CallBackFuncPtr = LOC_funcptr ;
     cb4:	89 81       	ldd	r24, Y+1	; 0x01
     cb6:	9a 81       	ldd	r25, Y+2	; 0x02
     cb8:	90 93 79 00 	sts	0x0079, r25
     cbc:	80 93 78 00 	sts	0x0078, r24
	}
}
     cc0:	0f 90       	pop	r0
     cc2:	0f 90       	pop	r0
     cc4:	cf 91       	pop	r28
     cc6:	df 91       	pop	r29
     cc8:	08 95       	ret

00000cca <ADC_VidInit>:


void ADC_VidInit(void)
{
     cca:	df 93       	push	r29
     ccc:	cf 93       	push	r28
     cce:	cd b7       	in	r28, 0x3d	; 61
     cd0:	de b7       	in	r29, 0x3e	; 62
#if Voltage_Reference__mode== Voltage_Reference_off
	CLR_BIT(ADMUX,REFS0);
	CLR_BIT(ADMUX,REFS1);              //V reference

#elif  Voltage_Reference__mode== Voltage_Reference_vcc
	SET_BIT(ADMUX,REFS0);
     cd2:	a7 e2       	ldi	r26, 0x27	; 39
     cd4:	b0 e0       	ldi	r27, 0x00	; 0
     cd6:	e7 e2       	ldi	r30, 0x27	; 39
     cd8:	f0 e0       	ldi	r31, 0x00	; 0
     cda:	80 81       	ld	r24, Z
     cdc:	80 64       	ori	r24, 0x40	; 64
     cde:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,REFS1);              //V reference
     ce0:	a7 e2       	ldi	r26, 0x27	; 39
     ce2:	b0 e0       	ldi	r27, 0x00	; 0
     ce4:	e7 e2       	ldi	r30, 0x27	; 39
     ce6:	f0 e0       	ldi	r31, 0x00	; 0
     ce8:	80 81       	ld	r24, Z
     cea:	8f 77       	andi	r24, 0x7F	; 127
     cec:	8c 93       	st	X, r24
	SET_BIT(ADMUX,REFS0);
	SET_BIT(ADMUX,REFS1);              //V reference
#endif

#if	ADC_Right_Adjust== enable
		CLR_BIT(ADMUX,ADLAR);
     cee:	a7 e2       	ldi	r26, 0x27	; 39
     cf0:	b0 e0       	ldi	r27, 0x00	; 0
     cf2:	e7 e2       	ldi	r30, 0x27	; 39
     cf4:	f0 e0       	ldi	r31, 0x00	; 0
     cf6:	80 81       	ld	r24, Z
     cf8:	8f 7d       	andi	r24, 0xDF	; 223
     cfa:	8c 93       	st	X, r24
#elif prescaler_mode== prescaler_32
			SET_BIT(ADCSRA,ADPS0);
			CLR_BIT(ADCSRA,ADPS1);
			SET_BIT(ADCSRA,ADPS2);	         //Prescaler
	#elif prescaler_mode== prescaler_64
			SET_BIT(ADCSRA,ADPS2);
     cfc:	a6 e2       	ldi	r26, 0x26	; 38
     cfe:	b0 e0       	ldi	r27, 0x00	; 0
     d00:	e6 e2       	ldi	r30, 0x26	; 38
     d02:	f0 e0       	ldi	r31, 0x00	; 0
     d04:	80 81       	ld	r24, Z
     d06:	84 60       	ori	r24, 0x04	; 4
     d08:	8c 93       	st	X, r24
			SET_BIT(ADCSRA,ADPS1);
     d0a:	a6 e2       	ldi	r26, 0x26	; 38
     d0c:	b0 e0       	ldi	r27, 0x00	; 0
     d0e:	e6 e2       	ldi	r30, 0x26	; 38
     d10:	f0 e0       	ldi	r31, 0x00	; 0
     d12:	80 81       	ld	r24, Z
     d14:	82 60       	ori	r24, 0x02	; 2
     d16:	8c 93       	st	X, r24
			CLR_BIT(ADCSRA,ADPS0);	         //Prescaler
     d18:	a6 e2       	ldi	r26, 0x26	; 38
     d1a:	b0 e0       	ldi	r27, 0x00	; 0
     d1c:	e6 e2       	ldi	r30, 0x26	; 38
     d1e:	f0 e0       	ldi	r31, 0x00	; 0
     d20:	80 81       	ld	r24, Z
     d22:	8e 7f       	andi	r24, 0xFE	; 254
     d24:	8c 93       	st	X, r24
		#error  "wrong choice"
	#endif


#if Auto_Trigger_Source_Selections==Free_Running_mode
			CLR_BIT(SFIOR,ADTS0);
     d26:	a0 e5       	ldi	r26, 0x50	; 80
     d28:	b0 e0       	ldi	r27, 0x00	; 0
     d2a:	e0 e5       	ldi	r30, 0x50	; 80
     d2c:	f0 e0       	ldi	r31, 0x00	; 0
     d2e:	80 81       	ld	r24, Z
     d30:	8f 7d       	andi	r24, 0xDF	; 223
     d32:	8c 93       	st	X, r24
			CLR_BIT(SFIOR,ADTS1);
     d34:	a0 e5       	ldi	r26, 0x50	; 80
     d36:	b0 e0       	ldi	r27, 0x00	; 0
     d38:	e0 e5       	ldi	r30, 0x50	; 80
     d3a:	f0 e0       	ldi	r31, 0x00	; 0
     d3c:	80 81       	ld	r24, Z
     d3e:	8f 7b       	andi	r24, 0xBF	; 191
     d40:	8c 93       	st	X, r24
			CLR_BIT(SFIOR,ADTS2);
     d42:	a0 e5       	ldi	r26, 0x50	; 80
     d44:	b0 e0       	ldi	r27, 0x00	; 0
     d46:	e0 e5       	ldi	r30, 0x50	; 80
     d48:	f0 e0       	ldi	r31, 0x00	; 0
     d4a:	80 81       	ld	r24, Z
     d4c:	8f 77       	andi	r24, 0x7F	; 127
     d4e:	8c 93       	st	X, r24
#else
	#error  "wrong choice"
#endif

#if	Auto_trigger== enable
			SET_BIT(ADCSRA,ADATE);
     d50:	a6 e2       	ldi	r26, 0x26	; 38
     d52:	b0 e0       	ldi	r27, 0x00	; 0
     d54:	e6 e2       	ldi	r30, 0x26	; 38
     d56:	f0 e0       	ldi	r31, 0x00	; 0
     d58:	80 81       	ld	r24, Z
     d5a:	80 62       	ori	r24, 0x20	; 32
     d5c:	8c 93       	st	X, r24
	#error  "wrong choice Auto_trigger"
#endif


#if	ADC_TRIGGER== enable
			SET_BIT(ADCSRA,ADEN);
     d5e:	a6 e2       	ldi	r26, 0x26	; 38
     d60:	b0 e0       	ldi	r27, 0x00	; 0
     d62:	e6 e2       	ldi	r30, 0x26	; 38
     d64:	f0 e0       	ldi	r31, 0x00	; 0
     d66:	80 81       	ld	r24, Z
     d68:	80 68       	ori	r24, 0x80	; 128
     d6a:	8c 93       	st	X, r24
			CLR_BIT(ADCSRA,ADEN);
#else
	#error  "wrong choice Auto_trigger"
#endif

}
     d6c:	cf 91       	pop	r28
     d6e:	df 91       	pop	r29
     d70:	08 95       	ret

00000d72 <ADC_U16GitDigital>:

u16 ADC_U16GitDigital(u8 LOC_Channel)
{
     d72:	df 93       	push	r29
     d74:	cf 93       	push	r28
     d76:	0f 92       	push	r0
     d78:	cd b7       	in	r28, 0x3d	; 61
     d7a:	de b7       	in	r29, 0x3e	; 62
     d7c:	89 83       	std	Y+1, r24	; 0x01
	ADMUX&=singel_ended;
     d7e:	a7 e2       	ldi	r26, 0x27	; 39
     d80:	b0 e0       	ldi	r27, 0x00	; 0
     d82:	e7 e2       	ldi	r30, 0x27	; 39
     d84:	f0 e0       	ldi	r31, 0x00	; 0
     d86:	80 81       	ld	r24, Z
     d88:	80 7e       	andi	r24, 0xE0	; 224
     d8a:	8c 93       	st	X, r24
	ADMUX|=LOC_Channel;              //number of channel by user
     d8c:	a7 e2       	ldi	r26, 0x27	; 39
     d8e:	b0 e0       	ldi	r27, 0x00	; 0
     d90:	e7 e2       	ldi	r30, 0x27	; 39
     d92:	f0 e0       	ldi	r31, 0x00	; 0
     d94:	90 81       	ld	r25, Z
     d96:	89 81       	ldd	r24, Y+1	; 0x01
     d98:	89 2b       	or	r24, r25
     d9a:	8c 93       	st	X, r24

	SET_BIT(ADCSRA,ADSC);           //Start Conversion
     d9c:	a6 e2       	ldi	r26, 0x26	; 38
     d9e:	b0 e0       	ldi	r27, 0x00	; 0
     da0:	e6 e2       	ldi	r30, 0x26	; 38
     da2:	f0 e0       	ldi	r31, 0x00	; 0
     da4:	80 81       	ld	r24, Z
     da6:	80 64       	ori	r24, 0x40	; 64
     da8:	8c 93       	st	X, r24
	while(0==GET_BIT(ADCSRA,ADIF))  //if ADC interrupt flag=0 waite until be one
     daa:	e6 e2       	ldi	r30, 0x26	; 38
     dac:	f0 e0       	ldi	r31, 0x00	; 0
     dae:	80 81       	ld	r24, Z
     db0:	82 95       	swap	r24
     db2:	8f 70       	andi	r24, 0x0F	; 15
     db4:	88 2f       	mov	r24, r24
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	81 70       	andi	r24, 0x01	; 1
     dba:	90 70       	andi	r25, 0x00	; 0
     dbc:	00 97       	sbiw	r24, 0x00	; 0
     dbe:	a9 f3       	breq	.-22     	; 0xdaa <ADC_U16GitDigital+0x38>
	{
	}
	SET_BIT(ADCSRA,ADIF);           //reset the interrupt flag over write one to be zero
     dc0:	a6 e2       	ldi	r26, 0x26	; 38
     dc2:	b0 e0       	ldi	r27, 0x00	; 0
     dc4:	e6 e2       	ldi	r30, 0x26	; 38
     dc6:	f0 e0       	ldi	r31, 0x00	; 0
     dc8:	80 81       	ld	r24, Z
     dca:	80 61       	ori	r24, 0x10	; 16
     dcc:	8c 93       	st	X, r24
    return ADC;
     dce:	e4 e2       	ldi	r30, 0x24	; 36
     dd0:	f0 e0       	ldi	r31, 0x00	; 0
     dd2:	80 81       	ld	r24, Z
     dd4:	91 81       	ldd	r25, Z+1	; 0x01

}
     dd6:	0f 90       	pop	r0
     dd8:	cf 91       	pop	r28
     dda:	df 91       	pop	r29
     ddc:	08 95       	ret

00000dde <ADC_VidStartConvertion>:


void ADC_VidStartConvertion(u8  LOC_Channel)
{
     dde:	df 93       	push	r29
     de0:	cf 93       	push	r28
     de2:	0f 92       	push	r0
     de4:	cd b7       	in	r28, 0x3d	; 61
     de6:	de b7       	in	r29, 0x3e	; 62
     de8:	89 83       	std	Y+1, r24	; 0x01
	ADMUX&=singel_ended;               //singel ended
     dea:	a7 e2       	ldi	r26, 0x27	; 39
     dec:	b0 e0       	ldi	r27, 0x00	; 0
     dee:	e7 e2       	ldi	r30, 0x27	; 39
     df0:	f0 e0       	ldi	r31, 0x00	; 0
     df2:	80 81       	ld	r24, Z
     df4:	80 7e       	andi	r24, 0xE0	; 224
     df6:	8c 93       	st	X, r24
	ADMUX|=LOC_Channel;              //number of channel by user
     df8:	a7 e2       	ldi	r26, 0x27	; 39
     dfa:	b0 e0       	ldi	r27, 0x00	; 0
     dfc:	e7 e2       	ldi	r30, 0x27	; 39
     dfe:	f0 e0       	ldi	r31, 0x00	; 0
     e00:	90 81       	ld	r25, Z
     e02:	89 81       	ldd	r24, Y+1	; 0x01
     e04:	89 2b       	or	r24, r25
     e06:	8c 93       	st	X, r24

	//SET_BIT(ADCSRA,ADIE);              //enable intruppt

	SET_BIT(ADCSRA,ADSC);           //Start Conversion
     e08:	a6 e2       	ldi	r26, 0x26	; 38
     e0a:	b0 e0       	ldi	r27, 0x00	; 0
     e0c:	e6 e2       	ldi	r30, 0x26	; 38
     e0e:	f0 e0       	ldi	r31, 0x00	; 0
     e10:	80 81       	ld	r24, Z
     e12:	80 64       	ori	r24, 0x40	; 64
     e14:	8c 93       	st	X, r24
}
     e16:	0f 90       	pop	r0
     e18:	cf 91       	pop	r28
     e1a:	df 91       	pop	r29
     e1c:	08 95       	ret

00000e1e <ADC_VidEnableInt>:

void ADC_VidEnableInt(void)
	{
     e1e:	df 93       	push	r29
     e20:	cf 93       	push	r28
     e22:	cd b7       	in	r28, 0x3d	; 61
     e24:	de b7       	in	r29, 0x3e	; 62
		SET_BIT(ADCSRA,ADIE);              //enable intruppt
     e26:	a6 e2       	ldi	r26, 0x26	; 38
     e28:	b0 e0       	ldi	r27, 0x00	; 0
     e2a:	e6 e2       	ldi	r30, 0x26	; 38
     e2c:	f0 e0       	ldi	r31, 0x00	; 0
     e2e:	80 81       	ld	r24, Z
     e30:	88 60       	ori	r24, 0x08	; 8
     e32:	8c 93       	st	X, r24
	}
     e34:	cf 91       	pop	r28
     e36:	df 91       	pop	r29
     e38:	08 95       	ret

00000e3a <__vector_16>:

ISR(ADC_VECT)
{
     e3a:	1f 92       	push	r1
     e3c:	0f 92       	push	r0
     e3e:	0f b6       	in	r0, 0x3f	; 63
     e40:	0f 92       	push	r0
     e42:	11 24       	eor	r1, r1
     e44:	2f 93       	push	r18
     e46:	3f 93       	push	r19
     e48:	4f 93       	push	r20
     e4a:	5f 93       	push	r21
     e4c:	6f 93       	push	r22
     e4e:	7f 93       	push	r23
     e50:	8f 93       	push	r24
     e52:	9f 93       	push	r25
     e54:	af 93       	push	r26
     e56:	bf 93       	push	r27
     e58:	ef 93       	push	r30
     e5a:	ff 93       	push	r31
     e5c:	df 93       	push	r29
     e5e:	cf 93       	push	r28
     e60:	cd b7       	in	r28, 0x3d	; 61
     e62:	de b7       	in	r29, 0x3e	; 62
	if(CallBackFuncPtr != NULL )
     e64:	80 91 78 00 	lds	r24, 0x0078
     e68:	90 91 79 00 	lds	r25, 0x0079
     e6c:	00 97       	sbiw	r24, 0x00	; 0
     e6e:	29 f0       	breq	.+10     	; 0xe7a <__vector_16+0x40>
	{
		CallBackFuncPtr();
     e70:	e0 91 78 00 	lds	r30, 0x0078
     e74:	f0 91 79 00 	lds	r31, 0x0079
     e78:	09 95       	icall
	{
		DIO_VidSetPinValue(PORTB,PIN7,1);
		DIO_VidSetPinValue(PORTB,PIN0,0);
		DIO_VidSetPinValue(PORTB,PIN1,0);
	}*/
}
     e7a:	cf 91       	pop	r28
     e7c:	df 91       	pop	r29
     e7e:	ff 91       	pop	r31
     e80:	ef 91       	pop	r30
     e82:	bf 91       	pop	r27
     e84:	af 91       	pop	r26
     e86:	9f 91       	pop	r25
     e88:	8f 91       	pop	r24
     e8a:	7f 91       	pop	r23
     e8c:	6f 91       	pop	r22
     e8e:	5f 91       	pop	r21
     e90:	4f 91       	pop	r20
     e92:	3f 91       	pop	r19
     e94:	2f 91       	pop	r18
     e96:	0f 90       	pop	r0
     e98:	0f be       	out	0x3f, r0	; 63
     e9a:	0f 90       	pop	r0
     e9c:	1f 90       	pop	r1
     e9e:	18 95       	reti

00000ea0 <DIO_VidSetPinDirection>:
#include "STD_TYPES.h"
#include "DIO_Register.h"
#include "BIT_Math.h"

void DIO_VidSetPinDirection	( u8 LOC_u8Port, u8 LOC_u8Pin, u8 LOC_u8State)
{
     ea0:	df 93       	push	r29
     ea2:	cf 93       	push	r28
     ea4:	cd b7       	in	r28, 0x3d	; 61
     ea6:	de b7       	in	r29, 0x3e	; 62
     ea8:	27 97       	sbiw	r28, 0x07	; 7
     eaa:	0f b6       	in	r0, 0x3f	; 63
     eac:	f8 94       	cli
     eae:	de bf       	out	0x3e, r29	; 62
     eb0:	0f be       	out	0x3f, r0	; 63
     eb2:	cd bf       	out	0x3d, r28	; 61
     eb4:	89 83       	std	Y+1, r24	; 0x01
     eb6:	6a 83       	std	Y+2, r22	; 0x02
     eb8:	4b 83       	std	Y+3, r20	; 0x03
	if ( OUTPUT==LOC_u8State)
     eba:	8b 81       	ldd	r24, Y+3	; 0x03
     ebc:	81 30       	cpi	r24, 0x01	; 1
     ebe:	09 f0       	breq	.+2      	; 0xec2 <DIO_VidSetPinDirection+0x22>
     ec0:	6f c0       	rjmp	.+222    	; 0xfa0 <DIO_VidSetPinDirection+0x100>
	{
		switch (LOC_u8Port)
     ec2:	89 81       	ldd	r24, Y+1	; 0x01
     ec4:	28 2f       	mov	r18, r24
     ec6:	30 e0       	ldi	r19, 0x00	; 0
     ec8:	3f 83       	std	Y+7, r19	; 0x07
     eca:	2e 83       	std	Y+6, r18	; 0x06
     ecc:	8e 81       	ldd	r24, Y+6	; 0x06
     ece:	9f 81       	ldd	r25, Y+7	; 0x07
     ed0:	81 30       	cpi	r24, 0x01	; 1
     ed2:	91 05       	cpc	r25, r1
     ed4:	49 f1       	breq	.+82     	; 0xf28 <DIO_VidSetPinDirection+0x88>
     ed6:	2e 81       	ldd	r18, Y+6	; 0x06
     ed8:	3f 81       	ldd	r19, Y+7	; 0x07
     eda:	22 30       	cpi	r18, 0x02	; 2
     edc:	31 05       	cpc	r19, r1
     ede:	2c f4       	brge	.+10     	; 0xeea <DIO_VidSetPinDirection+0x4a>
     ee0:	8e 81       	ldd	r24, Y+6	; 0x06
     ee2:	9f 81       	ldd	r25, Y+7	; 0x07
     ee4:	00 97       	sbiw	r24, 0x00	; 0
     ee6:	61 f0       	breq	.+24     	; 0xf00 <DIO_VidSetPinDirection+0x60>
     ee8:	d2 c0       	rjmp	.+420    	; 0x108e <DIO_VidSetPinDirection+0x1ee>
     eea:	2e 81       	ldd	r18, Y+6	; 0x06
     eec:	3f 81       	ldd	r19, Y+7	; 0x07
     eee:	22 30       	cpi	r18, 0x02	; 2
     ef0:	31 05       	cpc	r19, r1
     ef2:	71 f1       	breq	.+92     	; 0xf50 <DIO_VidSetPinDirection+0xb0>
     ef4:	8e 81       	ldd	r24, Y+6	; 0x06
     ef6:	9f 81       	ldd	r25, Y+7	; 0x07
     ef8:	83 30       	cpi	r24, 0x03	; 3
     efa:	91 05       	cpc	r25, r1
     efc:	e9 f1       	breq	.+122    	; 0xf78 <DIO_VidSetPinDirection+0xd8>
     efe:	c7 c0       	rjmp	.+398    	; 0x108e <DIO_VidSetPinDirection+0x1ee>
		{
		case 0: SET_BIT(DDRA, LOC_u8Pin); break;
     f00:	aa e3       	ldi	r26, 0x3A	; 58
     f02:	b0 e0       	ldi	r27, 0x00	; 0
     f04:	ea e3       	ldi	r30, 0x3A	; 58
     f06:	f0 e0       	ldi	r31, 0x00	; 0
     f08:	80 81       	ld	r24, Z
     f0a:	48 2f       	mov	r20, r24
     f0c:	8a 81       	ldd	r24, Y+2	; 0x02
     f0e:	28 2f       	mov	r18, r24
     f10:	30 e0       	ldi	r19, 0x00	; 0
     f12:	81 e0       	ldi	r24, 0x01	; 1
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	02 2e       	mov	r0, r18
     f18:	02 c0       	rjmp	.+4      	; 0xf1e <DIO_VidSetPinDirection+0x7e>
     f1a:	88 0f       	add	r24, r24
     f1c:	99 1f       	adc	r25, r25
     f1e:	0a 94       	dec	r0
     f20:	e2 f7       	brpl	.-8      	; 0xf1a <DIO_VidSetPinDirection+0x7a>
     f22:	84 2b       	or	r24, r20
     f24:	8c 93       	st	X, r24
     f26:	b3 c0       	rjmp	.+358    	; 0x108e <DIO_VidSetPinDirection+0x1ee>
		case 1: SET_BIT(DDRB, LOC_u8Pin); break;
     f28:	a7 e3       	ldi	r26, 0x37	; 55
     f2a:	b0 e0       	ldi	r27, 0x00	; 0
     f2c:	e7 e3       	ldi	r30, 0x37	; 55
     f2e:	f0 e0       	ldi	r31, 0x00	; 0
     f30:	80 81       	ld	r24, Z
     f32:	48 2f       	mov	r20, r24
     f34:	8a 81       	ldd	r24, Y+2	; 0x02
     f36:	28 2f       	mov	r18, r24
     f38:	30 e0       	ldi	r19, 0x00	; 0
     f3a:	81 e0       	ldi	r24, 0x01	; 1
     f3c:	90 e0       	ldi	r25, 0x00	; 0
     f3e:	02 2e       	mov	r0, r18
     f40:	02 c0       	rjmp	.+4      	; 0xf46 <DIO_VidSetPinDirection+0xa6>
     f42:	88 0f       	add	r24, r24
     f44:	99 1f       	adc	r25, r25
     f46:	0a 94       	dec	r0
     f48:	e2 f7       	brpl	.-8      	; 0xf42 <DIO_VidSetPinDirection+0xa2>
     f4a:	84 2b       	or	r24, r20
     f4c:	8c 93       	st	X, r24
     f4e:	9f c0       	rjmp	.+318    	; 0x108e <DIO_VidSetPinDirection+0x1ee>
		case 2: SET_BIT(DDRC, LOC_u8Pin); break;
     f50:	a4 e3       	ldi	r26, 0x34	; 52
     f52:	b0 e0       	ldi	r27, 0x00	; 0
     f54:	e4 e3       	ldi	r30, 0x34	; 52
     f56:	f0 e0       	ldi	r31, 0x00	; 0
     f58:	80 81       	ld	r24, Z
     f5a:	48 2f       	mov	r20, r24
     f5c:	8a 81       	ldd	r24, Y+2	; 0x02
     f5e:	28 2f       	mov	r18, r24
     f60:	30 e0       	ldi	r19, 0x00	; 0
     f62:	81 e0       	ldi	r24, 0x01	; 1
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	02 2e       	mov	r0, r18
     f68:	02 c0       	rjmp	.+4      	; 0xf6e <DIO_VidSetPinDirection+0xce>
     f6a:	88 0f       	add	r24, r24
     f6c:	99 1f       	adc	r25, r25
     f6e:	0a 94       	dec	r0
     f70:	e2 f7       	brpl	.-8      	; 0xf6a <DIO_VidSetPinDirection+0xca>
     f72:	84 2b       	or	r24, r20
     f74:	8c 93       	st	X, r24
     f76:	8b c0       	rjmp	.+278    	; 0x108e <DIO_VidSetPinDirection+0x1ee>
		case 3: SET_BIT(DDRD, LOC_u8Pin); break;
     f78:	a1 e3       	ldi	r26, 0x31	; 49
     f7a:	b0 e0       	ldi	r27, 0x00	; 0
     f7c:	e1 e3       	ldi	r30, 0x31	; 49
     f7e:	f0 e0       	ldi	r31, 0x00	; 0
     f80:	80 81       	ld	r24, Z
     f82:	48 2f       	mov	r20, r24
     f84:	8a 81       	ldd	r24, Y+2	; 0x02
     f86:	28 2f       	mov	r18, r24
     f88:	30 e0       	ldi	r19, 0x00	; 0
     f8a:	81 e0       	ldi	r24, 0x01	; 1
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	02 2e       	mov	r0, r18
     f90:	02 c0       	rjmp	.+4      	; 0xf96 <DIO_VidSetPinDirection+0xf6>
     f92:	88 0f       	add	r24, r24
     f94:	99 1f       	adc	r25, r25
     f96:	0a 94       	dec	r0
     f98:	e2 f7       	brpl	.-8      	; 0xf92 <DIO_VidSetPinDirection+0xf2>
     f9a:	84 2b       	or	r24, r20
     f9c:	8c 93       	st	X, r24
     f9e:	77 c0       	rjmp	.+238    	; 0x108e <DIO_VidSetPinDirection+0x1ee>
		}
	}
	else if (INPUT==LOC_u8State)
     fa0:	8b 81       	ldd	r24, Y+3	; 0x03
     fa2:	88 23       	and	r24, r24
     fa4:	09 f0       	breq	.+2      	; 0xfa8 <DIO_VidSetPinDirection+0x108>
     fa6:	73 c0       	rjmp	.+230    	; 0x108e <DIO_VidSetPinDirection+0x1ee>
	{
		switch (LOC_u8Port)
     fa8:	89 81       	ldd	r24, Y+1	; 0x01
     faa:	28 2f       	mov	r18, r24
     fac:	30 e0       	ldi	r19, 0x00	; 0
     fae:	3d 83       	std	Y+5, r19	; 0x05
     fb0:	2c 83       	std	Y+4, r18	; 0x04
     fb2:	8c 81       	ldd	r24, Y+4	; 0x04
     fb4:	9d 81       	ldd	r25, Y+5	; 0x05
     fb6:	81 30       	cpi	r24, 0x01	; 1
     fb8:	91 05       	cpc	r25, r1
     fba:	59 f1       	breq	.+86     	; 0x1012 <DIO_VidSetPinDirection+0x172>
     fbc:	2c 81       	ldd	r18, Y+4	; 0x04
     fbe:	3d 81       	ldd	r19, Y+5	; 0x05
     fc0:	22 30       	cpi	r18, 0x02	; 2
     fc2:	31 05       	cpc	r19, r1
     fc4:	2c f4       	brge	.+10     	; 0xfd0 <DIO_VidSetPinDirection+0x130>
     fc6:	8c 81       	ldd	r24, Y+4	; 0x04
     fc8:	9d 81       	ldd	r25, Y+5	; 0x05
     fca:	00 97       	sbiw	r24, 0x00	; 0
     fcc:	69 f0       	breq	.+26     	; 0xfe8 <DIO_VidSetPinDirection+0x148>
     fce:	5f c0       	rjmp	.+190    	; 0x108e <DIO_VidSetPinDirection+0x1ee>
     fd0:	2c 81       	ldd	r18, Y+4	; 0x04
     fd2:	3d 81       	ldd	r19, Y+5	; 0x05
     fd4:	22 30       	cpi	r18, 0x02	; 2
     fd6:	31 05       	cpc	r19, r1
     fd8:	89 f1       	breq	.+98     	; 0x103c <DIO_VidSetPinDirection+0x19c>
     fda:	8c 81       	ldd	r24, Y+4	; 0x04
     fdc:	9d 81       	ldd	r25, Y+5	; 0x05
     fde:	83 30       	cpi	r24, 0x03	; 3
     fe0:	91 05       	cpc	r25, r1
     fe2:	09 f4       	brne	.+2      	; 0xfe6 <DIO_VidSetPinDirection+0x146>
     fe4:	40 c0       	rjmp	.+128    	; 0x1066 <DIO_VidSetPinDirection+0x1c6>
     fe6:	53 c0       	rjmp	.+166    	; 0x108e <DIO_VidSetPinDirection+0x1ee>
		{
		case 0: CLR_BIT(DDRA, LOC_u8Pin); break;
     fe8:	aa e3       	ldi	r26, 0x3A	; 58
     fea:	b0 e0       	ldi	r27, 0x00	; 0
     fec:	ea e3       	ldi	r30, 0x3A	; 58
     fee:	f0 e0       	ldi	r31, 0x00	; 0
     ff0:	80 81       	ld	r24, Z
     ff2:	48 2f       	mov	r20, r24
     ff4:	8a 81       	ldd	r24, Y+2	; 0x02
     ff6:	28 2f       	mov	r18, r24
     ff8:	30 e0       	ldi	r19, 0x00	; 0
     ffa:	81 e0       	ldi	r24, 0x01	; 1
     ffc:	90 e0       	ldi	r25, 0x00	; 0
     ffe:	02 2e       	mov	r0, r18
    1000:	02 c0       	rjmp	.+4      	; 0x1006 <DIO_VidSetPinDirection+0x166>
    1002:	88 0f       	add	r24, r24
    1004:	99 1f       	adc	r25, r25
    1006:	0a 94       	dec	r0
    1008:	e2 f7       	brpl	.-8      	; 0x1002 <DIO_VidSetPinDirection+0x162>
    100a:	80 95       	com	r24
    100c:	84 23       	and	r24, r20
    100e:	8c 93       	st	X, r24
    1010:	3e c0       	rjmp	.+124    	; 0x108e <DIO_VidSetPinDirection+0x1ee>
		case 1: CLR_BIT(DDRB, LOC_u8Pin); break;
    1012:	a7 e3       	ldi	r26, 0x37	; 55
    1014:	b0 e0       	ldi	r27, 0x00	; 0
    1016:	e7 e3       	ldi	r30, 0x37	; 55
    1018:	f0 e0       	ldi	r31, 0x00	; 0
    101a:	80 81       	ld	r24, Z
    101c:	48 2f       	mov	r20, r24
    101e:	8a 81       	ldd	r24, Y+2	; 0x02
    1020:	28 2f       	mov	r18, r24
    1022:	30 e0       	ldi	r19, 0x00	; 0
    1024:	81 e0       	ldi	r24, 0x01	; 1
    1026:	90 e0       	ldi	r25, 0x00	; 0
    1028:	02 2e       	mov	r0, r18
    102a:	02 c0       	rjmp	.+4      	; 0x1030 <DIO_VidSetPinDirection+0x190>
    102c:	88 0f       	add	r24, r24
    102e:	99 1f       	adc	r25, r25
    1030:	0a 94       	dec	r0
    1032:	e2 f7       	brpl	.-8      	; 0x102c <DIO_VidSetPinDirection+0x18c>
    1034:	80 95       	com	r24
    1036:	84 23       	and	r24, r20
    1038:	8c 93       	st	X, r24
    103a:	29 c0       	rjmp	.+82     	; 0x108e <DIO_VidSetPinDirection+0x1ee>
		case 2: CLR_BIT(DDRC, LOC_u8Pin); break;
    103c:	a4 e3       	ldi	r26, 0x34	; 52
    103e:	b0 e0       	ldi	r27, 0x00	; 0
    1040:	e4 e3       	ldi	r30, 0x34	; 52
    1042:	f0 e0       	ldi	r31, 0x00	; 0
    1044:	80 81       	ld	r24, Z
    1046:	48 2f       	mov	r20, r24
    1048:	8a 81       	ldd	r24, Y+2	; 0x02
    104a:	28 2f       	mov	r18, r24
    104c:	30 e0       	ldi	r19, 0x00	; 0
    104e:	81 e0       	ldi	r24, 0x01	; 1
    1050:	90 e0       	ldi	r25, 0x00	; 0
    1052:	02 2e       	mov	r0, r18
    1054:	02 c0       	rjmp	.+4      	; 0x105a <DIO_VidSetPinDirection+0x1ba>
    1056:	88 0f       	add	r24, r24
    1058:	99 1f       	adc	r25, r25
    105a:	0a 94       	dec	r0
    105c:	e2 f7       	brpl	.-8      	; 0x1056 <DIO_VidSetPinDirection+0x1b6>
    105e:	80 95       	com	r24
    1060:	84 23       	and	r24, r20
    1062:	8c 93       	st	X, r24
    1064:	14 c0       	rjmp	.+40     	; 0x108e <DIO_VidSetPinDirection+0x1ee>
		case 3: CLR_BIT(DDRD, LOC_u8Pin); break;
    1066:	a1 e3       	ldi	r26, 0x31	; 49
    1068:	b0 e0       	ldi	r27, 0x00	; 0
    106a:	e1 e3       	ldi	r30, 0x31	; 49
    106c:	f0 e0       	ldi	r31, 0x00	; 0
    106e:	80 81       	ld	r24, Z
    1070:	48 2f       	mov	r20, r24
    1072:	8a 81       	ldd	r24, Y+2	; 0x02
    1074:	28 2f       	mov	r18, r24
    1076:	30 e0       	ldi	r19, 0x00	; 0
    1078:	81 e0       	ldi	r24, 0x01	; 1
    107a:	90 e0       	ldi	r25, 0x00	; 0
    107c:	02 2e       	mov	r0, r18
    107e:	02 c0       	rjmp	.+4      	; 0x1084 <DIO_VidSetPinDirection+0x1e4>
    1080:	88 0f       	add	r24, r24
    1082:	99 1f       	adc	r25, r25
    1084:	0a 94       	dec	r0
    1086:	e2 f7       	brpl	.-8      	; 0x1080 <DIO_VidSetPinDirection+0x1e0>
    1088:	80 95       	com	r24
    108a:	84 23       	and	r24, r20
    108c:	8c 93       	st	X, r24
		}
	}
}
    108e:	27 96       	adiw	r28, 0x07	; 7
    1090:	0f b6       	in	r0, 0x3f	; 63
    1092:	f8 94       	cli
    1094:	de bf       	out	0x3e, r29	; 62
    1096:	0f be       	out	0x3f, r0	; 63
    1098:	cd bf       	out	0x3d, r28	; 61
    109a:	cf 91       	pop	r28
    109c:	df 91       	pop	r29
    109e:	08 95       	ret

000010a0 <DIO_VidSetPinValue>:

void DIO_VidSetPinValue	( u8 LOC_u8Port, u8 LOC_u8Pin, u8 LOC_u8Value)
{
    10a0:	df 93       	push	r29
    10a2:	cf 93       	push	r28
    10a4:	cd b7       	in	r28, 0x3d	; 61
    10a6:	de b7       	in	r29, 0x3e	; 62
    10a8:	27 97       	sbiw	r28, 0x07	; 7
    10aa:	0f b6       	in	r0, 0x3f	; 63
    10ac:	f8 94       	cli
    10ae:	de bf       	out	0x3e, r29	; 62
    10b0:	0f be       	out	0x3f, r0	; 63
    10b2:	cd bf       	out	0x3d, r28	; 61
    10b4:	89 83       	std	Y+1, r24	; 0x01
    10b6:	6a 83       	std	Y+2, r22	; 0x02
    10b8:	4b 83       	std	Y+3, r20	; 0x03
	if ( 1==LOC_u8Value)
    10ba:	8b 81       	ldd	r24, Y+3	; 0x03
    10bc:	81 30       	cpi	r24, 0x01	; 1
    10be:	09 f0       	breq	.+2      	; 0x10c2 <DIO_VidSetPinValue+0x22>
    10c0:	6f c0       	rjmp	.+222    	; 0x11a0 <DIO_VidSetPinValue+0x100>
	{
		switch (LOC_u8Port)
    10c2:	89 81       	ldd	r24, Y+1	; 0x01
    10c4:	28 2f       	mov	r18, r24
    10c6:	30 e0       	ldi	r19, 0x00	; 0
    10c8:	3f 83       	std	Y+7, r19	; 0x07
    10ca:	2e 83       	std	Y+6, r18	; 0x06
    10cc:	8e 81       	ldd	r24, Y+6	; 0x06
    10ce:	9f 81       	ldd	r25, Y+7	; 0x07
    10d0:	81 30       	cpi	r24, 0x01	; 1
    10d2:	91 05       	cpc	r25, r1
    10d4:	49 f1       	breq	.+82     	; 0x1128 <DIO_VidSetPinValue+0x88>
    10d6:	2e 81       	ldd	r18, Y+6	; 0x06
    10d8:	3f 81       	ldd	r19, Y+7	; 0x07
    10da:	22 30       	cpi	r18, 0x02	; 2
    10dc:	31 05       	cpc	r19, r1
    10de:	2c f4       	brge	.+10     	; 0x10ea <DIO_VidSetPinValue+0x4a>
    10e0:	8e 81       	ldd	r24, Y+6	; 0x06
    10e2:	9f 81       	ldd	r25, Y+7	; 0x07
    10e4:	00 97       	sbiw	r24, 0x00	; 0
    10e6:	61 f0       	breq	.+24     	; 0x1100 <DIO_VidSetPinValue+0x60>
    10e8:	d2 c0       	rjmp	.+420    	; 0x128e <DIO_VidSetPinValue+0x1ee>
    10ea:	2e 81       	ldd	r18, Y+6	; 0x06
    10ec:	3f 81       	ldd	r19, Y+7	; 0x07
    10ee:	22 30       	cpi	r18, 0x02	; 2
    10f0:	31 05       	cpc	r19, r1
    10f2:	71 f1       	breq	.+92     	; 0x1150 <DIO_VidSetPinValue+0xb0>
    10f4:	8e 81       	ldd	r24, Y+6	; 0x06
    10f6:	9f 81       	ldd	r25, Y+7	; 0x07
    10f8:	83 30       	cpi	r24, 0x03	; 3
    10fa:	91 05       	cpc	r25, r1
    10fc:	e9 f1       	breq	.+122    	; 0x1178 <DIO_VidSetPinValue+0xd8>
    10fe:	c7 c0       	rjmp	.+398    	; 0x128e <DIO_VidSetPinValue+0x1ee>
		{
		case 0: SET_BIT(PORTA_1, LOC_u8Pin); break;
    1100:	ab e3       	ldi	r26, 0x3B	; 59
    1102:	b0 e0       	ldi	r27, 0x00	; 0
    1104:	eb e3       	ldi	r30, 0x3B	; 59
    1106:	f0 e0       	ldi	r31, 0x00	; 0
    1108:	80 81       	ld	r24, Z
    110a:	48 2f       	mov	r20, r24
    110c:	8a 81       	ldd	r24, Y+2	; 0x02
    110e:	28 2f       	mov	r18, r24
    1110:	30 e0       	ldi	r19, 0x00	; 0
    1112:	81 e0       	ldi	r24, 0x01	; 1
    1114:	90 e0       	ldi	r25, 0x00	; 0
    1116:	02 2e       	mov	r0, r18
    1118:	02 c0       	rjmp	.+4      	; 0x111e <DIO_VidSetPinValue+0x7e>
    111a:	88 0f       	add	r24, r24
    111c:	99 1f       	adc	r25, r25
    111e:	0a 94       	dec	r0
    1120:	e2 f7       	brpl	.-8      	; 0x111a <DIO_VidSetPinValue+0x7a>
    1122:	84 2b       	or	r24, r20
    1124:	8c 93       	st	X, r24
    1126:	b3 c0       	rjmp	.+358    	; 0x128e <DIO_VidSetPinValue+0x1ee>
		case 1: SET_BIT(PORTB_1, LOC_u8Pin); break;
    1128:	a8 e3       	ldi	r26, 0x38	; 56
    112a:	b0 e0       	ldi	r27, 0x00	; 0
    112c:	e8 e3       	ldi	r30, 0x38	; 56
    112e:	f0 e0       	ldi	r31, 0x00	; 0
    1130:	80 81       	ld	r24, Z
    1132:	48 2f       	mov	r20, r24
    1134:	8a 81       	ldd	r24, Y+2	; 0x02
    1136:	28 2f       	mov	r18, r24
    1138:	30 e0       	ldi	r19, 0x00	; 0
    113a:	81 e0       	ldi	r24, 0x01	; 1
    113c:	90 e0       	ldi	r25, 0x00	; 0
    113e:	02 2e       	mov	r0, r18
    1140:	02 c0       	rjmp	.+4      	; 0x1146 <DIO_VidSetPinValue+0xa6>
    1142:	88 0f       	add	r24, r24
    1144:	99 1f       	adc	r25, r25
    1146:	0a 94       	dec	r0
    1148:	e2 f7       	brpl	.-8      	; 0x1142 <DIO_VidSetPinValue+0xa2>
    114a:	84 2b       	or	r24, r20
    114c:	8c 93       	st	X, r24
    114e:	9f c0       	rjmp	.+318    	; 0x128e <DIO_VidSetPinValue+0x1ee>
		case 2: SET_BIT(PORTC_1, LOC_u8Pin); break;
    1150:	a5 e3       	ldi	r26, 0x35	; 53
    1152:	b0 e0       	ldi	r27, 0x00	; 0
    1154:	e5 e3       	ldi	r30, 0x35	; 53
    1156:	f0 e0       	ldi	r31, 0x00	; 0
    1158:	80 81       	ld	r24, Z
    115a:	48 2f       	mov	r20, r24
    115c:	8a 81       	ldd	r24, Y+2	; 0x02
    115e:	28 2f       	mov	r18, r24
    1160:	30 e0       	ldi	r19, 0x00	; 0
    1162:	81 e0       	ldi	r24, 0x01	; 1
    1164:	90 e0       	ldi	r25, 0x00	; 0
    1166:	02 2e       	mov	r0, r18
    1168:	02 c0       	rjmp	.+4      	; 0x116e <DIO_VidSetPinValue+0xce>
    116a:	88 0f       	add	r24, r24
    116c:	99 1f       	adc	r25, r25
    116e:	0a 94       	dec	r0
    1170:	e2 f7       	brpl	.-8      	; 0x116a <DIO_VidSetPinValue+0xca>
    1172:	84 2b       	or	r24, r20
    1174:	8c 93       	st	X, r24
    1176:	8b c0       	rjmp	.+278    	; 0x128e <DIO_VidSetPinValue+0x1ee>
		case 3: SET_BIT(PORTD_1, LOC_u8Pin); break;
    1178:	a2 e3       	ldi	r26, 0x32	; 50
    117a:	b0 e0       	ldi	r27, 0x00	; 0
    117c:	e2 e3       	ldi	r30, 0x32	; 50
    117e:	f0 e0       	ldi	r31, 0x00	; 0
    1180:	80 81       	ld	r24, Z
    1182:	48 2f       	mov	r20, r24
    1184:	8a 81       	ldd	r24, Y+2	; 0x02
    1186:	28 2f       	mov	r18, r24
    1188:	30 e0       	ldi	r19, 0x00	; 0
    118a:	81 e0       	ldi	r24, 0x01	; 1
    118c:	90 e0       	ldi	r25, 0x00	; 0
    118e:	02 2e       	mov	r0, r18
    1190:	02 c0       	rjmp	.+4      	; 0x1196 <DIO_VidSetPinValue+0xf6>
    1192:	88 0f       	add	r24, r24
    1194:	99 1f       	adc	r25, r25
    1196:	0a 94       	dec	r0
    1198:	e2 f7       	brpl	.-8      	; 0x1192 <DIO_VidSetPinValue+0xf2>
    119a:	84 2b       	or	r24, r20
    119c:	8c 93       	st	X, r24
    119e:	77 c0       	rjmp	.+238    	; 0x128e <DIO_VidSetPinValue+0x1ee>
		}
	}
	else if (0==LOC_u8Value)
    11a0:	8b 81       	ldd	r24, Y+3	; 0x03
    11a2:	88 23       	and	r24, r24
    11a4:	09 f0       	breq	.+2      	; 0x11a8 <DIO_VidSetPinValue+0x108>
    11a6:	73 c0       	rjmp	.+230    	; 0x128e <DIO_VidSetPinValue+0x1ee>
	{
		switch (LOC_u8Port)
    11a8:	89 81       	ldd	r24, Y+1	; 0x01
    11aa:	28 2f       	mov	r18, r24
    11ac:	30 e0       	ldi	r19, 0x00	; 0
    11ae:	3d 83       	std	Y+5, r19	; 0x05
    11b0:	2c 83       	std	Y+4, r18	; 0x04
    11b2:	8c 81       	ldd	r24, Y+4	; 0x04
    11b4:	9d 81       	ldd	r25, Y+5	; 0x05
    11b6:	81 30       	cpi	r24, 0x01	; 1
    11b8:	91 05       	cpc	r25, r1
    11ba:	59 f1       	breq	.+86     	; 0x1212 <DIO_VidSetPinValue+0x172>
    11bc:	2c 81       	ldd	r18, Y+4	; 0x04
    11be:	3d 81       	ldd	r19, Y+5	; 0x05
    11c0:	22 30       	cpi	r18, 0x02	; 2
    11c2:	31 05       	cpc	r19, r1
    11c4:	2c f4       	brge	.+10     	; 0x11d0 <DIO_VidSetPinValue+0x130>
    11c6:	8c 81       	ldd	r24, Y+4	; 0x04
    11c8:	9d 81       	ldd	r25, Y+5	; 0x05
    11ca:	00 97       	sbiw	r24, 0x00	; 0
    11cc:	69 f0       	breq	.+26     	; 0x11e8 <DIO_VidSetPinValue+0x148>
    11ce:	5f c0       	rjmp	.+190    	; 0x128e <DIO_VidSetPinValue+0x1ee>
    11d0:	2c 81       	ldd	r18, Y+4	; 0x04
    11d2:	3d 81       	ldd	r19, Y+5	; 0x05
    11d4:	22 30       	cpi	r18, 0x02	; 2
    11d6:	31 05       	cpc	r19, r1
    11d8:	89 f1       	breq	.+98     	; 0x123c <DIO_VidSetPinValue+0x19c>
    11da:	8c 81       	ldd	r24, Y+4	; 0x04
    11dc:	9d 81       	ldd	r25, Y+5	; 0x05
    11de:	83 30       	cpi	r24, 0x03	; 3
    11e0:	91 05       	cpc	r25, r1
    11e2:	09 f4       	brne	.+2      	; 0x11e6 <DIO_VidSetPinValue+0x146>
    11e4:	40 c0       	rjmp	.+128    	; 0x1266 <DIO_VidSetPinValue+0x1c6>
    11e6:	53 c0       	rjmp	.+166    	; 0x128e <DIO_VidSetPinValue+0x1ee>
		{
		case 0: CLR_BIT(PORTA_1, LOC_u8Pin); break;
    11e8:	ab e3       	ldi	r26, 0x3B	; 59
    11ea:	b0 e0       	ldi	r27, 0x00	; 0
    11ec:	eb e3       	ldi	r30, 0x3B	; 59
    11ee:	f0 e0       	ldi	r31, 0x00	; 0
    11f0:	80 81       	ld	r24, Z
    11f2:	48 2f       	mov	r20, r24
    11f4:	8a 81       	ldd	r24, Y+2	; 0x02
    11f6:	28 2f       	mov	r18, r24
    11f8:	30 e0       	ldi	r19, 0x00	; 0
    11fa:	81 e0       	ldi	r24, 0x01	; 1
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	02 2e       	mov	r0, r18
    1200:	02 c0       	rjmp	.+4      	; 0x1206 <DIO_VidSetPinValue+0x166>
    1202:	88 0f       	add	r24, r24
    1204:	99 1f       	adc	r25, r25
    1206:	0a 94       	dec	r0
    1208:	e2 f7       	brpl	.-8      	; 0x1202 <DIO_VidSetPinValue+0x162>
    120a:	80 95       	com	r24
    120c:	84 23       	and	r24, r20
    120e:	8c 93       	st	X, r24
    1210:	3e c0       	rjmp	.+124    	; 0x128e <DIO_VidSetPinValue+0x1ee>
		case 1: CLR_BIT(PORTB_1, LOC_u8Pin); break;
    1212:	a8 e3       	ldi	r26, 0x38	; 56
    1214:	b0 e0       	ldi	r27, 0x00	; 0
    1216:	e8 e3       	ldi	r30, 0x38	; 56
    1218:	f0 e0       	ldi	r31, 0x00	; 0
    121a:	80 81       	ld	r24, Z
    121c:	48 2f       	mov	r20, r24
    121e:	8a 81       	ldd	r24, Y+2	; 0x02
    1220:	28 2f       	mov	r18, r24
    1222:	30 e0       	ldi	r19, 0x00	; 0
    1224:	81 e0       	ldi	r24, 0x01	; 1
    1226:	90 e0       	ldi	r25, 0x00	; 0
    1228:	02 2e       	mov	r0, r18
    122a:	02 c0       	rjmp	.+4      	; 0x1230 <DIO_VidSetPinValue+0x190>
    122c:	88 0f       	add	r24, r24
    122e:	99 1f       	adc	r25, r25
    1230:	0a 94       	dec	r0
    1232:	e2 f7       	brpl	.-8      	; 0x122c <DIO_VidSetPinValue+0x18c>
    1234:	80 95       	com	r24
    1236:	84 23       	and	r24, r20
    1238:	8c 93       	st	X, r24
    123a:	29 c0       	rjmp	.+82     	; 0x128e <DIO_VidSetPinValue+0x1ee>
		case 2: CLR_BIT(PORTC_1, LOC_u8Pin); break;
    123c:	a5 e3       	ldi	r26, 0x35	; 53
    123e:	b0 e0       	ldi	r27, 0x00	; 0
    1240:	e5 e3       	ldi	r30, 0x35	; 53
    1242:	f0 e0       	ldi	r31, 0x00	; 0
    1244:	80 81       	ld	r24, Z
    1246:	48 2f       	mov	r20, r24
    1248:	8a 81       	ldd	r24, Y+2	; 0x02
    124a:	28 2f       	mov	r18, r24
    124c:	30 e0       	ldi	r19, 0x00	; 0
    124e:	81 e0       	ldi	r24, 0x01	; 1
    1250:	90 e0       	ldi	r25, 0x00	; 0
    1252:	02 2e       	mov	r0, r18
    1254:	02 c0       	rjmp	.+4      	; 0x125a <DIO_VidSetPinValue+0x1ba>
    1256:	88 0f       	add	r24, r24
    1258:	99 1f       	adc	r25, r25
    125a:	0a 94       	dec	r0
    125c:	e2 f7       	brpl	.-8      	; 0x1256 <DIO_VidSetPinValue+0x1b6>
    125e:	80 95       	com	r24
    1260:	84 23       	and	r24, r20
    1262:	8c 93       	st	X, r24
    1264:	14 c0       	rjmp	.+40     	; 0x128e <DIO_VidSetPinValue+0x1ee>
		case 3: CLR_BIT(PORTD_1, LOC_u8Pin); break;
    1266:	a2 e3       	ldi	r26, 0x32	; 50
    1268:	b0 e0       	ldi	r27, 0x00	; 0
    126a:	e2 e3       	ldi	r30, 0x32	; 50
    126c:	f0 e0       	ldi	r31, 0x00	; 0
    126e:	80 81       	ld	r24, Z
    1270:	48 2f       	mov	r20, r24
    1272:	8a 81       	ldd	r24, Y+2	; 0x02
    1274:	28 2f       	mov	r18, r24
    1276:	30 e0       	ldi	r19, 0x00	; 0
    1278:	81 e0       	ldi	r24, 0x01	; 1
    127a:	90 e0       	ldi	r25, 0x00	; 0
    127c:	02 2e       	mov	r0, r18
    127e:	02 c0       	rjmp	.+4      	; 0x1284 <DIO_VidSetPinValue+0x1e4>
    1280:	88 0f       	add	r24, r24
    1282:	99 1f       	adc	r25, r25
    1284:	0a 94       	dec	r0
    1286:	e2 f7       	brpl	.-8      	; 0x1280 <DIO_VidSetPinValue+0x1e0>
    1288:	80 95       	com	r24
    128a:	84 23       	and	r24, r20
    128c:	8c 93       	st	X, r24
		}
	}
}
    128e:	27 96       	adiw	r28, 0x07	; 7
    1290:	0f b6       	in	r0, 0x3f	; 63
    1292:	f8 94       	cli
    1294:	de bf       	out	0x3e, r29	; 62
    1296:	0f be       	out	0x3f, r0	; 63
    1298:	cd bf       	out	0x3d, r28	; 61
    129a:	cf 91       	pop	r28
    129c:	df 91       	pop	r29
    129e:	08 95       	ret

000012a0 <DIO_VidSetPortDirection>:

void DIO_VidSetPortDirection	( u8 LOC_u8Port, u8 LOC_u8Value)
{
    12a0:	df 93       	push	r29
    12a2:	cf 93       	push	r28
    12a4:	00 d0       	rcall	.+0      	; 0x12a6 <DIO_VidSetPortDirection+0x6>
    12a6:	00 d0       	rcall	.+0      	; 0x12a8 <DIO_VidSetPortDirection+0x8>
    12a8:	cd b7       	in	r28, 0x3d	; 61
    12aa:	de b7       	in	r29, 0x3e	; 62
    12ac:	89 83       	std	Y+1, r24	; 0x01
    12ae:	6a 83       	std	Y+2, r22	; 0x02
	switch (LOC_u8Port)
    12b0:	89 81       	ldd	r24, Y+1	; 0x01
    12b2:	28 2f       	mov	r18, r24
    12b4:	30 e0       	ldi	r19, 0x00	; 0
    12b6:	3c 83       	std	Y+4, r19	; 0x04
    12b8:	2b 83       	std	Y+3, r18	; 0x03
    12ba:	8b 81       	ldd	r24, Y+3	; 0x03
    12bc:	9c 81       	ldd	r25, Y+4	; 0x04
    12be:	81 30       	cpi	r24, 0x01	; 1
    12c0:	91 05       	cpc	r25, r1
    12c2:	d1 f0       	breq	.+52     	; 0x12f8 <DIO_VidSetPortDirection+0x58>
    12c4:	2b 81       	ldd	r18, Y+3	; 0x03
    12c6:	3c 81       	ldd	r19, Y+4	; 0x04
    12c8:	22 30       	cpi	r18, 0x02	; 2
    12ca:	31 05       	cpc	r19, r1
    12cc:	2c f4       	brge	.+10     	; 0x12d8 <DIO_VidSetPortDirection+0x38>
    12ce:	8b 81       	ldd	r24, Y+3	; 0x03
    12d0:	9c 81       	ldd	r25, Y+4	; 0x04
    12d2:	00 97       	sbiw	r24, 0x00	; 0
    12d4:	61 f0       	breq	.+24     	; 0x12ee <DIO_VidSetPortDirection+0x4e>
    12d6:	1e c0       	rjmp	.+60     	; 0x1314 <DIO_VidSetPortDirection+0x74>
    12d8:	2b 81       	ldd	r18, Y+3	; 0x03
    12da:	3c 81       	ldd	r19, Y+4	; 0x04
    12dc:	22 30       	cpi	r18, 0x02	; 2
    12de:	31 05       	cpc	r19, r1
    12e0:	81 f0       	breq	.+32     	; 0x1302 <DIO_VidSetPortDirection+0x62>
    12e2:	8b 81       	ldd	r24, Y+3	; 0x03
    12e4:	9c 81       	ldd	r25, Y+4	; 0x04
    12e6:	83 30       	cpi	r24, 0x03	; 3
    12e8:	91 05       	cpc	r25, r1
    12ea:	81 f0       	breq	.+32     	; 0x130c <DIO_VidSetPortDirection+0x6c>
    12ec:	13 c0       	rjmp	.+38     	; 0x1314 <DIO_VidSetPortDirection+0x74>
	{
	case 0: DDRA = LOC_u8Value; break;
    12ee:	ea e3       	ldi	r30, 0x3A	; 58
    12f0:	f0 e0       	ldi	r31, 0x00	; 0
    12f2:	8a 81       	ldd	r24, Y+2	; 0x02
    12f4:	80 83       	st	Z, r24
    12f6:	0e c0       	rjmp	.+28     	; 0x1314 <DIO_VidSetPortDirection+0x74>
	case 1: DDRB = LOC_u8Value; break;
    12f8:	e7 e3       	ldi	r30, 0x37	; 55
    12fa:	f0 e0       	ldi	r31, 0x00	; 0
    12fc:	8a 81       	ldd	r24, Y+2	; 0x02
    12fe:	80 83       	st	Z, r24
    1300:	09 c0       	rjmp	.+18     	; 0x1314 <DIO_VidSetPortDirection+0x74>
	case 2: DDRC = LOC_u8Value; break;
    1302:	e4 e3       	ldi	r30, 0x34	; 52
    1304:	f0 e0       	ldi	r31, 0x00	; 0
    1306:	8a 81       	ldd	r24, Y+2	; 0x02
    1308:	80 83       	st	Z, r24
    130a:	04 c0       	rjmp	.+8      	; 0x1314 <DIO_VidSetPortDirection+0x74>
	case 3: DDRD = LOC_u8Value; break;
    130c:	e1 e3       	ldi	r30, 0x31	; 49
    130e:	f0 e0       	ldi	r31, 0x00	; 0
    1310:	8a 81       	ldd	r24, Y+2	; 0x02
    1312:	80 83       	st	Z, r24
	}
}
    1314:	0f 90       	pop	r0
    1316:	0f 90       	pop	r0
    1318:	0f 90       	pop	r0
    131a:	0f 90       	pop	r0
    131c:	cf 91       	pop	r28
    131e:	df 91       	pop	r29
    1320:	08 95       	ret

00001322 <DIO_VidSetPortValue>:

void DIO_VidSetPortValue	( u8 LOC_u8Port, u8 LOC_u8Value)
{
    1322:	df 93       	push	r29
    1324:	cf 93       	push	r28
    1326:	00 d0       	rcall	.+0      	; 0x1328 <DIO_VidSetPortValue+0x6>
    1328:	00 d0       	rcall	.+0      	; 0x132a <DIO_VidSetPortValue+0x8>
    132a:	cd b7       	in	r28, 0x3d	; 61
    132c:	de b7       	in	r29, 0x3e	; 62
    132e:	89 83       	std	Y+1, r24	; 0x01
    1330:	6a 83       	std	Y+2, r22	; 0x02
	switch (LOC_u8Port)
    1332:	89 81       	ldd	r24, Y+1	; 0x01
    1334:	28 2f       	mov	r18, r24
    1336:	30 e0       	ldi	r19, 0x00	; 0
    1338:	3c 83       	std	Y+4, r19	; 0x04
    133a:	2b 83       	std	Y+3, r18	; 0x03
    133c:	8b 81       	ldd	r24, Y+3	; 0x03
    133e:	9c 81       	ldd	r25, Y+4	; 0x04
    1340:	81 30       	cpi	r24, 0x01	; 1
    1342:	91 05       	cpc	r25, r1
    1344:	d1 f0       	breq	.+52     	; 0x137a <DIO_VidSetPortValue+0x58>
    1346:	2b 81       	ldd	r18, Y+3	; 0x03
    1348:	3c 81       	ldd	r19, Y+4	; 0x04
    134a:	22 30       	cpi	r18, 0x02	; 2
    134c:	31 05       	cpc	r19, r1
    134e:	2c f4       	brge	.+10     	; 0x135a <DIO_VidSetPortValue+0x38>
    1350:	8b 81       	ldd	r24, Y+3	; 0x03
    1352:	9c 81       	ldd	r25, Y+4	; 0x04
    1354:	00 97       	sbiw	r24, 0x00	; 0
    1356:	61 f0       	breq	.+24     	; 0x1370 <DIO_VidSetPortValue+0x4e>
    1358:	1e c0       	rjmp	.+60     	; 0x1396 <DIO_VidSetPortValue+0x74>
    135a:	2b 81       	ldd	r18, Y+3	; 0x03
    135c:	3c 81       	ldd	r19, Y+4	; 0x04
    135e:	22 30       	cpi	r18, 0x02	; 2
    1360:	31 05       	cpc	r19, r1
    1362:	81 f0       	breq	.+32     	; 0x1384 <DIO_VidSetPortValue+0x62>
    1364:	8b 81       	ldd	r24, Y+3	; 0x03
    1366:	9c 81       	ldd	r25, Y+4	; 0x04
    1368:	83 30       	cpi	r24, 0x03	; 3
    136a:	91 05       	cpc	r25, r1
    136c:	81 f0       	breq	.+32     	; 0x138e <DIO_VidSetPortValue+0x6c>
    136e:	13 c0       	rjmp	.+38     	; 0x1396 <DIO_VidSetPortValue+0x74>
	{
	case 0: PORTA_1 = LOC_u8Value; break;
    1370:	eb e3       	ldi	r30, 0x3B	; 59
    1372:	f0 e0       	ldi	r31, 0x00	; 0
    1374:	8a 81       	ldd	r24, Y+2	; 0x02
    1376:	80 83       	st	Z, r24
    1378:	0e c0       	rjmp	.+28     	; 0x1396 <DIO_VidSetPortValue+0x74>
	case 1: PORTB_1 = LOC_u8Value; break;
    137a:	e8 e3       	ldi	r30, 0x38	; 56
    137c:	f0 e0       	ldi	r31, 0x00	; 0
    137e:	8a 81       	ldd	r24, Y+2	; 0x02
    1380:	80 83       	st	Z, r24
    1382:	09 c0       	rjmp	.+18     	; 0x1396 <DIO_VidSetPortValue+0x74>
	case 2: PORTC_1 = LOC_u8Value; break;
    1384:	e5 e3       	ldi	r30, 0x35	; 53
    1386:	f0 e0       	ldi	r31, 0x00	; 0
    1388:	8a 81       	ldd	r24, Y+2	; 0x02
    138a:	80 83       	st	Z, r24
    138c:	04 c0       	rjmp	.+8      	; 0x1396 <DIO_VidSetPortValue+0x74>
	case 3: PORTD_1 = LOC_u8Value; break;
    138e:	e2 e3       	ldi	r30, 0x32	; 50
    1390:	f0 e0       	ldi	r31, 0x00	; 0
    1392:	8a 81       	ldd	r24, Y+2	; 0x02
    1394:	80 83       	st	Z, r24
	}
}
    1396:	0f 90       	pop	r0
    1398:	0f 90       	pop	r0
    139a:	0f 90       	pop	r0
    139c:	0f 90       	pop	r0
    139e:	cf 91       	pop	r28
    13a0:	df 91       	pop	r29
    13a2:	08 95       	ret

000013a4 <DIO_u8GetPinValue>:

u8 	 DIO_u8GetPinValue	( u8 LOC_u8Port, u8 LOC_u8Pin)
{
    13a4:	df 93       	push	r29
    13a6:	cf 93       	push	r28
    13a8:	00 d0       	rcall	.+0      	; 0x13aa <DIO_u8GetPinValue+0x6>
    13aa:	00 d0       	rcall	.+0      	; 0x13ac <DIO_u8GetPinValue+0x8>
    13ac:	0f 92       	push	r0
    13ae:	cd b7       	in	r28, 0x3d	; 61
    13b0:	de b7       	in	r29, 0x3e	; 62
    13b2:	8a 83       	std	Y+2, r24	; 0x02
    13b4:	6b 83       	std	Y+3, r22	; 0x03
	u8 value;
	switch (LOC_u8Port)
    13b6:	8a 81       	ldd	r24, Y+2	; 0x02
    13b8:	28 2f       	mov	r18, r24
    13ba:	30 e0       	ldi	r19, 0x00	; 0
    13bc:	3d 83       	std	Y+5, r19	; 0x05
    13be:	2c 83       	std	Y+4, r18	; 0x04
    13c0:	4c 81       	ldd	r20, Y+4	; 0x04
    13c2:	5d 81       	ldd	r21, Y+5	; 0x05
    13c4:	41 30       	cpi	r20, 0x01	; 1
    13c6:	51 05       	cpc	r21, r1
    13c8:	41 f1       	breq	.+80     	; 0x141a <DIO_u8GetPinValue+0x76>
    13ca:	8c 81       	ldd	r24, Y+4	; 0x04
    13cc:	9d 81       	ldd	r25, Y+5	; 0x05
    13ce:	82 30       	cpi	r24, 0x02	; 2
    13d0:	91 05       	cpc	r25, r1
    13d2:	34 f4       	brge	.+12     	; 0x13e0 <DIO_u8GetPinValue+0x3c>
    13d4:	2c 81       	ldd	r18, Y+4	; 0x04
    13d6:	3d 81       	ldd	r19, Y+5	; 0x05
    13d8:	21 15       	cp	r18, r1
    13da:	31 05       	cpc	r19, r1
    13dc:	61 f0       	breq	.+24     	; 0x13f6 <DIO_u8GetPinValue+0x52>
    13de:	52 c0       	rjmp	.+164    	; 0x1484 <DIO_u8GetPinValue+0xe0>
    13e0:	4c 81       	ldd	r20, Y+4	; 0x04
    13e2:	5d 81       	ldd	r21, Y+5	; 0x05
    13e4:	42 30       	cpi	r20, 0x02	; 2
    13e6:	51 05       	cpc	r21, r1
    13e8:	51 f1       	breq	.+84     	; 0x143e <DIO_u8GetPinValue+0x9a>
    13ea:	8c 81       	ldd	r24, Y+4	; 0x04
    13ec:	9d 81       	ldd	r25, Y+5	; 0x05
    13ee:	83 30       	cpi	r24, 0x03	; 3
    13f0:	91 05       	cpc	r25, r1
    13f2:	b9 f1       	breq	.+110    	; 0x1462 <DIO_u8GetPinValue+0xbe>
    13f4:	47 c0       	rjmp	.+142    	; 0x1484 <DIO_u8GetPinValue+0xe0>
	{
	case 0: value = GET_BIT(PINA, LOC_u8Pin); break;
    13f6:	e9 e3       	ldi	r30, 0x39	; 57
    13f8:	f0 e0       	ldi	r31, 0x00	; 0
    13fa:	80 81       	ld	r24, Z
    13fc:	28 2f       	mov	r18, r24
    13fe:	30 e0       	ldi	r19, 0x00	; 0
    1400:	8b 81       	ldd	r24, Y+3	; 0x03
    1402:	88 2f       	mov	r24, r24
    1404:	90 e0       	ldi	r25, 0x00	; 0
    1406:	a9 01       	movw	r20, r18
    1408:	02 c0       	rjmp	.+4      	; 0x140e <DIO_u8GetPinValue+0x6a>
    140a:	55 95       	asr	r21
    140c:	47 95       	ror	r20
    140e:	8a 95       	dec	r24
    1410:	e2 f7       	brpl	.-8      	; 0x140a <DIO_u8GetPinValue+0x66>
    1412:	ca 01       	movw	r24, r20
    1414:	81 70       	andi	r24, 0x01	; 1
    1416:	89 83       	std	Y+1, r24	; 0x01
    1418:	35 c0       	rjmp	.+106    	; 0x1484 <DIO_u8GetPinValue+0xe0>
	case 1: value = GET_BIT(PINB, LOC_u8Pin); break;
    141a:	e6 e3       	ldi	r30, 0x36	; 54
    141c:	f0 e0       	ldi	r31, 0x00	; 0
    141e:	80 81       	ld	r24, Z
    1420:	28 2f       	mov	r18, r24
    1422:	30 e0       	ldi	r19, 0x00	; 0
    1424:	8b 81       	ldd	r24, Y+3	; 0x03
    1426:	88 2f       	mov	r24, r24
    1428:	90 e0       	ldi	r25, 0x00	; 0
    142a:	a9 01       	movw	r20, r18
    142c:	02 c0       	rjmp	.+4      	; 0x1432 <DIO_u8GetPinValue+0x8e>
    142e:	55 95       	asr	r21
    1430:	47 95       	ror	r20
    1432:	8a 95       	dec	r24
    1434:	e2 f7       	brpl	.-8      	; 0x142e <DIO_u8GetPinValue+0x8a>
    1436:	ca 01       	movw	r24, r20
    1438:	81 70       	andi	r24, 0x01	; 1
    143a:	89 83       	std	Y+1, r24	; 0x01
    143c:	23 c0       	rjmp	.+70     	; 0x1484 <DIO_u8GetPinValue+0xe0>
	case 2: value = GET_BIT(PINC, LOC_u8Pin); break;
    143e:	e3 e3       	ldi	r30, 0x33	; 51
    1440:	f0 e0       	ldi	r31, 0x00	; 0
    1442:	80 81       	ld	r24, Z
    1444:	28 2f       	mov	r18, r24
    1446:	30 e0       	ldi	r19, 0x00	; 0
    1448:	8b 81       	ldd	r24, Y+3	; 0x03
    144a:	88 2f       	mov	r24, r24
    144c:	90 e0       	ldi	r25, 0x00	; 0
    144e:	a9 01       	movw	r20, r18
    1450:	02 c0       	rjmp	.+4      	; 0x1456 <DIO_u8GetPinValue+0xb2>
    1452:	55 95       	asr	r21
    1454:	47 95       	ror	r20
    1456:	8a 95       	dec	r24
    1458:	e2 f7       	brpl	.-8      	; 0x1452 <DIO_u8GetPinValue+0xae>
    145a:	ca 01       	movw	r24, r20
    145c:	81 70       	andi	r24, 0x01	; 1
    145e:	89 83       	std	Y+1, r24	; 0x01
    1460:	11 c0       	rjmp	.+34     	; 0x1484 <DIO_u8GetPinValue+0xe0>
	case 3: value = GET_BIT(PIND, LOC_u8Pin); break;
    1462:	e0 e3       	ldi	r30, 0x30	; 48
    1464:	f0 e0       	ldi	r31, 0x00	; 0
    1466:	80 81       	ld	r24, Z
    1468:	28 2f       	mov	r18, r24
    146a:	30 e0       	ldi	r19, 0x00	; 0
    146c:	8b 81       	ldd	r24, Y+3	; 0x03
    146e:	88 2f       	mov	r24, r24
    1470:	90 e0       	ldi	r25, 0x00	; 0
    1472:	a9 01       	movw	r20, r18
    1474:	02 c0       	rjmp	.+4      	; 0x147a <DIO_u8GetPinValue+0xd6>
    1476:	55 95       	asr	r21
    1478:	47 95       	ror	r20
    147a:	8a 95       	dec	r24
    147c:	e2 f7       	brpl	.-8      	; 0x1476 <DIO_u8GetPinValue+0xd2>
    147e:	ca 01       	movw	r24, r20
    1480:	81 70       	andi	r24, 0x01	; 1
    1482:	89 83       	std	Y+1, r24	; 0x01
	}
	return value;
    1484:	89 81       	ldd	r24, Y+1	; 0x01
}
    1486:	0f 90       	pop	r0
    1488:	0f 90       	pop	r0
    148a:	0f 90       	pop	r0
    148c:	0f 90       	pop	r0
    148e:	0f 90       	pop	r0
    1490:	cf 91       	pop	r28
    1492:	df 91       	pop	r29
    1494:	08 95       	ret

00001496 <DIO_VidToggPinValue>:




void DIO_VidToggPinValue	( u8 LOC_u8Port, u8 LOC_u8Pin)
{
    1496:	df 93       	push	r29
    1498:	cf 93       	push	r28
    149a:	00 d0       	rcall	.+0      	; 0x149c <DIO_VidToggPinValue+0x6>
    149c:	00 d0       	rcall	.+0      	; 0x149e <DIO_VidToggPinValue+0x8>
    149e:	cd b7       	in	r28, 0x3d	; 61
    14a0:	de b7       	in	r29, 0x3e	; 62
    14a2:	89 83       	std	Y+1, r24	; 0x01
    14a4:	6a 83       	std	Y+2, r22	; 0x02

		switch (LOC_u8Port)
    14a6:	89 81       	ldd	r24, Y+1	; 0x01
    14a8:	28 2f       	mov	r18, r24
    14aa:	30 e0       	ldi	r19, 0x00	; 0
    14ac:	3c 83       	std	Y+4, r19	; 0x04
    14ae:	2b 83       	std	Y+3, r18	; 0x03
    14b0:	8b 81       	ldd	r24, Y+3	; 0x03
    14b2:	9c 81       	ldd	r25, Y+4	; 0x04
    14b4:	81 30       	cpi	r24, 0x01	; 1
    14b6:	91 05       	cpc	r25, r1
    14b8:	49 f1       	breq	.+82     	; 0x150c <DIO_VidToggPinValue+0x76>
    14ba:	2b 81       	ldd	r18, Y+3	; 0x03
    14bc:	3c 81       	ldd	r19, Y+4	; 0x04
    14be:	22 30       	cpi	r18, 0x02	; 2
    14c0:	31 05       	cpc	r19, r1
    14c2:	2c f4       	brge	.+10     	; 0x14ce <DIO_VidToggPinValue+0x38>
    14c4:	8b 81       	ldd	r24, Y+3	; 0x03
    14c6:	9c 81       	ldd	r25, Y+4	; 0x04
    14c8:	00 97       	sbiw	r24, 0x00	; 0
    14ca:	61 f0       	breq	.+24     	; 0x14e4 <DIO_VidToggPinValue+0x4e>
    14cc:	5a c0       	rjmp	.+180    	; 0x1582 <DIO_VidToggPinValue+0xec>
    14ce:	2b 81       	ldd	r18, Y+3	; 0x03
    14d0:	3c 81       	ldd	r19, Y+4	; 0x04
    14d2:	22 30       	cpi	r18, 0x02	; 2
    14d4:	31 05       	cpc	r19, r1
    14d6:	71 f1       	breq	.+92     	; 0x1534 <DIO_VidToggPinValue+0x9e>
    14d8:	8b 81       	ldd	r24, Y+3	; 0x03
    14da:	9c 81       	ldd	r25, Y+4	; 0x04
    14dc:	83 30       	cpi	r24, 0x03	; 3
    14de:	91 05       	cpc	r25, r1
    14e0:	e9 f1       	breq	.+122    	; 0x155c <DIO_VidToggPinValue+0xc6>
    14e2:	4f c0       	rjmp	.+158    	; 0x1582 <DIO_VidToggPinValue+0xec>
		{
		case 0: TOG_BIT(PORTA_1, LOC_u8Pin); break;
    14e4:	ab e3       	ldi	r26, 0x3B	; 59
    14e6:	b0 e0       	ldi	r27, 0x00	; 0
    14e8:	eb e3       	ldi	r30, 0x3B	; 59
    14ea:	f0 e0       	ldi	r31, 0x00	; 0
    14ec:	80 81       	ld	r24, Z
    14ee:	48 2f       	mov	r20, r24
    14f0:	8a 81       	ldd	r24, Y+2	; 0x02
    14f2:	28 2f       	mov	r18, r24
    14f4:	30 e0       	ldi	r19, 0x00	; 0
    14f6:	81 e0       	ldi	r24, 0x01	; 1
    14f8:	90 e0       	ldi	r25, 0x00	; 0
    14fa:	02 2e       	mov	r0, r18
    14fc:	02 c0       	rjmp	.+4      	; 0x1502 <DIO_VidToggPinValue+0x6c>
    14fe:	88 0f       	add	r24, r24
    1500:	99 1f       	adc	r25, r25
    1502:	0a 94       	dec	r0
    1504:	e2 f7       	brpl	.-8      	; 0x14fe <DIO_VidToggPinValue+0x68>
    1506:	84 27       	eor	r24, r20
    1508:	8c 93       	st	X, r24
    150a:	3b c0       	rjmp	.+118    	; 0x1582 <DIO_VidToggPinValue+0xec>
		case 1: TOG_BIT(PORTB_1, LOC_u8Pin); break;
    150c:	a8 e3       	ldi	r26, 0x38	; 56
    150e:	b0 e0       	ldi	r27, 0x00	; 0
    1510:	e8 e3       	ldi	r30, 0x38	; 56
    1512:	f0 e0       	ldi	r31, 0x00	; 0
    1514:	80 81       	ld	r24, Z
    1516:	48 2f       	mov	r20, r24
    1518:	8a 81       	ldd	r24, Y+2	; 0x02
    151a:	28 2f       	mov	r18, r24
    151c:	30 e0       	ldi	r19, 0x00	; 0
    151e:	81 e0       	ldi	r24, 0x01	; 1
    1520:	90 e0       	ldi	r25, 0x00	; 0
    1522:	02 2e       	mov	r0, r18
    1524:	02 c0       	rjmp	.+4      	; 0x152a <DIO_VidToggPinValue+0x94>
    1526:	88 0f       	add	r24, r24
    1528:	99 1f       	adc	r25, r25
    152a:	0a 94       	dec	r0
    152c:	e2 f7       	brpl	.-8      	; 0x1526 <DIO_VidToggPinValue+0x90>
    152e:	84 27       	eor	r24, r20
    1530:	8c 93       	st	X, r24
    1532:	27 c0       	rjmp	.+78     	; 0x1582 <DIO_VidToggPinValue+0xec>
		case 2: TOG_BIT(PORTC_1, LOC_u8Pin); break;
    1534:	a5 e3       	ldi	r26, 0x35	; 53
    1536:	b0 e0       	ldi	r27, 0x00	; 0
    1538:	e5 e3       	ldi	r30, 0x35	; 53
    153a:	f0 e0       	ldi	r31, 0x00	; 0
    153c:	80 81       	ld	r24, Z
    153e:	48 2f       	mov	r20, r24
    1540:	8a 81       	ldd	r24, Y+2	; 0x02
    1542:	28 2f       	mov	r18, r24
    1544:	30 e0       	ldi	r19, 0x00	; 0
    1546:	81 e0       	ldi	r24, 0x01	; 1
    1548:	90 e0       	ldi	r25, 0x00	; 0
    154a:	02 2e       	mov	r0, r18
    154c:	02 c0       	rjmp	.+4      	; 0x1552 <DIO_VidToggPinValue+0xbc>
    154e:	88 0f       	add	r24, r24
    1550:	99 1f       	adc	r25, r25
    1552:	0a 94       	dec	r0
    1554:	e2 f7       	brpl	.-8      	; 0x154e <DIO_VidToggPinValue+0xb8>
    1556:	84 27       	eor	r24, r20
    1558:	8c 93       	st	X, r24
    155a:	13 c0       	rjmp	.+38     	; 0x1582 <DIO_VidToggPinValue+0xec>
		case 3: TOG_BIT(PORTD_1, LOC_u8Pin); break;
    155c:	a2 e3       	ldi	r26, 0x32	; 50
    155e:	b0 e0       	ldi	r27, 0x00	; 0
    1560:	e2 e3       	ldi	r30, 0x32	; 50
    1562:	f0 e0       	ldi	r31, 0x00	; 0
    1564:	80 81       	ld	r24, Z
    1566:	48 2f       	mov	r20, r24
    1568:	8a 81       	ldd	r24, Y+2	; 0x02
    156a:	28 2f       	mov	r18, r24
    156c:	30 e0       	ldi	r19, 0x00	; 0
    156e:	81 e0       	ldi	r24, 0x01	; 1
    1570:	90 e0       	ldi	r25, 0x00	; 0
    1572:	02 2e       	mov	r0, r18
    1574:	02 c0       	rjmp	.+4      	; 0x157a <DIO_VidToggPinValue+0xe4>
    1576:	88 0f       	add	r24, r24
    1578:	99 1f       	adc	r25, r25
    157a:	0a 94       	dec	r0
    157c:	e2 f7       	brpl	.-8      	; 0x1576 <DIO_VidToggPinValue+0xe0>
    157e:	84 27       	eor	r24, r20
    1580:	8c 93       	st	X, r24
		}
}
    1582:	0f 90       	pop	r0
    1584:	0f 90       	pop	r0
    1586:	0f 90       	pop	r0
    1588:	0f 90       	pop	r0
    158a:	cf 91       	pop	r28
    158c:	df 91       	pop	r29
    158e:	08 95       	ret

00001590 <EXI_Enable>:
#include "DIO_Register.h"
#include "DIO_Interface.h"
#include <avr/delay.h>
void EXI_Enable(void)

{
    1590:	df 93       	push	r29
    1592:	cf 93       	push	r28
    1594:	cd b7       	in	r28, 0x3d	; 61
    1596:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GICR,INT1);
    1598:	ab e5       	ldi	r26, 0x5B	; 91
    159a:	b0 e0       	ldi	r27, 0x00	; 0
    159c:	eb e5       	ldi	r30, 0x5B	; 91
    159e:	f0 e0       	ldi	r31, 0x00	; 0
    15a0:	80 81       	ld	r24, Z
    15a2:	80 68       	ori	r24, 0x80	; 128
    15a4:	8c 93       	st	X, r24
}
    15a6:	cf 91       	pop	r28
    15a8:	df 91       	pop	r29
    15aa:	08 95       	ret

000015ac <EXI_Disable>:
void EXI_Disable(void)
{
    15ac:	df 93       	push	r29
    15ae:	cf 93       	push	r28
    15b0:	cd b7       	in	r28, 0x3d	; 61
    15b2:	de b7       	in	r29, 0x3e	; 62
    CLR_BIT(GICR,INT1);
    15b4:	ab e5       	ldi	r26, 0x5B	; 91
    15b6:	b0 e0       	ldi	r27, 0x00	; 0
    15b8:	eb e5       	ldi	r30, 0x5B	; 91
    15ba:	f0 e0       	ldi	r31, 0x00	; 0
    15bc:	80 81       	ld	r24, Z
    15be:	8f 77       	andi	r24, 0x7F	; 127
    15c0:	8c 93       	st	X, r24
}
    15c2:	cf 91       	pop	r28
    15c4:	df 91       	pop	r29
    15c6:	08 95       	ret

000015c8 <EXI_VidInt>:
void EXI_VidInt(void)
{
    15c8:	df 93       	push	r29
    15ca:	cf 93       	push	r28
    15cc:	cd b7       	in	r28, 0x3d	; 61
    15ce:	de b7       	in	r29, 0x3e	; 62
	DIO_VidSetPinDirection(PORTD,PIN3, INPUT);
    15d0:	83 e0       	ldi	r24, 0x03	; 3
    15d2:	63 e0       	ldi	r22, 0x03	; 3
    15d4:	40 e0       	ldi	r20, 0x00	; 0
    15d6:	0e 94 50 07 	call	0xea0	; 0xea0 <DIO_VidSetPinDirection>
	DIO_VidSetPinValue(PORTD,PIN3, 1);
    15da:	83 e0       	ldi	r24, 0x03	; 3
    15dc:	63 e0       	ldi	r22, 0x03	; 3
    15de:	41 e0       	ldi	r20, 0x01	; 1
    15e0:	0e 94 50 08 	call	0x10a0	; 0x10a0 <DIO_VidSetPinValue>
	#if control_sens==falling
			CLR_BIT(MCUCR,ISC00);
			SET_BIT(MCUCR,ISC01);
	#elif control_sens==rising
			SET_BIT(MCUCR,ISC00);
    15e4:	a5 e5       	ldi	r26, 0x55	; 85
    15e6:	b0 e0       	ldi	r27, 0x00	; 0
    15e8:	e5 e5       	ldi	r30, 0x55	; 85
    15ea:	f0 e0       	ldi	r31, 0x00	; 0
    15ec:	80 81       	ld	r24, Z
    15ee:	81 60       	ori	r24, 0x01	; 1
    15f0:	8c 93       	st	X, r24
			SET_BIT(MCUCR,ISC01);
    15f2:	a5 e5       	ldi	r26, 0x55	; 85
    15f4:	b0 e0       	ldi	r27, 0x00	; 0
    15f6:	e5 e5       	ldi	r30, 0x55	; 85
    15f8:	f0 e0       	ldi	r31, 0x00	; 0
    15fa:	80 81       	ld	r24, Z
    15fc:	82 60       	ori	r24, 0x02	; 2
    15fe:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,ISC01);
	#else
		#error  "wrong choice"
	#endif

}
    1600:	cf 91       	pop	r28
    1602:	df 91       	pop	r29
    1604:	08 95       	ret

00001606 <ISR>:


ISR (INT1_VECT)
{
    1606:	df 93       	push	r29
    1608:	cf 93       	push	r28
    160a:	cd b7       	in	r28, 0x3d	; 61
    160c:	de b7       	in	r29, 0x3e	; 62
    160e:	62 97       	sbiw	r28, 0x12	; 18
    1610:	0f b6       	in	r0, 0x3f	; 63
    1612:	f8 94       	cli
    1614:	de bf       	out	0x3e, r29	; 62
    1616:	0f be       	out	0x3f, r0	; 63
    1618:	cd bf       	out	0x3d, r28	; 61
    161a:	98 8b       	std	Y+16, r25	; 0x10
    161c:	8f 87       	std	Y+15, r24	; 0x0f
		DIO_VidSetPinValue(PORTA,PIN0,1);
    161e:	80 e0       	ldi	r24, 0x00	; 0
    1620:	60 e0       	ldi	r22, 0x00	; 0
    1622:	41 e0       	ldi	r20, 0x01	; 1
    1624:	0e 94 50 08 	call	0x10a0	; 0x10a0 <DIO_VidSetPinValue>
    1628:	80 e0       	ldi	r24, 0x00	; 0
    162a:	90 e0       	ldi	r25, 0x00	; 0
    162c:	aa e7       	ldi	r26, 0x7A	; 122
    162e:	b5 e4       	ldi	r27, 0x45	; 69
    1630:	8b 87       	std	Y+11, r24	; 0x0b
    1632:	9c 87       	std	Y+12, r25	; 0x0c
    1634:	ad 87       	std	Y+13, r26	; 0x0d
    1636:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1638:	6b 85       	ldd	r22, Y+11	; 0x0b
    163a:	7c 85       	ldd	r23, Y+12	; 0x0c
    163c:	8d 85       	ldd	r24, Y+13	; 0x0d
    163e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1640:	20 e0       	ldi	r18, 0x00	; 0
    1642:	30 e0       	ldi	r19, 0x00	; 0
    1644:	4a ef       	ldi	r20, 0xFA	; 250
    1646:	54 e4       	ldi	r21, 0x44	; 68
    1648:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    164c:	dc 01       	movw	r26, r24
    164e:	cb 01       	movw	r24, r22
    1650:	8f 83       	std	Y+7, r24	; 0x07
    1652:	98 87       	std	Y+8, r25	; 0x08
    1654:	a9 87       	std	Y+9, r26	; 0x09
    1656:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1658:	6f 81       	ldd	r22, Y+7	; 0x07
    165a:	78 85       	ldd	r23, Y+8	; 0x08
    165c:	89 85       	ldd	r24, Y+9	; 0x09
    165e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1660:	20 e0       	ldi	r18, 0x00	; 0
    1662:	30 e0       	ldi	r19, 0x00	; 0
    1664:	40 e8       	ldi	r20, 0x80	; 128
    1666:	5f e3       	ldi	r21, 0x3F	; 63
    1668:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    166c:	88 23       	and	r24, r24
    166e:	2c f4       	brge	.+10     	; 0x167a <ISR+0x74>
		__ticks = 1;
    1670:	81 e0       	ldi	r24, 0x01	; 1
    1672:	90 e0       	ldi	r25, 0x00	; 0
    1674:	9e 83       	std	Y+6, r25	; 0x06
    1676:	8d 83       	std	Y+5, r24	; 0x05
    1678:	3f c0       	rjmp	.+126    	; 0x16f8 <ISR+0xf2>
	else if (__tmp > 65535)
    167a:	6f 81       	ldd	r22, Y+7	; 0x07
    167c:	78 85       	ldd	r23, Y+8	; 0x08
    167e:	89 85       	ldd	r24, Y+9	; 0x09
    1680:	9a 85       	ldd	r25, Y+10	; 0x0a
    1682:	20 e0       	ldi	r18, 0x00	; 0
    1684:	3f ef       	ldi	r19, 0xFF	; 255
    1686:	4f e7       	ldi	r20, 0x7F	; 127
    1688:	57 e4       	ldi	r21, 0x47	; 71
    168a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    168e:	18 16       	cp	r1, r24
    1690:	4c f5       	brge	.+82     	; 0x16e4 <ISR+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1692:	6b 85       	ldd	r22, Y+11	; 0x0b
    1694:	7c 85       	ldd	r23, Y+12	; 0x0c
    1696:	8d 85       	ldd	r24, Y+13	; 0x0d
    1698:	9e 85       	ldd	r25, Y+14	; 0x0e
    169a:	20 e0       	ldi	r18, 0x00	; 0
    169c:	30 e0       	ldi	r19, 0x00	; 0
    169e:	40 e2       	ldi	r20, 0x20	; 32
    16a0:	51 e4       	ldi	r21, 0x41	; 65
    16a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16a6:	dc 01       	movw	r26, r24
    16a8:	cb 01       	movw	r24, r22
    16aa:	bc 01       	movw	r22, r24
    16ac:	cd 01       	movw	r24, r26
    16ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16b2:	dc 01       	movw	r26, r24
    16b4:	cb 01       	movw	r24, r22
    16b6:	9e 83       	std	Y+6, r25	; 0x06
    16b8:	8d 83       	std	Y+5, r24	; 0x05
    16ba:	0f c0       	rjmp	.+30     	; 0x16da <ISR+0xd4>
    16bc:	88 ec       	ldi	r24, 0xC8	; 200
    16be:	90 e0       	ldi	r25, 0x00	; 0
    16c0:	9c 83       	std	Y+4, r25	; 0x04
    16c2:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    16c4:	8b 81       	ldd	r24, Y+3	; 0x03
    16c6:	9c 81       	ldd	r25, Y+4	; 0x04
    16c8:	01 97       	sbiw	r24, 0x01	; 1
    16ca:	f1 f7       	brne	.-4      	; 0x16c8 <ISR+0xc2>
    16cc:	9c 83       	std	Y+4, r25	; 0x04
    16ce:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16d0:	8d 81       	ldd	r24, Y+5	; 0x05
    16d2:	9e 81       	ldd	r25, Y+6	; 0x06
    16d4:	01 97       	sbiw	r24, 0x01	; 1
    16d6:	9e 83       	std	Y+6, r25	; 0x06
    16d8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16da:	8d 81       	ldd	r24, Y+5	; 0x05
    16dc:	9e 81       	ldd	r25, Y+6	; 0x06
    16de:	00 97       	sbiw	r24, 0x00	; 0
    16e0:	69 f7       	brne	.-38     	; 0x16bc <ISR+0xb6>
    16e2:	14 c0       	rjmp	.+40     	; 0x170c <ISR+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16e4:	6f 81       	ldd	r22, Y+7	; 0x07
    16e6:	78 85       	ldd	r23, Y+8	; 0x08
    16e8:	89 85       	ldd	r24, Y+9	; 0x09
    16ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    16ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16f0:	dc 01       	movw	r26, r24
    16f2:	cb 01       	movw	r24, r22
    16f4:	9e 83       	std	Y+6, r25	; 0x06
    16f6:	8d 83       	std	Y+5, r24	; 0x05
    16f8:	8d 81       	ldd	r24, Y+5	; 0x05
    16fa:	9e 81       	ldd	r25, Y+6	; 0x06
    16fc:	9a 83       	std	Y+2, r25	; 0x02
    16fe:	89 83       	std	Y+1, r24	; 0x01
    1700:	89 81       	ldd	r24, Y+1	; 0x01
    1702:	9a 81       	ldd	r25, Y+2	; 0x02
    1704:	01 97       	sbiw	r24, 0x01	; 1
    1706:	f1 f7       	brne	.-4      	; 0x1704 <ISR+0xfe>
    1708:	9a 83       	std	Y+2, r25	; 0x02
    170a:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(4000);
}
    170c:	62 96       	adiw	r28, 0x12	; 18
    170e:	0f b6       	in	r0, 0x3f	; 63
    1710:	f8 94       	cli
    1712:	de bf       	out	0x3e, r29	; 62
    1714:	0f be       	out	0x3f, r0	; 63
    1716:	cd bf       	out	0x3d, r28	; 61
    1718:	cf 91       	pop	r28
    171a:	df 91       	pop	r29
    171c:	08 95       	ret

0000171e <GIE_Enable>:
#include "GIE_Regster.h"
#include "BIT_MATH.h"

void GIE_Enable(void)

{
    171e:	df 93       	push	r29
    1720:	cf 93       	push	r28
    1722:	cd b7       	in	r28, 0x3d	; 61
    1724:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,7);
    1726:	af e5       	ldi	r26, 0x5F	; 95
    1728:	b0 e0       	ldi	r27, 0x00	; 0
    172a:	ef e5       	ldi	r30, 0x5F	; 95
    172c:	f0 e0       	ldi	r31, 0x00	; 0
    172e:	80 81       	ld	r24, Z
    1730:	80 68       	ori	r24, 0x80	; 128
    1732:	8c 93       	st	X, r24
}
    1734:	cf 91       	pop	r28
    1736:	df 91       	pop	r29
    1738:	08 95       	ret

0000173a <GIE_Disable>:

void GIE_Disable(void)
{
    173a:	df 93       	push	r29
    173c:	cf 93       	push	r28
    173e:	cd b7       	in	r28, 0x3d	; 61
    1740:	de b7       	in	r29, 0x3e	; 62
    CLR_BIT(SREG,INT0);
    1742:	af e5       	ldi	r26, 0x5F	; 95
    1744:	b0 e0       	ldi	r27, 0x00	; 0
    1746:	ef e5       	ldi	r30, 0x5F	; 95
    1748:	f0 e0       	ldi	r31, 0x00	; 0
    174a:	80 81       	ld	r24, Z
    174c:	8f 7b       	andi	r24, 0xBF	; 191
    174e:	8c 93       	st	X, r24
}
    1750:	cf 91       	pop	r28
    1752:	df 91       	pop	r29
    1754:	08 95       	ret

00001756 <LCD_Vid4Initialization>:
#include "avr/delay.h"

static u8 InitStepFinishid= 0;

void LCD_Vid4Initialization(void)
{
    1756:	df 93       	push	r29
    1758:	cf 93       	push	r28
    175a:	cd b7       	in	r28, 0x3d	; 61
    175c:	de b7       	in	r29, 0x3e	; 62
    175e:	e8 97       	sbiw	r28, 0x38	; 56
    1760:	0f b6       	in	r0, 0x3f	; 63
    1762:	f8 94       	cli
    1764:	de bf       	out	0x3e, r29	; 62
    1766:	0f be       	out	0x3f, r0	; 63
    1768:	cd bf       	out	0x3d, r28	; 61
	DIO_VidSetPortDirection(LCD_PORT, 0xff);
    176a:	83 e0       	ldi	r24, 0x03	; 3
    176c:	6f ef       	ldi	r22, 0xFF	; 255
    176e:	0e 94 50 09 	call	0x12a0	; 0x12a0 <DIO_VidSetPortDirection>
	DIO_VidSetPinDirection(LCD_INIT,LCD_RS,1);   //RS
    1772:	81 e0       	ldi	r24, 0x01	; 1
    1774:	63 e0       	ldi	r22, 0x03	; 3
    1776:	41 e0       	ldi	r20, 0x01	; 1
    1778:	0e 94 50 07 	call	0xea0	; 0xea0 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(LCD_INIT,LCD_RW,1);   //RW
    177c:	81 e0       	ldi	r24, 0x01	; 1
    177e:	64 e0       	ldi	r22, 0x04	; 4
    1780:	41 e0       	ldi	r20, 0x01	; 1
    1782:	0e 94 50 07 	call	0xea0	; 0xea0 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(LCD_INIT,LCD_EN,1);   //EN
    1786:	81 e0       	ldi	r24, 0x01	; 1
    1788:	65 e0       	ldi	r22, 0x05	; 5
    178a:	41 e0       	ldi	r20, 0x01	; 1
    178c:	0e 94 50 07 	call	0xea0	; 0xea0 <DIO_VidSetPinDirection>
    1790:	80 e0       	ldi	r24, 0x00	; 0
    1792:	90 e0       	ldi	r25, 0x00	; 0
    1794:	a8 e4       	ldi	r26, 0x48	; 72
    1796:	b2 e4       	ldi	r27, 0x42	; 66
    1798:	8d ab       	std	Y+53, r24	; 0x35
    179a:	9e ab       	std	Y+54, r25	; 0x36
    179c:	af ab       	std	Y+55, r26	; 0x37
    179e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17a0:	6d a9       	ldd	r22, Y+53	; 0x35
    17a2:	7e a9       	ldd	r23, Y+54	; 0x36
    17a4:	8f a9       	ldd	r24, Y+55	; 0x37
    17a6:	98 ad       	ldd	r25, Y+56	; 0x38
    17a8:	20 e0       	ldi	r18, 0x00	; 0
    17aa:	30 e0       	ldi	r19, 0x00	; 0
    17ac:	4a ef       	ldi	r20, 0xFA	; 250
    17ae:	54 e4       	ldi	r21, 0x44	; 68
    17b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17b4:	dc 01       	movw	r26, r24
    17b6:	cb 01       	movw	r24, r22
    17b8:	89 ab       	std	Y+49, r24	; 0x31
    17ba:	9a ab       	std	Y+50, r25	; 0x32
    17bc:	ab ab       	std	Y+51, r26	; 0x33
    17be:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    17c0:	69 a9       	ldd	r22, Y+49	; 0x31
    17c2:	7a a9       	ldd	r23, Y+50	; 0x32
    17c4:	8b a9       	ldd	r24, Y+51	; 0x33
    17c6:	9c a9       	ldd	r25, Y+52	; 0x34
    17c8:	20 e0       	ldi	r18, 0x00	; 0
    17ca:	30 e0       	ldi	r19, 0x00	; 0
    17cc:	40 e8       	ldi	r20, 0x80	; 128
    17ce:	5f e3       	ldi	r21, 0x3F	; 63
    17d0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    17d4:	88 23       	and	r24, r24
    17d6:	2c f4       	brge	.+10     	; 0x17e2 <LCD_Vid4Initialization+0x8c>
		__ticks = 1;
    17d8:	81 e0       	ldi	r24, 0x01	; 1
    17da:	90 e0       	ldi	r25, 0x00	; 0
    17dc:	98 ab       	std	Y+48, r25	; 0x30
    17de:	8f a7       	std	Y+47, r24	; 0x2f
    17e0:	3f c0       	rjmp	.+126    	; 0x1860 <LCD_Vid4Initialization+0x10a>
	else if (__tmp > 65535)
    17e2:	69 a9       	ldd	r22, Y+49	; 0x31
    17e4:	7a a9       	ldd	r23, Y+50	; 0x32
    17e6:	8b a9       	ldd	r24, Y+51	; 0x33
    17e8:	9c a9       	ldd	r25, Y+52	; 0x34
    17ea:	20 e0       	ldi	r18, 0x00	; 0
    17ec:	3f ef       	ldi	r19, 0xFF	; 255
    17ee:	4f e7       	ldi	r20, 0x7F	; 127
    17f0:	57 e4       	ldi	r21, 0x47	; 71
    17f2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    17f6:	18 16       	cp	r1, r24
    17f8:	4c f5       	brge	.+82     	; 0x184c <LCD_Vid4Initialization+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17fa:	6d a9       	ldd	r22, Y+53	; 0x35
    17fc:	7e a9       	ldd	r23, Y+54	; 0x36
    17fe:	8f a9       	ldd	r24, Y+55	; 0x37
    1800:	98 ad       	ldd	r25, Y+56	; 0x38
    1802:	20 e0       	ldi	r18, 0x00	; 0
    1804:	30 e0       	ldi	r19, 0x00	; 0
    1806:	40 e2       	ldi	r20, 0x20	; 32
    1808:	51 e4       	ldi	r21, 0x41	; 65
    180a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    180e:	dc 01       	movw	r26, r24
    1810:	cb 01       	movw	r24, r22
    1812:	bc 01       	movw	r22, r24
    1814:	cd 01       	movw	r24, r26
    1816:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    181a:	dc 01       	movw	r26, r24
    181c:	cb 01       	movw	r24, r22
    181e:	98 ab       	std	Y+48, r25	; 0x30
    1820:	8f a7       	std	Y+47, r24	; 0x2f
    1822:	0f c0       	rjmp	.+30     	; 0x1842 <LCD_Vid4Initialization+0xec>
    1824:	88 ec       	ldi	r24, 0xC8	; 200
    1826:	90 e0       	ldi	r25, 0x00	; 0
    1828:	9e a7       	std	Y+46, r25	; 0x2e
    182a:	8d a7       	std	Y+45, r24	; 0x2d
    182c:	8d a5       	ldd	r24, Y+45	; 0x2d
    182e:	9e a5       	ldd	r25, Y+46	; 0x2e
    1830:	01 97       	sbiw	r24, 0x01	; 1
    1832:	f1 f7       	brne	.-4      	; 0x1830 <LCD_Vid4Initialization+0xda>
    1834:	9e a7       	std	Y+46, r25	; 0x2e
    1836:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1838:	8f a5       	ldd	r24, Y+47	; 0x2f
    183a:	98 a9       	ldd	r25, Y+48	; 0x30
    183c:	01 97       	sbiw	r24, 0x01	; 1
    183e:	98 ab       	std	Y+48, r25	; 0x30
    1840:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1842:	8f a5       	ldd	r24, Y+47	; 0x2f
    1844:	98 a9       	ldd	r25, Y+48	; 0x30
    1846:	00 97       	sbiw	r24, 0x00	; 0
    1848:	69 f7       	brne	.-38     	; 0x1824 <LCD_Vid4Initialization+0xce>
    184a:	14 c0       	rjmp	.+40     	; 0x1874 <LCD_Vid4Initialization+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    184c:	69 a9       	ldd	r22, Y+49	; 0x31
    184e:	7a a9       	ldd	r23, Y+50	; 0x32
    1850:	8b a9       	ldd	r24, Y+51	; 0x33
    1852:	9c a9       	ldd	r25, Y+52	; 0x34
    1854:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1858:	dc 01       	movw	r26, r24
    185a:	cb 01       	movw	r24, r22
    185c:	98 ab       	std	Y+48, r25	; 0x30
    185e:	8f a7       	std	Y+47, r24	; 0x2f
    1860:	8f a5       	ldd	r24, Y+47	; 0x2f
    1862:	98 a9       	ldd	r25, Y+48	; 0x30
    1864:	9c a7       	std	Y+44, r25	; 0x2c
    1866:	8b a7       	std	Y+43, r24	; 0x2b
    1868:	8b a5       	ldd	r24, Y+43	; 0x2b
    186a:	9c a5       	ldd	r25, Y+44	; 0x2c
    186c:	01 97       	sbiw	r24, 0x01	; 1
    186e:	f1 f7       	brne	.-4      	; 0x186c <LCD_Vid4Initialization+0x116>
    1870:	9c a7       	std	Y+44, r25	; 0x2c
    1872:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(50); // wait for LCD to initialize

	LCD_VidWrite4Cmd(0x20);
    1874:	80 e2       	ldi	r24, 0x20	; 32
    1876:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <LCD_VidWrite4Cmd>
	LCD_VidWrite4Cmd(0x20);
    187a:	80 e2       	ldi	r24, 0x20	; 32
    187c:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <LCD_VidWrite4Cmd>
	LCD_VidWrite4Cmd(0x80);
    1880:	80 e8       	ldi	r24, 0x80	; 128
    1882:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <LCD_VidWrite4Cmd>
    1886:	80 e0       	ldi	r24, 0x00	; 0
    1888:	90 e0       	ldi	r25, 0x00	; 0
    188a:	a0 e0       	ldi	r26, 0x00	; 0
    188c:	b0 e4       	ldi	r27, 0x40	; 64
    188e:	8f a3       	std	Y+39, r24	; 0x27
    1890:	98 a7       	std	Y+40, r25	; 0x28
    1892:	a9 a7       	std	Y+41, r26	; 0x29
    1894:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1896:	6f a1       	ldd	r22, Y+39	; 0x27
    1898:	78 a5       	ldd	r23, Y+40	; 0x28
    189a:	89 a5       	ldd	r24, Y+41	; 0x29
    189c:	9a a5       	ldd	r25, Y+42	; 0x2a
    189e:	20 e0       	ldi	r18, 0x00	; 0
    18a0:	30 e0       	ldi	r19, 0x00	; 0
    18a2:	4a ef       	ldi	r20, 0xFA	; 250
    18a4:	54 e4       	ldi	r21, 0x44	; 68
    18a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18aa:	dc 01       	movw	r26, r24
    18ac:	cb 01       	movw	r24, r22
    18ae:	8b a3       	std	Y+35, r24	; 0x23
    18b0:	9c a3       	std	Y+36, r25	; 0x24
    18b2:	ad a3       	std	Y+37, r26	; 0x25
    18b4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    18b6:	6b a1       	ldd	r22, Y+35	; 0x23
    18b8:	7c a1       	ldd	r23, Y+36	; 0x24
    18ba:	8d a1       	ldd	r24, Y+37	; 0x25
    18bc:	9e a1       	ldd	r25, Y+38	; 0x26
    18be:	20 e0       	ldi	r18, 0x00	; 0
    18c0:	30 e0       	ldi	r19, 0x00	; 0
    18c2:	40 e8       	ldi	r20, 0x80	; 128
    18c4:	5f e3       	ldi	r21, 0x3F	; 63
    18c6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    18ca:	88 23       	and	r24, r24
    18cc:	2c f4       	brge	.+10     	; 0x18d8 <LCD_Vid4Initialization+0x182>
		__ticks = 1;
    18ce:	81 e0       	ldi	r24, 0x01	; 1
    18d0:	90 e0       	ldi	r25, 0x00	; 0
    18d2:	9a a3       	std	Y+34, r25	; 0x22
    18d4:	89 a3       	std	Y+33, r24	; 0x21
    18d6:	3f c0       	rjmp	.+126    	; 0x1956 <LCD_Vid4Initialization+0x200>
	else if (__tmp > 65535)
    18d8:	6b a1       	ldd	r22, Y+35	; 0x23
    18da:	7c a1       	ldd	r23, Y+36	; 0x24
    18dc:	8d a1       	ldd	r24, Y+37	; 0x25
    18de:	9e a1       	ldd	r25, Y+38	; 0x26
    18e0:	20 e0       	ldi	r18, 0x00	; 0
    18e2:	3f ef       	ldi	r19, 0xFF	; 255
    18e4:	4f e7       	ldi	r20, 0x7F	; 127
    18e6:	57 e4       	ldi	r21, 0x47	; 71
    18e8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    18ec:	18 16       	cp	r1, r24
    18ee:	4c f5       	brge	.+82     	; 0x1942 <LCD_Vid4Initialization+0x1ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18f0:	6f a1       	ldd	r22, Y+39	; 0x27
    18f2:	78 a5       	ldd	r23, Y+40	; 0x28
    18f4:	89 a5       	ldd	r24, Y+41	; 0x29
    18f6:	9a a5       	ldd	r25, Y+42	; 0x2a
    18f8:	20 e0       	ldi	r18, 0x00	; 0
    18fa:	30 e0       	ldi	r19, 0x00	; 0
    18fc:	40 e2       	ldi	r20, 0x20	; 32
    18fe:	51 e4       	ldi	r21, 0x41	; 65
    1900:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1904:	dc 01       	movw	r26, r24
    1906:	cb 01       	movw	r24, r22
    1908:	bc 01       	movw	r22, r24
    190a:	cd 01       	movw	r24, r26
    190c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1910:	dc 01       	movw	r26, r24
    1912:	cb 01       	movw	r24, r22
    1914:	9a a3       	std	Y+34, r25	; 0x22
    1916:	89 a3       	std	Y+33, r24	; 0x21
    1918:	0f c0       	rjmp	.+30     	; 0x1938 <LCD_Vid4Initialization+0x1e2>
    191a:	88 ec       	ldi	r24, 0xC8	; 200
    191c:	90 e0       	ldi	r25, 0x00	; 0
    191e:	98 a3       	std	Y+32, r25	; 0x20
    1920:	8f 8f       	std	Y+31, r24	; 0x1f
    1922:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1924:	98 a1       	ldd	r25, Y+32	; 0x20
    1926:	01 97       	sbiw	r24, 0x01	; 1
    1928:	f1 f7       	brne	.-4      	; 0x1926 <LCD_Vid4Initialization+0x1d0>
    192a:	98 a3       	std	Y+32, r25	; 0x20
    192c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    192e:	89 a1       	ldd	r24, Y+33	; 0x21
    1930:	9a a1       	ldd	r25, Y+34	; 0x22
    1932:	01 97       	sbiw	r24, 0x01	; 1
    1934:	9a a3       	std	Y+34, r25	; 0x22
    1936:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1938:	89 a1       	ldd	r24, Y+33	; 0x21
    193a:	9a a1       	ldd	r25, Y+34	; 0x22
    193c:	00 97       	sbiw	r24, 0x00	; 0
    193e:	69 f7       	brne	.-38     	; 0x191a <LCD_Vid4Initialization+0x1c4>
    1940:	14 c0       	rjmp	.+40     	; 0x196a <LCD_Vid4Initialization+0x214>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1942:	6b a1       	ldd	r22, Y+35	; 0x23
    1944:	7c a1       	ldd	r23, Y+36	; 0x24
    1946:	8d a1       	ldd	r24, Y+37	; 0x25
    1948:	9e a1       	ldd	r25, Y+38	; 0x26
    194a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    194e:	dc 01       	movw	r26, r24
    1950:	cb 01       	movw	r24, r22
    1952:	9a a3       	std	Y+34, r25	; 0x22
    1954:	89 a3       	std	Y+33, r24	; 0x21
    1956:	89 a1       	ldd	r24, Y+33	; 0x21
    1958:	9a a1       	ldd	r25, Y+34	; 0x22
    195a:	9e 8f       	std	Y+30, r25	; 0x1e
    195c:	8d 8f       	std	Y+29, r24	; 0x1d
    195e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1960:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1962:	01 97       	sbiw	r24, 0x01	; 1
    1964:	f1 f7       	brne	.-4      	; 0x1962 <LCD_Vid4Initialization+0x20c>
    1966:	9e 8f       	std	Y+30, r25	; 0x1e
    1968:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);
	LCD_VidWrite4Cmd(0x00);
    196a:	80 e0       	ldi	r24, 0x00	; 0
    196c:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <LCD_VidWrite4Cmd>
	LCD_VidWrite4Cmd(0xC0);
    1970:	80 ec       	ldi	r24, 0xC0	; 192
    1972:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <LCD_VidWrite4Cmd>
    1976:	80 e0       	ldi	r24, 0x00	; 0
    1978:	90 e0       	ldi	r25, 0x00	; 0
    197a:	a0 e8       	ldi	r26, 0x80	; 128
    197c:	bf e3       	ldi	r27, 0x3F	; 63
    197e:	89 8f       	std	Y+25, r24	; 0x19
    1980:	9a 8f       	std	Y+26, r25	; 0x1a
    1982:	ab 8f       	std	Y+27, r26	; 0x1b
    1984:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1986:	69 8d       	ldd	r22, Y+25	; 0x19
    1988:	7a 8d       	ldd	r23, Y+26	; 0x1a
    198a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    198c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    198e:	20 e0       	ldi	r18, 0x00	; 0
    1990:	30 e0       	ldi	r19, 0x00	; 0
    1992:	4a ef       	ldi	r20, 0xFA	; 250
    1994:	54 e4       	ldi	r21, 0x44	; 68
    1996:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    199a:	dc 01       	movw	r26, r24
    199c:	cb 01       	movw	r24, r22
    199e:	8d 8b       	std	Y+21, r24	; 0x15
    19a0:	9e 8b       	std	Y+22, r25	; 0x16
    19a2:	af 8b       	std	Y+23, r26	; 0x17
    19a4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    19a6:	6d 89       	ldd	r22, Y+21	; 0x15
    19a8:	7e 89       	ldd	r23, Y+22	; 0x16
    19aa:	8f 89       	ldd	r24, Y+23	; 0x17
    19ac:	98 8d       	ldd	r25, Y+24	; 0x18
    19ae:	20 e0       	ldi	r18, 0x00	; 0
    19b0:	30 e0       	ldi	r19, 0x00	; 0
    19b2:	40 e8       	ldi	r20, 0x80	; 128
    19b4:	5f e3       	ldi	r21, 0x3F	; 63
    19b6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    19ba:	88 23       	and	r24, r24
    19bc:	2c f4       	brge	.+10     	; 0x19c8 <LCD_Vid4Initialization+0x272>
		__ticks = 1;
    19be:	81 e0       	ldi	r24, 0x01	; 1
    19c0:	90 e0       	ldi	r25, 0x00	; 0
    19c2:	9c 8b       	std	Y+20, r25	; 0x14
    19c4:	8b 8b       	std	Y+19, r24	; 0x13
    19c6:	3f c0       	rjmp	.+126    	; 0x1a46 <LCD_Vid4Initialization+0x2f0>
	else if (__tmp > 65535)
    19c8:	6d 89       	ldd	r22, Y+21	; 0x15
    19ca:	7e 89       	ldd	r23, Y+22	; 0x16
    19cc:	8f 89       	ldd	r24, Y+23	; 0x17
    19ce:	98 8d       	ldd	r25, Y+24	; 0x18
    19d0:	20 e0       	ldi	r18, 0x00	; 0
    19d2:	3f ef       	ldi	r19, 0xFF	; 255
    19d4:	4f e7       	ldi	r20, 0x7F	; 127
    19d6:	57 e4       	ldi	r21, 0x47	; 71
    19d8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    19dc:	18 16       	cp	r1, r24
    19de:	4c f5       	brge	.+82     	; 0x1a32 <LCD_Vid4Initialization+0x2dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19e0:	69 8d       	ldd	r22, Y+25	; 0x19
    19e2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19e4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19e6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19e8:	20 e0       	ldi	r18, 0x00	; 0
    19ea:	30 e0       	ldi	r19, 0x00	; 0
    19ec:	40 e2       	ldi	r20, 0x20	; 32
    19ee:	51 e4       	ldi	r21, 0x41	; 65
    19f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19f4:	dc 01       	movw	r26, r24
    19f6:	cb 01       	movw	r24, r22
    19f8:	bc 01       	movw	r22, r24
    19fa:	cd 01       	movw	r24, r26
    19fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a00:	dc 01       	movw	r26, r24
    1a02:	cb 01       	movw	r24, r22
    1a04:	9c 8b       	std	Y+20, r25	; 0x14
    1a06:	8b 8b       	std	Y+19, r24	; 0x13
    1a08:	0f c0       	rjmp	.+30     	; 0x1a28 <LCD_Vid4Initialization+0x2d2>
    1a0a:	88 ec       	ldi	r24, 0xC8	; 200
    1a0c:	90 e0       	ldi	r25, 0x00	; 0
    1a0e:	9a 8b       	std	Y+18, r25	; 0x12
    1a10:	89 8b       	std	Y+17, r24	; 0x11
    1a12:	89 89       	ldd	r24, Y+17	; 0x11
    1a14:	9a 89       	ldd	r25, Y+18	; 0x12
    1a16:	01 97       	sbiw	r24, 0x01	; 1
    1a18:	f1 f7       	brne	.-4      	; 0x1a16 <LCD_Vid4Initialization+0x2c0>
    1a1a:	9a 8b       	std	Y+18, r25	; 0x12
    1a1c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a1e:	8b 89       	ldd	r24, Y+19	; 0x13
    1a20:	9c 89       	ldd	r25, Y+20	; 0x14
    1a22:	01 97       	sbiw	r24, 0x01	; 1
    1a24:	9c 8b       	std	Y+20, r25	; 0x14
    1a26:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a28:	8b 89       	ldd	r24, Y+19	; 0x13
    1a2a:	9c 89       	ldd	r25, Y+20	; 0x14
    1a2c:	00 97       	sbiw	r24, 0x00	; 0
    1a2e:	69 f7       	brne	.-38     	; 0x1a0a <LCD_Vid4Initialization+0x2b4>
    1a30:	14 c0       	rjmp	.+40     	; 0x1a5a <LCD_Vid4Initialization+0x304>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a32:	6d 89       	ldd	r22, Y+21	; 0x15
    1a34:	7e 89       	ldd	r23, Y+22	; 0x16
    1a36:	8f 89       	ldd	r24, Y+23	; 0x17
    1a38:	98 8d       	ldd	r25, Y+24	; 0x18
    1a3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a3e:	dc 01       	movw	r26, r24
    1a40:	cb 01       	movw	r24, r22
    1a42:	9c 8b       	std	Y+20, r25	; 0x14
    1a44:	8b 8b       	std	Y+19, r24	; 0x13
    1a46:	8b 89       	ldd	r24, Y+19	; 0x13
    1a48:	9c 89       	ldd	r25, Y+20	; 0x14
    1a4a:	98 8b       	std	Y+16, r25	; 0x10
    1a4c:	8f 87       	std	Y+15, r24	; 0x0f
    1a4e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a50:	98 89       	ldd	r25, Y+16	; 0x10
    1a52:	01 97       	sbiw	r24, 0x01	; 1
    1a54:	f1 f7       	brne	.-4      	; 0x1a52 <LCD_Vid4Initialization+0x2fc>
    1a56:	98 8b       	std	Y+16, r25	; 0x10
    1a58:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_VidWrite4Cmd(0x00);
    1a5a:	80 e0       	ldi	r24, 0x00	; 0
    1a5c:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <LCD_VidWrite4Cmd>
	LCD_VidWrite4Cmd(0x10);
    1a60:	80 e1       	ldi	r24, 0x10	; 16
    1a62:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <LCD_VidWrite4Cmd>
    1a66:	80 e0       	ldi	r24, 0x00	; 0
    1a68:	90 e0       	ldi	r25, 0x00	; 0
    1a6a:	a0 e0       	ldi	r26, 0x00	; 0
    1a6c:	b0 e4       	ldi	r27, 0x40	; 64
    1a6e:	8b 87       	std	Y+11, r24	; 0x0b
    1a70:	9c 87       	std	Y+12, r25	; 0x0c
    1a72:	ad 87       	std	Y+13, r26	; 0x0d
    1a74:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a76:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a78:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a7a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a7c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a7e:	20 e0       	ldi	r18, 0x00	; 0
    1a80:	30 e0       	ldi	r19, 0x00	; 0
    1a82:	4a ef       	ldi	r20, 0xFA	; 250
    1a84:	54 e4       	ldi	r21, 0x44	; 68
    1a86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a8a:	dc 01       	movw	r26, r24
    1a8c:	cb 01       	movw	r24, r22
    1a8e:	8f 83       	std	Y+7, r24	; 0x07
    1a90:	98 87       	std	Y+8, r25	; 0x08
    1a92:	a9 87       	std	Y+9, r26	; 0x09
    1a94:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a96:	6f 81       	ldd	r22, Y+7	; 0x07
    1a98:	78 85       	ldd	r23, Y+8	; 0x08
    1a9a:	89 85       	ldd	r24, Y+9	; 0x09
    1a9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a9e:	20 e0       	ldi	r18, 0x00	; 0
    1aa0:	30 e0       	ldi	r19, 0x00	; 0
    1aa2:	40 e8       	ldi	r20, 0x80	; 128
    1aa4:	5f e3       	ldi	r21, 0x3F	; 63
    1aa6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1aaa:	88 23       	and	r24, r24
    1aac:	2c f4       	brge	.+10     	; 0x1ab8 <LCD_Vid4Initialization+0x362>
		__ticks = 1;
    1aae:	81 e0       	ldi	r24, 0x01	; 1
    1ab0:	90 e0       	ldi	r25, 0x00	; 0
    1ab2:	9e 83       	std	Y+6, r25	; 0x06
    1ab4:	8d 83       	std	Y+5, r24	; 0x05
    1ab6:	3f c0       	rjmp	.+126    	; 0x1b36 <LCD_Vid4Initialization+0x3e0>
	else if (__tmp > 65535)
    1ab8:	6f 81       	ldd	r22, Y+7	; 0x07
    1aba:	78 85       	ldd	r23, Y+8	; 0x08
    1abc:	89 85       	ldd	r24, Y+9	; 0x09
    1abe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ac0:	20 e0       	ldi	r18, 0x00	; 0
    1ac2:	3f ef       	ldi	r19, 0xFF	; 255
    1ac4:	4f e7       	ldi	r20, 0x7F	; 127
    1ac6:	57 e4       	ldi	r21, 0x47	; 71
    1ac8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1acc:	18 16       	cp	r1, r24
    1ace:	4c f5       	brge	.+82     	; 0x1b22 <LCD_Vid4Initialization+0x3cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ad0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ad2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ad4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ad6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ad8:	20 e0       	ldi	r18, 0x00	; 0
    1ada:	30 e0       	ldi	r19, 0x00	; 0
    1adc:	40 e2       	ldi	r20, 0x20	; 32
    1ade:	51 e4       	ldi	r21, 0x41	; 65
    1ae0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ae4:	dc 01       	movw	r26, r24
    1ae6:	cb 01       	movw	r24, r22
    1ae8:	bc 01       	movw	r22, r24
    1aea:	cd 01       	movw	r24, r26
    1aec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1af0:	dc 01       	movw	r26, r24
    1af2:	cb 01       	movw	r24, r22
    1af4:	9e 83       	std	Y+6, r25	; 0x06
    1af6:	8d 83       	std	Y+5, r24	; 0x05
    1af8:	0f c0       	rjmp	.+30     	; 0x1b18 <LCD_Vid4Initialization+0x3c2>
    1afa:	88 ec       	ldi	r24, 0xC8	; 200
    1afc:	90 e0       	ldi	r25, 0x00	; 0
    1afe:	9c 83       	std	Y+4, r25	; 0x04
    1b00:	8b 83       	std	Y+3, r24	; 0x03
    1b02:	8b 81       	ldd	r24, Y+3	; 0x03
    1b04:	9c 81       	ldd	r25, Y+4	; 0x04
    1b06:	01 97       	sbiw	r24, 0x01	; 1
    1b08:	f1 f7       	brne	.-4      	; 0x1b06 <LCD_Vid4Initialization+0x3b0>
    1b0a:	9c 83       	std	Y+4, r25	; 0x04
    1b0c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b0e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b10:	9e 81       	ldd	r25, Y+6	; 0x06
    1b12:	01 97       	sbiw	r24, 0x01	; 1
    1b14:	9e 83       	std	Y+6, r25	; 0x06
    1b16:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b18:	8d 81       	ldd	r24, Y+5	; 0x05
    1b1a:	9e 81       	ldd	r25, Y+6	; 0x06
    1b1c:	00 97       	sbiw	r24, 0x00	; 0
    1b1e:	69 f7       	brne	.-38     	; 0x1afa <LCD_Vid4Initialization+0x3a4>
    1b20:	14 c0       	rjmp	.+40     	; 0x1b4a <LCD_Vid4Initialization+0x3f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b22:	6f 81       	ldd	r22, Y+7	; 0x07
    1b24:	78 85       	ldd	r23, Y+8	; 0x08
    1b26:	89 85       	ldd	r24, Y+9	; 0x09
    1b28:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b2e:	dc 01       	movw	r26, r24
    1b30:	cb 01       	movw	r24, r22
    1b32:	9e 83       	std	Y+6, r25	; 0x06
    1b34:	8d 83       	std	Y+5, r24	; 0x05
    1b36:	8d 81       	ldd	r24, Y+5	; 0x05
    1b38:	9e 81       	ldd	r25, Y+6	; 0x06
    1b3a:	9a 83       	std	Y+2, r25	; 0x02
    1b3c:	89 83       	std	Y+1, r24	; 0x01
    1b3e:	89 81       	ldd	r24, Y+1	; 0x01
    1b40:	9a 81       	ldd	r25, Y+2	; 0x02
    1b42:	01 97       	sbiw	r24, 0x01	; 1
    1b44:	f1 f7       	brne	.-4      	; 0x1b42 <LCD_Vid4Initialization+0x3ec>
    1b46:	9a 83       	std	Y+2, r25	; 0x02
    1b48:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	InitStepFinishid=1;
    1b4a:	81 e0       	ldi	r24, 0x01	; 1
    1b4c:	80 93 7a 00 	sts	0x007A, r24
}
    1b50:	e8 96       	adiw	r28, 0x38	; 56
    1b52:	0f b6       	in	r0, 0x3f	; 63
    1b54:	f8 94       	cli
    1b56:	de bf       	out	0x3e, r29	; 62
    1b58:	0f be       	out	0x3f, r0	; 63
    1b5a:	cd bf       	out	0x3d, r28	; 61
    1b5c:	cf 91       	pop	r28
    1b5e:	df 91       	pop	r29
    1b60:	08 95       	ret

00001b62 <LCD_VidWrite4Cmd>:


void LCD_VidWrite4Cmd(u8 LOC_Cmd)
{
    1b62:	0f 93       	push	r16
    1b64:	1f 93       	push	r17
    1b66:	df 93       	push	r29
    1b68:	cf 93       	push	r28
    1b6a:	cd b7       	in	r28, 0x3d	; 61
    1b6c:	de b7       	in	r29, 0x3e	; 62
    1b6e:	c7 54       	subi	r28, 0x47	; 71
    1b70:	d0 40       	sbci	r29, 0x00	; 0
    1b72:	0f b6       	in	r0, 0x3f	; 63
    1b74:	f8 94       	cli
    1b76:	de bf       	out	0x3e, r29	; 62
    1b78:	0f be       	out	0x3f, r0	; 63
    1b7a:	cd bf       	out	0x3d, r28	; 61
    1b7c:	fe 01       	movw	r30, r28
    1b7e:	e9 5b       	subi	r30, 0xB9	; 185
    1b80:	ff 4f       	sbci	r31, 0xFF	; 255
    1b82:	80 83       	st	Z, r24
	DIO_VidSetPinValue(LCD_INIT,LCD_RS,0);
    1b84:	81 e0       	ldi	r24, 0x01	; 1
    1b86:	63 e0       	ldi	r22, 0x03	; 3
    1b88:	40 e0       	ldi	r20, 0x00	; 0
    1b8a:	0e 94 50 08 	call	0x10a0	; 0x10a0 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(LCD_INIT,LCD_RW,0);
    1b8e:	81 e0       	ldi	r24, 0x01	; 1
    1b90:	64 e0       	ldi	r22, 0x04	; 4
    1b92:	40 e0       	ldi	r20, 0x00	; 0
    1b94:	0e 94 50 08 	call	0x10a0	; 0x10a0 <DIO_VidSetPinValue>

	DIO_VidSetPinValue(LCD_PORT,PIN4,GET_BIT(LOC_Cmd,4));
    1b98:	fe 01       	movw	r30, r28
    1b9a:	e9 5b       	subi	r30, 0xB9	; 185
    1b9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b9e:	80 81       	ld	r24, Z
    1ba0:	82 95       	swap	r24
    1ba2:	8f 70       	andi	r24, 0x0F	; 15
    1ba4:	98 2f       	mov	r25, r24
    1ba6:	91 70       	andi	r25, 0x01	; 1
    1ba8:	83 e0       	ldi	r24, 0x03	; 3
    1baa:	64 e0       	ldi	r22, 0x04	; 4
    1bac:	49 2f       	mov	r20, r25
    1bae:	0e 94 50 08 	call	0x10a0	; 0x10a0 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(LCD_PORT,PIN5,GET_BIT(LOC_Cmd,5));
    1bb2:	fe 01       	movw	r30, r28
    1bb4:	e9 5b       	subi	r30, 0xB9	; 185
    1bb6:	ff 4f       	sbci	r31, 0xFF	; 255
    1bb8:	80 81       	ld	r24, Z
    1bba:	82 95       	swap	r24
    1bbc:	86 95       	lsr	r24
    1bbe:	87 70       	andi	r24, 0x07	; 7
    1bc0:	98 2f       	mov	r25, r24
    1bc2:	91 70       	andi	r25, 0x01	; 1
    1bc4:	83 e0       	ldi	r24, 0x03	; 3
    1bc6:	65 e0       	ldi	r22, 0x05	; 5
    1bc8:	49 2f       	mov	r20, r25
    1bca:	0e 94 50 08 	call	0x10a0	; 0x10a0 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(LCD_PORT,PIN6,GET_BIT(LOC_Cmd,6));
    1bce:	fe 01       	movw	r30, r28
    1bd0:	e9 5b       	subi	r30, 0xB9	; 185
    1bd2:	ff 4f       	sbci	r31, 0xFF	; 255
    1bd4:	80 81       	ld	r24, Z
    1bd6:	82 95       	swap	r24
    1bd8:	86 95       	lsr	r24
    1bda:	86 95       	lsr	r24
    1bdc:	83 70       	andi	r24, 0x03	; 3
    1bde:	98 2f       	mov	r25, r24
    1be0:	91 70       	andi	r25, 0x01	; 1
    1be2:	83 e0       	ldi	r24, 0x03	; 3
    1be4:	66 e0       	ldi	r22, 0x06	; 6
    1be6:	49 2f       	mov	r20, r25
    1be8:	0e 94 50 08 	call	0x10a0	; 0x10a0 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(LCD_PORT,PIN7,GET_BIT(LOC_Cmd,7));
    1bec:	fe 01       	movw	r30, r28
    1bee:	e9 5b       	subi	r30, 0xB9	; 185
    1bf0:	ff 4f       	sbci	r31, 0xFF	; 255
    1bf2:	80 81       	ld	r24, Z
    1bf4:	98 2f       	mov	r25, r24
    1bf6:	99 1f       	adc	r25, r25
    1bf8:	99 27       	eor	r25, r25
    1bfa:	99 1f       	adc	r25, r25
    1bfc:	83 e0       	ldi	r24, 0x03	; 3
    1bfe:	67 e0       	ldi	r22, 0x07	; 7
    1c00:	49 2f       	mov	r20, r25
    1c02:	0e 94 50 08 	call	0x10a0	; 0x10a0 <DIO_VidSetPinValue>

	DIO_VidSetPinValue(LCD_INIT,LCD_EN,1);
    1c06:	81 e0       	ldi	r24, 0x01	; 1
    1c08:	65 e0       	ldi	r22, 0x05	; 5
    1c0a:	41 e0       	ldi	r20, 0x01	; 1
    1c0c:	0e 94 50 08 	call	0x10a0	; 0x10a0 <DIO_VidSetPinValue>
    1c10:	fe 01       	movw	r30, r28
    1c12:	ed 5b       	subi	r30, 0xBD	; 189
    1c14:	ff 4f       	sbci	r31, 0xFF	; 255
    1c16:	80 e0       	ldi	r24, 0x00	; 0
    1c18:	90 e0       	ldi	r25, 0x00	; 0
    1c1a:	a0 e8       	ldi	r26, 0x80	; 128
    1c1c:	bf e3       	ldi	r27, 0x3F	; 63
    1c1e:	80 83       	st	Z, r24
    1c20:	91 83       	std	Z+1, r25	; 0x01
    1c22:	a2 83       	std	Z+2, r26	; 0x02
    1c24:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c26:	8e 01       	movw	r16, r28
    1c28:	01 5c       	subi	r16, 0xC1	; 193
    1c2a:	1f 4f       	sbci	r17, 0xFF	; 255
    1c2c:	fe 01       	movw	r30, r28
    1c2e:	ed 5b       	subi	r30, 0xBD	; 189
    1c30:	ff 4f       	sbci	r31, 0xFF	; 255
    1c32:	60 81       	ld	r22, Z
    1c34:	71 81       	ldd	r23, Z+1	; 0x01
    1c36:	82 81       	ldd	r24, Z+2	; 0x02
    1c38:	93 81       	ldd	r25, Z+3	; 0x03
    1c3a:	20 e0       	ldi	r18, 0x00	; 0
    1c3c:	30 e0       	ldi	r19, 0x00	; 0
    1c3e:	4a ef       	ldi	r20, 0xFA	; 250
    1c40:	54 e4       	ldi	r21, 0x44	; 68
    1c42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c46:	dc 01       	movw	r26, r24
    1c48:	cb 01       	movw	r24, r22
    1c4a:	f8 01       	movw	r30, r16
    1c4c:	80 83       	st	Z, r24
    1c4e:	91 83       	std	Z+1, r25	; 0x01
    1c50:	a2 83       	std	Z+2, r26	; 0x02
    1c52:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c54:	fe 01       	movw	r30, r28
    1c56:	ff 96       	adiw	r30, 0x3f	; 63
    1c58:	60 81       	ld	r22, Z
    1c5a:	71 81       	ldd	r23, Z+1	; 0x01
    1c5c:	82 81       	ldd	r24, Z+2	; 0x02
    1c5e:	93 81       	ldd	r25, Z+3	; 0x03
    1c60:	20 e0       	ldi	r18, 0x00	; 0
    1c62:	30 e0       	ldi	r19, 0x00	; 0
    1c64:	40 e8       	ldi	r20, 0x80	; 128
    1c66:	5f e3       	ldi	r21, 0x3F	; 63
    1c68:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c6c:	88 23       	and	r24, r24
    1c6e:	2c f4       	brge	.+10     	; 0x1c7a <LCD_VidWrite4Cmd+0x118>
		__ticks = 1;
    1c70:	81 e0       	ldi	r24, 0x01	; 1
    1c72:	90 e0       	ldi	r25, 0x00	; 0
    1c74:	9e af       	std	Y+62, r25	; 0x3e
    1c76:	8d af       	std	Y+61, r24	; 0x3d
    1c78:	46 c0       	rjmp	.+140    	; 0x1d06 <LCD_VidWrite4Cmd+0x1a4>
	else if (__tmp > 65535)
    1c7a:	fe 01       	movw	r30, r28
    1c7c:	ff 96       	adiw	r30, 0x3f	; 63
    1c7e:	60 81       	ld	r22, Z
    1c80:	71 81       	ldd	r23, Z+1	; 0x01
    1c82:	82 81       	ldd	r24, Z+2	; 0x02
    1c84:	93 81       	ldd	r25, Z+3	; 0x03
    1c86:	20 e0       	ldi	r18, 0x00	; 0
    1c88:	3f ef       	ldi	r19, 0xFF	; 255
    1c8a:	4f e7       	ldi	r20, 0x7F	; 127
    1c8c:	57 e4       	ldi	r21, 0x47	; 71
    1c8e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c92:	18 16       	cp	r1, r24
    1c94:	64 f5       	brge	.+88     	; 0x1cee <LCD_VidWrite4Cmd+0x18c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c96:	fe 01       	movw	r30, r28
    1c98:	ed 5b       	subi	r30, 0xBD	; 189
    1c9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c9c:	60 81       	ld	r22, Z
    1c9e:	71 81       	ldd	r23, Z+1	; 0x01
    1ca0:	82 81       	ldd	r24, Z+2	; 0x02
    1ca2:	93 81       	ldd	r25, Z+3	; 0x03
    1ca4:	20 e0       	ldi	r18, 0x00	; 0
    1ca6:	30 e0       	ldi	r19, 0x00	; 0
    1ca8:	40 e2       	ldi	r20, 0x20	; 32
    1caa:	51 e4       	ldi	r21, 0x41	; 65
    1cac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cb0:	dc 01       	movw	r26, r24
    1cb2:	cb 01       	movw	r24, r22
    1cb4:	bc 01       	movw	r22, r24
    1cb6:	cd 01       	movw	r24, r26
    1cb8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cbc:	dc 01       	movw	r26, r24
    1cbe:	cb 01       	movw	r24, r22
    1cc0:	9e af       	std	Y+62, r25	; 0x3e
    1cc2:	8d af       	std	Y+61, r24	; 0x3d
    1cc4:	0f c0       	rjmp	.+30     	; 0x1ce4 <LCD_VidWrite4Cmd+0x182>
    1cc6:	88 ec       	ldi	r24, 0xC8	; 200
    1cc8:	90 e0       	ldi	r25, 0x00	; 0
    1cca:	9c af       	std	Y+60, r25	; 0x3c
    1ccc:	8b af       	std	Y+59, r24	; 0x3b
    1cce:	8b ad       	ldd	r24, Y+59	; 0x3b
    1cd0:	9c ad       	ldd	r25, Y+60	; 0x3c
    1cd2:	01 97       	sbiw	r24, 0x01	; 1
    1cd4:	f1 f7       	brne	.-4      	; 0x1cd2 <LCD_VidWrite4Cmd+0x170>
    1cd6:	9c af       	std	Y+60, r25	; 0x3c
    1cd8:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cda:	8d ad       	ldd	r24, Y+61	; 0x3d
    1cdc:	9e ad       	ldd	r25, Y+62	; 0x3e
    1cde:	01 97       	sbiw	r24, 0x01	; 1
    1ce0:	9e af       	std	Y+62, r25	; 0x3e
    1ce2:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ce4:	8d ad       	ldd	r24, Y+61	; 0x3d
    1ce6:	9e ad       	ldd	r25, Y+62	; 0x3e
    1ce8:	00 97       	sbiw	r24, 0x00	; 0
    1cea:	69 f7       	brne	.-38     	; 0x1cc6 <LCD_VidWrite4Cmd+0x164>
    1cec:	16 c0       	rjmp	.+44     	; 0x1d1a <LCD_VidWrite4Cmd+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cee:	fe 01       	movw	r30, r28
    1cf0:	ff 96       	adiw	r30, 0x3f	; 63
    1cf2:	60 81       	ld	r22, Z
    1cf4:	71 81       	ldd	r23, Z+1	; 0x01
    1cf6:	82 81       	ldd	r24, Z+2	; 0x02
    1cf8:	93 81       	ldd	r25, Z+3	; 0x03
    1cfa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cfe:	dc 01       	movw	r26, r24
    1d00:	cb 01       	movw	r24, r22
    1d02:	9e af       	std	Y+62, r25	; 0x3e
    1d04:	8d af       	std	Y+61, r24	; 0x3d
    1d06:	8d ad       	ldd	r24, Y+61	; 0x3d
    1d08:	9e ad       	ldd	r25, Y+62	; 0x3e
    1d0a:	9a af       	std	Y+58, r25	; 0x3a
    1d0c:	89 af       	std	Y+57, r24	; 0x39
    1d0e:	89 ad       	ldd	r24, Y+57	; 0x39
    1d10:	9a ad       	ldd	r25, Y+58	; 0x3a
    1d12:	01 97       	sbiw	r24, 0x01	; 1
    1d14:	f1 f7       	brne	.-4      	; 0x1d12 <LCD_VidWrite4Cmd+0x1b0>
    1d16:	9a af       	std	Y+58, r25	; 0x3a
    1d18:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);
	DIO_VidSetPinValue(LCD_INIT,LCD_EN,0);
    1d1a:	81 e0       	ldi	r24, 0x01	; 1
    1d1c:	65 e0       	ldi	r22, 0x05	; 5
    1d1e:	40 e0       	ldi	r20, 0x00	; 0
    1d20:	0e 94 50 08 	call	0x10a0	; 0x10a0 <DIO_VidSetPinValue>
    1d24:	80 e0       	ldi	r24, 0x00	; 0
    1d26:	90 e0       	ldi	r25, 0x00	; 0
    1d28:	a0 e8       	ldi	r26, 0x80	; 128
    1d2a:	bf e3       	ldi	r27, 0x3F	; 63
    1d2c:	8d ab       	std	Y+53, r24	; 0x35
    1d2e:	9e ab       	std	Y+54, r25	; 0x36
    1d30:	af ab       	std	Y+55, r26	; 0x37
    1d32:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d34:	6d a9       	ldd	r22, Y+53	; 0x35
    1d36:	7e a9       	ldd	r23, Y+54	; 0x36
    1d38:	8f a9       	ldd	r24, Y+55	; 0x37
    1d3a:	98 ad       	ldd	r25, Y+56	; 0x38
    1d3c:	20 e0       	ldi	r18, 0x00	; 0
    1d3e:	30 e0       	ldi	r19, 0x00	; 0
    1d40:	4a ef       	ldi	r20, 0xFA	; 250
    1d42:	54 e4       	ldi	r21, 0x44	; 68
    1d44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d48:	dc 01       	movw	r26, r24
    1d4a:	cb 01       	movw	r24, r22
    1d4c:	89 ab       	std	Y+49, r24	; 0x31
    1d4e:	9a ab       	std	Y+50, r25	; 0x32
    1d50:	ab ab       	std	Y+51, r26	; 0x33
    1d52:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1d54:	69 a9       	ldd	r22, Y+49	; 0x31
    1d56:	7a a9       	ldd	r23, Y+50	; 0x32
    1d58:	8b a9       	ldd	r24, Y+51	; 0x33
    1d5a:	9c a9       	ldd	r25, Y+52	; 0x34
    1d5c:	20 e0       	ldi	r18, 0x00	; 0
    1d5e:	30 e0       	ldi	r19, 0x00	; 0
    1d60:	40 e8       	ldi	r20, 0x80	; 128
    1d62:	5f e3       	ldi	r21, 0x3F	; 63
    1d64:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d68:	88 23       	and	r24, r24
    1d6a:	2c f4       	brge	.+10     	; 0x1d76 <LCD_VidWrite4Cmd+0x214>
		__ticks = 1;
    1d6c:	81 e0       	ldi	r24, 0x01	; 1
    1d6e:	90 e0       	ldi	r25, 0x00	; 0
    1d70:	98 ab       	std	Y+48, r25	; 0x30
    1d72:	8f a7       	std	Y+47, r24	; 0x2f
    1d74:	3f c0       	rjmp	.+126    	; 0x1df4 <LCD_VidWrite4Cmd+0x292>
	else if (__tmp > 65535)
    1d76:	69 a9       	ldd	r22, Y+49	; 0x31
    1d78:	7a a9       	ldd	r23, Y+50	; 0x32
    1d7a:	8b a9       	ldd	r24, Y+51	; 0x33
    1d7c:	9c a9       	ldd	r25, Y+52	; 0x34
    1d7e:	20 e0       	ldi	r18, 0x00	; 0
    1d80:	3f ef       	ldi	r19, 0xFF	; 255
    1d82:	4f e7       	ldi	r20, 0x7F	; 127
    1d84:	57 e4       	ldi	r21, 0x47	; 71
    1d86:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d8a:	18 16       	cp	r1, r24
    1d8c:	4c f5       	brge	.+82     	; 0x1de0 <LCD_VidWrite4Cmd+0x27e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d8e:	6d a9       	ldd	r22, Y+53	; 0x35
    1d90:	7e a9       	ldd	r23, Y+54	; 0x36
    1d92:	8f a9       	ldd	r24, Y+55	; 0x37
    1d94:	98 ad       	ldd	r25, Y+56	; 0x38
    1d96:	20 e0       	ldi	r18, 0x00	; 0
    1d98:	30 e0       	ldi	r19, 0x00	; 0
    1d9a:	40 e2       	ldi	r20, 0x20	; 32
    1d9c:	51 e4       	ldi	r21, 0x41	; 65
    1d9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1da2:	dc 01       	movw	r26, r24
    1da4:	cb 01       	movw	r24, r22
    1da6:	bc 01       	movw	r22, r24
    1da8:	cd 01       	movw	r24, r26
    1daa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dae:	dc 01       	movw	r26, r24
    1db0:	cb 01       	movw	r24, r22
    1db2:	98 ab       	std	Y+48, r25	; 0x30
    1db4:	8f a7       	std	Y+47, r24	; 0x2f
    1db6:	0f c0       	rjmp	.+30     	; 0x1dd6 <LCD_VidWrite4Cmd+0x274>
    1db8:	88 ec       	ldi	r24, 0xC8	; 200
    1dba:	90 e0       	ldi	r25, 0x00	; 0
    1dbc:	9e a7       	std	Y+46, r25	; 0x2e
    1dbe:	8d a7       	std	Y+45, r24	; 0x2d
    1dc0:	8d a5       	ldd	r24, Y+45	; 0x2d
    1dc2:	9e a5       	ldd	r25, Y+46	; 0x2e
    1dc4:	01 97       	sbiw	r24, 0x01	; 1
    1dc6:	f1 f7       	brne	.-4      	; 0x1dc4 <LCD_VidWrite4Cmd+0x262>
    1dc8:	9e a7       	std	Y+46, r25	; 0x2e
    1dca:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dcc:	8f a5       	ldd	r24, Y+47	; 0x2f
    1dce:	98 a9       	ldd	r25, Y+48	; 0x30
    1dd0:	01 97       	sbiw	r24, 0x01	; 1
    1dd2:	98 ab       	std	Y+48, r25	; 0x30
    1dd4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dd6:	8f a5       	ldd	r24, Y+47	; 0x2f
    1dd8:	98 a9       	ldd	r25, Y+48	; 0x30
    1dda:	00 97       	sbiw	r24, 0x00	; 0
    1ddc:	69 f7       	brne	.-38     	; 0x1db8 <LCD_VidWrite4Cmd+0x256>
    1dde:	14 c0       	rjmp	.+40     	; 0x1e08 <LCD_VidWrite4Cmd+0x2a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1de0:	69 a9       	ldd	r22, Y+49	; 0x31
    1de2:	7a a9       	ldd	r23, Y+50	; 0x32
    1de4:	8b a9       	ldd	r24, Y+51	; 0x33
    1de6:	9c a9       	ldd	r25, Y+52	; 0x34
    1de8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dec:	dc 01       	movw	r26, r24
    1dee:	cb 01       	movw	r24, r22
    1df0:	98 ab       	std	Y+48, r25	; 0x30
    1df2:	8f a7       	std	Y+47, r24	; 0x2f
    1df4:	8f a5       	ldd	r24, Y+47	; 0x2f
    1df6:	98 a9       	ldd	r25, Y+48	; 0x30
    1df8:	9c a7       	std	Y+44, r25	; 0x2c
    1dfa:	8b a7       	std	Y+43, r24	; 0x2b
    1dfc:	8b a5       	ldd	r24, Y+43	; 0x2b
    1dfe:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e00:	01 97       	sbiw	r24, 0x01	; 1
    1e02:	f1 f7       	brne	.-4      	; 0x1e00 <LCD_VidWrite4Cmd+0x29e>
    1e04:	9c a7       	std	Y+44, r25	; 0x2c
    1e06:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);

	if(InitStepFinishid)
    1e08:	80 91 7a 00 	lds	r24, 0x007A
    1e0c:	88 23       	and	r24, r24
    1e0e:	09 f4       	brne	.+2      	; 0x1e12 <LCD_VidWrite4Cmd+0x2b0>
    1e10:	20 c1       	rjmp	.+576    	; 0x2052 <LCD_VidWrite4Cmd+0x4f0>
	{
		DIO_VidSetPinValue(LCD_PORT,PIN4,GET_BIT(LOC_Cmd,0));
    1e12:	fe 01       	movw	r30, r28
    1e14:	e9 5b       	subi	r30, 0xB9	; 185
    1e16:	ff 4f       	sbci	r31, 0xFF	; 255
    1e18:	80 81       	ld	r24, Z
    1e1a:	98 2f       	mov	r25, r24
    1e1c:	91 70       	andi	r25, 0x01	; 1
    1e1e:	83 e0       	ldi	r24, 0x03	; 3
    1e20:	64 e0       	ldi	r22, 0x04	; 4
    1e22:	49 2f       	mov	r20, r25
    1e24:	0e 94 50 08 	call	0x10a0	; 0x10a0 <DIO_VidSetPinValue>
		DIO_VidSetPinValue(LCD_PORT,PIN5,GET_BIT(LOC_Cmd,1));
    1e28:	fe 01       	movw	r30, r28
    1e2a:	e9 5b       	subi	r30, 0xB9	; 185
    1e2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e2e:	80 81       	ld	r24, Z
    1e30:	86 95       	lsr	r24
    1e32:	98 2f       	mov	r25, r24
    1e34:	91 70       	andi	r25, 0x01	; 1
    1e36:	83 e0       	ldi	r24, 0x03	; 3
    1e38:	65 e0       	ldi	r22, 0x05	; 5
    1e3a:	49 2f       	mov	r20, r25
    1e3c:	0e 94 50 08 	call	0x10a0	; 0x10a0 <DIO_VidSetPinValue>
		DIO_VidSetPinValue(LCD_PORT,PIN6,GET_BIT(LOC_Cmd,2));
    1e40:	fe 01       	movw	r30, r28
    1e42:	e9 5b       	subi	r30, 0xB9	; 185
    1e44:	ff 4f       	sbci	r31, 0xFF	; 255
    1e46:	80 81       	ld	r24, Z
    1e48:	86 95       	lsr	r24
    1e4a:	86 95       	lsr	r24
    1e4c:	98 2f       	mov	r25, r24
    1e4e:	91 70       	andi	r25, 0x01	; 1
    1e50:	83 e0       	ldi	r24, 0x03	; 3
    1e52:	66 e0       	ldi	r22, 0x06	; 6
    1e54:	49 2f       	mov	r20, r25
    1e56:	0e 94 50 08 	call	0x10a0	; 0x10a0 <DIO_VidSetPinValue>
		DIO_VidSetPinValue(LCD_PORT,PIN7,GET_BIT(LOC_Cmd,3));
    1e5a:	fe 01       	movw	r30, r28
    1e5c:	e9 5b       	subi	r30, 0xB9	; 185
    1e5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e60:	80 81       	ld	r24, Z
    1e62:	86 95       	lsr	r24
    1e64:	86 95       	lsr	r24
    1e66:	86 95       	lsr	r24
    1e68:	98 2f       	mov	r25, r24
    1e6a:	91 70       	andi	r25, 0x01	; 1
    1e6c:	83 e0       	ldi	r24, 0x03	; 3
    1e6e:	67 e0       	ldi	r22, 0x07	; 7
    1e70:	49 2f       	mov	r20, r25
    1e72:	0e 94 50 08 	call	0x10a0	; 0x10a0 <DIO_VidSetPinValue>

		DIO_VidSetPinValue(LCD_INIT,LCD_EN,1);
    1e76:	81 e0       	ldi	r24, 0x01	; 1
    1e78:	65 e0       	ldi	r22, 0x05	; 5
    1e7a:	41 e0       	ldi	r20, 0x01	; 1
    1e7c:	0e 94 50 08 	call	0x10a0	; 0x10a0 <DIO_VidSetPinValue>
    1e80:	80 e0       	ldi	r24, 0x00	; 0
    1e82:	90 e0       	ldi	r25, 0x00	; 0
    1e84:	a0 e8       	ldi	r26, 0x80	; 128
    1e86:	bf e3       	ldi	r27, 0x3F	; 63
    1e88:	8f a3       	std	Y+39, r24	; 0x27
    1e8a:	98 a7       	std	Y+40, r25	; 0x28
    1e8c:	a9 a7       	std	Y+41, r26	; 0x29
    1e8e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e90:	6f a1       	ldd	r22, Y+39	; 0x27
    1e92:	78 a5       	ldd	r23, Y+40	; 0x28
    1e94:	89 a5       	ldd	r24, Y+41	; 0x29
    1e96:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e98:	20 e0       	ldi	r18, 0x00	; 0
    1e9a:	30 e0       	ldi	r19, 0x00	; 0
    1e9c:	4a ef       	ldi	r20, 0xFA	; 250
    1e9e:	54 e4       	ldi	r21, 0x44	; 68
    1ea0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ea4:	dc 01       	movw	r26, r24
    1ea6:	cb 01       	movw	r24, r22
    1ea8:	8b a3       	std	Y+35, r24	; 0x23
    1eaa:	9c a3       	std	Y+36, r25	; 0x24
    1eac:	ad a3       	std	Y+37, r26	; 0x25
    1eae:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1eb0:	6b a1       	ldd	r22, Y+35	; 0x23
    1eb2:	7c a1       	ldd	r23, Y+36	; 0x24
    1eb4:	8d a1       	ldd	r24, Y+37	; 0x25
    1eb6:	9e a1       	ldd	r25, Y+38	; 0x26
    1eb8:	20 e0       	ldi	r18, 0x00	; 0
    1eba:	30 e0       	ldi	r19, 0x00	; 0
    1ebc:	40 e8       	ldi	r20, 0x80	; 128
    1ebe:	5f e3       	ldi	r21, 0x3F	; 63
    1ec0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ec4:	88 23       	and	r24, r24
    1ec6:	2c f4       	brge	.+10     	; 0x1ed2 <LCD_VidWrite4Cmd+0x370>
		__ticks = 1;
    1ec8:	81 e0       	ldi	r24, 0x01	; 1
    1eca:	90 e0       	ldi	r25, 0x00	; 0
    1ecc:	9a a3       	std	Y+34, r25	; 0x22
    1ece:	89 a3       	std	Y+33, r24	; 0x21
    1ed0:	3f c0       	rjmp	.+126    	; 0x1f50 <LCD_VidWrite4Cmd+0x3ee>
	else if (__tmp > 65535)
    1ed2:	6b a1       	ldd	r22, Y+35	; 0x23
    1ed4:	7c a1       	ldd	r23, Y+36	; 0x24
    1ed6:	8d a1       	ldd	r24, Y+37	; 0x25
    1ed8:	9e a1       	ldd	r25, Y+38	; 0x26
    1eda:	20 e0       	ldi	r18, 0x00	; 0
    1edc:	3f ef       	ldi	r19, 0xFF	; 255
    1ede:	4f e7       	ldi	r20, 0x7F	; 127
    1ee0:	57 e4       	ldi	r21, 0x47	; 71
    1ee2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ee6:	18 16       	cp	r1, r24
    1ee8:	4c f5       	brge	.+82     	; 0x1f3c <LCD_VidWrite4Cmd+0x3da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1eea:	6f a1       	ldd	r22, Y+39	; 0x27
    1eec:	78 a5       	ldd	r23, Y+40	; 0x28
    1eee:	89 a5       	ldd	r24, Y+41	; 0x29
    1ef0:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ef2:	20 e0       	ldi	r18, 0x00	; 0
    1ef4:	30 e0       	ldi	r19, 0x00	; 0
    1ef6:	40 e2       	ldi	r20, 0x20	; 32
    1ef8:	51 e4       	ldi	r21, 0x41	; 65
    1efa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1efe:	dc 01       	movw	r26, r24
    1f00:	cb 01       	movw	r24, r22
    1f02:	bc 01       	movw	r22, r24
    1f04:	cd 01       	movw	r24, r26
    1f06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f0a:	dc 01       	movw	r26, r24
    1f0c:	cb 01       	movw	r24, r22
    1f0e:	9a a3       	std	Y+34, r25	; 0x22
    1f10:	89 a3       	std	Y+33, r24	; 0x21
    1f12:	0f c0       	rjmp	.+30     	; 0x1f32 <LCD_VidWrite4Cmd+0x3d0>
    1f14:	88 ec       	ldi	r24, 0xC8	; 200
    1f16:	90 e0       	ldi	r25, 0x00	; 0
    1f18:	98 a3       	std	Y+32, r25	; 0x20
    1f1a:	8f 8f       	std	Y+31, r24	; 0x1f
    1f1c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1f1e:	98 a1       	ldd	r25, Y+32	; 0x20
    1f20:	01 97       	sbiw	r24, 0x01	; 1
    1f22:	f1 f7       	brne	.-4      	; 0x1f20 <LCD_VidWrite4Cmd+0x3be>
    1f24:	98 a3       	std	Y+32, r25	; 0x20
    1f26:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f28:	89 a1       	ldd	r24, Y+33	; 0x21
    1f2a:	9a a1       	ldd	r25, Y+34	; 0x22
    1f2c:	01 97       	sbiw	r24, 0x01	; 1
    1f2e:	9a a3       	std	Y+34, r25	; 0x22
    1f30:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f32:	89 a1       	ldd	r24, Y+33	; 0x21
    1f34:	9a a1       	ldd	r25, Y+34	; 0x22
    1f36:	00 97       	sbiw	r24, 0x00	; 0
    1f38:	69 f7       	brne	.-38     	; 0x1f14 <LCD_VidWrite4Cmd+0x3b2>
    1f3a:	14 c0       	rjmp	.+40     	; 0x1f64 <LCD_VidWrite4Cmd+0x402>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f3c:	6b a1       	ldd	r22, Y+35	; 0x23
    1f3e:	7c a1       	ldd	r23, Y+36	; 0x24
    1f40:	8d a1       	ldd	r24, Y+37	; 0x25
    1f42:	9e a1       	ldd	r25, Y+38	; 0x26
    1f44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f48:	dc 01       	movw	r26, r24
    1f4a:	cb 01       	movw	r24, r22
    1f4c:	9a a3       	std	Y+34, r25	; 0x22
    1f4e:	89 a3       	std	Y+33, r24	; 0x21
    1f50:	89 a1       	ldd	r24, Y+33	; 0x21
    1f52:	9a a1       	ldd	r25, Y+34	; 0x22
    1f54:	9e 8f       	std	Y+30, r25	; 0x1e
    1f56:	8d 8f       	std	Y+29, r24	; 0x1d
    1f58:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f5a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1f5c:	01 97       	sbiw	r24, 0x01	; 1
    1f5e:	f1 f7       	brne	.-4      	; 0x1f5c <LCD_VidWrite4Cmd+0x3fa>
    1f60:	9e 8f       	std	Y+30, r25	; 0x1e
    1f62:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1);
		DIO_VidSetPinValue(LCD_INIT,LCD_EN,0);
    1f64:	81 e0       	ldi	r24, 0x01	; 1
    1f66:	65 e0       	ldi	r22, 0x05	; 5
    1f68:	40 e0       	ldi	r20, 0x00	; 0
    1f6a:	0e 94 50 08 	call	0x10a0	; 0x10a0 <DIO_VidSetPinValue>
    1f6e:	80 e0       	ldi	r24, 0x00	; 0
    1f70:	90 e0       	ldi	r25, 0x00	; 0
    1f72:	a0 e8       	ldi	r26, 0x80	; 128
    1f74:	bf e3       	ldi	r27, 0x3F	; 63
    1f76:	89 8f       	std	Y+25, r24	; 0x19
    1f78:	9a 8f       	std	Y+26, r25	; 0x1a
    1f7a:	ab 8f       	std	Y+27, r26	; 0x1b
    1f7c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f7e:	69 8d       	ldd	r22, Y+25	; 0x19
    1f80:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f82:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f84:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f86:	20 e0       	ldi	r18, 0x00	; 0
    1f88:	30 e0       	ldi	r19, 0x00	; 0
    1f8a:	4a ef       	ldi	r20, 0xFA	; 250
    1f8c:	54 e4       	ldi	r21, 0x44	; 68
    1f8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f92:	dc 01       	movw	r26, r24
    1f94:	cb 01       	movw	r24, r22
    1f96:	8d 8b       	std	Y+21, r24	; 0x15
    1f98:	9e 8b       	std	Y+22, r25	; 0x16
    1f9a:	af 8b       	std	Y+23, r26	; 0x17
    1f9c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1f9e:	6d 89       	ldd	r22, Y+21	; 0x15
    1fa0:	7e 89       	ldd	r23, Y+22	; 0x16
    1fa2:	8f 89       	ldd	r24, Y+23	; 0x17
    1fa4:	98 8d       	ldd	r25, Y+24	; 0x18
    1fa6:	20 e0       	ldi	r18, 0x00	; 0
    1fa8:	30 e0       	ldi	r19, 0x00	; 0
    1faa:	40 e8       	ldi	r20, 0x80	; 128
    1fac:	5f e3       	ldi	r21, 0x3F	; 63
    1fae:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1fb2:	88 23       	and	r24, r24
    1fb4:	2c f4       	brge	.+10     	; 0x1fc0 <LCD_VidWrite4Cmd+0x45e>
		__ticks = 1;
    1fb6:	81 e0       	ldi	r24, 0x01	; 1
    1fb8:	90 e0       	ldi	r25, 0x00	; 0
    1fba:	9c 8b       	std	Y+20, r25	; 0x14
    1fbc:	8b 8b       	std	Y+19, r24	; 0x13
    1fbe:	3f c0       	rjmp	.+126    	; 0x203e <LCD_VidWrite4Cmd+0x4dc>
	else if (__tmp > 65535)
    1fc0:	6d 89       	ldd	r22, Y+21	; 0x15
    1fc2:	7e 89       	ldd	r23, Y+22	; 0x16
    1fc4:	8f 89       	ldd	r24, Y+23	; 0x17
    1fc6:	98 8d       	ldd	r25, Y+24	; 0x18
    1fc8:	20 e0       	ldi	r18, 0x00	; 0
    1fca:	3f ef       	ldi	r19, 0xFF	; 255
    1fcc:	4f e7       	ldi	r20, 0x7F	; 127
    1fce:	57 e4       	ldi	r21, 0x47	; 71
    1fd0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1fd4:	18 16       	cp	r1, r24
    1fd6:	4c f5       	brge	.+82     	; 0x202a <LCD_VidWrite4Cmd+0x4c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fd8:	69 8d       	ldd	r22, Y+25	; 0x19
    1fda:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fdc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fde:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fe0:	20 e0       	ldi	r18, 0x00	; 0
    1fe2:	30 e0       	ldi	r19, 0x00	; 0
    1fe4:	40 e2       	ldi	r20, 0x20	; 32
    1fe6:	51 e4       	ldi	r21, 0x41	; 65
    1fe8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fec:	dc 01       	movw	r26, r24
    1fee:	cb 01       	movw	r24, r22
    1ff0:	bc 01       	movw	r22, r24
    1ff2:	cd 01       	movw	r24, r26
    1ff4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ff8:	dc 01       	movw	r26, r24
    1ffa:	cb 01       	movw	r24, r22
    1ffc:	9c 8b       	std	Y+20, r25	; 0x14
    1ffe:	8b 8b       	std	Y+19, r24	; 0x13
    2000:	0f c0       	rjmp	.+30     	; 0x2020 <LCD_VidWrite4Cmd+0x4be>
    2002:	88 ec       	ldi	r24, 0xC8	; 200
    2004:	90 e0       	ldi	r25, 0x00	; 0
    2006:	9a 8b       	std	Y+18, r25	; 0x12
    2008:	89 8b       	std	Y+17, r24	; 0x11
    200a:	89 89       	ldd	r24, Y+17	; 0x11
    200c:	9a 89       	ldd	r25, Y+18	; 0x12
    200e:	01 97       	sbiw	r24, 0x01	; 1
    2010:	f1 f7       	brne	.-4      	; 0x200e <LCD_VidWrite4Cmd+0x4ac>
    2012:	9a 8b       	std	Y+18, r25	; 0x12
    2014:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2016:	8b 89       	ldd	r24, Y+19	; 0x13
    2018:	9c 89       	ldd	r25, Y+20	; 0x14
    201a:	01 97       	sbiw	r24, 0x01	; 1
    201c:	9c 8b       	std	Y+20, r25	; 0x14
    201e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2020:	8b 89       	ldd	r24, Y+19	; 0x13
    2022:	9c 89       	ldd	r25, Y+20	; 0x14
    2024:	00 97       	sbiw	r24, 0x00	; 0
    2026:	69 f7       	brne	.-38     	; 0x2002 <LCD_VidWrite4Cmd+0x4a0>
    2028:	14 c0       	rjmp	.+40     	; 0x2052 <LCD_VidWrite4Cmd+0x4f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    202a:	6d 89       	ldd	r22, Y+21	; 0x15
    202c:	7e 89       	ldd	r23, Y+22	; 0x16
    202e:	8f 89       	ldd	r24, Y+23	; 0x17
    2030:	98 8d       	ldd	r25, Y+24	; 0x18
    2032:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2036:	dc 01       	movw	r26, r24
    2038:	cb 01       	movw	r24, r22
    203a:	9c 8b       	std	Y+20, r25	; 0x14
    203c:	8b 8b       	std	Y+19, r24	; 0x13
    203e:	8b 89       	ldd	r24, Y+19	; 0x13
    2040:	9c 89       	ldd	r25, Y+20	; 0x14
    2042:	98 8b       	std	Y+16, r25	; 0x10
    2044:	8f 87       	std	Y+15, r24	; 0x0f
    2046:	8f 85       	ldd	r24, Y+15	; 0x0f
    2048:	98 89       	ldd	r25, Y+16	; 0x10
    204a:	01 97       	sbiw	r24, 0x01	; 1
    204c:	f1 f7       	brne	.-4      	; 0x204a <LCD_VidWrite4Cmd+0x4e8>
    204e:	98 8b       	std	Y+16, r25	; 0x10
    2050:	8f 87       	std	Y+15, r24	; 0x0f
    2052:	80 e0       	ldi	r24, 0x00	; 0
    2054:	90 e0       	ldi	r25, 0x00	; 0
    2056:	a0 e0       	ldi	r26, 0x00	; 0
    2058:	b0 e4       	ldi	r27, 0x40	; 64
    205a:	8b 87       	std	Y+11, r24	; 0x0b
    205c:	9c 87       	std	Y+12, r25	; 0x0c
    205e:	ad 87       	std	Y+13, r26	; 0x0d
    2060:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2062:	6b 85       	ldd	r22, Y+11	; 0x0b
    2064:	7c 85       	ldd	r23, Y+12	; 0x0c
    2066:	8d 85       	ldd	r24, Y+13	; 0x0d
    2068:	9e 85       	ldd	r25, Y+14	; 0x0e
    206a:	20 e0       	ldi	r18, 0x00	; 0
    206c:	30 e0       	ldi	r19, 0x00	; 0
    206e:	4a ef       	ldi	r20, 0xFA	; 250
    2070:	54 e4       	ldi	r21, 0x44	; 68
    2072:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2076:	dc 01       	movw	r26, r24
    2078:	cb 01       	movw	r24, r22
    207a:	8f 83       	std	Y+7, r24	; 0x07
    207c:	98 87       	std	Y+8, r25	; 0x08
    207e:	a9 87       	std	Y+9, r26	; 0x09
    2080:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2082:	6f 81       	ldd	r22, Y+7	; 0x07
    2084:	78 85       	ldd	r23, Y+8	; 0x08
    2086:	89 85       	ldd	r24, Y+9	; 0x09
    2088:	9a 85       	ldd	r25, Y+10	; 0x0a
    208a:	20 e0       	ldi	r18, 0x00	; 0
    208c:	30 e0       	ldi	r19, 0x00	; 0
    208e:	40 e8       	ldi	r20, 0x80	; 128
    2090:	5f e3       	ldi	r21, 0x3F	; 63
    2092:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2096:	88 23       	and	r24, r24
    2098:	2c f4       	brge	.+10     	; 0x20a4 <LCD_VidWrite4Cmd+0x542>
		__ticks = 1;
    209a:	81 e0       	ldi	r24, 0x01	; 1
    209c:	90 e0       	ldi	r25, 0x00	; 0
    209e:	9e 83       	std	Y+6, r25	; 0x06
    20a0:	8d 83       	std	Y+5, r24	; 0x05
    20a2:	3f c0       	rjmp	.+126    	; 0x2122 <LCD_VidWrite4Cmd+0x5c0>
	else if (__tmp > 65535)
    20a4:	6f 81       	ldd	r22, Y+7	; 0x07
    20a6:	78 85       	ldd	r23, Y+8	; 0x08
    20a8:	89 85       	ldd	r24, Y+9	; 0x09
    20aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    20ac:	20 e0       	ldi	r18, 0x00	; 0
    20ae:	3f ef       	ldi	r19, 0xFF	; 255
    20b0:	4f e7       	ldi	r20, 0x7F	; 127
    20b2:	57 e4       	ldi	r21, 0x47	; 71
    20b4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    20b8:	18 16       	cp	r1, r24
    20ba:	4c f5       	brge	.+82     	; 0x210e <LCD_VidWrite4Cmd+0x5ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    20be:	7c 85       	ldd	r23, Y+12	; 0x0c
    20c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    20c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    20c4:	20 e0       	ldi	r18, 0x00	; 0
    20c6:	30 e0       	ldi	r19, 0x00	; 0
    20c8:	40 e2       	ldi	r20, 0x20	; 32
    20ca:	51 e4       	ldi	r21, 0x41	; 65
    20cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20d0:	dc 01       	movw	r26, r24
    20d2:	cb 01       	movw	r24, r22
    20d4:	bc 01       	movw	r22, r24
    20d6:	cd 01       	movw	r24, r26
    20d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20dc:	dc 01       	movw	r26, r24
    20de:	cb 01       	movw	r24, r22
    20e0:	9e 83       	std	Y+6, r25	; 0x06
    20e2:	8d 83       	std	Y+5, r24	; 0x05
    20e4:	0f c0       	rjmp	.+30     	; 0x2104 <LCD_VidWrite4Cmd+0x5a2>
    20e6:	88 ec       	ldi	r24, 0xC8	; 200
    20e8:	90 e0       	ldi	r25, 0x00	; 0
    20ea:	9c 83       	std	Y+4, r25	; 0x04
    20ec:	8b 83       	std	Y+3, r24	; 0x03
    20ee:	8b 81       	ldd	r24, Y+3	; 0x03
    20f0:	9c 81       	ldd	r25, Y+4	; 0x04
    20f2:	01 97       	sbiw	r24, 0x01	; 1
    20f4:	f1 f7       	brne	.-4      	; 0x20f2 <LCD_VidWrite4Cmd+0x590>
    20f6:	9c 83       	std	Y+4, r25	; 0x04
    20f8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20fa:	8d 81       	ldd	r24, Y+5	; 0x05
    20fc:	9e 81       	ldd	r25, Y+6	; 0x06
    20fe:	01 97       	sbiw	r24, 0x01	; 1
    2100:	9e 83       	std	Y+6, r25	; 0x06
    2102:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2104:	8d 81       	ldd	r24, Y+5	; 0x05
    2106:	9e 81       	ldd	r25, Y+6	; 0x06
    2108:	00 97       	sbiw	r24, 0x00	; 0
    210a:	69 f7       	brne	.-38     	; 0x20e6 <LCD_VidWrite4Cmd+0x584>
    210c:	14 c0       	rjmp	.+40     	; 0x2136 <LCD_VidWrite4Cmd+0x5d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    210e:	6f 81       	ldd	r22, Y+7	; 0x07
    2110:	78 85       	ldd	r23, Y+8	; 0x08
    2112:	89 85       	ldd	r24, Y+9	; 0x09
    2114:	9a 85       	ldd	r25, Y+10	; 0x0a
    2116:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    211a:	dc 01       	movw	r26, r24
    211c:	cb 01       	movw	r24, r22
    211e:	9e 83       	std	Y+6, r25	; 0x06
    2120:	8d 83       	std	Y+5, r24	; 0x05
    2122:	8d 81       	ldd	r24, Y+5	; 0x05
    2124:	9e 81       	ldd	r25, Y+6	; 0x06
    2126:	9a 83       	std	Y+2, r25	; 0x02
    2128:	89 83       	std	Y+1, r24	; 0x01
    212a:	89 81       	ldd	r24, Y+1	; 0x01
    212c:	9a 81       	ldd	r25, Y+2	; 0x02
    212e:	01 97       	sbiw	r24, 0x01	; 1
    2130:	f1 f7       	brne	.-4      	; 0x212e <LCD_VidWrite4Cmd+0x5cc>
    2132:	9a 83       	std	Y+2, r25	; 0x02
    2134:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1);
	}
	_delay_ms(2);
}
    2136:	c9 5b       	subi	r28, 0xB9	; 185
    2138:	df 4f       	sbci	r29, 0xFF	; 255
    213a:	0f b6       	in	r0, 0x3f	; 63
    213c:	f8 94       	cli
    213e:	de bf       	out	0x3e, r29	; 62
    2140:	0f be       	out	0x3f, r0	; 63
    2142:	cd bf       	out	0x3d, r28	; 61
    2144:	cf 91       	pop	r28
    2146:	df 91       	pop	r29
    2148:	1f 91       	pop	r17
    214a:	0f 91       	pop	r16
    214c:	08 95       	ret

0000214e <LCD_VidWrite4Data>:


void LCD_VidWrite4Data(u8 LOC_Data)
{
    214e:	df 93       	push	r29
    2150:	cf 93       	push	r28
    2152:	cd b7       	in	r28, 0x3d	; 61
    2154:	de b7       	in	r29, 0x3e	; 62
    2156:	ab 97       	sbiw	r28, 0x2b	; 43
    2158:	0f b6       	in	r0, 0x3f	; 63
    215a:	f8 94       	cli
    215c:	de bf       	out	0x3e, r29	; 62
    215e:	0f be       	out	0x3f, r0	; 63
    2160:	cd bf       	out	0x3d, r28	; 61
    2162:	8b a7       	std	Y+43, r24	; 0x2b
	DIO_VidSetPinValue(LCD_INIT,LCD_RS,1);
    2164:	81 e0       	ldi	r24, 0x01	; 1
    2166:	63 e0       	ldi	r22, 0x03	; 3
    2168:	41 e0       	ldi	r20, 0x01	; 1
    216a:	0e 94 50 08 	call	0x10a0	; 0x10a0 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(LCD_INIT,LCD_RW,0);
    216e:	81 e0       	ldi	r24, 0x01	; 1
    2170:	64 e0       	ldi	r22, 0x04	; 4
    2172:	40 e0       	ldi	r20, 0x00	; 0
    2174:	0e 94 50 08 	call	0x10a0	; 0x10a0 <DIO_VidSetPinValue>

	DIO_VidSetPinValue(LCD_PORT,PIN4,GET_BIT(LOC_Data,4));
    2178:	8b a5       	ldd	r24, Y+43	; 0x2b
    217a:	82 95       	swap	r24
    217c:	8f 70       	andi	r24, 0x0F	; 15
    217e:	98 2f       	mov	r25, r24
    2180:	91 70       	andi	r25, 0x01	; 1
    2182:	83 e0       	ldi	r24, 0x03	; 3
    2184:	64 e0       	ldi	r22, 0x04	; 4
    2186:	49 2f       	mov	r20, r25
    2188:	0e 94 50 08 	call	0x10a0	; 0x10a0 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(LCD_PORT,PIN5,GET_BIT(LOC_Data,5));
    218c:	8b a5       	ldd	r24, Y+43	; 0x2b
    218e:	82 95       	swap	r24
    2190:	86 95       	lsr	r24
    2192:	87 70       	andi	r24, 0x07	; 7
    2194:	98 2f       	mov	r25, r24
    2196:	91 70       	andi	r25, 0x01	; 1
    2198:	83 e0       	ldi	r24, 0x03	; 3
    219a:	65 e0       	ldi	r22, 0x05	; 5
    219c:	49 2f       	mov	r20, r25
    219e:	0e 94 50 08 	call	0x10a0	; 0x10a0 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(LCD_PORT,PIN6,GET_BIT(LOC_Data,6));
    21a2:	8b a5       	ldd	r24, Y+43	; 0x2b
    21a4:	82 95       	swap	r24
    21a6:	86 95       	lsr	r24
    21a8:	86 95       	lsr	r24
    21aa:	83 70       	andi	r24, 0x03	; 3
    21ac:	98 2f       	mov	r25, r24
    21ae:	91 70       	andi	r25, 0x01	; 1
    21b0:	83 e0       	ldi	r24, 0x03	; 3
    21b2:	66 e0       	ldi	r22, 0x06	; 6
    21b4:	49 2f       	mov	r20, r25
    21b6:	0e 94 50 08 	call	0x10a0	; 0x10a0 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(LCD_PORT,PIN7,GET_BIT(LOC_Data,7));
    21ba:	8b a5       	ldd	r24, Y+43	; 0x2b
    21bc:	98 2f       	mov	r25, r24
    21be:	99 1f       	adc	r25, r25
    21c0:	99 27       	eor	r25, r25
    21c2:	99 1f       	adc	r25, r25
    21c4:	83 e0       	ldi	r24, 0x03	; 3
    21c6:	67 e0       	ldi	r22, 0x07	; 7
    21c8:	49 2f       	mov	r20, r25
    21ca:	0e 94 50 08 	call	0x10a0	; 0x10a0 <DIO_VidSetPinValue>

	DIO_VidSetPinValue(LCD_INIT,LCD_EN,1);
    21ce:	81 e0       	ldi	r24, 0x01	; 1
    21d0:	65 e0       	ldi	r22, 0x05	; 5
    21d2:	41 e0       	ldi	r20, 0x01	; 1
    21d4:	0e 94 50 08 	call	0x10a0	; 0x10a0 <DIO_VidSetPinValue>
    21d8:	80 e0       	ldi	r24, 0x00	; 0
    21da:	90 e0       	ldi	r25, 0x00	; 0
    21dc:	a0 e8       	ldi	r26, 0x80	; 128
    21de:	bf e3       	ldi	r27, 0x3F	; 63
    21e0:	8f a3       	std	Y+39, r24	; 0x27
    21e2:	98 a7       	std	Y+40, r25	; 0x28
    21e4:	a9 a7       	std	Y+41, r26	; 0x29
    21e6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21e8:	6f a1       	ldd	r22, Y+39	; 0x27
    21ea:	78 a5       	ldd	r23, Y+40	; 0x28
    21ec:	89 a5       	ldd	r24, Y+41	; 0x29
    21ee:	9a a5       	ldd	r25, Y+42	; 0x2a
    21f0:	20 e0       	ldi	r18, 0x00	; 0
    21f2:	30 e0       	ldi	r19, 0x00	; 0
    21f4:	4a ef       	ldi	r20, 0xFA	; 250
    21f6:	54 e4       	ldi	r21, 0x44	; 68
    21f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21fc:	dc 01       	movw	r26, r24
    21fe:	cb 01       	movw	r24, r22
    2200:	8b a3       	std	Y+35, r24	; 0x23
    2202:	9c a3       	std	Y+36, r25	; 0x24
    2204:	ad a3       	std	Y+37, r26	; 0x25
    2206:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2208:	6b a1       	ldd	r22, Y+35	; 0x23
    220a:	7c a1       	ldd	r23, Y+36	; 0x24
    220c:	8d a1       	ldd	r24, Y+37	; 0x25
    220e:	9e a1       	ldd	r25, Y+38	; 0x26
    2210:	20 e0       	ldi	r18, 0x00	; 0
    2212:	30 e0       	ldi	r19, 0x00	; 0
    2214:	40 e8       	ldi	r20, 0x80	; 128
    2216:	5f e3       	ldi	r21, 0x3F	; 63
    2218:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    221c:	88 23       	and	r24, r24
    221e:	2c f4       	brge	.+10     	; 0x222a <LCD_VidWrite4Data+0xdc>
		__ticks = 1;
    2220:	81 e0       	ldi	r24, 0x01	; 1
    2222:	90 e0       	ldi	r25, 0x00	; 0
    2224:	9a a3       	std	Y+34, r25	; 0x22
    2226:	89 a3       	std	Y+33, r24	; 0x21
    2228:	3f c0       	rjmp	.+126    	; 0x22a8 <LCD_VidWrite4Data+0x15a>
	else if (__tmp > 65535)
    222a:	6b a1       	ldd	r22, Y+35	; 0x23
    222c:	7c a1       	ldd	r23, Y+36	; 0x24
    222e:	8d a1       	ldd	r24, Y+37	; 0x25
    2230:	9e a1       	ldd	r25, Y+38	; 0x26
    2232:	20 e0       	ldi	r18, 0x00	; 0
    2234:	3f ef       	ldi	r19, 0xFF	; 255
    2236:	4f e7       	ldi	r20, 0x7F	; 127
    2238:	57 e4       	ldi	r21, 0x47	; 71
    223a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    223e:	18 16       	cp	r1, r24
    2240:	4c f5       	brge	.+82     	; 0x2294 <LCD_VidWrite4Data+0x146>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2242:	6f a1       	ldd	r22, Y+39	; 0x27
    2244:	78 a5       	ldd	r23, Y+40	; 0x28
    2246:	89 a5       	ldd	r24, Y+41	; 0x29
    2248:	9a a5       	ldd	r25, Y+42	; 0x2a
    224a:	20 e0       	ldi	r18, 0x00	; 0
    224c:	30 e0       	ldi	r19, 0x00	; 0
    224e:	40 e2       	ldi	r20, 0x20	; 32
    2250:	51 e4       	ldi	r21, 0x41	; 65
    2252:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2256:	dc 01       	movw	r26, r24
    2258:	cb 01       	movw	r24, r22
    225a:	bc 01       	movw	r22, r24
    225c:	cd 01       	movw	r24, r26
    225e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2262:	dc 01       	movw	r26, r24
    2264:	cb 01       	movw	r24, r22
    2266:	9a a3       	std	Y+34, r25	; 0x22
    2268:	89 a3       	std	Y+33, r24	; 0x21
    226a:	0f c0       	rjmp	.+30     	; 0x228a <LCD_VidWrite4Data+0x13c>
    226c:	88 ec       	ldi	r24, 0xC8	; 200
    226e:	90 e0       	ldi	r25, 0x00	; 0
    2270:	98 a3       	std	Y+32, r25	; 0x20
    2272:	8f 8f       	std	Y+31, r24	; 0x1f
    2274:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2276:	98 a1       	ldd	r25, Y+32	; 0x20
    2278:	01 97       	sbiw	r24, 0x01	; 1
    227a:	f1 f7       	brne	.-4      	; 0x2278 <LCD_VidWrite4Data+0x12a>
    227c:	98 a3       	std	Y+32, r25	; 0x20
    227e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2280:	89 a1       	ldd	r24, Y+33	; 0x21
    2282:	9a a1       	ldd	r25, Y+34	; 0x22
    2284:	01 97       	sbiw	r24, 0x01	; 1
    2286:	9a a3       	std	Y+34, r25	; 0x22
    2288:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    228a:	89 a1       	ldd	r24, Y+33	; 0x21
    228c:	9a a1       	ldd	r25, Y+34	; 0x22
    228e:	00 97       	sbiw	r24, 0x00	; 0
    2290:	69 f7       	brne	.-38     	; 0x226c <LCD_VidWrite4Data+0x11e>
    2292:	14 c0       	rjmp	.+40     	; 0x22bc <LCD_VidWrite4Data+0x16e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2294:	6b a1       	ldd	r22, Y+35	; 0x23
    2296:	7c a1       	ldd	r23, Y+36	; 0x24
    2298:	8d a1       	ldd	r24, Y+37	; 0x25
    229a:	9e a1       	ldd	r25, Y+38	; 0x26
    229c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22a0:	dc 01       	movw	r26, r24
    22a2:	cb 01       	movw	r24, r22
    22a4:	9a a3       	std	Y+34, r25	; 0x22
    22a6:	89 a3       	std	Y+33, r24	; 0x21
    22a8:	89 a1       	ldd	r24, Y+33	; 0x21
    22aa:	9a a1       	ldd	r25, Y+34	; 0x22
    22ac:	9e 8f       	std	Y+30, r25	; 0x1e
    22ae:	8d 8f       	std	Y+29, r24	; 0x1d
    22b0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    22b2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    22b4:	01 97       	sbiw	r24, 0x01	; 1
    22b6:	f1 f7       	brne	.-4      	; 0x22b4 <LCD_VidWrite4Data+0x166>
    22b8:	9e 8f       	std	Y+30, r25	; 0x1e
    22ba:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	DIO_VidSetPinValue(LCD_INIT,LCD_EN,0);
    22bc:	81 e0       	ldi	r24, 0x01	; 1
    22be:	65 e0       	ldi	r22, 0x05	; 5
    22c0:	40 e0       	ldi	r20, 0x00	; 0
    22c2:	0e 94 50 08 	call	0x10a0	; 0x10a0 <DIO_VidSetPinValue>

	DIO_VidSetPinValue(LCD_PORT,PIN4,GET_BIT(LOC_Data,0));
    22c6:	8b a5       	ldd	r24, Y+43	; 0x2b
    22c8:	98 2f       	mov	r25, r24
    22ca:	91 70       	andi	r25, 0x01	; 1
    22cc:	83 e0       	ldi	r24, 0x03	; 3
    22ce:	64 e0       	ldi	r22, 0x04	; 4
    22d0:	49 2f       	mov	r20, r25
    22d2:	0e 94 50 08 	call	0x10a0	; 0x10a0 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(LCD_PORT,PIN5,GET_BIT(LOC_Data,1));
    22d6:	8b a5       	ldd	r24, Y+43	; 0x2b
    22d8:	86 95       	lsr	r24
    22da:	98 2f       	mov	r25, r24
    22dc:	91 70       	andi	r25, 0x01	; 1
    22de:	83 e0       	ldi	r24, 0x03	; 3
    22e0:	65 e0       	ldi	r22, 0x05	; 5
    22e2:	49 2f       	mov	r20, r25
    22e4:	0e 94 50 08 	call	0x10a0	; 0x10a0 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(LCD_PORT,PIN6,GET_BIT(LOC_Data,2));
    22e8:	8b a5       	ldd	r24, Y+43	; 0x2b
    22ea:	86 95       	lsr	r24
    22ec:	86 95       	lsr	r24
    22ee:	98 2f       	mov	r25, r24
    22f0:	91 70       	andi	r25, 0x01	; 1
    22f2:	83 e0       	ldi	r24, 0x03	; 3
    22f4:	66 e0       	ldi	r22, 0x06	; 6
    22f6:	49 2f       	mov	r20, r25
    22f8:	0e 94 50 08 	call	0x10a0	; 0x10a0 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(LCD_PORT,PIN7,GET_BIT(LOC_Data,3));
    22fc:	8b a5       	ldd	r24, Y+43	; 0x2b
    22fe:	86 95       	lsr	r24
    2300:	86 95       	lsr	r24
    2302:	86 95       	lsr	r24
    2304:	98 2f       	mov	r25, r24
    2306:	91 70       	andi	r25, 0x01	; 1
    2308:	83 e0       	ldi	r24, 0x03	; 3
    230a:	67 e0       	ldi	r22, 0x07	; 7
    230c:	49 2f       	mov	r20, r25
    230e:	0e 94 50 08 	call	0x10a0	; 0x10a0 <DIO_VidSetPinValue>

	DIO_VidSetPinValue(LCD_INIT,LCD_EN,1);
    2312:	81 e0       	ldi	r24, 0x01	; 1
    2314:	65 e0       	ldi	r22, 0x05	; 5
    2316:	41 e0       	ldi	r20, 0x01	; 1
    2318:	0e 94 50 08 	call	0x10a0	; 0x10a0 <DIO_VidSetPinValue>
    231c:	80 e0       	ldi	r24, 0x00	; 0
    231e:	90 e0       	ldi	r25, 0x00	; 0
    2320:	a0 e8       	ldi	r26, 0x80	; 128
    2322:	bf e3       	ldi	r27, 0x3F	; 63
    2324:	89 8f       	std	Y+25, r24	; 0x19
    2326:	9a 8f       	std	Y+26, r25	; 0x1a
    2328:	ab 8f       	std	Y+27, r26	; 0x1b
    232a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    232c:	69 8d       	ldd	r22, Y+25	; 0x19
    232e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2330:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2332:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2334:	20 e0       	ldi	r18, 0x00	; 0
    2336:	30 e0       	ldi	r19, 0x00	; 0
    2338:	4a ef       	ldi	r20, 0xFA	; 250
    233a:	54 e4       	ldi	r21, 0x44	; 68
    233c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2340:	dc 01       	movw	r26, r24
    2342:	cb 01       	movw	r24, r22
    2344:	8d 8b       	std	Y+21, r24	; 0x15
    2346:	9e 8b       	std	Y+22, r25	; 0x16
    2348:	af 8b       	std	Y+23, r26	; 0x17
    234a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    234c:	6d 89       	ldd	r22, Y+21	; 0x15
    234e:	7e 89       	ldd	r23, Y+22	; 0x16
    2350:	8f 89       	ldd	r24, Y+23	; 0x17
    2352:	98 8d       	ldd	r25, Y+24	; 0x18
    2354:	20 e0       	ldi	r18, 0x00	; 0
    2356:	30 e0       	ldi	r19, 0x00	; 0
    2358:	40 e8       	ldi	r20, 0x80	; 128
    235a:	5f e3       	ldi	r21, 0x3F	; 63
    235c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2360:	88 23       	and	r24, r24
    2362:	2c f4       	brge	.+10     	; 0x236e <LCD_VidWrite4Data+0x220>
		__ticks = 1;
    2364:	81 e0       	ldi	r24, 0x01	; 1
    2366:	90 e0       	ldi	r25, 0x00	; 0
    2368:	9c 8b       	std	Y+20, r25	; 0x14
    236a:	8b 8b       	std	Y+19, r24	; 0x13
    236c:	3f c0       	rjmp	.+126    	; 0x23ec <LCD_VidWrite4Data+0x29e>
	else if (__tmp > 65535)
    236e:	6d 89       	ldd	r22, Y+21	; 0x15
    2370:	7e 89       	ldd	r23, Y+22	; 0x16
    2372:	8f 89       	ldd	r24, Y+23	; 0x17
    2374:	98 8d       	ldd	r25, Y+24	; 0x18
    2376:	20 e0       	ldi	r18, 0x00	; 0
    2378:	3f ef       	ldi	r19, 0xFF	; 255
    237a:	4f e7       	ldi	r20, 0x7F	; 127
    237c:	57 e4       	ldi	r21, 0x47	; 71
    237e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2382:	18 16       	cp	r1, r24
    2384:	4c f5       	brge	.+82     	; 0x23d8 <LCD_VidWrite4Data+0x28a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2386:	69 8d       	ldd	r22, Y+25	; 0x19
    2388:	7a 8d       	ldd	r23, Y+26	; 0x1a
    238a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    238c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    238e:	20 e0       	ldi	r18, 0x00	; 0
    2390:	30 e0       	ldi	r19, 0x00	; 0
    2392:	40 e2       	ldi	r20, 0x20	; 32
    2394:	51 e4       	ldi	r21, 0x41	; 65
    2396:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    239a:	dc 01       	movw	r26, r24
    239c:	cb 01       	movw	r24, r22
    239e:	bc 01       	movw	r22, r24
    23a0:	cd 01       	movw	r24, r26
    23a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23a6:	dc 01       	movw	r26, r24
    23a8:	cb 01       	movw	r24, r22
    23aa:	9c 8b       	std	Y+20, r25	; 0x14
    23ac:	8b 8b       	std	Y+19, r24	; 0x13
    23ae:	0f c0       	rjmp	.+30     	; 0x23ce <LCD_VidWrite4Data+0x280>
    23b0:	88 ec       	ldi	r24, 0xC8	; 200
    23b2:	90 e0       	ldi	r25, 0x00	; 0
    23b4:	9a 8b       	std	Y+18, r25	; 0x12
    23b6:	89 8b       	std	Y+17, r24	; 0x11
    23b8:	89 89       	ldd	r24, Y+17	; 0x11
    23ba:	9a 89       	ldd	r25, Y+18	; 0x12
    23bc:	01 97       	sbiw	r24, 0x01	; 1
    23be:	f1 f7       	brne	.-4      	; 0x23bc <LCD_VidWrite4Data+0x26e>
    23c0:	9a 8b       	std	Y+18, r25	; 0x12
    23c2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23c4:	8b 89       	ldd	r24, Y+19	; 0x13
    23c6:	9c 89       	ldd	r25, Y+20	; 0x14
    23c8:	01 97       	sbiw	r24, 0x01	; 1
    23ca:	9c 8b       	std	Y+20, r25	; 0x14
    23cc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23ce:	8b 89       	ldd	r24, Y+19	; 0x13
    23d0:	9c 89       	ldd	r25, Y+20	; 0x14
    23d2:	00 97       	sbiw	r24, 0x00	; 0
    23d4:	69 f7       	brne	.-38     	; 0x23b0 <LCD_VidWrite4Data+0x262>
    23d6:	14 c0       	rjmp	.+40     	; 0x2400 <LCD_VidWrite4Data+0x2b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23d8:	6d 89       	ldd	r22, Y+21	; 0x15
    23da:	7e 89       	ldd	r23, Y+22	; 0x16
    23dc:	8f 89       	ldd	r24, Y+23	; 0x17
    23de:	98 8d       	ldd	r25, Y+24	; 0x18
    23e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23e4:	dc 01       	movw	r26, r24
    23e6:	cb 01       	movw	r24, r22
    23e8:	9c 8b       	std	Y+20, r25	; 0x14
    23ea:	8b 8b       	std	Y+19, r24	; 0x13
    23ec:	8b 89       	ldd	r24, Y+19	; 0x13
    23ee:	9c 89       	ldd	r25, Y+20	; 0x14
    23f0:	98 8b       	std	Y+16, r25	; 0x10
    23f2:	8f 87       	std	Y+15, r24	; 0x0f
    23f4:	8f 85       	ldd	r24, Y+15	; 0x0f
    23f6:	98 89       	ldd	r25, Y+16	; 0x10
    23f8:	01 97       	sbiw	r24, 0x01	; 1
    23fa:	f1 f7       	brne	.-4      	; 0x23f8 <LCD_VidWrite4Data+0x2aa>
    23fc:	98 8b       	std	Y+16, r25	; 0x10
    23fe:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_VidSetPinValue(LCD_INIT,LCD_EN,0);
    2400:	81 e0       	ldi	r24, 0x01	; 1
    2402:	65 e0       	ldi	r22, 0x05	; 5
    2404:	40 e0       	ldi	r20, 0x00	; 0
    2406:	0e 94 50 08 	call	0x10a0	; 0x10a0 <DIO_VidSetPinValue>
    240a:	80 e0       	ldi	r24, 0x00	; 0
    240c:	90 e0       	ldi	r25, 0x00	; 0
    240e:	a0 e0       	ldi	r26, 0x00	; 0
    2410:	b0 e4       	ldi	r27, 0x40	; 64
    2412:	8b 87       	std	Y+11, r24	; 0x0b
    2414:	9c 87       	std	Y+12, r25	; 0x0c
    2416:	ad 87       	std	Y+13, r26	; 0x0d
    2418:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    241a:	6b 85       	ldd	r22, Y+11	; 0x0b
    241c:	7c 85       	ldd	r23, Y+12	; 0x0c
    241e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2420:	9e 85       	ldd	r25, Y+14	; 0x0e
    2422:	20 e0       	ldi	r18, 0x00	; 0
    2424:	30 e0       	ldi	r19, 0x00	; 0
    2426:	4a ef       	ldi	r20, 0xFA	; 250
    2428:	54 e4       	ldi	r21, 0x44	; 68
    242a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    242e:	dc 01       	movw	r26, r24
    2430:	cb 01       	movw	r24, r22
    2432:	8f 83       	std	Y+7, r24	; 0x07
    2434:	98 87       	std	Y+8, r25	; 0x08
    2436:	a9 87       	std	Y+9, r26	; 0x09
    2438:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    243a:	6f 81       	ldd	r22, Y+7	; 0x07
    243c:	78 85       	ldd	r23, Y+8	; 0x08
    243e:	89 85       	ldd	r24, Y+9	; 0x09
    2440:	9a 85       	ldd	r25, Y+10	; 0x0a
    2442:	20 e0       	ldi	r18, 0x00	; 0
    2444:	30 e0       	ldi	r19, 0x00	; 0
    2446:	40 e8       	ldi	r20, 0x80	; 128
    2448:	5f e3       	ldi	r21, 0x3F	; 63
    244a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    244e:	88 23       	and	r24, r24
    2450:	2c f4       	brge	.+10     	; 0x245c <LCD_VidWrite4Data+0x30e>
		__ticks = 1;
    2452:	81 e0       	ldi	r24, 0x01	; 1
    2454:	90 e0       	ldi	r25, 0x00	; 0
    2456:	9e 83       	std	Y+6, r25	; 0x06
    2458:	8d 83       	std	Y+5, r24	; 0x05
    245a:	3f c0       	rjmp	.+126    	; 0x24da <LCD_VidWrite4Data+0x38c>
	else if (__tmp > 65535)
    245c:	6f 81       	ldd	r22, Y+7	; 0x07
    245e:	78 85       	ldd	r23, Y+8	; 0x08
    2460:	89 85       	ldd	r24, Y+9	; 0x09
    2462:	9a 85       	ldd	r25, Y+10	; 0x0a
    2464:	20 e0       	ldi	r18, 0x00	; 0
    2466:	3f ef       	ldi	r19, 0xFF	; 255
    2468:	4f e7       	ldi	r20, 0x7F	; 127
    246a:	57 e4       	ldi	r21, 0x47	; 71
    246c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2470:	18 16       	cp	r1, r24
    2472:	4c f5       	brge	.+82     	; 0x24c6 <LCD_VidWrite4Data+0x378>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2474:	6b 85       	ldd	r22, Y+11	; 0x0b
    2476:	7c 85       	ldd	r23, Y+12	; 0x0c
    2478:	8d 85       	ldd	r24, Y+13	; 0x0d
    247a:	9e 85       	ldd	r25, Y+14	; 0x0e
    247c:	20 e0       	ldi	r18, 0x00	; 0
    247e:	30 e0       	ldi	r19, 0x00	; 0
    2480:	40 e2       	ldi	r20, 0x20	; 32
    2482:	51 e4       	ldi	r21, 0x41	; 65
    2484:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2488:	dc 01       	movw	r26, r24
    248a:	cb 01       	movw	r24, r22
    248c:	bc 01       	movw	r22, r24
    248e:	cd 01       	movw	r24, r26
    2490:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2494:	dc 01       	movw	r26, r24
    2496:	cb 01       	movw	r24, r22
    2498:	9e 83       	std	Y+6, r25	; 0x06
    249a:	8d 83       	std	Y+5, r24	; 0x05
    249c:	0f c0       	rjmp	.+30     	; 0x24bc <LCD_VidWrite4Data+0x36e>
    249e:	88 ec       	ldi	r24, 0xC8	; 200
    24a0:	90 e0       	ldi	r25, 0x00	; 0
    24a2:	9c 83       	std	Y+4, r25	; 0x04
    24a4:	8b 83       	std	Y+3, r24	; 0x03
    24a6:	8b 81       	ldd	r24, Y+3	; 0x03
    24a8:	9c 81       	ldd	r25, Y+4	; 0x04
    24aa:	01 97       	sbiw	r24, 0x01	; 1
    24ac:	f1 f7       	brne	.-4      	; 0x24aa <LCD_VidWrite4Data+0x35c>
    24ae:	9c 83       	std	Y+4, r25	; 0x04
    24b0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24b2:	8d 81       	ldd	r24, Y+5	; 0x05
    24b4:	9e 81       	ldd	r25, Y+6	; 0x06
    24b6:	01 97       	sbiw	r24, 0x01	; 1
    24b8:	9e 83       	std	Y+6, r25	; 0x06
    24ba:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24bc:	8d 81       	ldd	r24, Y+5	; 0x05
    24be:	9e 81       	ldd	r25, Y+6	; 0x06
    24c0:	00 97       	sbiw	r24, 0x00	; 0
    24c2:	69 f7       	brne	.-38     	; 0x249e <LCD_VidWrite4Data+0x350>
    24c4:	14 c0       	rjmp	.+40     	; 0x24ee <LCD_VidWrite4Data+0x3a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24c6:	6f 81       	ldd	r22, Y+7	; 0x07
    24c8:	78 85       	ldd	r23, Y+8	; 0x08
    24ca:	89 85       	ldd	r24, Y+9	; 0x09
    24cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    24ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24d2:	dc 01       	movw	r26, r24
    24d4:	cb 01       	movw	r24, r22
    24d6:	9e 83       	std	Y+6, r25	; 0x06
    24d8:	8d 83       	std	Y+5, r24	; 0x05
    24da:	8d 81       	ldd	r24, Y+5	; 0x05
    24dc:	9e 81       	ldd	r25, Y+6	; 0x06
    24de:	9a 83       	std	Y+2, r25	; 0x02
    24e0:	89 83       	std	Y+1, r24	; 0x01
    24e2:	89 81       	ldd	r24, Y+1	; 0x01
    24e4:	9a 81       	ldd	r25, Y+2	; 0x02
    24e6:	01 97       	sbiw	r24, 0x01	; 1
    24e8:	f1 f7       	brne	.-4      	; 0x24e6 <LCD_VidWrite4Data+0x398>
    24ea:	9a 83       	std	Y+2, r25	; 0x02
    24ec:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(2);

}
    24ee:	ab 96       	adiw	r28, 0x2b	; 43
    24f0:	0f b6       	in	r0, 0x3f	; 63
    24f2:	f8 94       	cli
    24f4:	de bf       	out	0x3e, r29	; 62
    24f6:	0f be       	out	0x3f, r0	; 63
    24f8:	cd bf       	out	0x3d, r28	; 61
    24fa:	cf 91       	pop	r28
    24fc:	df 91       	pop	r29
    24fe:	08 95       	ret

00002500 <LCD_Write4String>:

void LCD_Write4String(u8* str,u8 row,u8 col)
{
    2500:	df 93       	push	r29
    2502:	cf 93       	push	r28
    2504:	00 d0       	rcall	.+0      	; 0x2506 <LCD_Write4String+0x6>
    2506:	00 d0       	rcall	.+0      	; 0x2508 <LCD_Write4String+0x8>
    2508:	00 d0       	rcall	.+0      	; 0x250a <LCD_Write4String+0xa>
    250a:	cd b7       	in	r28, 0x3d	; 61
    250c:	de b7       	in	r29, 0x3e	; 62
    250e:	9c 83       	std	Y+4, r25	; 0x04
    2510:	8b 83       	std	Y+3, r24	; 0x03
    2512:	6d 83       	std	Y+5, r22	; 0x05
    2514:	4e 83       	std	Y+6, r20	; 0x06
	LCD_GoToPosition(row,col);
    2516:	8d 81       	ldd	r24, Y+5	; 0x05
    2518:	6e 81       	ldd	r22, Y+6	; 0x06
    251a:	0e 94 48 13 	call	0x2690	; 0x2690 <LCD_GoToPosition>
	u8 index=0;
    251e:	1a 82       	std	Y+2, r1	; 0x02
	u8 line0=0;
    2520:	19 82       	std	Y+1, r1	; 0x01
    2522:	8a c0       	rjmp	.+276    	; 0x2638 <LCD_Write4String+0x138>
	while (str[index] !='\0' && ((row*16)+(col+index))<32)
	{
		if (((row*16)+(col+index))<16&&(line0==0))
    2524:	8d 81       	ldd	r24, Y+5	; 0x05
    2526:	88 2f       	mov	r24, r24
    2528:	90 e0       	ldi	r25, 0x00	; 0
    252a:	ac 01       	movw	r20, r24
    252c:	42 95       	swap	r20
    252e:	52 95       	swap	r21
    2530:	50 7f       	andi	r21, 0xF0	; 240
    2532:	54 27       	eor	r21, r20
    2534:	40 7f       	andi	r20, 0xF0	; 240
    2536:	54 27       	eor	r21, r20
    2538:	8e 81       	ldd	r24, Y+6	; 0x06
    253a:	28 2f       	mov	r18, r24
    253c:	30 e0       	ldi	r19, 0x00	; 0
    253e:	8a 81       	ldd	r24, Y+2	; 0x02
    2540:	88 2f       	mov	r24, r24
    2542:	90 e0       	ldi	r25, 0x00	; 0
    2544:	82 0f       	add	r24, r18
    2546:	93 1f       	adc	r25, r19
    2548:	84 0f       	add	r24, r20
    254a:	95 1f       	adc	r25, r21
    254c:	80 31       	cpi	r24, 0x10	; 16
    254e:	91 05       	cpc	r25, r1
    2550:	94 f4       	brge	.+36     	; 0x2576 <LCD_Write4String+0x76>
    2552:	89 81       	ldd	r24, Y+1	; 0x01
    2554:	88 23       	and	r24, r24
    2556:	79 f4       	brne	.+30     	; 0x2576 <LCD_Write4String+0x76>
		{
			LCD_VidWrite4Data(str[index]);
    2558:	8a 81       	ldd	r24, Y+2	; 0x02
    255a:	28 2f       	mov	r18, r24
    255c:	30 e0       	ldi	r19, 0x00	; 0
    255e:	8b 81       	ldd	r24, Y+3	; 0x03
    2560:	9c 81       	ldd	r25, Y+4	; 0x04
    2562:	fc 01       	movw	r30, r24
    2564:	e2 0f       	add	r30, r18
    2566:	f3 1f       	adc	r31, r19
    2568:	80 81       	ld	r24, Z
    256a:	0e 94 a7 10 	call	0x214e	; 0x214e <LCD_VidWrite4Data>
			index++;
    256e:	8a 81       	ldd	r24, Y+2	; 0x02
    2570:	8f 5f       	subi	r24, 0xFF	; 255
    2572:	8a 83       	std	Y+2, r24	; 0x02
    2574:	61 c0       	rjmp	.+194    	; 0x2638 <LCD_Write4String+0x138>
		}
		else if (((row*16)+(col+index))>=16&& ((row*16)+(col+index))<32 &&(line0==0))
    2576:	8d 81       	ldd	r24, Y+5	; 0x05
    2578:	88 2f       	mov	r24, r24
    257a:	90 e0       	ldi	r25, 0x00	; 0
    257c:	ac 01       	movw	r20, r24
    257e:	42 95       	swap	r20
    2580:	52 95       	swap	r21
    2582:	50 7f       	andi	r21, 0xF0	; 240
    2584:	54 27       	eor	r21, r20
    2586:	40 7f       	andi	r20, 0xF0	; 240
    2588:	54 27       	eor	r21, r20
    258a:	8e 81       	ldd	r24, Y+6	; 0x06
    258c:	28 2f       	mov	r18, r24
    258e:	30 e0       	ldi	r19, 0x00	; 0
    2590:	8a 81       	ldd	r24, Y+2	; 0x02
    2592:	88 2f       	mov	r24, r24
    2594:	90 e0       	ldi	r25, 0x00	; 0
    2596:	82 0f       	add	r24, r18
    2598:	93 1f       	adc	r25, r19
    259a:	84 0f       	add	r24, r20
    259c:	95 1f       	adc	r25, r21
    259e:	80 31       	cpi	r24, 0x10	; 16
    25a0:	91 05       	cpc	r25, r1
    25a2:	14 f1       	brlt	.+68     	; 0x25e8 <LCD_Write4String+0xe8>
    25a4:	8d 81       	ldd	r24, Y+5	; 0x05
    25a6:	88 2f       	mov	r24, r24
    25a8:	90 e0       	ldi	r25, 0x00	; 0
    25aa:	ac 01       	movw	r20, r24
    25ac:	42 95       	swap	r20
    25ae:	52 95       	swap	r21
    25b0:	50 7f       	andi	r21, 0xF0	; 240
    25b2:	54 27       	eor	r21, r20
    25b4:	40 7f       	andi	r20, 0xF0	; 240
    25b6:	54 27       	eor	r21, r20
    25b8:	8e 81       	ldd	r24, Y+6	; 0x06
    25ba:	28 2f       	mov	r18, r24
    25bc:	30 e0       	ldi	r19, 0x00	; 0
    25be:	8a 81       	ldd	r24, Y+2	; 0x02
    25c0:	88 2f       	mov	r24, r24
    25c2:	90 e0       	ldi	r25, 0x00	; 0
    25c4:	82 0f       	add	r24, r18
    25c6:	93 1f       	adc	r25, r19
    25c8:	84 0f       	add	r24, r20
    25ca:	95 1f       	adc	r25, r21
    25cc:	80 32       	cpi	r24, 0x20	; 32
    25ce:	91 05       	cpc	r25, r1
    25d0:	5c f4       	brge	.+22     	; 0x25e8 <LCD_Write4String+0xe8>
    25d2:	89 81       	ldd	r24, Y+1	; 0x01
    25d4:	88 23       	and	r24, r24
    25d6:	41 f4       	brne	.+16     	; 0x25e8 <LCD_Write4String+0xe8>
		{
			LCD_GoToPosition(1,col);
    25d8:	81 e0       	ldi	r24, 0x01	; 1
    25da:	6e 81       	ldd	r22, Y+6	; 0x06
    25dc:	0e 94 48 13 	call	0x2690	; 0x2690 <LCD_GoToPosition>
			line0++;
    25e0:	89 81       	ldd	r24, Y+1	; 0x01
    25e2:	8f 5f       	subi	r24, 0xFF	; 255
    25e4:	89 83       	std	Y+1, r24	; 0x01
    25e6:	28 c0       	rjmp	.+80     	; 0x2638 <LCD_Write4String+0x138>
		}
		else if (((row*16)+(col+index))<32&&(line0==1))
    25e8:	8d 81       	ldd	r24, Y+5	; 0x05
    25ea:	88 2f       	mov	r24, r24
    25ec:	90 e0       	ldi	r25, 0x00	; 0
    25ee:	ac 01       	movw	r20, r24
    25f0:	42 95       	swap	r20
    25f2:	52 95       	swap	r21
    25f4:	50 7f       	andi	r21, 0xF0	; 240
    25f6:	54 27       	eor	r21, r20
    25f8:	40 7f       	andi	r20, 0xF0	; 240
    25fa:	54 27       	eor	r21, r20
    25fc:	8e 81       	ldd	r24, Y+6	; 0x06
    25fe:	28 2f       	mov	r18, r24
    2600:	30 e0       	ldi	r19, 0x00	; 0
    2602:	8a 81       	ldd	r24, Y+2	; 0x02
    2604:	88 2f       	mov	r24, r24
    2606:	90 e0       	ldi	r25, 0x00	; 0
    2608:	82 0f       	add	r24, r18
    260a:	93 1f       	adc	r25, r19
    260c:	84 0f       	add	r24, r20
    260e:	95 1f       	adc	r25, r21
    2610:	80 32       	cpi	r24, 0x20	; 32
    2612:	91 05       	cpc	r25, r1
    2614:	8c f4       	brge	.+34     	; 0x2638 <LCD_Write4String+0x138>
    2616:	89 81       	ldd	r24, Y+1	; 0x01
    2618:	81 30       	cpi	r24, 0x01	; 1
    261a:	71 f4       	brne	.+28     	; 0x2638 <LCD_Write4String+0x138>
		{
			LCD_VidWrite4Data(str[index]);
    261c:	8a 81       	ldd	r24, Y+2	; 0x02
    261e:	28 2f       	mov	r18, r24
    2620:	30 e0       	ldi	r19, 0x00	; 0
    2622:	8b 81       	ldd	r24, Y+3	; 0x03
    2624:	9c 81       	ldd	r25, Y+4	; 0x04
    2626:	fc 01       	movw	r30, r24
    2628:	e2 0f       	add	r30, r18
    262a:	f3 1f       	adc	r31, r19
    262c:	80 81       	ld	r24, Z
    262e:	0e 94 a7 10 	call	0x214e	; 0x214e <LCD_VidWrite4Data>
			index++;
    2632:	8a 81       	ldd	r24, Y+2	; 0x02
    2634:	8f 5f       	subi	r24, 0xFF	; 255
    2636:	8a 83       	std	Y+2, r24	; 0x02
void LCD_Write4String(u8* str,u8 row,u8 col)
{
	LCD_GoToPosition(row,col);
	u8 index=0;
	u8 line0=0;
	while (str[index] !='\0' && ((row*16)+(col+index))<32)
    2638:	8a 81       	ldd	r24, Y+2	; 0x02
    263a:	28 2f       	mov	r18, r24
    263c:	30 e0       	ldi	r19, 0x00	; 0
    263e:	8b 81       	ldd	r24, Y+3	; 0x03
    2640:	9c 81       	ldd	r25, Y+4	; 0x04
    2642:	fc 01       	movw	r30, r24
    2644:	e2 0f       	add	r30, r18
    2646:	f3 1f       	adc	r31, r19
    2648:	80 81       	ld	r24, Z
    264a:	88 23       	and	r24, r24
    264c:	c1 f0       	breq	.+48     	; 0x267e <LCD_Write4String+0x17e>
    264e:	8d 81       	ldd	r24, Y+5	; 0x05
    2650:	88 2f       	mov	r24, r24
    2652:	90 e0       	ldi	r25, 0x00	; 0
    2654:	ac 01       	movw	r20, r24
    2656:	42 95       	swap	r20
    2658:	52 95       	swap	r21
    265a:	50 7f       	andi	r21, 0xF0	; 240
    265c:	54 27       	eor	r21, r20
    265e:	40 7f       	andi	r20, 0xF0	; 240
    2660:	54 27       	eor	r21, r20
    2662:	8e 81       	ldd	r24, Y+6	; 0x06
    2664:	28 2f       	mov	r18, r24
    2666:	30 e0       	ldi	r19, 0x00	; 0
    2668:	8a 81       	ldd	r24, Y+2	; 0x02
    266a:	88 2f       	mov	r24, r24
    266c:	90 e0       	ldi	r25, 0x00	; 0
    266e:	82 0f       	add	r24, r18
    2670:	93 1f       	adc	r25, r19
    2672:	84 0f       	add	r24, r20
    2674:	95 1f       	adc	r25, r21
    2676:	80 32       	cpi	r24, 0x20	; 32
    2678:	91 05       	cpc	r25, r1
    267a:	0c f4       	brge	.+2      	; 0x267e <LCD_Write4String+0x17e>
    267c:	53 cf       	rjmp	.-346    	; 0x2524 <LCD_Write4String+0x24>
		{
			LCD_VidWrite4Data(str[index]);
			index++;
		}
	}
}
    267e:	26 96       	adiw	r28, 0x06	; 6
    2680:	0f b6       	in	r0, 0x3f	; 63
    2682:	f8 94       	cli
    2684:	de bf       	out	0x3e, r29	; 62
    2686:	0f be       	out	0x3f, r0	; 63
    2688:	cd bf       	out	0x3d, r28	; 61
    268a:	cf 91       	pop	r28
    268c:	df 91       	pop	r29
    268e:	08 95       	ret

00002690 <LCD_GoToPosition>:

void LCD_GoToPosition(u8 row,u8 col)
{
    2690:	df 93       	push	r29
    2692:	cf 93       	push	r28
    2694:	00 d0       	rcall	.+0      	; 0x2696 <LCD_GoToPosition+0x6>
    2696:	0f 92       	push	r0
    2698:	cd b7       	in	r28, 0x3d	; 61
    269a:	de b7       	in	r29, 0x3e	; 62
    269c:	8a 83       	std	Y+2, r24	; 0x02
    269e:	6b 83       	std	Y+3, r22	; 0x03
	u8 adress;
	adress= (row*0x40)+col;
    26a0:	8a 81       	ldd	r24, Y+2	; 0x02
    26a2:	88 2f       	mov	r24, r24
    26a4:	90 e0       	ldi	r25, 0x00	; 0
    26a6:	00 24       	eor	r0, r0
    26a8:	96 95       	lsr	r25
    26aa:	87 95       	ror	r24
    26ac:	07 94       	ror	r0
    26ae:	96 95       	lsr	r25
    26b0:	87 95       	ror	r24
    26b2:	07 94       	ror	r0
    26b4:	98 2f       	mov	r25, r24
    26b6:	80 2d       	mov	r24, r0
    26b8:	98 2f       	mov	r25, r24
    26ba:	8b 81       	ldd	r24, Y+3	; 0x03
    26bc:	89 0f       	add	r24, r25
    26be:	89 83       	std	Y+1, r24	; 0x01
	adress = SET_BIT(adress,7);
    26c0:	89 81       	ldd	r24, Y+1	; 0x01
    26c2:	80 68       	ori	r24, 0x80	; 128
    26c4:	89 83       	std	Y+1, r24	; 0x01
	LCD_VidWrite4Cmd(adress);
    26c6:	89 81       	ldd	r24, Y+1	; 0x01
    26c8:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <LCD_VidWrite4Cmd>
}
    26cc:	0f 90       	pop	r0
    26ce:	0f 90       	pop	r0
    26d0:	0f 90       	pop	r0
    26d2:	cf 91       	pop	r28
    26d4:	df 91       	pop	r29
    26d6:	08 95       	ret

000026d8 <LCD_VidDisp4Number>:

void LCD_VidDisp4Number(u32 number)
{
    26d8:	df 93       	push	r29
    26da:	cf 93       	push	r28
    26dc:	cd b7       	in	r28, 0x3d	; 61
    26de:	de b7       	in	r29, 0x3e	; 62
    26e0:	68 97       	sbiw	r28, 0x18	; 24
    26e2:	0f b6       	in	r0, 0x3f	; 63
    26e4:	f8 94       	cli
    26e6:	de bf       	out	0x3e, r29	; 62
    26e8:	0f be       	out	0x3f, r0	; 63
    26ea:	cd bf       	out	0x3d, r28	; 61
    26ec:	6d 8b       	std	Y+21, r22	; 0x15
    26ee:	7e 8b       	std	Y+22, r23	; 0x16
    26f0:	8f 8b       	std	Y+23, r24	; 0x17
    26f2:	98 8f       	std	Y+24, r25	; 0x18

	u32 digit=0;
    26f4:	1f 82       	std	Y+7, r1	; 0x07
    26f6:	18 86       	std	Y+8, r1	; 0x08
    26f8:	19 86       	std	Y+9, r1	; 0x09
    26fa:	1a 86       	std	Y+10, r1	; 0x0a
	u16 i=0;
    26fc:	1e 82       	std	Y+6, r1	; 0x06
    26fe:	1d 82       	std	Y+5, r1	; 0x05
	u32 f=0;
    2700:	19 82       	std	Y+1, r1	; 0x01
    2702:	1a 82       	std	Y+2, r1	; 0x02
    2704:	1b 82       	std	Y+3, r1	; 0x03
    2706:	1c 82       	std	Y+4, r1	; 0x04
    2708:	45 c0       	rjmp	.+138    	; 0x2794 <LCD_VidDisp4Number+0xbc>
	u8 number_holder[10];

	while(number>0)
	{
		f=number%10;
    270a:	8d 89       	ldd	r24, Y+21	; 0x15
    270c:	9e 89       	ldd	r25, Y+22	; 0x16
    270e:	af 89       	ldd	r26, Y+23	; 0x17
    2710:	b8 8d       	ldd	r27, Y+24	; 0x18
    2712:	2a e0       	ldi	r18, 0x0A	; 10
    2714:	30 e0       	ldi	r19, 0x00	; 0
    2716:	40 e0       	ldi	r20, 0x00	; 0
    2718:	50 e0       	ldi	r21, 0x00	; 0
    271a:	bc 01       	movw	r22, r24
    271c:	cd 01       	movw	r24, r26
    271e:	0e 94 80 16 	call	0x2d00	; 0x2d00 <__udivmodsi4>
    2722:	dc 01       	movw	r26, r24
    2724:	cb 01       	movw	r24, r22
    2726:	89 83       	std	Y+1, r24	; 0x01
    2728:	9a 83       	std	Y+2, r25	; 0x02
    272a:	ab 83       	std	Y+3, r26	; 0x03
    272c:	bc 83       	std	Y+4, r27	; 0x04
		number_holder[i]=f;
    272e:	2d 81       	ldd	r18, Y+5	; 0x05
    2730:	3e 81       	ldd	r19, Y+6	; 0x06
    2732:	49 81       	ldd	r20, Y+1	; 0x01
    2734:	ce 01       	movw	r24, r28
    2736:	0b 96       	adiw	r24, 0x0b	; 11
    2738:	fc 01       	movw	r30, r24
    273a:	e2 0f       	add	r30, r18
    273c:	f3 1f       	adc	r31, r19
    273e:	40 83       	st	Z, r20
		number=number/10;
    2740:	8d 89       	ldd	r24, Y+21	; 0x15
    2742:	9e 89       	ldd	r25, Y+22	; 0x16
    2744:	af 89       	ldd	r26, Y+23	; 0x17
    2746:	b8 8d       	ldd	r27, Y+24	; 0x18
    2748:	2a e0       	ldi	r18, 0x0A	; 10
    274a:	30 e0       	ldi	r19, 0x00	; 0
    274c:	40 e0       	ldi	r20, 0x00	; 0
    274e:	50 e0       	ldi	r21, 0x00	; 0
    2750:	bc 01       	movw	r22, r24
    2752:	cd 01       	movw	r24, r26
    2754:	0e 94 80 16 	call	0x2d00	; 0x2d00 <__udivmodsi4>
    2758:	da 01       	movw	r26, r20
    275a:	c9 01       	movw	r24, r18
    275c:	8d 8b       	std	Y+21, r24	; 0x15
    275e:	9e 8b       	std	Y+22, r25	; 0x16
    2760:	af 8b       	std	Y+23, r26	; 0x17
    2762:	b8 8f       	std	Y+24, r27	; 0x18
		i++;
    2764:	8d 81       	ldd	r24, Y+5	; 0x05
    2766:	9e 81       	ldd	r25, Y+6	; 0x06
    2768:	01 96       	adiw	r24, 0x01	; 1
    276a:	9e 83       	std	Y+6, r25	; 0x06
    276c:	8d 83       	std	Y+5, r24	; 0x05
		digit++;
    276e:	8f 81       	ldd	r24, Y+7	; 0x07
    2770:	98 85       	ldd	r25, Y+8	; 0x08
    2772:	a9 85       	ldd	r26, Y+9	; 0x09
    2774:	ba 85       	ldd	r27, Y+10	; 0x0a
    2776:	01 96       	adiw	r24, 0x01	; 1
    2778:	a1 1d       	adc	r26, r1
    277a:	b1 1d       	adc	r27, r1
    277c:	8f 83       	std	Y+7, r24	; 0x07
    277e:	98 87       	std	Y+8, r25	; 0x08
    2780:	a9 87       	std	Y+9, r26	; 0x09
    2782:	ba 87       	std	Y+10, r27	; 0x0a
		if(number==0)
    2784:	8d 89       	ldd	r24, Y+21	; 0x15
    2786:	9e 89       	ldd	r25, Y+22	; 0x16
    2788:	af 89       	ldd	r26, Y+23	; 0x17
    278a:	b8 8d       	ldd	r27, Y+24	; 0x18
    278c:	00 97       	sbiw	r24, 0x00	; 0
    278e:	a1 05       	cpc	r26, r1
    2790:	b1 05       	cpc	r27, r1
    2792:	49 f0       	breq	.+18     	; 0x27a6 <LCD_VidDisp4Number+0xce>
	u32 digit=0;
	u16 i=0;
	u32 f=0;
	u8 number_holder[10];

	while(number>0)
    2794:	8d 89       	ldd	r24, Y+21	; 0x15
    2796:	9e 89       	ldd	r25, Y+22	; 0x16
    2798:	af 89       	ldd	r26, Y+23	; 0x17
    279a:	b8 8d       	ldd	r27, Y+24	; 0x18
    279c:	00 97       	sbiw	r24, 0x00	; 0
    279e:	a1 05       	cpc	r26, r1
    27a0:	b1 05       	cpc	r27, r1
    27a2:	09 f0       	breq	.+2      	; 0x27a6 <LCD_VidDisp4Number+0xce>
    27a4:	b2 cf       	rjmp	.-156    	; 0x270a <LCD_VidDisp4Number+0x32>
		i++;
		digit++;
		if(number==0)
		{break;}
	}
	for(i=digit;i>0;i--)
    27a6:	8f 81       	ldd	r24, Y+7	; 0x07
    27a8:	98 85       	ldd	r25, Y+8	; 0x08
    27aa:	9e 83       	std	Y+6, r25	; 0x06
    27ac:	8d 83       	std	Y+5, r24	; 0x05
    27ae:	13 c0       	rjmp	.+38     	; 0x27d6 <LCD_VidDisp4Number+0xfe>
	{
		LCD_VidWrite4Data(number_holder[i-1]+48);
    27b0:	8d 81       	ldd	r24, Y+5	; 0x05
    27b2:	9e 81       	ldd	r25, Y+6	; 0x06
    27b4:	9c 01       	movw	r18, r24
    27b6:	21 50       	subi	r18, 0x01	; 1
    27b8:	30 40       	sbci	r19, 0x00	; 0
    27ba:	ce 01       	movw	r24, r28
    27bc:	0b 96       	adiw	r24, 0x0b	; 11
    27be:	fc 01       	movw	r30, r24
    27c0:	e2 0f       	add	r30, r18
    27c2:	f3 1f       	adc	r31, r19
    27c4:	80 81       	ld	r24, Z
    27c6:	80 5d       	subi	r24, 0xD0	; 208
    27c8:	0e 94 a7 10 	call	0x214e	; 0x214e <LCD_VidWrite4Data>
		i++;
		digit++;
		if(number==0)
		{break;}
	}
	for(i=digit;i>0;i--)
    27cc:	8d 81       	ldd	r24, Y+5	; 0x05
    27ce:	9e 81       	ldd	r25, Y+6	; 0x06
    27d0:	01 97       	sbiw	r24, 0x01	; 1
    27d2:	9e 83       	std	Y+6, r25	; 0x06
    27d4:	8d 83       	std	Y+5, r24	; 0x05
    27d6:	8d 81       	ldd	r24, Y+5	; 0x05
    27d8:	9e 81       	ldd	r25, Y+6	; 0x06
    27da:	00 97       	sbiw	r24, 0x00	; 0
    27dc:	49 f7       	brne	.-46     	; 0x27b0 <LCD_VidDisp4Number+0xd8>
	{
		LCD_VidWrite4Data(number_holder[i-1]+48);
	}

}
    27de:	68 96       	adiw	r28, 0x18	; 24
    27e0:	0f b6       	in	r0, 0x3f	; 63
    27e2:	f8 94       	cli
    27e4:	de bf       	out	0x3e, r29	; 62
    27e6:	0f be       	out	0x3f, r0	; 63
    27e8:	cd bf       	out	0x3d, r28	; 61
    27ea:	cf 91       	pop	r28
    27ec:	df 91       	pop	r29
    27ee:	08 95       	ret

000027f0 <LCD_VidGoto4CGRAM>:

void LCD_VidGoto4CGRAM()
{
    27f0:	df 93       	push	r29
    27f2:	cf 93       	push	r28
    27f4:	cd b7       	in	r28, 0x3d	; 61
    27f6:	de b7       	in	r29, 0x3e	; 62
	LCD_VidWrite4Cmd(SET_CGRAM_ADDRESS);
    27f8:	80 e4       	ldi	r24, 0x40	; 64
    27fa:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <LCD_VidWrite4Cmd>
}
    27fe:	cf 91       	pop	r28
    2800:	df 91       	pop	r29
    2802:	08 95       	ret

00002804 <LCD_StoreCustomChr>:

void LCD_StoreCustomChr(u8* LOC_pattern, u8 LOC_CGRAM_Index)
{
    2804:	df 93       	push	r29
    2806:	cf 93       	push	r28
    2808:	00 d0       	rcall	.+0      	; 0x280a <LCD_StoreCustomChr+0x6>
    280a:	00 d0       	rcall	.+0      	; 0x280c <LCD_StoreCustomChr+0x8>
    280c:	0f 92       	push	r0
    280e:	cd b7       	in	r28, 0x3d	; 61
    2810:	de b7       	in	r29, 0x3e	; 62
    2812:	9c 83       	std	Y+4, r25	; 0x04
    2814:	8b 83       	std	Y+3, r24	; 0x03
    2816:	6d 83       	std	Y+5, r22	; 0x05
	u8 LOC_Adress;
	u8 LOC_Adress_Index;
	if(LOC_CGRAM_Index < 8)
    2818:	8d 81       	ldd	r24, Y+5	; 0x05
    281a:	88 30       	cpi	r24, 0x08	; 8
    281c:	18 f5       	brcc	.+70     	; 0x2864 <LCD_StoreCustomChr+0x60>
	{
		LOC_Adress = LOC_CGRAM_Index *8;
    281e:	8d 81       	ldd	r24, Y+5	; 0x05
    2820:	88 2f       	mov	r24, r24
    2822:	90 e0       	ldi	r25, 0x00	; 0
    2824:	88 0f       	add	r24, r24
    2826:	99 1f       	adc	r25, r25
    2828:	88 0f       	add	r24, r24
    282a:	99 1f       	adc	r25, r25
    282c:	88 0f       	add	r24, r24
    282e:	99 1f       	adc	r25, r25
    2830:	8a 83       	std	Y+2, r24	; 0x02
		LOC_Adress = SET_BIT(LOC_Adress,6);
    2832:	8a 81       	ldd	r24, Y+2	; 0x02
    2834:	80 64       	ori	r24, 0x40	; 64
    2836:	8a 83       	std	Y+2, r24	; 0x02
		LCD_VidWrite4Cmd(LOC_Adress);
    2838:	8a 81       	ldd	r24, Y+2	; 0x02
    283a:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <LCD_VidWrite4Cmd>
		for(LOC_Adress_Index=0;LOC_Adress_Index<8;LOC_Adress_Index++)
    283e:	19 82       	std	Y+1, r1	; 0x01
    2840:	0e c0       	rjmp	.+28     	; 0x285e <LCD_StoreCustomChr+0x5a>
		{
			LCD_VidWrite4Data(LOC_pattern[LOC_Adress_Index]);
    2842:	89 81       	ldd	r24, Y+1	; 0x01
    2844:	28 2f       	mov	r18, r24
    2846:	30 e0       	ldi	r19, 0x00	; 0
    2848:	8b 81       	ldd	r24, Y+3	; 0x03
    284a:	9c 81       	ldd	r25, Y+4	; 0x04
    284c:	fc 01       	movw	r30, r24
    284e:	e2 0f       	add	r30, r18
    2850:	f3 1f       	adc	r31, r19
    2852:	80 81       	ld	r24, Z
    2854:	0e 94 a7 10 	call	0x214e	; 0x214e <LCD_VidWrite4Data>
	if(LOC_CGRAM_Index < 8)
	{
		LOC_Adress = LOC_CGRAM_Index *8;
		LOC_Adress = SET_BIT(LOC_Adress,6);
		LCD_VidWrite4Cmd(LOC_Adress);
		for(LOC_Adress_Index=0;LOC_Adress_Index<8;LOC_Adress_Index++)
    2858:	89 81       	ldd	r24, Y+1	; 0x01
    285a:	8f 5f       	subi	r24, 0xFF	; 255
    285c:	89 83       	std	Y+1, r24	; 0x01
    285e:	89 81       	ldd	r24, Y+1	; 0x01
    2860:	88 30       	cpi	r24, 0x08	; 8
    2862:	78 f3       	brcs	.-34     	; 0x2842 <LCD_StoreCustomChr+0x3e>
		{
			LCD_VidWrite4Data(LOC_pattern[LOC_Adress_Index]);
		}
	}
	LCD_VidWrite4Cmd(RETURN_HOME);
    2864:	82 e0       	ldi	r24, 0x02	; 2
    2866:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <LCD_VidWrite4Cmd>
}
    286a:	0f 90       	pop	r0
    286c:	0f 90       	pop	r0
    286e:	0f 90       	pop	r0
    2870:	0f 90       	pop	r0
    2872:	0f 90       	pop	r0
    2874:	cf 91       	pop	r28
    2876:	df 91       	pop	r29
    2878:	08 95       	ret

0000287a <LCD_Disply>:

void LCD_Disply(u8 LOC_CGRAM_Index,u8 LOC_row,u8 LOC_col)
{
    287a:	df 93       	push	r29
    287c:	cf 93       	push	r28
    287e:	00 d0       	rcall	.+0      	; 0x2880 <LCD_Disply+0x6>
    2880:	0f 92       	push	r0
    2882:	cd b7       	in	r28, 0x3d	; 61
    2884:	de b7       	in	r29, 0x3e	; 62
    2886:	89 83       	std	Y+1, r24	; 0x01
    2888:	6a 83       	std	Y+2, r22	; 0x02
    288a:	4b 83       	std	Y+3, r20	; 0x03
	LCD_GoToPosition(LOC_row,LOC_col);
    288c:	8a 81       	ldd	r24, Y+2	; 0x02
    288e:	6b 81       	ldd	r22, Y+3	; 0x03
    2890:	0e 94 48 13 	call	0x2690	; 0x2690 <LCD_GoToPosition>

	LCD_VidWrite4Data(LOC_CGRAM_Index);
    2894:	89 81       	ldd	r24, Y+1	; 0x01
    2896:	0e 94 a7 10 	call	0x214e	; 0x214e <LCD_VidWrite4Data>
}
    289a:	0f 90       	pop	r0
    289c:	0f 90       	pop	r0
    289e:	0f 90       	pop	r0
    28a0:	cf 91       	pop	r28
    28a2:	df 91       	pop	r29
    28a4:	08 95       	ret

000028a6 <LCD_clearpostion>:


void LCD_clearpostion(void)
{
    28a6:	df 93       	push	r29
    28a8:	cf 93       	push	r28
    28aa:	cd b7       	in	r28, 0x3d	; 61
    28ac:	de b7       	in	r29, 0x3e	; 62
	LCD_VidGoto4CGRAM();
    28ae:	0e 94 f8 13 	call	0x27f0	; 0x27f0 <LCD_VidGoto4CGRAM>

	LCD_VidWrite4Data(0b00000000);
    28b2:	80 e0       	ldi	r24, 0x00	; 0
    28b4:	0e 94 a7 10 	call	0x214e	; 0x214e <LCD_VidWrite4Data>
	LCD_VidWrite4Data(0b00000000);
    28b8:	80 e0       	ldi	r24, 0x00	; 0
    28ba:	0e 94 a7 10 	call	0x214e	; 0x214e <LCD_VidWrite4Data>
	LCD_VidWrite4Data(0b00000000);
    28be:	80 e0       	ldi	r24, 0x00	; 0
    28c0:	0e 94 a7 10 	call	0x214e	; 0x214e <LCD_VidWrite4Data>
	LCD_VidWrite4Data(0b00000000);
    28c4:	80 e0       	ldi	r24, 0x00	; 0
    28c6:	0e 94 a7 10 	call	0x214e	; 0x214e <LCD_VidWrite4Data>
	LCD_VidWrite4Data(0b00000000);
    28ca:	80 e0       	ldi	r24, 0x00	; 0
    28cc:	0e 94 a7 10 	call	0x214e	; 0x214e <LCD_VidWrite4Data>
	LCD_VidWrite4Data(0b00000000);
    28d0:	80 e0       	ldi	r24, 0x00	; 0
    28d2:	0e 94 a7 10 	call	0x214e	; 0x214e <LCD_VidWrite4Data>
	LCD_VidWrite4Data(0b00000000);
    28d6:	80 e0       	ldi	r24, 0x00	; 0
    28d8:	0e 94 a7 10 	call	0x214e	; 0x214e <LCD_VidWrite4Data>
	LCD_VidWrite4Data(0b00000000);
    28dc:	80 e0       	ldi	r24, 0x00	; 0
    28de:	0e 94 a7 10 	call	0x214e	; 0x214e <LCD_VidWrite4Data>

}
    28e2:	cf 91       	pop	r28
    28e4:	df 91       	pop	r29
    28e6:	08 95       	ret

000028e8 <TIMER0_VidSetCallBack>:
#include "DIO_Interface.h"

static void  (*CallBackFuncPtr)(void)= NULL;

void  TIMER0_VidSetCallBack (void (*LOC_funcptr)(void) )
{
    28e8:	df 93       	push	r29
    28ea:	cf 93       	push	r28
    28ec:	00 d0       	rcall	.+0      	; 0x28ee <TIMER0_VidSetCallBack+0x6>
    28ee:	cd b7       	in	r28, 0x3d	; 61
    28f0:	de b7       	in	r29, 0x3e	; 62
    28f2:	9a 83       	std	Y+2, r25	; 0x02
    28f4:	89 83       	std	Y+1, r24	; 0x01
	if(LOC_funcptr  != NULL )
    28f6:	89 81       	ldd	r24, Y+1	; 0x01
    28f8:	9a 81       	ldd	r25, Y+2	; 0x02
    28fa:	00 97       	sbiw	r24, 0x00	; 0
    28fc:	31 f0       	breq	.+12     	; 0x290a <TIMER0_VidSetCallBack+0x22>
	{
		CallBackFuncPtr = LOC_funcptr ;
    28fe:	89 81       	ldd	r24, Y+1	; 0x01
    2900:	9a 81       	ldd	r25, Y+2	; 0x02
    2902:	90 93 7c 00 	sts	0x007C, r25
    2906:	80 93 7b 00 	sts	0x007B, r24
	}
}
    290a:	0f 90       	pop	r0
    290c:	0f 90       	pop	r0
    290e:	cf 91       	pop	r28
    2910:	df 91       	pop	r29
    2912:	08 95       	ret

00002914 <TIMER0_VidInit>:

void TIMER0_VidInit(Timer0Mode_type mode, Timer0Scaler_type scaler)
{
    2914:	df 93       	push	r29
    2916:	cf 93       	push	r28
    2918:	00 d0       	rcall	.+0      	; 0x291a <TIMER0_VidInit+0x6>
    291a:	00 d0       	rcall	.+0      	; 0x291c <TIMER0_VidInit+0x8>
    291c:	cd b7       	in	r28, 0x3d	; 61
    291e:	de b7       	in	r29, 0x3e	; 62
    2920:	89 83       	std	Y+1, r24	; 0x01
    2922:	6a 83       	std	Y+2, r22	; 0x02
	switch(mode)
    2924:	89 81       	ldd	r24, Y+1	; 0x01
    2926:	28 2f       	mov	r18, r24
    2928:	30 e0       	ldi	r19, 0x00	; 0
    292a:	3c 83       	std	Y+4, r19	; 0x04
    292c:	2b 83       	std	Y+3, r18	; 0x03
    292e:	8b 81       	ldd	r24, Y+3	; 0x03
    2930:	9c 81       	ldd	r25, Y+4	; 0x04
    2932:	81 30       	cpi	r24, 0x01	; 1
    2934:	91 05       	cpc	r25, r1
    2936:	59 f1       	breq	.+86     	; 0x298e <TIMER0_VidInit+0x7a>
    2938:	2b 81       	ldd	r18, Y+3	; 0x03
    293a:	3c 81       	ldd	r19, Y+4	; 0x04
    293c:	22 30       	cpi	r18, 0x02	; 2
    293e:	31 05       	cpc	r19, r1
    2940:	2c f4       	brge	.+10     	; 0x294c <TIMER0_VidInit+0x38>
    2942:	8b 81       	ldd	r24, Y+3	; 0x03
    2944:	9c 81       	ldd	r25, Y+4	; 0x04
    2946:	00 97       	sbiw	r24, 0x00	; 0
    2948:	61 f0       	breq	.+24     	; 0x2962 <TIMER0_VidInit+0x4e>
    294a:	4d c0       	rjmp	.+154    	; 0x29e6 <TIMER0_VidInit+0xd2>
    294c:	2b 81       	ldd	r18, Y+3	; 0x03
    294e:	3c 81       	ldd	r19, Y+4	; 0x04
    2950:	22 30       	cpi	r18, 0x02	; 2
    2952:	31 05       	cpc	r19, r1
    2954:	59 f1       	breq	.+86     	; 0x29ac <TIMER0_VidInit+0x98>
    2956:	8b 81       	ldd	r24, Y+3	; 0x03
    2958:	9c 81       	ldd	r25, Y+4	; 0x04
    295a:	83 30       	cpi	r24, 0x03	; 3
    295c:	91 05       	cpc	r25, r1
    295e:	a9 f1       	breq	.+106    	; 0x29ca <TIMER0_VidInit+0xb6>
    2960:	42 c0       	rjmp	.+132    	; 0x29e6 <TIMER0_VidInit+0xd2>
	{
		case TINER0_NORMAL_MODE:
			CLR_BIT(TCCR0,WGM00);
    2962:	a3 e5       	ldi	r26, 0x53	; 83
    2964:	b0 e0       	ldi	r27, 0x00	; 0
    2966:	e3 e5       	ldi	r30, 0x53	; 83
    2968:	f0 e0       	ldi	r31, 0x00	; 0
    296a:	80 81       	ld	r24, Z
    296c:	8f 7b       	andi	r24, 0xBF	; 191
    296e:	8c 93       	st	X, r24
			CLR_BIT(TCCR0,WGM01);
    2970:	a3 e5       	ldi	r26, 0x53	; 83
    2972:	b0 e0       	ldi	r27, 0x00	; 0
    2974:	e3 e5       	ldi	r30, 0x53	; 83
    2976:	f0 e0       	ldi	r31, 0x00	; 0
    2978:	80 81       	ld	r24, Z
    297a:	87 7f       	andi	r24, 0xF7	; 247
    297c:	8c 93       	st	X, r24
			SET_BIT(TCCR0,WGM01);
    297e:	a3 e5       	ldi	r26, 0x53	; 83
    2980:	b0 e0       	ldi	r27, 0x00	; 0
    2982:	e3 e5       	ldi	r30, 0x53	; 83
    2984:	f0 e0       	ldi	r31, 0x00	; 0
    2986:	80 81       	ld	r24, Z
    2988:	88 60       	ori	r24, 0x08	; 8
    298a:	8c 93       	st	X, r24
    298c:	2c c0       	rjmp	.+88     	; 0x29e6 <TIMER0_VidInit+0xd2>
			break;
		case TIMER0_PHASECRRECT_MODE:
				SET_BIT(TCCR0,WGM00);
    298e:	a3 e5       	ldi	r26, 0x53	; 83
    2990:	b0 e0       	ldi	r27, 0x00	; 0
    2992:	e3 e5       	ldi	r30, 0x53	; 83
    2994:	f0 e0       	ldi	r31, 0x00	; 0
    2996:	80 81       	ld	r24, Z
    2998:	80 64       	ori	r24, 0x40	; 64
    299a:	8c 93       	st	X, r24
				CLR_BIT(TCCR0,WGM01);
    299c:	a3 e5       	ldi	r26, 0x53	; 83
    299e:	b0 e0       	ldi	r27, 0x00	; 0
    29a0:	e3 e5       	ldi	r30, 0x53	; 83
    29a2:	f0 e0       	ldi	r31, 0x00	; 0
    29a4:	80 81       	ld	r24, Z
    29a6:	87 7f       	andi	r24, 0xF7	; 247
    29a8:	8c 93       	st	X, r24
    29aa:	1d c0       	rjmp	.+58     	; 0x29e6 <TIMER0_VidInit+0xd2>
					break;
		case TIMER0_CTC_MODE:
				CLR_BIT(TCCR0,WGM00);
    29ac:	a3 e5       	ldi	r26, 0x53	; 83
    29ae:	b0 e0       	ldi	r27, 0x00	; 0
    29b0:	e3 e5       	ldi	r30, 0x53	; 83
    29b2:	f0 e0       	ldi	r31, 0x00	; 0
    29b4:	80 81       	ld	r24, Z
    29b6:	8f 7b       	andi	r24, 0xBF	; 191
    29b8:	8c 93       	st	X, r24
				SET_BIT(TCCR0,WGM01);
    29ba:	a3 e5       	ldi	r26, 0x53	; 83
    29bc:	b0 e0       	ldi	r27, 0x00	; 0
    29be:	e3 e5       	ldi	r30, 0x53	; 83
    29c0:	f0 e0       	ldi	r31, 0x00	; 0
    29c2:	80 81       	ld	r24, Z
    29c4:	88 60       	ori	r24, 0x08	; 8
    29c6:	8c 93       	st	X, r24
    29c8:	0e c0       	rjmp	.+28     	; 0x29e6 <TIMER0_VidInit+0xd2>
					break;
		case TIMER0_FASTPWM_MODE:
				SET_BIT(TCCR0,WGM00);
    29ca:	a3 e5       	ldi	r26, 0x53	; 83
    29cc:	b0 e0       	ldi	r27, 0x00	; 0
    29ce:	e3 e5       	ldi	r30, 0x53	; 83
    29d0:	f0 e0       	ldi	r31, 0x00	; 0
    29d2:	80 81       	ld	r24, Z
    29d4:	80 64       	ori	r24, 0x40	; 64
    29d6:	8c 93       	st	X, r24
				SET_BIT(TCCR0,WGM01);
    29d8:	a3 e5       	ldi	r26, 0x53	; 83
    29da:	b0 e0       	ldi	r27, 0x00	; 0
    29dc:	e3 e5       	ldi	r30, 0x53	; 83
    29de:	f0 e0       	ldi	r31, 0x00	; 0
    29e0:	80 81       	ld	r24, Z
    29e2:	88 60       	ori	r24, 0x08	; 8
    29e4:	8c 93       	st	X, r24
					break;
	}
	TCCR0 =TCCR0&0xf8;  //11111000
    29e6:	a3 e5       	ldi	r26, 0x53	; 83
    29e8:	b0 e0       	ldi	r27, 0x00	; 0
    29ea:	e3 e5       	ldi	r30, 0x53	; 83
    29ec:	f0 e0       	ldi	r31, 0x00	; 0
    29ee:	80 81       	ld	r24, Z
    29f0:	88 7f       	andi	r24, 0xF8	; 248
    29f2:	8c 93       	st	X, r24
	TCCR0 = TCCR0 | scaler;
    29f4:	a3 e5       	ldi	r26, 0x53	; 83
    29f6:	b0 e0       	ldi	r27, 0x00	; 0
    29f8:	e3 e5       	ldi	r30, 0x53	; 83
    29fa:	f0 e0       	ldi	r31, 0x00	; 0
    29fc:	90 81       	ld	r25, Z
    29fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2a00:	89 2b       	or	r24, r25
    2a02:	8c 93       	st	X, r24

}
    2a04:	0f 90       	pop	r0
    2a06:	0f 90       	pop	r0
    2a08:	0f 90       	pop	r0
    2a0a:	0f 90       	pop	r0
    2a0c:	cf 91       	pop	r28
    2a0e:	df 91       	pop	r29
    2a10:	08 95       	ret

00002a12 <Timer0_VidOverInterrupt_Enable>:

void Timer0_VidOverInterrupt_Enable(void)
{
    2a12:	df 93       	push	r29
    2a14:	cf 93       	push	r28
    2a16:	cd b7       	in	r28, 0x3d	; 61
    2a18:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,TOIE0);
    2a1a:	a9 e5       	ldi	r26, 0x59	; 89
    2a1c:	b0 e0       	ldi	r27, 0x00	; 0
    2a1e:	e9 e5       	ldi	r30, 0x59	; 89
    2a20:	f0 e0       	ldi	r31, 0x00	; 0
    2a22:	80 81       	ld	r24, Z
    2a24:	81 60       	ori	r24, 0x01	; 1
    2a26:	8c 93       	st	X, r24
}
    2a28:	cf 91       	pop	r28
    2a2a:	df 91       	pop	r29
    2a2c:	08 95       	ret

00002a2e <Timer0_VidOverInterrupt_Disable>:
void Timer0_VidOverInterrupt_Disable(void)
{
    2a2e:	df 93       	push	r29
    2a30:	cf 93       	push	r28
    2a32:	cd b7       	in	r28, 0x3d	; 61
    2a34:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,TOIE0);
    2a36:	a9 e5       	ldi	r26, 0x59	; 89
    2a38:	b0 e0       	ldi	r27, 0x00	; 0
    2a3a:	e9 e5       	ldi	r30, 0x59	; 89
    2a3c:	f0 e0       	ldi	r31, 0x00	; 0
    2a3e:	80 81       	ld	r24, Z
    2a40:	8e 7f       	andi	r24, 0xFE	; 254
    2a42:	8c 93       	st	X, r24
}
    2a44:	cf 91       	pop	r28
    2a46:	df 91       	pop	r29
    2a48:	08 95       	ret

00002a4a <__vector_10>:

ISR(TIMER_CTC_VECT )
{
    2a4a:	1f 92       	push	r1
    2a4c:	0f 92       	push	r0
    2a4e:	0f b6       	in	r0, 0x3f	; 63
    2a50:	0f 92       	push	r0
    2a52:	11 24       	eor	r1, r1
    2a54:	2f 93       	push	r18
    2a56:	3f 93       	push	r19
    2a58:	4f 93       	push	r20
    2a5a:	5f 93       	push	r21
    2a5c:	6f 93       	push	r22
    2a5e:	7f 93       	push	r23
    2a60:	8f 93       	push	r24
    2a62:	9f 93       	push	r25
    2a64:	af 93       	push	r26
    2a66:	bf 93       	push	r27
    2a68:	ef 93       	push	r30
    2a6a:	ff 93       	push	r31
    2a6c:	df 93       	push	r29
    2a6e:	cf 93       	push	r28
    2a70:	cd b7       	in	r28, 0x3d	; 61
    2a72:	de b7       	in	r29, 0x3e	; 62
	if(CallBackFuncPtr != NULL )
    2a74:	80 91 7b 00 	lds	r24, 0x007B
    2a78:	90 91 7c 00 	lds	r25, 0x007C
    2a7c:	00 97       	sbiw	r24, 0x00	; 0
    2a7e:	29 f0       	breq	.+10     	; 0x2a8a <__vector_10+0x40>
	{
		CallBackFuncPtr();
    2a80:	e0 91 7b 00 	lds	r30, 0x007B
    2a84:	f0 91 7c 00 	lds	r31, 0x007C
    2a88:	09 95       	icall
	}
 }
    2a8a:	cf 91       	pop	r28
    2a8c:	df 91       	pop	r29
    2a8e:	ff 91       	pop	r31
    2a90:	ef 91       	pop	r30
    2a92:	bf 91       	pop	r27
    2a94:	af 91       	pop	r26
    2a96:	9f 91       	pop	r25
    2a98:	8f 91       	pop	r24
    2a9a:	7f 91       	pop	r23
    2a9c:	6f 91       	pop	r22
    2a9e:	5f 91       	pop	r21
    2aa0:	4f 91       	pop	r20
    2aa2:	3f 91       	pop	r19
    2aa4:	2f 91       	pop	r18
    2aa6:	0f 90       	pop	r0
    2aa8:	0f be       	out	0x3f, r0	; 63
    2aaa:	0f 90       	pop	r0
    2aac:	1f 90       	pop	r1
    2aae:	18 95       	reti

00002ab0 <main>:
#include "TIMER_Regster.h"
#include "TIMER_Interface.h"
#include "avr/delay.h"
volatile u8 c=0;
void main (void)
{
    2ab0:	df 93       	push	r29
    2ab2:	cf 93       	push	r28
    2ab4:	cd b7       	in	r28, 0x3d	; 61
    2ab6:	de b7       	in	r29, 0x3e	; 62
    2ab8:	69 97       	sbiw	r28, 0x19	; 25
    2aba:	0f b6       	in	r0, 0x3f	; 63
    2abc:	f8 94       	cli
    2abe:	de bf       	out	0x3e, r29	; 62
    2ac0:	0f be       	out	0x3f, r0	; 63
    2ac2:	cd bf       	out	0x3d, r28	; 61
	u8 x;
	//lcd int
	LCD_Vid4Initialization();
    2ac4:	0e 94 ab 0b 	call	0x1756	; 0x1756 <LCD_Vid4Initialization>
	LCD_Write4String("analog signal:",0,0);
    2ac8:	80 e6       	ldi	r24, 0x60	; 96
    2aca:	90 e0       	ldi	r25, 0x00	; 0
    2acc:	60 e0       	ldi	r22, 0x00	; 0
    2ace:	40 e0       	ldi	r20, 0x00	; 0
    2ad0:	0e 94 80 12 	call	0x2500	; 0x2500 <LCD_Write4String>
	DIO_VidSetPinDirection(PORTD,PIN5,OUTPUT);
    2ad4:	83 e0       	ldi	r24, 0x03	; 3
    2ad6:	65 e0       	ldi	r22, 0x05	; 5
    2ad8:	41 e0       	ldi	r20, 0x01	; 1
    2ada:	0e 94 50 07 	call	0xea0	; 0xea0 <DIO_VidSetPinDirection>

	TIMER0_VidInit(TINER0_NORMAL_MODE,TINER0_SCALER_8);
    2ade:	80 e0       	ldi	r24, 0x00	; 0
    2ae0:	62 e0       	ldi	r22, 0x02	; 2
    2ae2:	0e 94 8a 14 	call	0x2914	; 0x2914 <TIMER0_VidInit>
	Timer0_VidOverInterrupt_Enable();
    2ae6:	0e 94 09 15 	call	0x2a12	; 0x2a12 <Timer0_VidOverInterrupt_Enable>
	TCNT0=24;
    2aea:	e2 e5       	ldi	r30, 0x52	; 82
    2aec:	f0 e0       	ldi	r31, 0x00	; 0
    2aee:	88 e1       	ldi	r24, 0x18	; 24
    2af0:	80 83       	st	Z, r24
    2af2:	80 e0       	ldi	r24, 0x00	; 0
    2af4:	90 e0       	ldi	r25, 0x00	; 0
    2af6:	a8 ec       	ldi	r26, 0xC8	; 200
    2af8:	b2 e4       	ldi	r27, 0x42	; 66
    2afa:	8d 8b       	std	Y+21, r24	; 0x15
    2afc:	9e 8b       	std	Y+22, r25	; 0x16
    2afe:	af 8b       	std	Y+23, r26	; 0x17
    2b00:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2b02:	6d 89       	ldd	r22, Y+21	; 0x15
    2b04:	7e 89       	ldd	r23, Y+22	; 0x16
    2b06:	8f 89       	ldd	r24, Y+23	; 0x17
    2b08:	98 8d       	ldd	r25, Y+24	; 0x18
    2b0a:	2b ea       	ldi	r18, 0xAB	; 171
    2b0c:	3a ea       	ldi	r19, 0xAA	; 170
    2b0e:	4a e2       	ldi	r20, 0x2A	; 42
    2b10:	50 e4       	ldi	r21, 0x40	; 64
    2b12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b16:	dc 01       	movw	r26, r24
    2b18:	cb 01       	movw	r24, r22
    2b1a:	89 8b       	std	Y+17, r24	; 0x11
    2b1c:	9a 8b       	std	Y+18, r25	; 0x12
    2b1e:	ab 8b       	std	Y+19, r26	; 0x13
    2b20:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2b22:	69 89       	ldd	r22, Y+17	; 0x11
    2b24:	7a 89       	ldd	r23, Y+18	; 0x12
    2b26:	8b 89       	ldd	r24, Y+19	; 0x13
    2b28:	9c 89       	ldd	r25, Y+20	; 0x14
    2b2a:	20 e0       	ldi	r18, 0x00	; 0
    2b2c:	30 e0       	ldi	r19, 0x00	; 0
    2b2e:	40 e8       	ldi	r20, 0x80	; 128
    2b30:	5f e3       	ldi	r21, 0x3F	; 63
    2b32:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b36:	88 23       	and	r24, r24
    2b38:	1c f4       	brge	.+6      	; 0x2b40 <main+0x90>
		__ticks = 1;
    2b3a:	81 e0       	ldi	r24, 0x01	; 1
    2b3c:	88 8b       	std	Y+16, r24	; 0x10
    2b3e:	91 c0       	rjmp	.+290    	; 0x2c62 <main+0x1b2>
	else if (__tmp > 255)
    2b40:	69 89       	ldd	r22, Y+17	; 0x11
    2b42:	7a 89       	ldd	r23, Y+18	; 0x12
    2b44:	8b 89       	ldd	r24, Y+19	; 0x13
    2b46:	9c 89       	ldd	r25, Y+20	; 0x14
    2b48:	20 e0       	ldi	r18, 0x00	; 0
    2b4a:	30 e0       	ldi	r19, 0x00	; 0
    2b4c:	4f e7       	ldi	r20, 0x7F	; 127
    2b4e:	53 e4       	ldi	r21, 0x43	; 67
    2b50:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b54:	18 16       	cp	r1, r24
    2b56:	0c f0       	brlt	.+2      	; 0x2b5a <main+0xaa>
    2b58:	7b c0       	rjmp	.+246    	; 0x2c50 <main+0x1a0>
	{
		_delay_ms(__us / 1000.0);
    2b5a:	6d 89       	ldd	r22, Y+21	; 0x15
    2b5c:	7e 89       	ldd	r23, Y+22	; 0x16
    2b5e:	8f 89       	ldd	r24, Y+23	; 0x17
    2b60:	98 8d       	ldd	r25, Y+24	; 0x18
    2b62:	20 e0       	ldi	r18, 0x00	; 0
    2b64:	30 e0       	ldi	r19, 0x00	; 0
    2b66:	4a e7       	ldi	r20, 0x7A	; 122
    2b68:	54 e4       	ldi	r21, 0x44	; 68
    2b6a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2b6e:	dc 01       	movw	r26, r24
    2b70:	cb 01       	movw	r24, r22
    2b72:	8c 87       	std	Y+12, r24	; 0x0c
    2b74:	9d 87       	std	Y+13, r25	; 0x0d
    2b76:	ae 87       	std	Y+14, r26	; 0x0e
    2b78:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b7a:	6c 85       	ldd	r22, Y+12	; 0x0c
    2b7c:	7d 85       	ldd	r23, Y+13	; 0x0d
    2b7e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2b80:	9f 85       	ldd	r25, Y+15	; 0x0f
    2b82:	20 e0       	ldi	r18, 0x00	; 0
    2b84:	30 e0       	ldi	r19, 0x00	; 0
    2b86:	4a ef       	ldi	r20, 0xFA	; 250
    2b88:	54 e4       	ldi	r21, 0x44	; 68
    2b8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b8e:	dc 01       	movw	r26, r24
    2b90:	cb 01       	movw	r24, r22
    2b92:	88 87       	std	Y+8, r24	; 0x08
    2b94:	99 87       	std	Y+9, r25	; 0x09
    2b96:	aa 87       	std	Y+10, r26	; 0x0a
    2b98:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2b9a:	68 85       	ldd	r22, Y+8	; 0x08
    2b9c:	79 85       	ldd	r23, Y+9	; 0x09
    2b9e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2ba0:	9b 85       	ldd	r25, Y+11	; 0x0b
    2ba2:	20 e0       	ldi	r18, 0x00	; 0
    2ba4:	30 e0       	ldi	r19, 0x00	; 0
    2ba6:	40 e8       	ldi	r20, 0x80	; 128
    2ba8:	5f e3       	ldi	r21, 0x3F	; 63
    2baa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2bae:	88 23       	and	r24, r24
    2bb0:	2c f4       	brge	.+10     	; 0x2bbc <main+0x10c>
		__ticks = 1;
    2bb2:	81 e0       	ldi	r24, 0x01	; 1
    2bb4:	90 e0       	ldi	r25, 0x00	; 0
    2bb6:	9f 83       	std	Y+7, r25	; 0x07
    2bb8:	8e 83       	std	Y+6, r24	; 0x06
    2bba:	3f c0       	rjmp	.+126    	; 0x2c3a <main+0x18a>
	else if (__tmp > 65535)
    2bbc:	68 85       	ldd	r22, Y+8	; 0x08
    2bbe:	79 85       	ldd	r23, Y+9	; 0x09
    2bc0:	8a 85       	ldd	r24, Y+10	; 0x0a
    2bc2:	9b 85       	ldd	r25, Y+11	; 0x0b
    2bc4:	20 e0       	ldi	r18, 0x00	; 0
    2bc6:	3f ef       	ldi	r19, 0xFF	; 255
    2bc8:	4f e7       	ldi	r20, 0x7F	; 127
    2bca:	57 e4       	ldi	r21, 0x47	; 71
    2bcc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2bd0:	18 16       	cp	r1, r24
    2bd2:	4c f5       	brge	.+82     	; 0x2c26 <main+0x176>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bd4:	6c 85       	ldd	r22, Y+12	; 0x0c
    2bd6:	7d 85       	ldd	r23, Y+13	; 0x0d
    2bd8:	8e 85       	ldd	r24, Y+14	; 0x0e
    2bda:	9f 85       	ldd	r25, Y+15	; 0x0f
    2bdc:	20 e0       	ldi	r18, 0x00	; 0
    2bde:	30 e0       	ldi	r19, 0x00	; 0
    2be0:	40 e2       	ldi	r20, 0x20	; 32
    2be2:	51 e4       	ldi	r21, 0x41	; 65
    2be4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2be8:	dc 01       	movw	r26, r24
    2bea:	cb 01       	movw	r24, r22
    2bec:	bc 01       	movw	r22, r24
    2bee:	cd 01       	movw	r24, r26
    2bf0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bf4:	dc 01       	movw	r26, r24
    2bf6:	cb 01       	movw	r24, r22
    2bf8:	9f 83       	std	Y+7, r25	; 0x07
    2bfa:	8e 83       	std	Y+6, r24	; 0x06
    2bfc:	0f c0       	rjmp	.+30     	; 0x2c1c <main+0x16c>
    2bfe:	88 ec       	ldi	r24, 0xC8	; 200
    2c00:	90 e0       	ldi	r25, 0x00	; 0
    2c02:	9d 83       	std	Y+5, r25	; 0x05
    2c04:	8c 83       	std	Y+4, r24	; 0x04
    2c06:	8c 81       	ldd	r24, Y+4	; 0x04
    2c08:	9d 81       	ldd	r25, Y+5	; 0x05
    2c0a:	01 97       	sbiw	r24, 0x01	; 1
    2c0c:	f1 f7       	brne	.-4      	; 0x2c0a <main+0x15a>
    2c0e:	9d 83       	std	Y+5, r25	; 0x05
    2c10:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c12:	8e 81       	ldd	r24, Y+6	; 0x06
    2c14:	9f 81       	ldd	r25, Y+7	; 0x07
    2c16:	01 97       	sbiw	r24, 0x01	; 1
    2c18:	9f 83       	std	Y+7, r25	; 0x07
    2c1a:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c1c:	8e 81       	ldd	r24, Y+6	; 0x06
    2c1e:	9f 81       	ldd	r25, Y+7	; 0x07
    2c20:	00 97       	sbiw	r24, 0x00	; 0
    2c22:	69 f7       	brne	.-38     	; 0x2bfe <main+0x14e>
    2c24:	24 c0       	rjmp	.+72     	; 0x2c6e <main+0x1be>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c26:	68 85       	ldd	r22, Y+8	; 0x08
    2c28:	79 85       	ldd	r23, Y+9	; 0x09
    2c2a:	8a 85       	ldd	r24, Y+10	; 0x0a
    2c2c:	9b 85       	ldd	r25, Y+11	; 0x0b
    2c2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c32:	dc 01       	movw	r26, r24
    2c34:	cb 01       	movw	r24, r22
    2c36:	9f 83       	std	Y+7, r25	; 0x07
    2c38:	8e 83       	std	Y+6, r24	; 0x06
    2c3a:	8e 81       	ldd	r24, Y+6	; 0x06
    2c3c:	9f 81       	ldd	r25, Y+7	; 0x07
    2c3e:	9b 83       	std	Y+3, r25	; 0x03
    2c40:	8a 83       	std	Y+2, r24	; 0x02
    2c42:	8a 81       	ldd	r24, Y+2	; 0x02
    2c44:	9b 81       	ldd	r25, Y+3	; 0x03
    2c46:	01 97       	sbiw	r24, 0x01	; 1
    2c48:	f1 f7       	brne	.-4      	; 0x2c46 <main+0x196>
    2c4a:	9b 83       	std	Y+3, r25	; 0x03
    2c4c:	8a 83       	std	Y+2, r24	; 0x02
    2c4e:	0f c0       	rjmp	.+30     	; 0x2c6e <main+0x1be>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2c50:	69 89       	ldd	r22, Y+17	; 0x11
    2c52:	7a 89       	ldd	r23, Y+18	; 0x12
    2c54:	8b 89       	ldd	r24, Y+19	; 0x13
    2c56:	9c 89       	ldd	r25, Y+20	; 0x14
    2c58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c5c:	dc 01       	movw	r26, r24
    2c5e:	cb 01       	movw	r24, r22
    2c60:	88 8b       	std	Y+16, r24	; 0x10
    2c62:	88 89       	ldd	r24, Y+16	; 0x10
    2c64:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2c66:	89 81       	ldd	r24, Y+1	; 0x01
    2c68:	8a 95       	dec	r24
    2c6a:	f1 f7       	brne	.-4      	; 0x2c68 <main+0x1b8>
    2c6c:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(100);
	x=TCNT0;
    2c6e:	e2 e5       	ldi	r30, 0x52	; 82
    2c70:	f0 e0       	ldi	r31, 0x00	; 0
    2c72:	80 81       	ld	r24, Z
    2c74:	89 8f       	std	Y+25, r24	; 0x19
	LCD_VidDisp4Number(x);
    2c76:	89 8d       	ldd	r24, Y+25	; 0x19
    2c78:	88 2f       	mov	r24, r24
    2c7a:	90 e0       	ldi	r25, 0x00	; 0
    2c7c:	a0 e0       	ldi	r26, 0x00	; 0
    2c7e:	b0 e0       	ldi	r27, 0x00	; 0
    2c80:	bc 01       	movw	r22, r24
    2c82:	cd 01       	movw	r24, r26
    2c84:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <LCD_VidDisp4Number>
    2c88:	ff cf       	rjmp	.-2      	; 0x2c88 <main+0x1d8>

00002c8a <__vector_11>:


//TIMER 0 FUNCTION TOGGAL LED

ISR(TIMER0_OV )
{
    2c8a:	1f 92       	push	r1
    2c8c:	0f 92       	push	r0
    2c8e:	0f b6       	in	r0, 0x3f	; 63
    2c90:	0f 92       	push	r0
    2c92:	11 24       	eor	r1, r1
    2c94:	2f 93       	push	r18
    2c96:	3f 93       	push	r19
    2c98:	4f 93       	push	r20
    2c9a:	5f 93       	push	r21
    2c9c:	6f 93       	push	r22
    2c9e:	7f 93       	push	r23
    2ca0:	8f 93       	push	r24
    2ca2:	9f 93       	push	r25
    2ca4:	af 93       	push	r26
    2ca6:	bf 93       	push	r27
    2ca8:	ef 93       	push	r30
    2caa:	ff 93       	push	r31
    2cac:	df 93       	push	r29
    2cae:	cf 93       	push	r28
    2cb0:	cd b7       	in	r28, 0x3d	; 61
    2cb2:	de b7       	in	r29, 0x3e	; 62
	c++;
    2cb4:	80 91 7d 00 	lds	r24, 0x007D
    2cb8:	8f 5f       	subi	r24, 0xFF	; 255
    2cba:	80 93 7d 00 	sts	0x007D, r24
	if(4==c)
    2cbe:	80 91 7d 00 	lds	r24, 0x007D
    2cc2:	84 30       	cpi	r24, 0x04	; 4
    2cc4:	51 f4       	brne	.+20     	; 0x2cda <__vector_11+0x50>
	{
		DIO_VidToggPinValue(PORTB,PIN7);
    2cc6:	81 e0       	ldi	r24, 0x01	; 1
    2cc8:	67 e0       	ldi	r22, 0x07	; 7
    2cca:	0e 94 4b 0a 	call	0x1496	; 0x1496 <DIO_VidToggPinValue>
		TCNT0=24;
    2cce:	e2 e5       	ldi	r30, 0x52	; 82
    2cd0:	f0 e0       	ldi	r31, 0x00	; 0
    2cd2:	88 e1       	ldi	r24, 0x18	; 24
    2cd4:	80 83       	st	Z, r24
		c=0;
    2cd6:	10 92 7d 00 	sts	0x007D, r1
	}
}
    2cda:	cf 91       	pop	r28
    2cdc:	df 91       	pop	r29
    2cde:	ff 91       	pop	r31
    2ce0:	ef 91       	pop	r30
    2ce2:	bf 91       	pop	r27
    2ce4:	af 91       	pop	r26
    2ce6:	9f 91       	pop	r25
    2ce8:	8f 91       	pop	r24
    2cea:	7f 91       	pop	r23
    2cec:	6f 91       	pop	r22
    2cee:	5f 91       	pop	r21
    2cf0:	4f 91       	pop	r20
    2cf2:	3f 91       	pop	r19
    2cf4:	2f 91       	pop	r18
    2cf6:	0f 90       	pop	r0
    2cf8:	0f be       	out	0x3f, r0	; 63
    2cfa:	0f 90       	pop	r0
    2cfc:	1f 90       	pop	r1
    2cfe:	18 95       	reti

00002d00 <__udivmodsi4>:
    2d00:	a1 e2       	ldi	r26, 0x21	; 33
    2d02:	1a 2e       	mov	r1, r26
    2d04:	aa 1b       	sub	r26, r26
    2d06:	bb 1b       	sub	r27, r27
    2d08:	fd 01       	movw	r30, r26
    2d0a:	0d c0       	rjmp	.+26     	; 0x2d26 <__udivmodsi4_ep>

00002d0c <__udivmodsi4_loop>:
    2d0c:	aa 1f       	adc	r26, r26
    2d0e:	bb 1f       	adc	r27, r27
    2d10:	ee 1f       	adc	r30, r30
    2d12:	ff 1f       	adc	r31, r31
    2d14:	a2 17       	cp	r26, r18
    2d16:	b3 07       	cpc	r27, r19
    2d18:	e4 07       	cpc	r30, r20
    2d1a:	f5 07       	cpc	r31, r21
    2d1c:	20 f0       	brcs	.+8      	; 0x2d26 <__udivmodsi4_ep>
    2d1e:	a2 1b       	sub	r26, r18
    2d20:	b3 0b       	sbc	r27, r19
    2d22:	e4 0b       	sbc	r30, r20
    2d24:	f5 0b       	sbc	r31, r21

00002d26 <__udivmodsi4_ep>:
    2d26:	66 1f       	adc	r22, r22
    2d28:	77 1f       	adc	r23, r23
    2d2a:	88 1f       	adc	r24, r24
    2d2c:	99 1f       	adc	r25, r25
    2d2e:	1a 94       	dec	r1
    2d30:	69 f7       	brne	.-38     	; 0x2d0c <__udivmodsi4_loop>
    2d32:	60 95       	com	r22
    2d34:	70 95       	com	r23
    2d36:	80 95       	com	r24
    2d38:	90 95       	com	r25
    2d3a:	9b 01       	movw	r18, r22
    2d3c:	ac 01       	movw	r20, r24
    2d3e:	bd 01       	movw	r22, r26
    2d40:	cf 01       	movw	r24, r30
    2d42:	08 95       	ret

00002d44 <__prologue_saves__>:
    2d44:	2f 92       	push	r2
    2d46:	3f 92       	push	r3
    2d48:	4f 92       	push	r4
    2d4a:	5f 92       	push	r5
    2d4c:	6f 92       	push	r6
    2d4e:	7f 92       	push	r7
    2d50:	8f 92       	push	r8
    2d52:	9f 92       	push	r9
    2d54:	af 92       	push	r10
    2d56:	bf 92       	push	r11
    2d58:	cf 92       	push	r12
    2d5a:	df 92       	push	r13
    2d5c:	ef 92       	push	r14
    2d5e:	ff 92       	push	r15
    2d60:	0f 93       	push	r16
    2d62:	1f 93       	push	r17
    2d64:	cf 93       	push	r28
    2d66:	df 93       	push	r29
    2d68:	cd b7       	in	r28, 0x3d	; 61
    2d6a:	de b7       	in	r29, 0x3e	; 62
    2d6c:	ca 1b       	sub	r28, r26
    2d6e:	db 0b       	sbc	r29, r27
    2d70:	0f b6       	in	r0, 0x3f	; 63
    2d72:	f8 94       	cli
    2d74:	de bf       	out	0x3e, r29	; 62
    2d76:	0f be       	out	0x3f, r0	; 63
    2d78:	cd bf       	out	0x3d, r28	; 61
    2d7a:	09 94       	ijmp

00002d7c <__epilogue_restores__>:
    2d7c:	2a 88       	ldd	r2, Y+18	; 0x12
    2d7e:	39 88       	ldd	r3, Y+17	; 0x11
    2d80:	48 88       	ldd	r4, Y+16	; 0x10
    2d82:	5f 84       	ldd	r5, Y+15	; 0x0f
    2d84:	6e 84       	ldd	r6, Y+14	; 0x0e
    2d86:	7d 84       	ldd	r7, Y+13	; 0x0d
    2d88:	8c 84       	ldd	r8, Y+12	; 0x0c
    2d8a:	9b 84       	ldd	r9, Y+11	; 0x0b
    2d8c:	aa 84       	ldd	r10, Y+10	; 0x0a
    2d8e:	b9 84       	ldd	r11, Y+9	; 0x09
    2d90:	c8 84       	ldd	r12, Y+8	; 0x08
    2d92:	df 80       	ldd	r13, Y+7	; 0x07
    2d94:	ee 80       	ldd	r14, Y+6	; 0x06
    2d96:	fd 80       	ldd	r15, Y+5	; 0x05
    2d98:	0c 81       	ldd	r16, Y+4	; 0x04
    2d9a:	1b 81       	ldd	r17, Y+3	; 0x03
    2d9c:	aa 81       	ldd	r26, Y+2	; 0x02
    2d9e:	b9 81       	ldd	r27, Y+1	; 0x01
    2da0:	ce 0f       	add	r28, r30
    2da2:	d1 1d       	adc	r29, r1
    2da4:	0f b6       	in	r0, 0x3f	; 63
    2da6:	f8 94       	cli
    2da8:	de bf       	out	0x3e, r29	; 62
    2daa:	0f be       	out	0x3f, r0	; 63
    2dac:	cd bf       	out	0x3d, r28	; 61
    2dae:	ed 01       	movw	r28, r26
    2db0:	08 95       	ret

00002db2 <_exit>:
    2db2:	f8 94       	cli

00002db4 <__stop_program>:
    2db4:	ff cf       	rjmp	.-2      	; 0x2db4 <__stop_program>
