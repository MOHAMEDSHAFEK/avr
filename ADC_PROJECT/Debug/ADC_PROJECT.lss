
ADC_PROJECT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000028ba  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  000028ba  0000294e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800078  00800078  00002966  2**0
                  ALLOC
  3 .stab         00002058  00000000  00000000  00002968  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000e00  00000000  00000000  000049c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000057c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00005900  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00005a70  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000076b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  000085a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009354  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  000094b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00009741  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00009f0f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 5f 0a 	jmp	0x14be	; 0x14be <__vector_2>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 5b 06 	jmp	0xcb6	; 0xcb6 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea eb       	ldi	r30, 0xBA	; 186
      68:	f8 e2       	ldi	r31, 0x28	; 40
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 37       	cpi	r26, 0x78	; 120
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a8 e7       	ldi	r26, 0x78	; 120
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 37       	cpi	r26, 0x79	; 121
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 be 13 	call	0x277c	; 0x277c <main>
      8a:	0c 94 5b 14 	jmp	0x28b6	; 0x28b6 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 24 14 	jmp	0x2848	; 0x2848 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	af e6       	ldi	r26, 0x6F	; 111
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 40 14 	jmp	0x2880	; 0x2880 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 30 14 	jmp	0x2860	; 0x2860 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 4c 14 	jmp	0x2898	; 0x2898 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 30 14 	jmp	0x2860	; 0x2860 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 4c 14 	jmp	0x2898	; 0x2898 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 24 14 	jmp	0x2848	; 0x2848 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8f e6       	ldi	r24, 0x6F	; 111
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 40 14 	jmp	0x2880	; 0x2880 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 30 14 	jmp	0x2860	; 0x2860 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 4c 14 	jmp	0x2898	; 0x2898 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 30 14 	jmp	0x2860	; 0x2860 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 4c 14 	jmp	0x2898	; 0x2898 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 30 14 	jmp	0x2860	; 0x2860 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 4c 14 	jmp	0x2898	; 0x2898 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 34 14 	jmp	0x2868	; 0x2868 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 50 14 	jmp	0x28a0	; 0x28a0 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <ADC_VidInit>:
#define  ADTS0 0
 *
 */

void ADC_VidInit(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADMUX,REFS0);
     b4e:	a7 e2       	ldi	r26, 0x27	; 39
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	e7 e2       	ldi	r30, 0x27	; 39
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	80 64       	ori	r24, 0x40	; 64
     b5a:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,REFS1);              //V reference
     b5c:	a7 e2       	ldi	r26, 0x27	; 39
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	e7 e2       	ldi	r30, 0x27	; 39
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	8f 77       	andi	r24, 0x7F	; 127
     b68:	8c 93       	st	X, r24

	CLR_BIT(ADMUX,ADLAR);             //right adjast
     b6a:	a7 e2       	ldi	r26, 0x27	; 39
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	e7 e2       	ldi	r30, 0x27	; 39
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	8f 7d       	andi	r24, 0xDF	; 223
     b76:	8c 93       	st	X, r24

	SET_BIT(ADCSRA,ADTS2);
     b78:	a6 e2       	ldi	r26, 0x26	; 38
     b7a:	b0 e0       	ldi	r27, 0x00	; 0
     b7c:	e6 e2       	ldi	r30, 0x26	; 38
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	80 81       	ld	r24, Z
     b82:	80 68       	ori	r24, 0x80	; 128
     b84:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADTS1);
     b86:	a6 e2       	ldi	r26, 0x26	; 38
     b88:	b0 e0       	ldi	r27, 0x00	; 0
     b8a:	e6 e2       	ldi	r30, 0x26	; 38
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	80 81       	ld	r24, Z
     b90:	80 64       	ori	r24, 0x40	; 64
     b92:	8c 93       	st	X, r24
	CLR_BIT(ADCSRA,ADTS0);	         //Prescaler
     b94:	a6 e2       	ldi	r26, 0x26	; 38
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	e6 e2       	ldi	r30, 0x26	; 38
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	80 81       	ld	r24, Z
     b9e:	8f 7d       	andi	r24, 0xDF	; 223
     ba0:	8c 93       	st	X, r24

	CLR_BIT(SFIOR,ADTS0);
     ba2:	a0 e5       	ldi	r26, 0x50	; 80
     ba4:	b0 e0       	ldi	r27, 0x00	; 0
     ba6:	e0 e5       	ldi	r30, 0x50	; 80
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	80 81       	ld	r24, Z
     bac:	8f 7d       	andi	r24, 0xDF	; 223
     bae:	8c 93       	st	X, r24
	CLR_BIT(SFIOR,ADTS1);
     bb0:	a0 e5       	ldi	r26, 0x50	; 80
     bb2:	b0 e0       	ldi	r27, 0x00	; 0
     bb4:	e0 e5       	ldi	r30, 0x50	; 80
     bb6:	f0 e0       	ldi	r31, 0x00	; 0
     bb8:	80 81       	ld	r24, Z
     bba:	8f 7b       	andi	r24, 0xBF	; 191
     bbc:	8c 93       	st	X, r24
	CLR_BIT(SFIOR,ADTS2);               //Free Running mode
     bbe:	a0 e5       	ldi	r26, 0x50	; 80
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e0 e5       	ldi	r30, 0x50	; 80
     bc4:	f0 e0       	ldi	r31, 0x00	; 0
     bc6:	80 81       	ld	r24, Z
     bc8:	8f 77       	andi	r24, 0x7F	; 127
     bca:	8c 93       	st	X, r24
	
	//CLR_BIT(ADCSRA,ADIE);	           //disable  intrrupt

	SET_BIT(ADCSRA,ADATE);         //enable auto triger*/
     bcc:	a6 e2       	ldi	r26, 0x26	; 38
     bce:	b0 e0       	ldi	r27, 0x00	; 0
     bd0:	e6 e2       	ldi	r30, 0x26	; 38
     bd2:	f0 e0       	ldi	r31, 0x00	; 0
     bd4:	80 81       	ld	r24, Z
     bd6:	80 62       	ori	r24, 0x20	; 32
     bd8:	8c 93       	st	X, r24

	SET_BIT(ADCSRA,ADEN);            //enable ADC when it's running in the initialization it's will running in sleep mode
     bda:	a6 e2       	ldi	r26, 0x26	; 38
     bdc:	b0 e0       	ldi	r27, 0x00	; 0
     bde:	e6 e2       	ldi	r30, 0x26	; 38
     be0:	f0 e0       	ldi	r31, 0x00	; 0
     be2:	80 81       	ld	r24, Z
     be4:	80 68       	ori	r24, 0x80	; 128
     be6:	8c 93       	st	X, r24

	
}
     be8:	cf 91       	pop	r28
     bea:	df 91       	pop	r29
     bec:	08 95       	ret

00000bee <ADC_U16GitDigital>:

u16 ADC_U16GitDigital(u8 LOC_Channel)
{
     bee:	df 93       	push	r29
     bf0:	cf 93       	push	r28
     bf2:	0f 92       	push	r0
     bf4:	cd b7       	in	r28, 0x3d	; 61
     bf6:	de b7       	in	r29, 0x3e	; 62
     bf8:	89 83       	std	Y+1, r24	; 0x01
	ADMUX&=0b11100000;               //singel ended
     bfa:	a7 e2       	ldi	r26, 0x27	; 39
     bfc:	b0 e0       	ldi	r27, 0x00	; 0
     bfe:	e7 e2       	ldi	r30, 0x27	; 39
     c00:	f0 e0       	ldi	r31, 0x00	; 0
     c02:	80 81       	ld	r24, Z
     c04:	80 7e       	andi	r24, 0xE0	; 224
     c06:	8c 93       	st	X, r24
	ADMUX|=LOC_Channel;              //number of channel by user
     c08:	a7 e2       	ldi	r26, 0x27	; 39
     c0a:	b0 e0       	ldi	r27, 0x00	; 0
     c0c:	e7 e2       	ldi	r30, 0x27	; 39
     c0e:	f0 e0       	ldi	r31, 0x00	; 0
     c10:	90 81       	ld	r25, Z
     c12:	89 81       	ldd	r24, Y+1	; 0x01
     c14:	89 2b       	or	r24, r25
     c16:	8c 93       	st	X, r24

	SET_BIT(ADCSRA,ADSC);           //Start Conversion
     c18:	a6 e2       	ldi	r26, 0x26	; 38
     c1a:	b0 e0       	ldi	r27, 0x00	; 0
     c1c:	e6 e2       	ldi	r30, 0x26	; 38
     c1e:	f0 e0       	ldi	r31, 0x00	; 0
     c20:	80 81       	ld	r24, Z
     c22:	80 64       	ori	r24, 0x40	; 64
     c24:	8c 93       	st	X, r24
	while(0==GET_BIT(ADCSRA,ADIF))  //if ADC interrupt flag=0 waite until be one
     c26:	e6 e2       	ldi	r30, 0x26	; 38
     c28:	f0 e0       	ldi	r31, 0x00	; 0
     c2a:	80 81       	ld	r24, Z
     c2c:	82 95       	swap	r24
     c2e:	8f 70       	andi	r24, 0x0F	; 15
     c30:	88 2f       	mov	r24, r24
     c32:	90 e0       	ldi	r25, 0x00	; 0
     c34:	81 70       	andi	r24, 0x01	; 1
     c36:	90 70       	andi	r25, 0x00	; 0
     c38:	00 97       	sbiw	r24, 0x00	; 0
     c3a:	a9 f3       	breq	.-22     	; 0xc26 <ADC_U16GitDigital+0x38>
	{
	}
	SET_BIT(ADCSRA,ADIF);           //reset the interrupt flag over write one to be zero
     c3c:	a6 e2       	ldi	r26, 0x26	; 38
     c3e:	b0 e0       	ldi	r27, 0x00	; 0
     c40:	e6 e2       	ldi	r30, 0x26	; 38
     c42:	f0 e0       	ldi	r31, 0x00	; 0
     c44:	80 81       	ld	r24, Z
     c46:	80 61       	ori	r24, 0x10	; 16
     c48:	8c 93       	st	X, r24
    return ADC;
     c4a:	e4 e2       	ldi	r30, 0x24	; 36
     c4c:	f0 e0       	ldi	r31, 0x00	; 0
     c4e:	80 81       	ld	r24, Z
     c50:	91 81       	ldd	r25, Z+1	; 0x01

}
     c52:	0f 90       	pop	r0
     c54:	cf 91       	pop	r28
     c56:	df 91       	pop	r29
     c58:	08 95       	ret

00000c5a <ADC_VidStartConvertion>:


void ADC_VidStartConvertion(u8  LOC_Channel)
{
     c5a:	df 93       	push	r29
     c5c:	cf 93       	push	r28
     c5e:	0f 92       	push	r0
     c60:	cd b7       	in	r28, 0x3d	; 61
     c62:	de b7       	in	r29, 0x3e	; 62
     c64:	89 83       	std	Y+1, r24	; 0x01
	ADMUX&=0b11100000;               //singel ended
     c66:	a7 e2       	ldi	r26, 0x27	; 39
     c68:	b0 e0       	ldi	r27, 0x00	; 0
     c6a:	e7 e2       	ldi	r30, 0x27	; 39
     c6c:	f0 e0       	ldi	r31, 0x00	; 0
     c6e:	80 81       	ld	r24, Z
     c70:	80 7e       	andi	r24, 0xE0	; 224
     c72:	8c 93       	st	X, r24
	ADMUX|=LOC_Channel;              //number of channel by user
     c74:	a7 e2       	ldi	r26, 0x27	; 39
     c76:	b0 e0       	ldi	r27, 0x00	; 0
     c78:	e7 e2       	ldi	r30, 0x27	; 39
     c7a:	f0 e0       	ldi	r31, 0x00	; 0
     c7c:	90 81       	ld	r25, Z
     c7e:	89 81       	ldd	r24, Y+1	; 0x01
     c80:	89 2b       	or	r24, r25
     c82:	8c 93       	st	X, r24

	//SET_BIT(ADCSRA,ADIE);              //enable intruppt

	SET_BIT(ADCSRA,ADSC);           //Start Conversion
     c84:	a6 e2       	ldi	r26, 0x26	; 38
     c86:	b0 e0       	ldi	r27, 0x00	; 0
     c88:	e6 e2       	ldi	r30, 0x26	; 38
     c8a:	f0 e0       	ldi	r31, 0x00	; 0
     c8c:	80 81       	ld	r24, Z
     c8e:	80 64       	ori	r24, 0x40	; 64
     c90:	8c 93       	st	X, r24

}
     c92:	0f 90       	pop	r0
     c94:	cf 91       	pop	r28
     c96:	df 91       	pop	r29
     c98:	08 95       	ret

00000c9a <ADC_VidEnableInt>:

void ADC_VidEnableInt(void)
{
     c9a:	df 93       	push	r29
     c9c:	cf 93       	push	r28
     c9e:	cd b7       	in	r28, 0x3d	; 61
     ca0:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADCSRA,ADIE);              //enable intruppt
     ca2:	a6 e2       	ldi	r26, 0x26	; 38
     ca4:	b0 e0       	ldi	r27, 0x00	; 0
     ca6:	e6 e2       	ldi	r30, 0x26	; 38
     ca8:	f0 e0       	ldi	r31, 0x00	; 0
     caa:	80 81       	ld	r24, Z
     cac:	88 60       	ori	r24, 0x08	; 8
     cae:	8c 93       	st	X, r24
	}
     cb0:	cf 91       	pop	r28
     cb2:	df 91       	pop	r29
     cb4:	08 95       	ret

00000cb6 <__vector_16>:

ISR(ADC_VECT)
{
     cb6:	1f 92       	push	r1
     cb8:	0f 92       	push	r0
     cba:	0f b6       	in	r0, 0x3f	; 63
     cbc:	0f 92       	push	r0
     cbe:	11 24       	eor	r1, r1
     cc0:	2f 93       	push	r18
     cc2:	3f 93       	push	r19
     cc4:	4f 93       	push	r20
     cc6:	5f 93       	push	r21
     cc8:	6f 93       	push	r22
     cca:	7f 93       	push	r23
     ccc:	8f 93       	push	r24
     cce:	9f 93       	push	r25
     cd0:	af 93       	push	r26
     cd2:	bf 93       	push	r27
     cd4:	ef 93       	push	r30
     cd6:	ff 93       	push	r31
     cd8:	df 93       	push	r29
     cda:	cf 93       	push	r28
     cdc:	00 d0       	rcall	.+0      	; 0xcde <__vector_16+0x28>
     cde:	cd b7       	in	r28, 0x3d	; 61
     ce0:	de b7       	in	r29, 0x3e	; 62

	DIO_VidSetPinValue(PORTB,PIN7,0);
     ce2:	81 e0       	ldi	r24, 0x01	; 1
     ce4:	67 e0       	ldi	r22, 0x07	; 7
     ce6:	40 e0       	ldi	r20, 0x00	; 0
     ce8:	0e 94 29 08 	call	0x1052	; 0x1052 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(PORTB,PIN1,0);
     cec:	81 e0       	ldi	r24, 0x01	; 1
     cee:	61 e0       	ldi	r22, 0x01	; 1
     cf0:	40 e0       	ldi	r20, 0x00	; 0
     cf2:	0e 94 29 08 	call	0x1052	; 0x1052 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(PORTB,PIN0,0);
     cf6:	81 e0       	ldi	r24, 0x01	; 1
     cf8:	60 e0       	ldi	r22, 0x00	; 0
     cfa:	40 e0       	ldi	r20, 0x00	; 0
     cfc:	0e 94 29 08 	call	0x1052	; 0x1052 <DIO_VidSetPinValue>

	u16 Analog_value=0;
     d00:	1a 82       	std	Y+2, r1	; 0x02
     d02:	19 82       	std	Y+1, r1	; 0x01
	Analog_value=((ADC*5000UL)/1024);
     d04:	e4 e2       	ldi	r30, 0x24	; 36
     d06:	f0 e0       	ldi	r31, 0x00	; 0
     d08:	80 81       	ld	r24, Z
     d0a:	91 81       	ldd	r25, Z+1	; 0x01
     d0c:	cc 01       	movw	r24, r24
     d0e:	a0 e0       	ldi	r26, 0x00	; 0
     d10:	b0 e0       	ldi	r27, 0x00	; 0
     d12:	28 e8       	ldi	r18, 0x88	; 136
     d14:	33 e1       	ldi	r19, 0x13	; 19
     d16:	40 e0       	ldi	r20, 0x00	; 0
     d18:	50 e0       	ldi	r21, 0x00	; 0
     d1a:	bc 01       	movw	r22, r24
     d1c:	cd 01       	movw	r24, r26
     d1e:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <__mulsi3>
     d22:	dc 01       	movw	r26, r24
     d24:	cb 01       	movw	r24, r22
     d26:	07 2e       	mov	r0, r23
     d28:	7a e0       	ldi	r23, 0x0A	; 10
     d2a:	b6 95       	lsr	r27
     d2c:	a7 95       	ror	r26
     d2e:	97 95       	ror	r25
     d30:	87 95       	ror	r24
     d32:	7a 95       	dec	r23
     d34:	d1 f7       	brne	.-12     	; 0xd2a <__vector_16+0x74>
     d36:	70 2d       	mov	r23, r0
     d38:	9a 83       	std	Y+2, r25	; 0x02
     d3a:	89 83       	std	Y+1, r24	; 0x01
	LCD_GoToPosition(1,0);
     d3c:	81 e0       	ldi	r24, 0x01	; 1
     d3e:	60 e0       	ldi	r22, 0x00	; 0
     d40:	0e 94 bd 12 	call	0x257a	; 0x257a <LCD_GoToPosition>
	LCD_VidDisp4Number(Analog_value);
     d44:	89 81       	ldd	r24, Y+1	; 0x01
     d46:	9a 81       	ldd	r25, Y+2	; 0x02
     d48:	cc 01       	movw	r24, r24
     d4a:	a0 e0       	ldi	r26, 0x00	; 0
     d4c:	b0 e0       	ldi	r27, 0x00	; 0
     d4e:	bc 01       	movw	r22, r24
     d50:	cd 01       	movw	r24, r26
     d52:	0e 94 e1 12 	call	0x25c2	; 0x25c2 <LCD_VidDisp4Number>


	if ((Analog_value <= 400) )
     d56:	89 81       	ldd	r24, Y+1	; 0x01
     d58:	9a 81       	ldd	r25, Y+2	; 0x02
     d5a:	21 e0       	ldi	r18, 0x01	; 1
     d5c:	81 39       	cpi	r24, 0x91	; 145
     d5e:	92 07       	cpc	r25, r18
     d60:	80 f4       	brcc	.+32     	; 0xd82 <__vector_16+0xcc>
			{
				DIO_VidSetPinValue(PORTB,PIN7,0);
     d62:	81 e0       	ldi	r24, 0x01	; 1
     d64:	67 e0       	ldi	r22, 0x07	; 7
     d66:	40 e0       	ldi	r20, 0x00	; 0
     d68:	0e 94 29 08 	call	0x1052	; 0x1052 <DIO_VidSetPinValue>
				DIO_VidSetPinValue(PORTB,PIN1,0);
     d6c:	81 e0       	ldi	r24, 0x01	; 1
     d6e:	61 e0       	ldi	r22, 0x01	; 1
     d70:	40 e0       	ldi	r20, 0x00	; 0
     d72:	0e 94 29 08 	call	0x1052	; 0x1052 <DIO_VidSetPinValue>
				DIO_VidSetPinValue(PORTB,PIN0,0);
     d76:	81 e0       	ldi	r24, 0x01	; 1
     d78:	60 e0       	ldi	r22, 0x00	; 0
     d7a:	40 e0       	ldi	r20, 0x00	; 0
     d7c:	0e 94 29 08 	call	0x1052	; 0x1052 <DIO_VidSetPinValue>
     d80:	53 c0       	rjmp	.+166    	; 0xe28 <__vector_16+0x172>
			}
	else if ((Analog_value > 400)&& (Analog_value <= 1200) )
     d82:	89 81       	ldd	r24, Y+1	; 0x01
     d84:	9a 81       	ldd	r25, Y+2	; 0x02
     d86:	21 e0       	ldi	r18, 0x01	; 1
     d88:	81 39       	cpi	r24, 0x91	; 145
     d8a:	92 07       	cpc	r25, r18
     d8c:	b0 f0       	brcs	.+44     	; 0xdba <__vector_16+0x104>
     d8e:	89 81       	ldd	r24, Y+1	; 0x01
     d90:	9a 81       	ldd	r25, Y+2	; 0x02
     d92:	24 e0       	ldi	r18, 0x04	; 4
     d94:	81 3b       	cpi	r24, 0xB1	; 177
     d96:	92 07       	cpc	r25, r18
     d98:	80 f4       	brcc	.+32     	; 0xdba <__vector_16+0x104>
	{
		DIO_VidSetPinValue(PORTB,PIN7,0);
     d9a:	81 e0       	ldi	r24, 0x01	; 1
     d9c:	67 e0       	ldi	r22, 0x07	; 7
     d9e:	40 e0       	ldi	r20, 0x00	; 0
     da0:	0e 94 29 08 	call	0x1052	; 0x1052 <DIO_VidSetPinValue>
		DIO_VidSetPinValue(PORTB,PIN1,0);
     da4:	81 e0       	ldi	r24, 0x01	; 1
     da6:	61 e0       	ldi	r22, 0x01	; 1
     da8:	40 e0       	ldi	r20, 0x00	; 0
     daa:	0e 94 29 08 	call	0x1052	; 0x1052 <DIO_VidSetPinValue>
		DIO_VidSetPinValue(PORTB,PIN0,1);
     dae:	81 e0       	ldi	r24, 0x01	; 1
     db0:	60 e0       	ldi	r22, 0x00	; 0
     db2:	41 e0       	ldi	r20, 0x01	; 1
     db4:	0e 94 29 08 	call	0x1052	; 0x1052 <DIO_VidSetPinValue>
     db8:	37 c0       	rjmp	.+110    	; 0xe28 <__vector_16+0x172>
	}
	else if ((Analog_value > 1200)&& (Analog_value <= 2500))
     dba:	89 81       	ldd	r24, Y+1	; 0x01
     dbc:	9a 81       	ldd	r25, Y+2	; 0x02
     dbe:	24 e0       	ldi	r18, 0x04	; 4
     dc0:	81 3b       	cpi	r24, 0xB1	; 177
     dc2:	92 07       	cpc	r25, r18
     dc4:	b0 f0       	brcs	.+44     	; 0xdf2 <__vector_16+0x13c>
     dc6:	89 81       	ldd	r24, Y+1	; 0x01
     dc8:	9a 81       	ldd	r25, Y+2	; 0x02
     dca:	29 e0       	ldi	r18, 0x09	; 9
     dcc:	85 3c       	cpi	r24, 0xC5	; 197
     dce:	92 07       	cpc	r25, r18
     dd0:	80 f4       	brcc	.+32     	; 0xdf2 <__vector_16+0x13c>
	{
		DIO_VidSetPinValue(PORTB,PIN7,0);
     dd2:	81 e0       	ldi	r24, 0x01	; 1
     dd4:	67 e0       	ldi	r22, 0x07	; 7
     dd6:	40 e0       	ldi	r20, 0x00	; 0
     dd8:	0e 94 29 08 	call	0x1052	; 0x1052 <DIO_VidSetPinValue>
		DIO_VidSetPinValue(PORTB,PIN0,0);
     ddc:	81 e0       	ldi	r24, 0x01	; 1
     dde:	60 e0       	ldi	r22, 0x00	; 0
     de0:	40 e0       	ldi	r20, 0x00	; 0
     de2:	0e 94 29 08 	call	0x1052	; 0x1052 <DIO_VidSetPinValue>
		DIO_VidSetPinValue(PORTB,PIN1,1);
     de6:	81 e0       	ldi	r24, 0x01	; 1
     de8:	61 e0       	ldi	r22, 0x01	; 1
     dea:	41 e0       	ldi	r20, 0x01	; 1
     dec:	0e 94 29 08 	call	0x1052	; 0x1052 <DIO_VidSetPinValue>
     df0:	1b c0       	rjmp	.+54     	; 0xe28 <__vector_16+0x172>
	}

	else if ((Analog_value > 2500)&& (Analog_value <5000))
     df2:	89 81       	ldd	r24, Y+1	; 0x01
     df4:	9a 81       	ldd	r25, Y+2	; 0x02
     df6:	29 e0       	ldi	r18, 0x09	; 9
     df8:	85 3c       	cpi	r24, 0xC5	; 197
     dfa:	92 07       	cpc	r25, r18
     dfc:	a8 f0       	brcs	.+42     	; 0xe28 <__vector_16+0x172>
     dfe:	89 81       	ldd	r24, Y+1	; 0x01
     e00:	9a 81       	ldd	r25, Y+2	; 0x02
     e02:	23 e1       	ldi	r18, 0x13	; 19
     e04:	88 38       	cpi	r24, 0x88	; 136
     e06:	92 07       	cpc	r25, r18
     e08:	78 f4       	brcc	.+30     	; 0xe28 <__vector_16+0x172>
	{
		DIO_VidSetPinValue(PORTB,PIN7,1);
     e0a:	81 e0       	ldi	r24, 0x01	; 1
     e0c:	67 e0       	ldi	r22, 0x07	; 7
     e0e:	41 e0       	ldi	r20, 0x01	; 1
     e10:	0e 94 29 08 	call	0x1052	; 0x1052 <DIO_VidSetPinValue>
		DIO_VidSetPinValue(PORTB,PIN0,0);
     e14:	81 e0       	ldi	r24, 0x01	; 1
     e16:	60 e0       	ldi	r22, 0x00	; 0
     e18:	40 e0       	ldi	r20, 0x00	; 0
     e1a:	0e 94 29 08 	call	0x1052	; 0x1052 <DIO_VidSetPinValue>
		DIO_VidSetPinValue(PORTB,PIN1,0);
     e1e:	81 e0       	ldi	r24, 0x01	; 1
     e20:	61 e0       	ldi	r22, 0x01	; 1
     e22:	40 e0       	ldi	r20, 0x00	; 0
     e24:	0e 94 29 08 	call	0x1052	; 0x1052 <DIO_VidSetPinValue>
	}
}
     e28:	0f 90       	pop	r0
     e2a:	0f 90       	pop	r0
     e2c:	cf 91       	pop	r28
     e2e:	df 91       	pop	r29
     e30:	ff 91       	pop	r31
     e32:	ef 91       	pop	r30
     e34:	bf 91       	pop	r27
     e36:	af 91       	pop	r26
     e38:	9f 91       	pop	r25
     e3a:	8f 91       	pop	r24
     e3c:	7f 91       	pop	r23
     e3e:	6f 91       	pop	r22
     e40:	5f 91       	pop	r21
     e42:	4f 91       	pop	r20
     e44:	3f 91       	pop	r19
     e46:	2f 91       	pop	r18
     e48:	0f 90       	pop	r0
     e4a:	0f be       	out	0x3f, r0	; 63
     e4c:	0f 90       	pop	r0
     e4e:	1f 90       	pop	r1
     e50:	18 95       	reti

00000e52 <DIO_VidSetPinDirection>:
#include "STD_TYPES.h"
#include "DIO_Register.h"
#include "BIT_Math.h"

void DIO_VidSetPinDirection	( u8 LOC_u8Port, u8 LOC_u8Pin, u8 LOC_u8State)
{
     e52:	df 93       	push	r29
     e54:	cf 93       	push	r28
     e56:	cd b7       	in	r28, 0x3d	; 61
     e58:	de b7       	in	r29, 0x3e	; 62
     e5a:	27 97       	sbiw	r28, 0x07	; 7
     e5c:	0f b6       	in	r0, 0x3f	; 63
     e5e:	f8 94       	cli
     e60:	de bf       	out	0x3e, r29	; 62
     e62:	0f be       	out	0x3f, r0	; 63
     e64:	cd bf       	out	0x3d, r28	; 61
     e66:	89 83       	std	Y+1, r24	; 0x01
     e68:	6a 83       	std	Y+2, r22	; 0x02
     e6a:	4b 83       	std	Y+3, r20	; 0x03
	if ( OUTPUT==LOC_u8State)
     e6c:	8b 81       	ldd	r24, Y+3	; 0x03
     e6e:	81 30       	cpi	r24, 0x01	; 1
     e70:	09 f0       	breq	.+2      	; 0xe74 <DIO_VidSetPinDirection+0x22>
     e72:	6f c0       	rjmp	.+222    	; 0xf52 <DIO_VidSetPinDirection+0x100>
	{
		switch (LOC_u8Port)
     e74:	89 81       	ldd	r24, Y+1	; 0x01
     e76:	28 2f       	mov	r18, r24
     e78:	30 e0       	ldi	r19, 0x00	; 0
     e7a:	3f 83       	std	Y+7, r19	; 0x07
     e7c:	2e 83       	std	Y+6, r18	; 0x06
     e7e:	8e 81       	ldd	r24, Y+6	; 0x06
     e80:	9f 81       	ldd	r25, Y+7	; 0x07
     e82:	81 30       	cpi	r24, 0x01	; 1
     e84:	91 05       	cpc	r25, r1
     e86:	49 f1       	breq	.+82     	; 0xeda <DIO_VidSetPinDirection+0x88>
     e88:	2e 81       	ldd	r18, Y+6	; 0x06
     e8a:	3f 81       	ldd	r19, Y+7	; 0x07
     e8c:	22 30       	cpi	r18, 0x02	; 2
     e8e:	31 05       	cpc	r19, r1
     e90:	2c f4       	brge	.+10     	; 0xe9c <DIO_VidSetPinDirection+0x4a>
     e92:	8e 81       	ldd	r24, Y+6	; 0x06
     e94:	9f 81       	ldd	r25, Y+7	; 0x07
     e96:	00 97       	sbiw	r24, 0x00	; 0
     e98:	61 f0       	breq	.+24     	; 0xeb2 <DIO_VidSetPinDirection+0x60>
     e9a:	d2 c0       	rjmp	.+420    	; 0x1040 <DIO_VidSetPinDirection+0x1ee>
     e9c:	2e 81       	ldd	r18, Y+6	; 0x06
     e9e:	3f 81       	ldd	r19, Y+7	; 0x07
     ea0:	22 30       	cpi	r18, 0x02	; 2
     ea2:	31 05       	cpc	r19, r1
     ea4:	71 f1       	breq	.+92     	; 0xf02 <DIO_VidSetPinDirection+0xb0>
     ea6:	8e 81       	ldd	r24, Y+6	; 0x06
     ea8:	9f 81       	ldd	r25, Y+7	; 0x07
     eaa:	83 30       	cpi	r24, 0x03	; 3
     eac:	91 05       	cpc	r25, r1
     eae:	e9 f1       	breq	.+122    	; 0xf2a <DIO_VidSetPinDirection+0xd8>
     eb0:	c7 c0       	rjmp	.+398    	; 0x1040 <DIO_VidSetPinDirection+0x1ee>
		{
		case 0: SET_BIT(DDRA, LOC_u8Pin); break;
     eb2:	aa e3       	ldi	r26, 0x3A	; 58
     eb4:	b0 e0       	ldi	r27, 0x00	; 0
     eb6:	ea e3       	ldi	r30, 0x3A	; 58
     eb8:	f0 e0       	ldi	r31, 0x00	; 0
     eba:	80 81       	ld	r24, Z
     ebc:	48 2f       	mov	r20, r24
     ebe:	8a 81       	ldd	r24, Y+2	; 0x02
     ec0:	28 2f       	mov	r18, r24
     ec2:	30 e0       	ldi	r19, 0x00	; 0
     ec4:	81 e0       	ldi	r24, 0x01	; 1
     ec6:	90 e0       	ldi	r25, 0x00	; 0
     ec8:	02 2e       	mov	r0, r18
     eca:	02 c0       	rjmp	.+4      	; 0xed0 <DIO_VidSetPinDirection+0x7e>
     ecc:	88 0f       	add	r24, r24
     ece:	99 1f       	adc	r25, r25
     ed0:	0a 94       	dec	r0
     ed2:	e2 f7       	brpl	.-8      	; 0xecc <DIO_VidSetPinDirection+0x7a>
     ed4:	84 2b       	or	r24, r20
     ed6:	8c 93       	st	X, r24
     ed8:	b3 c0       	rjmp	.+358    	; 0x1040 <DIO_VidSetPinDirection+0x1ee>
		case 1: SET_BIT(DDRB, LOC_u8Pin); break;
     eda:	a7 e3       	ldi	r26, 0x37	; 55
     edc:	b0 e0       	ldi	r27, 0x00	; 0
     ede:	e7 e3       	ldi	r30, 0x37	; 55
     ee0:	f0 e0       	ldi	r31, 0x00	; 0
     ee2:	80 81       	ld	r24, Z
     ee4:	48 2f       	mov	r20, r24
     ee6:	8a 81       	ldd	r24, Y+2	; 0x02
     ee8:	28 2f       	mov	r18, r24
     eea:	30 e0       	ldi	r19, 0x00	; 0
     eec:	81 e0       	ldi	r24, 0x01	; 1
     eee:	90 e0       	ldi	r25, 0x00	; 0
     ef0:	02 2e       	mov	r0, r18
     ef2:	02 c0       	rjmp	.+4      	; 0xef8 <DIO_VidSetPinDirection+0xa6>
     ef4:	88 0f       	add	r24, r24
     ef6:	99 1f       	adc	r25, r25
     ef8:	0a 94       	dec	r0
     efa:	e2 f7       	brpl	.-8      	; 0xef4 <DIO_VidSetPinDirection+0xa2>
     efc:	84 2b       	or	r24, r20
     efe:	8c 93       	st	X, r24
     f00:	9f c0       	rjmp	.+318    	; 0x1040 <DIO_VidSetPinDirection+0x1ee>
		case 2: SET_BIT(DDRC, LOC_u8Pin); break;
     f02:	a4 e3       	ldi	r26, 0x34	; 52
     f04:	b0 e0       	ldi	r27, 0x00	; 0
     f06:	e4 e3       	ldi	r30, 0x34	; 52
     f08:	f0 e0       	ldi	r31, 0x00	; 0
     f0a:	80 81       	ld	r24, Z
     f0c:	48 2f       	mov	r20, r24
     f0e:	8a 81       	ldd	r24, Y+2	; 0x02
     f10:	28 2f       	mov	r18, r24
     f12:	30 e0       	ldi	r19, 0x00	; 0
     f14:	81 e0       	ldi	r24, 0x01	; 1
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	02 2e       	mov	r0, r18
     f1a:	02 c0       	rjmp	.+4      	; 0xf20 <DIO_VidSetPinDirection+0xce>
     f1c:	88 0f       	add	r24, r24
     f1e:	99 1f       	adc	r25, r25
     f20:	0a 94       	dec	r0
     f22:	e2 f7       	brpl	.-8      	; 0xf1c <DIO_VidSetPinDirection+0xca>
     f24:	84 2b       	or	r24, r20
     f26:	8c 93       	st	X, r24
     f28:	8b c0       	rjmp	.+278    	; 0x1040 <DIO_VidSetPinDirection+0x1ee>
		case 3: SET_BIT(DDRD, LOC_u8Pin); break;
     f2a:	a1 e3       	ldi	r26, 0x31	; 49
     f2c:	b0 e0       	ldi	r27, 0x00	; 0
     f2e:	e1 e3       	ldi	r30, 0x31	; 49
     f30:	f0 e0       	ldi	r31, 0x00	; 0
     f32:	80 81       	ld	r24, Z
     f34:	48 2f       	mov	r20, r24
     f36:	8a 81       	ldd	r24, Y+2	; 0x02
     f38:	28 2f       	mov	r18, r24
     f3a:	30 e0       	ldi	r19, 0x00	; 0
     f3c:	81 e0       	ldi	r24, 0x01	; 1
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	02 2e       	mov	r0, r18
     f42:	02 c0       	rjmp	.+4      	; 0xf48 <DIO_VidSetPinDirection+0xf6>
     f44:	88 0f       	add	r24, r24
     f46:	99 1f       	adc	r25, r25
     f48:	0a 94       	dec	r0
     f4a:	e2 f7       	brpl	.-8      	; 0xf44 <DIO_VidSetPinDirection+0xf2>
     f4c:	84 2b       	or	r24, r20
     f4e:	8c 93       	st	X, r24
     f50:	77 c0       	rjmp	.+238    	; 0x1040 <DIO_VidSetPinDirection+0x1ee>
		}
	}
	else if (INPUT==LOC_u8State)
     f52:	8b 81       	ldd	r24, Y+3	; 0x03
     f54:	88 23       	and	r24, r24
     f56:	09 f0       	breq	.+2      	; 0xf5a <DIO_VidSetPinDirection+0x108>
     f58:	73 c0       	rjmp	.+230    	; 0x1040 <DIO_VidSetPinDirection+0x1ee>
	{
		switch (LOC_u8Port)
     f5a:	89 81       	ldd	r24, Y+1	; 0x01
     f5c:	28 2f       	mov	r18, r24
     f5e:	30 e0       	ldi	r19, 0x00	; 0
     f60:	3d 83       	std	Y+5, r19	; 0x05
     f62:	2c 83       	std	Y+4, r18	; 0x04
     f64:	8c 81       	ldd	r24, Y+4	; 0x04
     f66:	9d 81       	ldd	r25, Y+5	; 0x05
     f68:	81 30       	cpi	r24, 0x01	; 1
     f6a:	91 05       	cpc	r25, r1
     f6c:	59 f1       	breq	.+86     	; 0xfc4 <DIO_VidSetPinDirection+0x172>
     f6e:	2c 81       	ldd	r18, Y+4	; 0x04
     f70:	3d 81       	ldd	r19, Y+5	; 0x05
     f72:	22 30       	cpi	r18, 0x02	; 2
     f74:	31 05       	cpc	r19, r1
     f76:	2c f4       	brge	.+10     	; 0xf82 <DIO_VidSetPinDirection+0x130>
     f78:	8c 81       	ldd	r24, Y+4	; 0x04
     f7a:	9d 81       	ldd	r25, Y+5	; 0x05
     f7c:	00 97       	sbiw	r24, 0x00	; 0
     f7e:	69 f0       	breq	.+26     	; 0xf9a <DIO_VidSetPinDirection+0x148>
     f80:	5f c0       	rjmp	.+190    	; 0x1040 <DIO_VidSetPinDirection+0x1ee>
     f82:	2c 81       	ldd	r18, Y+4	; 0x04
     f84:	3d 81       	ldd	r19, Y+5	; 0x05
     f86:	22 30       	cpi	r18, 0x02	; 2
     f88:	31 05       	cpc	r19, r1
     f8a:	89 f1       	breq	.+98     	; 0xfee <DIO_VidSetPinDirection+0x19c>
     f8c:	8c 81       	ldd	r24, Y+4	; 0x04
     f8e:	9d 81       	ldd	r25, Y+5	; 0x05
     f90:	83 30       	cpi	r24, 0x03	; 3
     f92:	91 05       	cpc	r25, r1
     f94:	09 f4       	brne	.+2      	; 0xf98 <DIO_VidSetPinDirection+0x146>
     f96:	40 c0       	rjmp	.+128    	; 0x1018 <DIO_VidSetPinDirection+0x1c6>
     f98:	53 c0       	rjmp	.+166    	; 0x1040 <DIO_VidSetPinDirection+0x1ee>
		{
		case 0: CLR_BIT(DDRA, LOC_u8Pin); break;
     f9a:	aa e3       	ldi	r26, 0x3A	; 58
     f9c:	b0 e0       	ldi	r27, 0x00	; 0
     f9e:	ea e3       	ldi	r30, 0x3A	; 58
     fa0:	f0 e0       	ldi	r31, 0x00	; 0
     fa2:	80 81       	ld	r24, Z
     fa4:	48 2f       	mov	r20, r24
     fa6:	8a 81       	ldd	r24, Y+2	; 0x02
     fa8:	28 2f       	mov	r18, r24
     faa:	30 e0       	ldi	r19, 0x00	; 0
     fac:	81 e0       	ldi	r24, 0x01	; 1
     fae:	90 e0       	ldi	r25, 0x00	; 0
     fb0:	02 2e       	mov	r0, r18
     fb2:	02 c0       	rjmp	.+4      	; 0xfb8 <DIO_VidSetPinDirection+0x166>
     fb4:	88 0f       	add	r24, r24
     fb6:	99 1f       	adc	r25, r25
     fb8:	0a 94       	dec	r0
     fba:	e2 f7       	brpl	.-8      	; 0xfb4 <DIO_VidSetPinDirection+0x162>
     fbc:	80 95       	com	r24
     fbe:	84 23       	and	r24, r20
     fc0:	8c 93       	st	X, r24
     fc2:	3e c0       	rjmp	.+124    	; 0x1040 <DIO_VidSetPinDirection+0x1ee>
		case 1: CLR_BIT(DDRB, LOC_u8Pin); break;
     fc4:	a7 e3       	ldi	r26, 0x37	; 55
     fc6:	b0 e0       	ldi	r27, 0x00	; 0
     fc8:	e7 e3       	ldi	r30, 0x37	; 55
     fca:	f0 e0       	ldi	r31, 0x00	; 0
     fcc:	80 81       	ld	r24, Z
     fce:	48 2f       	mov	r20, r24
     fd0:	8a 81       	ldd	r24, Y+2	; 0x02
     fd2:	28 2f       	mov	r18, r24
     fd4:	30 e0       	ldi	r19, 0x00	; 0
     fd6:	81 e0       	ldi	r24, 0x01	; 1
     fd8:	90 e0       	ldi	r25, 0x00	; 0
     fda:	02 2e       	mov	r0, r18
     fdc:	02 c0       	rjmp	.+4      	; 0xfe2 <DIO_VidSetPinDirection+0x190>
     fde:	88 0f       	add	r24, r24
     fe0:	99 1f       	adc	r25, r25
     fe2:	0a 94       	dec	r0
     fe4:	e2 f7       	brpl	.-8      	; 0xfde <DIO_VidSetPinDirection+0x18c>
     fe6:	80 95       	com	r24
     fe8:	84 23       	and	r24, r20
     fea:	8c 93       	st	X, r24
     fec:	29 c0       	rjmp	.+82     	; 0x1040 <DIO_VidSetPinDirection+0x1ee>
		case 2: CLR_BIT(DDRC, LOC_u8Pin); break;
     fee:	a4 e3       	ldi	r26, 0x34	; 52
     ff0:	b0 e0       	ldi	r27, 0x00	; 0
     ff2:	e4 e3       	ldi	r30, 0x34	; 52
     ff4:	f0 e0       	ldi	r31, 0x00	; 0
     ff6:	80 81       	ld	r24, Z
     ff8:	48 2f       	mov	r20, r24
     ffa:	8a 81       	ldd	r24, Y+2	; 0x02
     ffc:	28 2f       	mov	r18, r24
     ffe:	30 e0       	ldi	r19, 0x00	; 0
    1000:	81 e0       	ldi	r24, 0x01	; 1
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	02 2e       	mov	r0, r18
    1006:	02 c0       	rjmp	.+4      	; 0x100c <DIO_VidSetPinDirection+0x1ba>
    1008:	88 0f       	add	r24, r24
    100a:	99 1f       	adc	r25, r25
    100c:	0a 94       	dec	r0
    100e:	e2 f7       	brpl	.-8      	; 0x1008 <DIO_VidSetPinDirection+0x1b6>
    1010:	80 95       	com	r24
    1012:	84 23       	and	r24, r20
    1014:	8c 93       	st	X, r24
    1016:	14 c0       	rjmp	.+40     	; 0x1040 <DIO_VidSetPinDirection+0x1ee>
		case 3: CLR_BIT(DDRD, LOC_u8Pin); break;
    1018:	a1 e3       	ldi	r26, 0x31	; 49
    101a:	b0 e0       	ldi	r27, 0x00	; 0
    101c:	e1 e3       	ldi	r30, 0x31	; 49
    101e:	f0 e0       	ldi	r31, 0x00	; 0
    1020:	80 81       	ld	r24, Z
    1022:	48 2f       	mov	r20, r24
    1024:	8a 81       	ldd	r24, Y+2	; 0x02
    1026:	28 2f       	mov	r18, r24
    1028:	30 e0       	ldi	r19, 0x00	; 0
    102a:	81 e0       	ldi	r24, 0x01	; 1
    102c:	90 e0       	ldi	r25, 0x00	; 0
    102e:	02 2e       	mov	r0, r18
    1030:	02 c0       	rjmp	.+4      	; 0x1036 <DIO_VidSetPinDirection+0x1e4>
    1032:	88 0f       	add	r24, r24
    1034:	99 1f       	adc	r25, r25
    1036:	0a 94       	dec	r0
    1038:	e2 f7       	brpl	.-8      	; 0x1032 <DIO_VidSetPinDirection+0x1e0>
    103a:	80 95       	com	r24
    103c:	84 23       	and	r24, r20
    103e:	8c 93       	st	X, r24
		}
	}
}
    1040:	27 96       	adiw	r28, 0x07	; 7
    1042:	0f b6       	in	r0, 0x3f	; 63
    1044:	f8 94       	cli
    1046:	de bf       	out	0x3e, r29	; 62
    1048:	0f be       	out	0x3f, r0	; 63
    104a:	cd bf       	out	0x3d, r28	; 61
    104c:	cf 91       	pop	r28
    104e:	df 91       	pop	r29
    1050:	08 95       	ret

00001052 <DIO_VidSetPinValue>:

void DIO_VidSetPinValue	( u8 LOC_u8Port, u8 LOC_u8Pin, u8 LOC_u8Value)
{
    1052:	df 93       	push	r29
    1054:	cf 93       	push	r28
    1056:	cd b7       	in	r28, 0x3d	; 61
    1058:	de b7       	in	r29, 0x3e	; 62
    105a:	27 97       	sbiw	r28, 0x07	; 7
    105c:	0f b6       	in	r0, 0x3f	; 63
    105e:	f8 94       	cli
    1060:	de bf       	out	0x3e, r29	; 62
    1062:	0f be       	out	0x3f, r0	; 63
    1064:	cd bf       	out	0x3d, r28	; 61
    1066:	89 83       	std	Y+1, r24	; 0x01
    1068:	6a 83       	std	Y+2, r22	; 0x02
    106a:	4b 83       	std	Y+3, r20	; 0x03
	if ( 1==LOC_u8Value)
    106c:	8b 81       	ldd	r24, Y+3	; 0x03
    106e:	81 30       	cpi	r24, 0x01	; 1
    1070:	09 f0       	breq	.+2      	; 0x1074 <DIO_VidSetPinValue+0x22>
    1072:	6f c0       	rjmp	.+222    	; 0x1152 <DIO_VidSetPinValue+0x100>
	{
		switch (LOC_u8Port)
    1074:	89 81       	ldd	r24, Y+1	; 0x01
    1076:	28 2f       	mov	r18, r24
    1078:	30 e0       	ldi	r19, 0x00	; 0
    107a:	3f 83       	std	Y+7, r19	; 0x07
    107c:	2e 83       	std	Y+6, r18	; 0x06
    107e:	8e 81       	ldd	r24, Y+6	; 0x06
    1080:	9f 81       	ldd	r25, Y+7	; 0x07
    1082:	81 30       	cpi	r24, 0x01	; 1
    1084:	91 05       	cpc	r25, r1
    1086:	49 f1       	breq	.+82     	; 0x10da <DIO_VidSetPinValue+0x88>
    1088:	2e 81       	ldd	r18, Y+6	; 0x06
    108a:	3f 81       	ldd	r19, Y+7	; 0x07
    108c:	22 30       	cpi	r18, 0x02	; 2
    108e:	31 05       	cpc	r19, r1
    1090:	2c f4       	brge	.+10     	; 0x109c <DIO_VidSetPinValue+0x4a>
    1092:	8e 81       	ldd	r24, Y+6	; 0x06
    1094:	9f 81       	ldd	r25, Y+7	; 0x07
    1096:	00 97       	sbiw	r24, 0x00	; 0
    1098:	61 f0       	breq	.+24     	; 0x10b2 <DIO_VidSetPinValue+0x60>
    109a:	d2 c0       	rjmp	.+420    	; 0x1240 <DIO_VidSetPinValue+0x1ee>
    109c:	2e 81       	ldd	r18, Y+6	; 0x06
    109e:	3f 81       	ldd	r19, Y+7	; 0x07
    10a0:	22 30       	cpi	r18, 0x02	; 2
    10a2:	31 05       	cpc	r19, r1
    10a4:	71 f1       	breq	.+92     	; 0x1102 <DIO_VidSetPinValue+0xb0>
    10a6:	8e 81       	ldd	r24, Y+6	; 0x06
    10a8:	9f 81       	ldd	r25, Y+7	; 0x07
    10aa:	83 30       	cpi	r24, 0x03	; 3
    10ac:	91 05       	cpc	r25, r1
    10ae:	e9 f1       	breq	.+122    	; 0x112a <DIO_VidSetPinValue+0xd8>
    10b0:	c7 c0       	rjmp	.+398    	; 0x1240 <DIO_VidSetPinValue+0x1ee>
		{
		case 0: SET_BIT(PORTA_1, LOC_u8Pin); break;
    10b2:	ab e3       	ldi	r26, 0x3B	; 59
    10b4:	b0 e0       	ldi	r27, 0x00	; 0
    10b6:	eb e3       	ldi	r30, 0x3B	; 59
    10b8:	f0 e0       	ldi	r31, 0x00	; 0
    10ba:	80 81       	ld	r24, Z
    10bc:	48 2f       	mov	r20, r24
    10be:	8a 81       	ldd	r24, Y+2	; 0x02
    10c0:	28 2f       	mov	r18, r24
    10c2:	30 e0       	ldi	r19, 0x00	; 0
    10c4:	81 e0       	ldi	r24, 0x01	; 1
    10c6:	90 e0       	ldi	r25, 0x00	; 0
    10c8:	02 2e       	mov	r0, r18
    10ca:	02 c0       	rjmp	.+4      	; 0x10d0 <DIO_VidSetPinValue+0x7e>
    10cc:	88 0f       	add	r24, r24
    10ce:	99 1f       	adc	r25, r25
    10d0:	0a 94       	dec	r0
    10d2:	e2 f7       	brpl	.-8      	; 0x10cc <DIO_VidSetPinValue+0x7a>
    10d4:	84 2b       	or	r24, r20
    10d6:	8c 93       	st	X, r24
    10d8:	b3 c0       	rjmp	.+358    	; 0x1240 <DIO_VidSetPinValue+0x1ee>
		case 1: SET_BIT(PORTB_1, LOC_u8Pin); break;
    10da:	a8 e3       	ldi	r26, 0x38	; 56
    10dc:	b0 e0       	ldi	r27, 0x00	; 0
    10de:	e8 e3       	ldi	r30, 0x38	; 56
    10e0:	f0 e0       	ldi	r31, 0x00	; 0
    10e2:	80 81       	ld	r24, Z
    10e4:	48 2f       	mov	r20, r24
    10e6:	8a 81       	ldd	r24, Y+2	; 0x02
    10e8:	28 2f       	mov	r18, r24
    10ea:	30 e0       	ldi	r19, 0x00	; 0
    10ec:	81 e0       	ldi	r24, 0x01	; 1
    10ee:	90 e0       	ldi	r25, 0x00	; 0
    10f0:	02 2e       	mov	r0, r18
    10f2:	02 c0       	rjmp	.+4      	; 0x10f8 <DIO_VidSetPinValue+0xa6>
    10f4:	88 0f       	add	r24, r24
    10f6:	99 1f       	adc	r25, r25
    10f8:	0a 94       	dec	r0
    10fa:	e2 f7       	brpl	.-8      	; 0x10f4 <DIO_VidSetPinValue+0xa2>
    10fc:	84 2b       	or	r24, r20
    10fe:	8c 93       	st	X, r24
    1100:	9f c0       	rjmp	.+318    	; 0x1240 <DIO_VidSetPinValue+0x1ee>
		case 2: SET_BIT(PORTC_1, LOC_u8Pin); break;
    1102:	a5 e3       	ldi	r26, 0x35	; 53
    1104:	b0 e0       	ldi	r27, 0x00	; 0
    1106:	e5 e3       	ldi	r30, 0x35	; 53
    1108:	f0 e0       	ldi	r31, 0x00	; 0
    110a:	80 81       	ld	r24, Z
    110c:	48 2f       	mov	r20, r24
    110e:	8a 81       	ldd	r24, Y+2	; 0x02
    1110:	28 2f       	mov	r18, r24
    1112:	30 e0       	ldi	r19, 0x00	; 0
    1114:	81 e0       	ldi	r24, 0x01	; 1
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	02 2e       	mov	r0, r18
    111a:	02 c0       	rjmp	.+4      	; 0x1120 <DIO_VidSetPinValue+0xce>
    111c:	88 0f       	add	r24, r24
    111e:	99 1f       	adc	r25, r25
    1120:	0a 94       	dec	r0
    1122:	e2 f7       	brpl	.-8      	; 0x111c <DIO_VidSetPinValue+0xca>
    1124:	84 2b       	or	r24, r20
    1126:	8c 93       	st	X, r24
    1128:	8b c0       	rjmp	.+278    	; 0x1240 <DIO_VidSetPinValue+0x1ee>
		case 3: SET_BIT(PORTD_1, LOC_u8Pin); break;
    112a:	a2 e3       	ldi	r26, 0x32	; 50
    112c:	b0 e0       	ldi	r27, 0x00	; 0
    112e:	e2 e3       	ldi	r30, 0x32	; 50
    1130:	f0 e0       	ldi	r31, 0x00	; 0
    1132:	80 81       	ld	r24, Z
    1134:	48 2f       	mov	r20, r24
    1136:	8a 81       	ldd	r24, Y+2	; 0x02
    1138:	28 2f       	mov	r18, r24
    113a:	30 e0       	ldi	r19, 0x00	; 0
    113c:	81 e0       	ldi	r24, 0x01	; 1
    113e:	90 e0       	ldi	r25, 0x00	; 0
    1140:	02 2e       	mov	r0, r18
    1142:	02 c0       	rjmp	.+4      	; 0x1148 <DIO_VidSetPinValue+0xf6>
    1144:	88 0f       	add	r24, r24
    1146:	99 1f       	adc	r25, r25
    1148:	0a 94       	dec	r0
    114a:	e2 f7       	brpl	.-8      	; 0x1144 <DIO_VidSetPinValue+0xf2>
    114c:	84 2b       	or	r24, r20
    114e:	8c 93       	st	X, r24
    1150:	77 c0       	rjmp	.+238    	; 0x1240 <DIO_VidSetPinValue+0x1ee>
		}
	}
	else if (0==LOC_u8Value)
    1152:	8b 81       	ldd	r24, Y+3	; 0x03
    1154:	88 23       	and	r24, r24
    1156:	09 f0       	breq	.+2      	; 0x115a <DIO_VidSetPinValue+0x108>
    1158:	73 c0       	rjmp	.+230    	; 0x1240 <DIO_VidSetPinValue+0x1ee>
	{
		switch (LOC_u8Port)
    115a:	89 81       	ldd	r24, Y+1	; 0x01
    115c:	28 2f       	mov	r18, r24
    115e:	30 e0       	ldi	r19, 0x00	; 0
    1160:	3d 83       	std	Y+5, r19	; 0x05
    1162:	2c 83       	std	Y+4, r18	; 0x04
    1164:	8c 81       	ldd	r24, Y+4	; 0x04
    1166:	9d 81       	ldd	r25, Y+5	; 0x05
    1168:	81 30       	cpi	r24, 0x01	; 1
    116a:	91 05       	cpc	r25, r1
    116c:	59 f1       	breq	.+86     	; 0x11c4 <DIO_VidSetPinValue+0x172>
    116e:	2c 81       	ldd	r18, Y+4	; 0x04
    1170:	3d 81       	ldd	r19, Y+5	; 0x05
    1172:	22 30       	cpi	r18, 0x02	; 2
    1174:	31 05       	cpc	r19, r1
    1176:	2c f4       	brge	.+10     	; 0x1182 <DIO_VidSetPinValue+0x130>
    1178:	8c 81       	ldd	r24, Y+4	; 0x04
    117a:	9d 81       	ldd	r25, Y+5	; 0x05
    117c:	00 97       	sbiw	r24, 0x00	; 0
    117e:	69 f0       	breq	.+26     	; 0x119a <DIO_VidSetPinValue+0x148>
    1180:	5f c0       	rjmp	.+190    	; 0x1240 <DIO_VidSetPinValue+0x1ee>
    1182:	2c 81       	ldd	r18, Y+4	; 0x04
    1184:	3d 81       	ldd	r19, Y+5	; 0x05
    1186:	22 30       	cpi	r18, 0x02	; 2
    1188:	31 05       	cpc	r19, r1
    118a:	89 f1       	breq	.+98     	; 0x11ee <DIO_VidSetPinValue+0x19c>
    118c:	8c 81       	ldd	r24, Y+4	; 0x04
    118e:	9d 81       	ldd	r25, Y+5	; 0x05
    1190:	83 30       	cpi	r24, 0x03	; 3
    1192:	91 05       	cpc	r25, r1
    1194:	09 f4       	brne	.+2      	; 0x1198 <DIO_VidSetPinValue+0x146>
    1196:	40 c0       	rjmp	.+128    	; 0x1218 <DIO_VidSetPinValue+0x1c6>
    1198:	53 c0       	rjmp	.+166    	; 0x1240 <DIO_VidSetPinValue+0x1ee>
		{
		case 0: CLR_BIT(PORTA_1, LOC_u8Pin); break;
    119a:	ab e3       	ldi	r26, 0x3B	; 59
    119c:	b0 e0       	ldi	r27, 0x00	; 0
    119e:	eb e3       	ldi	r30, 0x3B	; 59
    11a0:	f0 e0       	ldi	r31, 0x00	; 0
    11a2:	80 81       	ld	r24, Z
    11a4:	48 2f       	mov	r20, r24
    11a6:	8a 81       	ldd	r24, Y+2	; 0x02
    11a8:	28 2f       	mov	r18, r24
    11aa:	30 e0       	ldi	r19, 0x00	; 0
    11ac:	81 e0       	ldi	r24, 0x01	; 1
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	02 2e       	mov	r0, r18
    11b2:	02 c0       	rjmp	.+4      	; 0x11b8 <DIO_VidSetPinValue+0x166>
    11b4:	88 0f       	add	r24, r24
    11b6:	99 1f       	adc	r25, r25
    11b8:	0a 94       	dec	r0
    11ba:	e2 f7       	brpl	.-8      	; 0x11b4 <DIO_VidSetPinValue+0x162>
    11bc:	80 95       	com	r24
    11be:	84 23       	and	r24, r20
    11c0:	8c 93       	st	X, r24
    11c2:	3e c0       	rjmp	.+124    	; 0x1240 <DIO_VidSetPinValue+0x1ee>
		case 1: CLR_BIT(PORTB_1, LOC_u8Pin); break;
    11c4:	a8 e3       	ldi	r26, 0x38	; 56
    11c6:	b0 e0       	ldi	r27, 0x00	; 0
    11c8:	e8 e3       	ldi	r30, 0x38	; 56
    11ca:	f0 e0       	ldi	r31, 0x00	; 0
    11cc:	80 81       	ld	r24, Z
    11ce:	48 2f       	mov	r20, r24
    11d0:	8a 81       	ldd	r24, Y+2	; 0x02
    11d2:	28 2f       	mov	r18, r24
    11d4:	30 e0       	ldi	r19, 0x00	; 0
    11d6:	81 e0       	ldi	r24, 0x01	; 1
    11d8:	90 e0       	ldi	r25, 0x00	; 0
    11da:	02 2e       	mov	r0, r18
    11dc:	02 c0       	rjmp	.+4      	; 0x11e2 <DIO_VidSetPinValue+0x190>
    11de:	88 0f       	add	r24, r24
    11e0:	99 1f       	adc	r25, r25
    11e2:	0a 94       	dec	r0
    11e4:	e2 f7       	brpl	.-8      	; 0x11de <DIO_VidSetPinValue+0x18c>
    11e6:	80 95       	com	r24
    11e8:	84 23       	and	r24, r20
    11ea:	8c 93       	st	X, r24
    11ec:	29 c0       	rjmp	.+82     	; 0x1240 <DIO_VidSetPinValue+0x1ee>
		case 2: CLR_BIT(PORTC_1, LOC_u8Pin); break;
    11ee:	a5 e3       	ldi	r26, 0x35	; 53
    11f0:	b0 e0       	ldi	r27, 0x00	; 0
    11f2:	e5 e3       	ldi	r30, 0x35	; 53
    11f4:	f0 e0       	ldi	r31, 0x00	; 0
    11f6:	80 81       	ld	r24, Z
    11f8:	48 2f       	mov	r20, r24
    11fa:	8a 81       	ldd	r24, Y+2	; 0x02
    11fc:	28 2f       	mov	r18, r24
    11fe:	30 e0       	ldi	r19, 0x00	; 0
    1200:	81 e0       	ldi	r24, 0x01	; 1
    1202:	90 e0       	ldi	r25, 0x00	; 0
    1204:	02 2e       	mov	r0, r18
    1206:	02 c0       	rjmp	.+4      	; 0x120c <DIO_VidSetPinValue+0x1ba>
    1208:	88 0f       	add	r24, r24
    120a:	99 1f       	adc	r25, r25
    120c:	0a 94       	dec	r0
    120e:	e2 f7       	brpl	.-8      	; 0x1208 <DIO_VidSetPinValue+0x1b6>
    1210:	80 95       	com	r24
    1212:	84 23       	and	r24, r20
    1214:	8c 93       	st	X, r24
    1216:	14 c0       	rjmp	.+40     	; 0x1240 <DIO_VidSetPinValue+0x1ee>
		case 3: CLR_BIT(PORTD_1, LOC_u8Pin); break;
    1218:	a2 e3       	ldi	r26, 0x32	; 50
    121a:	b0 e0       	ldi	r27, 0x00	; 0
    121c:	e2 e3       	ldi	r30, 0x32	; 50
    121e:	f0 e0       	ldi	r31, 0x00	; 0
    1220:	80 81       	ld	r24, Z
    1222:	48 2f       	mov	r20, r24
    1224:	8a 81       	ldd	r24, Y+2	; 0x02
    1226:	28 2f       	mov	r18, r24
    1228:	30 e0       	ldi	r19, 0x00	; 0
    122a:	81 e0       	ldi	r24, 0x01	; 1
    122c:	90 e0       	ldi	r25, 0x00	; 0
    122e:	02 2e       	mov	r0, r18
    1230:	02 c0       	rjmp	.+4      	; 0x1236 <DIO_VidSetPinValue+0x1e4>
    1232:	88 0f       	add	r24, r24
    1234:	99 1f       	adc	r25, r25
    1236:	0a 94       	dec	r0
    1238:	e2 f7       	brpl	.-8      	; 0x1232 <DIO_VidSetPinValue+0x1e0>
    123a:	80 95       	com	r24
    123c:	84 23       	and	r24, r20
    123e:	8c 93       	st	X, r24
		}
	}
}
    1240:	27 96       	adiw	r28, 0x07	; 7
    1242:	0f b6       	in	r0, 0x3f	; 63
    1244:	f8 94       	cli
    1246:	de bf       	out	0x3e, r29	; 62
    1248:	0f be       	out	0x3f, r0	; 63
    124a:	cd bf       	out	0x3d, r28	; 61
    124c:	cf 91       	pop	r28
    124e:	df 91       	pop	r29
    1250:	08 95       	ret

00001252 <DIO_VidSetPortDirection>:

void DIO_VidSetPortDirection	( u8 LOC_u8Port, u8 LOC_u8Value)
{
    1252:	df 93       	push	r29
    1254:	cf 93       	push	r28
    1256:	00 d0       	rcall	.+0      	; 0x1258 <DIO_VidSetPortDirection+0x6>
    1258:	00 d0       	rcall	.+0      	; 0x125a <DIO_VidSetPortDirection+0x8>
    125a:	cd b7       	in	r28, 0x3d	; 61
    125c:	de b7       	in	r29, 0x3e	; 62
    125e:	89 83       	std	Y+1, r24	; 0x01
    1260:	6a 83       	std	Y+2, r22	; 0x02
	switch (LOC_u8Port)
    1262:	89 81       	ldd	r24, Y+1	; 0x01
    1264:	28 2f       	mov	r18, r24
    1266:	30 e0       	ldi	r19, 0x00	; 0
    1268:	3c 83       	std	Y+4, r19	; 0x04
    126a:	2b 83       	std	Y+3, r18	; 0x03
    126c:	8b 81       	ldd	r24, Y+3	; 0x03
    126e:	9c 81       	ldd	r25, Y+4	; 0x04
    1270:	81 30       	cpi	r24, 0x01	; 1
    1272:	91 05       	cpc	r25, r1
    1274:	d1 f0       	breq	.+52     	; 0x12aa <DIO_VidSetPortDirection+0x58>
    1276:	2b 81       	ldd	r18, Y+3	; 0x03
    1278:	3c 81       	ldd	r19, Y+4	; 0x04
    127a:	22 30       	cpi	r18, 0x02	; 2
    127c:	31 05       	cpc	r19, r1
    127e:	2c f4       	brge	.+10     	; 0x128a <DIO_VidSetPortDirection+0x38>
    1280:	8b 81       	ldd	r24, Y+3	; 0x03
    1282:	9c 81       	ldd	r25, Y+4	; 0x04
    1284:	00 97       	sbiw	r24, 0x00	; 0
    1286:	61 f0       	breq	.+24     	; 0x12a0 <DIO_VidSetPortDirection+0x4e>
    1288:	1e c0       	rjmp	.+60     	; 0x12c6 <DIO_VidSetPortDirection+0x74>
    128a:	2b 81       	ldd	r18, Y+3	; 0x03
    128c:	3c 81       	ldd	r19, Y+4	; 0x04
    128e:	22 30       	cpi	r18, 0x02	; 2
    1290:	31 05       	cpc	r19, r1
    1292:	81 f0       	breq	.+32     	; 0x12b4 <DIO_VidSetPortDirection+0x62>
    1294:	8b 81       	ldd	r24, Y+3	; 0x03
    1296:	9c 81       	ldd	r25, Y+4	; 0x04
    1298:	83 30       	cpi	r24, 0x03	; 3
    129a:	91 05       	cpc	r25, r1
    129c:	81 f0       	breq	.+32     	; 0x12be <DIO_VidSetPortDirection+0x6c>
    129e:	13 c0       	rjmp	.+38     	; 0x12c6 <DIO_VidSetPortDirection+0x74>
	{
	case 0: DDRA = LOC_u8Value; break;
    12a0:	ea e3       	ldi	r30, 0x3A	; 58
    12a2:	f0 e0       	ldi	r31, 0x00	; 0
    12a4:	8a 81       	ldd	r24, Y+2	; 0x02
    12a6:	80 83       	st	Z, r24
    12a8:	0e c0       	rjmp	.+28     	; 0x12c6 <DIO_VidSetPortDirection+0x74>
	case 1: DDRB = LOC_u8Value; break;
    12aa:	e7 e3       	ldi	r30, 0x37	; 55
    12ac:	f0 e0       	ldi	r31, 0x00	; 0
    12ae:	8a 81       	ldd	r24, Y+2	; 0x02
    12b0:	80 83       	st	Z, r24
    12b2:	09 c0       	rjmp	.+18     	; 0x12c6 <DIO_VidSetPortDirection+0x74>
	case 2: DDRC = LOC_u8Value; break;
    12b4:	e4 e3       	ldi	r30, 0x34	; 52
    12b6:	f0 e0       	ldi	r31, 0x00	; 0
    12b8:	8a 81       	ldd	r24, Y+2	; 0x02
    12ba:	80 83       	st	Z, r24
    12bc:	04 c0       	rjmp	.+8      	; 0x12c6 <DIO_VidSetPortDirection+0x74>
	case 3: DDRD = LOC_u8Value; break;
    12be:	e1 e3       	ldi	r30, 0x31	; 49
    12c0:	f0 e0       	ldi	r31, 0x00	; 0
    12c2:	8a 81       	ldd	r24, Y+2	; 0x02
    12c4:	80 83       	st	Z, r24
	}
}
    12c6:	0f 90       	pop	r0
    12c8:	0f 90       	pop	r0
    12ca:	0f 90       	pop	r0
    12cc:	0f 90       	pop	r0
    12ce:	cf 91       	pop	r28
    12d0:	df 91       	pop	r29
    12d2:	08 95       	ret

000012d4 <DIO_VidSetPortValue>:

void DIO_VidSetPortValue	( u8 LOC_u8Port, u8 LOC_u8Value)
{
    12d4:	df 93       	push	r29
    12d6:	cf 93       	push	r28
    12d8:	00 d0       	rcall	.+0      	; 0x12da <DIO_VidSetPortValue+0x6>
    12da:	00 d0       	rcall	.+0      	; 0x12dc <DIO_VidSetPortValue+0x8>
    12dc:	cd b7       	in	r28, 0x3d	; 61
    12de:	de b7       	in	r29, 0x3e	; 62
    12e0:	89 83       	std	Y+1, r24	; 0x01
    12e2:	6a 83       	std	Y+2, r22	; 0x02
	switch (LOC_u8Port)
    12e4:	89 81       	ldd	r24, Y+1	; 0x01
    12e6:	28 2f       	mov	r18, r24
    12e8:	30 e0       	ldi	r19, 0x00	; 0
    12ea:	3c 83       	std	Y+4, r19	; 0x04
    12ec:	2b 83       	std	Y+3, r18	; 0x03
    12ee:	8b 81       	ldd	r24, Y+3	; 0x03
    12f0:	9c 81       	ldd	r25, Y+4	; 0x04
    12f2:	81 30       	cpi	r24, 0x01	; 1
    12f4:	91 05       	cpc	r25, r1
    12f6:	d1 f0       	breq	.+52     	; 0x132c <DIO_VidSetPortValue+0x58>
    12f8:	2b 81       	ldd	r18, Y+3	; 0x03
    12fa:	3c 81       	ldd	r19, Y+4	; 0x04
    12fc:	22 30       	cpi	r18, 0x02	; 2
    12fe:	31 05       	cpc	r19, r1
    1300:	2c f4       	brge	.+10     	; 0x130c <DIO_VidSetPortValue+0x38>
    1302:	8b 81       	ldd	r24, Y+3	; 0x03
    1304:	9c 81       	ldd	r25, Y+4	; 0x04
    1306:	00 97       	sbiw	r24, 0x00	; 0
    1308:	61 f0       	breq	.+24     	; 0x1322 <DIO_VidSetPortValue+0x4e>
    130a:	1e c0       	rjmp	.+60     	; 0x1348 <DIO_VidSetPortValue+0x74>
    130c:	2b 81       	ldd	r18, Y+3	; 0x03
    130e:	3c 81       	ldd	r19, Y+4	; 0x04
    1310:	22 30       	cpi	r18, 0x02	; 2
    1312:	31 05       	cpc	r19, r1
    1314:	81 f0       	breq	.+32     	; 0x1336 <DIO_VidSetPortValue+0x62>
    1316:	8b 81       	ldd	r24, Y+3	; 0x03
    1318:	9c 81       	ldd	r25, Y+4	; 0x04
    131a:	83 30       	cpi	r24, 0x03	; 3
    131c:	91 05       	cpc	r25, r1
    131e:	81 f0       	breq	.+32     	; 0x1340 <DIO_VidSetPortValue+0x6c>
    1320:	13 c0       	rjmp	.+38     	; 0x1348 <DIO_VidSetPortValue+0x74>
	{
	case 0: PORTA_1 = LOC_u8Value; break;
    1322:	eb e3       	ldi	r30, 0x3B	; 59
    1324:	f0 e0       	ldi	r31, 0x00	; 0
    1326:	8a 81       	ldd	r24, Y+2	; 0x02
    1328:	80 83       	st	Z, r24
    132a:	0e c0       	rjmp	.+28     	; 0x1348 <DIO_VidSetPortValue+0x74>
	case 1: PORTB_1 = LOC_u8Value; break;
    132c:	e8 e3       	ldi	r30, 0x38	; 56
    132e:	f0 e0       	ldi	r31, 0x00	; 0
    1330:	8a 81       	ldd	r24, Y+2	; 0x02
    1332:	80 83       	st	Z, r24
    1334:	09 c0       	rjmp	.+18     	; 0x1348 <DIO_VidSetPortValue+0x74>
	case 2: PORTC_1 = LOC_u8Value; break;
    1336:	e5 e3       	ldi	r30, 0x35	; 53
    1338:	f0 e0       	ldi	r31, 0x00	; 0
    133a:	8a 81       	ldd	r24, Y+2	; 0x02
    133c:	80 83       	st	Z, r24
    133e:	04 c0       	rjmp	.+8      	; 0x1348 <DIO_VidSetPortValue+0x74>
	case 3: PORTD_1 = LOC_u8Value; break;
    1340:	e2 e3       	ldi	r30, 0x32	; 50
    1342:	f0 e0       	ldi	r31, 0x00	; 0
    1344:	8a 81       	ldd	r24, Y+2	; 0x02
    1346:	80 83       	st	Z, r24
	}
}
    1348:	0f 90       	pop	r0
    134a:	0f 90       	pop	r0
    134c:	0f 90       	pop	r0
    134e:	0f 90       	pop	r0
    1350:	cf 91       	pop	r28
    1352:	df 91       	pop	r29
    1354:	08 95       	ret

00001356 <DIO_u8GetPinValue>:

u8 	 DIO_u8GetPinValue	( u8 LOC_u8Port, u8 LOC_u8Pin)
{
    1356:	df 93       	push	r29
    1358:	cf 93       	push	r28
    135a:	00 d0       	rcall	.+0      	; 0x135c <DIO_u8GetPinValue+0x6>
    135c:	00 d0       	rcall	.+0      	; 0x135e <DIO_u8GetPinValue+0x8>
    135e:	0f 92       	push	r0
    1360:	cd b7       	in	r28, 0x3d	; 61
    1362:	de b7       	in	r29, 0x3e	; 62
    1364:	8a 83       	std	Y+2, r24	; 0x02
    1366:	6b 83       	std	Y+3, r22	; 0x03
	u8 value;
	switch (LOC_u8Port)
    1368:	8a 81       	ldd	r24, Y+2	; 0x02
    136a:	28 2f       	mov	r18, r24
    136c:	30 e0       	ldi	r19, 0x00	; 0
    136e:	3d 83       	std	Y+5, r19	; 0x05
    1370:	2c 83       	std	Y+4, r18	; 0x04
    1372:	4c 81       	ldd	r20, Y+4	; 0x04
    1374:	5d 81       	ldd	r21, Y+5	; 0x05
    1376:	41 30       	cpi	r20, 0x01	; 1
    1378:	51 05       	cpc	r21, r1
    137a:	41 f1       	breq	.+80     	; 0x13cc <DIO_u8GetPinValue+0x76>
    137c:	8c 81       	ldd	r24, Y+4	; 0x04
    137e:	9d 81       	ldd	r25, Y+5	; 0x05
    1380:	82 30       	cpi	r24, 0x02	; 2
    1382:	91 05       	cpc	r25, r1
    1384:	34 f4       	brge	.+12     	; 0x1392 <DIO_u8GetPinValue+0x3c>
    1386:	2c 81       	ldd	r18, Y+4	; 0x04
    1388:	3d 81       	ldd	r19, Y+5	; 0x05
    138a:	21 15       	cp	r18, r1
    138c:	31 05       	cpc	r19, r1
    138e:	61 f0       	breq	.+24     	; 0x13a8 <DIO_u8GetPinValue+0x52>
    1390:	52 c0       	rjmp	.+164    	; 0x1436 <DIO_u8GetPinValue+0xe0>
    1392:	4c 81       	ldd	r20, Y+4	; 0x04
    1394:	5d 81       	ldd	r21, Y+5	; 0x05
    1396:	42 30       	cpi	r20, 0x02	; 2
    1398:	51 05       	cpc	r21, r1
    139a:	51 f1       	breq	.+84     	; 0x13f0 <DIO_u8GetPinValue+0x9a>
    139c:	8c 81       	ldd	r24, Y+4	; 0x04
    139e:	9d 81       	ldd	r25, Y+5	; 0x05
    13a0:	83 30       	cpi	r24, 0x03	; 3
    13a2:	91 05       	cpc	r25, r1
    13a4:	b9 f1       	breq	.+110    	; 0x1414 <DIO_u8GetPinValue+0xbe>
    13a6:	47 c0       	rjmp	.+142    	; 0x1436 <DIO_u8GetPinValue+0xe0>
	{
	case 0: value = GET_BIT(PINA, LOC_u8Pin); break;
    13a8:	e9 e3       	ldi	r30, 0x39	; 57
    13aa:	f0 e0       	ldi	r31, 0x00	; 0
    13ac:	80 81       	ld	r24, Z
    13ae:	28 2f       	mov	r18, r24
    13b0:	30 e0       	ldi	r19, 0x00	; 0
    13b2:	8b 81       	ldd	r24, Y+3	; 0x03
    13b4:	88 2f       	mov	r24, r24
    13b6:	90 e0       	ldi	r25, 0x00	; 0
    13b8:	a9 01       	movw	r20, r18
    13ba:	02 c0       	rjmp	.+4      	; 0x13c0 <DIO_u8GetPinValue+0x6a>
    13bc:	55 95       	asr	r21
    13be:	47 95       	ror	r20
    13c0:	8a 95       	dec	r24
    13c2:	e2 f7       	brpl	.-8      	; 0x13bc <DIO_u8GetPinValue+0x66>
    13c4:	ca 01       	movw	r24, r20
    13c6:	81 70       	andi	r24, 0x01	; 1
    13c8:	89 83       	std	Y+1, r24	; 0x01
    13ca:	35 c0       	rjmp	.+106    	; 0x1436 <DIO_u8GetPinValue+0xe0>
	case 1: value = GET_BIT(PINB, LOC_u8Pin); break;
    13cc:	e6 e3       	ldi	r30, 0x36	; 54
    13ce:	f0 e0       	ldi	r31, 0x00	; 0
    13d0:	80 81       	ld	r24, Z
    13d2:	28 2f       	mov	r18, r24
    13d4:	30 e0       	ldi	r19, 0x00	; 0
    13d6:	8b 81       	ldd	r24, Y+3	; 0x03
    13d8:	88 2f       	mov	r24, r24
    13da:	90 e0       	ldi	r25, 0x00	; 0
    13dc:	a9 01       	movw	r20, r18
    13de:	02 c0       	rjmp	.+4      	; 0x13e4 <DIO_u8GetPinValue+0x8e>
    13e0:	55 95       	asr	r21
    13e2:	47 95       	ror	r20
    13e4:	8a 95       	dec	r24
    13e6:	e2 f7       	brpl	.-8      	; 0x13e0 <DIO_u8GetPinValue+0x8a>
    13e8:	ca 01       	movw	r24, r20
    13ea:	81 70       	andi	r24, 0x01	; 1
    13ec:	89 83       	std	Y+1, r24	; 0x01
    13ee:	23 c0       	rjmp	.+70     	; 0x1436 <DIO_u8GetPinValue+0xe0>
	case 2: value = GET_BIT(PINC, LOC_u8Pin); break;
    13f0:	e3 e3       	ldi	r30, 0x33	; 51
    13f2:	f0 e0       	ldi	r31, 0x00	; 0
    13f4:	80 81       	ld	r24, Z
    13f6:	28 2f       	mov	r18, r24
    13f8:	30 e0       	ldi	r19, 0x00	; 0
    13fa:	8b 81       	ldd	r24, Y+3	; 0x03
    13fc:	88 2f       	mov	r24, r24
    13fe:	90 e0       	ldi	r25, 0x00	; 0
    1400:	a9 01       	movw	r20, r18
    1402:	02 c0       	rjmp	.+4      	; 0x1408 <DIO_u8GetPinValue+0xb2>
    1404:	55 95       	asr	r21
    1406:	47 95       	ror	r20
    1408:	8a 95       	dec	r24
    140a:	e2 f7       	brpl	.-8      	; 0x1404 <DIO_u8GetPinValue+0xae>
    140c:	ca 01       	movw	r24, r20
    140e:	81 70       	andi	r24, 0x01	; 1
    1410:	89 83       	std	Y+1, r24	; 0x01
    1412:	11 c0       	rjmp	.+34     	; 0x1436 <DIO_u8GetPinValue+0xe0>
	case 3: value = GET_BIT(PIND, LOC_u8Pin); break;
    1414:	e0 e3       	ldi	r30, 0x30	; 48
    1416:	f0 e0       	ldi	r31, 0x00	; 0
    1418:	80 81       	ld	r24, Z
    141a:	28 2f       	mov	r18, r24
    141c:	30 e0       	ldi	r19, 0x00	; 0
    141e:	8b 81       	ldd	r24, Y+3	; 0x03
    1420:	88 2f       	mov	r24, r24
    1422:	90 e0       	ldi	r25, 0x00	; 0
    1424:	a9 01       	movw	r20, r18
    1426:	02 c0       	rjmp	.+4      	; 0x142c <DIO_u8GetPinValue+0xd6>
    1428:	55 95       	asr	r21
    142a:	47 95       	ror	r20
    142c:	8a 95       	dec	r24
    142e:	e2 f7       	brpl	.-8      	; 0x1428 <DIO_u8GetPinValue+0xd2>
    1430:	ca 01       	movw	r24, r20
    1432:	81 70       	andi	r24, 0x01	; 1
    1434:	89 83       	std	Y+1, r24	; 0x01
	}
	return value;
    1436:	89 81       	ldd	r24, Y+1	; 0x01
}
    1438:	0f 90       	pop	r0
    143a:	0f 90       	pop	r0
    143c:	0f 90       	pop	r0
    143e:	0f 90       	pop	r0
    1440:	0f 90       	pop	r0
    1442:	cf 91       	pop	r28
    1444:	df 91       	pop	r29
    1446:	08 95       	ret

00001448 <EXI_Enable>:
#include "DIO_Register.h"
#include "DIO_Interface.h"
#include <avr/delay.h>
void EXI_Enable(void)

{
    1448:	df 93       	push	r29
    144a:	cf 93       	push	r28
    144c:	cd b7       	in	r28, 0x3d	; 61
    144e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GICR,INT1);
    1450:	ab e5       	ldi	r26, 0x5B	; 91
    1452:	b0 e0       	ldi	r27, 0x00	; 0
    1454:	eb e5       	ldi	r30, 0x5B	; 91
    1456:	f0 e0       	ldi	r31, 0x00	; 0
    1458:	80 81       	ld	r24, Z
    145a:	80 68       	ori	r24, 0x80	; 128
    145c:	8c 93       	st	X, r24
}
    145e:	cf 91       	pop	r28
    1460:	df 91       	pop	r29
    1462:	08 95       	ret

00001464 <EXI_Disable>:
void EXI_Disable(void)
{
    1464:	df 93       	push	r29
    1466:	cf 93       	push	r28
    1468:	cd b7       	in	r28, 0x3d	; 61
    146a:	de b7       	in	r29, 0x3e	; 62
    CLR_BIT(GICR,INT1);
    146c:	ab e5       	ldi	r26, 0x5B	; 91
    146e:	b0 e0       	ldi	r27, 0x00	; 0
    1470:	eb e5       	ldi	r30, 0x5B	; 91
    1472:	f0 e0       	ldi	r31, 0x00	; 0
    1474:	80 81       	ld	r24, Z
    1476:	8f 77       	andi	r24, 0x7F	; 127
    1478:	8c 93       	st	X, r24
}
    147a:	cf 91       	pop	r28
    147c:	df 91       	pop	r29
    147e:	08 95       	ret

00001480 <EXI_VidInt>:
void EXI_VidInt(void)
{
    1480:	df 93       	push	r29
    1482:	cf 93       	push	r28
    1484:	cd b7       	in	r28, 0x3d	; 61
    1486:	de b7       	in	r29, 0x3e	; 62
	DIO_VidSetPinDirection(PORTD,PIN3, INPUT);
    1488:	83 e0       	ldi	r24, 0x03	; 3
    148a:	63 e0       	ldi	r22, 0x03	; 3
    148c:	40 e0       	ldi	r20, 0x00	; 0
    148e:	0e 94 29 07 	call	0xe52	; 0xe52 <DIO_VidSetPinDirection>
	DIO_VidSetPinValue(PORTD,PIN3, 1);
    1492:	83 e0       	ldi	r24, 0x03	; 3
    1494:	63 e0       	ldi	r22, 0x03	; 3
    1496:	41 e0       	ldi	r20, 0x01	; 1
    1498:	0e 94 29 08 	call	0x1052	; 0x1052 <DIO_VidSetPinValue>
	#if control_sens==falling
			CLR_BIT(MCUCR,ISC00);
			SET_BIT(MCUCR,ISC01);
	#elif control_sens==rising
			SET_BIT(MCUCR,ISC00);
    149c:	a5 e5       	ldi	r26, 0x55	; 85
    149e:	b0 e0       	ldi	r27, 0x00	; 0
    14a0:	e5 e5       	ldi	r30, 0x55	; 85
    14a2:	f0 e0       	ldi	r31, 0x00	; 0
    14a4:	80 81       	ld	r24, Z
    14a6:	81 60       	ori	r24, 0x01	; 1
    14a8:	8c 93       	st	X, r24
			SET_BIT(MCUCR,ISC01);
    14aa:	a5 e5       	ldi	r26, 0x55	; 85
    14ac:	b0 e0       	ldi	r27, 0x00	; 0
    14ae:	e5 e5       	ldi	r30, 0x55	; 85
    14b0:	f0 e0       	ldi	r31, 0x00	; 0
    14b2:	80 81       	ld	r24, Z
    14b4:	82 60       	ori	r24, 0x02	; 2
    14b6:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,ISC01);
	#else
		#error  "wrong choice"
	#endif

}
    14b8:	cf 91       	pop	r28
    14ba:	df 91       	pop	r29
    14bc:	08 95       	ret

000014be <__vector_2>:


ISR (INT1_VECT)
{
    14be:	1f 92       	push	r1
    14c0:	0f 92       	push	r0
    14c2:	0f b6       	in	r0, 0x3f	; 63
    14c4:	0f 92       	push	r0
    14c6:	11 24       	eor	r1, r1
    14c8:	2f 93       	push	r18
    14ca:	3f 93       	push	r19
    14cc:	4f 93       	push	r20
    14ce:	5f 93       	push	r21
    14d0:	6f 93       	push	r22
    14d2:	7f 93       	push	r23
    14d4:	8f 93       	push	r24
    14d6:	9f 93       	push	r25
    14d8:	af 93       	push	r26
    14da:	bf 93       	push	r27
    14dc:	ef 93       	push	r30
    14de:	ff 93       	push	r31
    14e0:	df 93       	push	r29
    14e2:	cf 93       	push	r28
    14e4:	cd b7       	in	r28, 0x3d	; 61
    14e6:	de b7       	in	r29, 0x3e	; 62
    14e8:	2e 97       	sbiw	r28, 0x0e	; 14
    14ea:	de bf       	out	0x3e, r29	; 62
    14ec:	cd bf       	out	0x3d, r28	; 61
		DIO_VidSetPinValue(PORTA,PIN0,1);
    14ee:	80 e0       	ldi	r24, 0x00	; 0
    14f0:	60 e0       	ldi	r22, 0x00	; 0
    14f2:	41 e0       	ldi	r20, 0x01	; 1
    14f4:	0e 94 29 08 	call	0x1052	; 0x1052 <DIO_VidSetPinValue>
    14f8:	80 e0       	ldi	r24, 0x00	; 0
    14fa:	90 e0       	ldi	r25, 0x00	; 0
    14fc:	aa e7       	ldi	r26, 0x7A	; 122
    14fe:	b5 e4       	ldi	r27, 0x45	; 69
    1500:	8b 87       	std	Y+11, r24	; 0x0b
    1502:	9c 87       	std	Y+12, r25	; 0x0c
    1504:	ad 87       	std	Y+13, r26	; 0x0d
    1506:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1508:	6b 85       	ldd	r22, Y+11	; 0x0b
    150a:	7c 85       	ldd	r23, Y+12	; 0x0c
    150c:	8d 85       	ldd	r24, Y+13	; 0x0d
    150e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1510:	20 e0       	ldi	r18, 0x00	; 0
    1512:	30 e0       	ldi	r19, 0x00	; 0
    1514:	4a ef       	ldi	r20, 0xFA	; 250
    1516:	54 e4       	ldi	r21, 0x44	; 68
    1518:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    151c:	dc 01       	movw	r26, r24
    151e:	cb 01       	movw	r24, r22
    1520:	8f 83       	std	Y+7, r24	; 0x07
    1522:	98 87       	std	Y+8, r25	; 0x08
    1524:	a9 87       	std	Y+9, r26	; 0x09
    1526:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1528:	6f 81       	ldd	r22, Y+7	; 0x07
    152a:	78 85       	ldd	r23, Y+8	; 0x08
    152c:	89 85       	ldd	r24, Y+9	; 0x09
    152e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1530:	20 e0       	ldi	r18, 0x00	; 0
    1532:	30 e0       	ldi	r19, 0x00	; 0
    1534:	40 e8       	ldi	r20, 0x80	; 128
    1536:	5f e3       	ldi	r21, 0x3F	; 63
    1538:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    153c:	88 23       	and	r24, r24
    153e:	2c f4       	brge	.+10     	; 0x154a <__vector_2+0x8c>
		__ticks = 1;
    1540:	81 e0       	ldi	r24, 0x01	; 1
    1542:	90 e0       	ldi	r25, 0x00	; 0
    1544:	9e 83       	std	Y+6, r25	; 0x06
    1546:	8d 83       	std	Y+5, r24	; 0x05
    1548:	3f c0       	rjmp	.+126    	; 0x15c8 <__vector_2+0x10a>
	else if (__tmp > 65535)
    154a:	6f 81       	ldd	r22, Y+7	; 0x07
    154c:	78 85       	ldd	r23, Y+8	; 0x08
    154e:	89 85       	ldd	r24, Y+9	; 0x09
    1550:	9a 85       	ldd	r25, Y+10	; 0x0a
    1552:	20 e0       	ldi	r18, 0x00	; 0
    1554:	3f ef       	ldi	r19, 0xFF	; 255
    1556:	4f e7       	ldi	r20, 0x7F	; 127
    1558:	57 e4       	ldi	r21, 0x47	; 71
    155a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    155e:	18 16       	cp	r1, r24
    1560:	4c f5       	brge	.+82     	; 0x15b4 <__vector_2+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1562:	6b 85       	ldd	r22, Y+11	; 0x0b
    1564:	7c 85       	ldd	r23, Y+12	; 0x0c
    1566:	8d 85       	ldd	r24, Y+13	; 0x0d
    1568:	9e 85       	ldd	r25, Y+14	; 0x0e
    156a:	20 e0       	ldi	r18, 0x00	; 0
    156c:	30 e0       	ldi	r19, 0x00	; 0
    156e:	40 e2       	ldi	r20, 0x20	; 32
    1570:	51 e4       	ldi	r21, 0x41	; 65
    1572:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1576:	dc 01       	movw	r26, r24
    1578:	cb 01       	movw	r24, r22
    157a:	bc 01       	movw	r22, r24
    157c:	cd 01       	movw	r24, r26
    157e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1582:	dc 01       	movw	r26, r24
    1584:	cb 01       	movw	r24, r22
    1586:	9e 83       	std	Y+6, r25	; 0x06
    1588:	8d 83       	std	Y+5, r24	; 0x05
    158a:	0f c0       	rjmp	.+30     	; 0x15aa <__vector_2+0xec>
    158c:	88 ec       	ldi	r24, 0xC8	; 200
    158e:	90 e0       	ldi	r25, 0x00	; 0
    1590:	9c 83       	std	Y+4, r25	; 0x04
    1592:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1594:	8b 81       	ldd	r24, Y+3	; 0x03
    1596:	9c 81       	ldd	r25, Y+4	; 0x04
    1598:	01 97       	sbiw	r24, 0x01	; 1
    159a:	f1 f7       	brne	.-4      	; 0x1598 <__vector_2+0xda>
    159c:	9c 83       	std	Y+4, r25	; 0x04
    159e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15a0:	8d 81       	ldd	r24, Y+5	; 0x05
    15a2:	9e 81       	ldd	r25, Y+6	; 0x06
    15a4:	01 97       	sbiw	r24, 0x01	; 1
    15a6:	9e 83       	std	Y+6, r25	; 0x06
    15a8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15aa:	8d 81       	ldd	r24, Y+5	; 0x05
    15ac:	9e 81       	ldd	r25, Y+6	; 0x06
    15ae:	00 97       	sbiw	r24, 0x00	; 0
    15b0:	69 f7       	brne	.-38     	; 0x158c <__vector_2+0xce>
    15b2:	14 c0       	rjmp	.+40     	; 0x15dc <__vector_2+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15b4:	6f 81       	ldd	r22, Y+7	; 0x07
    15b6:	78 85       	ldd	r23, Y+8	; 0x08
    15b8:	89 85       	ldd	r24, Y+9	; 0x09
    15ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    15bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15c0:	dc 01       	movw	r26, r24
    15c2:	cb 01       	movw	r24, r22
    15c4:	9e 83       	std	Y+6, r25	; 0x06
    15c6:	8d 83       	std	Y+5, r24	; 0x05
    15c8:	8d 81       	ldd	r24, Y+5	; 0x05
    15ca:	9e 81       	ldd	r25, Y+6	; 0x06
    15cc:	9a 83       	std	Y+2, r25	; 0x02
    15ce:	89 83       	std	Y+1, r24	; 0x01
    15d0:	89 81       	ldd	r24, Y+1	; 0x01
    15d2:	9a 81       	ldd	r25, Y+2	; 0x02
    15d4:	01 97       	sbiw	r24, 0x01	; 1
    15d6:	f1 f7       	brne	.-4      	; 0x15d4 <__vector_2+0x116>
    15d8:	9a 83       	std	Y+2, r25	; 0x02
    15da:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(4000);
}
    15dc:	2e 96       	adiw	r28, 0x0e	; 14
    15de:	de bf       	out	0x3e, r29	; 62
    15e0:	cd bf       	out	0x3d, r28	; 61
    15e2:	cf 91       	pop	r28
    15e4:	df 91       	pop	r29
    15e6:	ff 91       	pop	r31
    15e8:	ef 91       	pop	r30
    15ea:	bf 91       	pop	r27
    15ec:	af 91       	pop	r26
    15ee:	9f 91       	pop	r25
    15f0:	8f 91       	pop	r24
    15f2:	7f 91       	pop	r23
    15f4:	6f 91       	pop	r22
    15f6:	5f 91       	pop	r21
    15f8:	4f 91       	pop	r20
    15fa:	3f 91       	pop	r19
    15fc:	2f 91       	pop	r18
    15fe:	0f 90       	pop	r0
    1600:	0f be       	out	0x3f, r0	; 63
    1602:	0f 90       	pop	r0
    1604:	1f 90       	pop	r1
    1606:	18 95       	reti

00001608 <GIE_Enable>:
#include "GIE_Regster.h"
#include "BIT_MATH.h"

void GIE_Enable(void)

{
    1608:	df 93       	push	r29
    160a:	cf 93       	push	r28
    160c:	cd b7       	in	r28, 0x3d	; 61
    160e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,7);
    1610:	af e5       	ldi	r26, 0x5F	; 95
    1612:	b0 e0       	ldi	r27, 0x00	; 0
    1614:	ef e5       	ldi	r30, 0x5F	; 95
    1616:	f0 e0       	ldi	r31, 0x00	; 0
    1618:	80 81       	ld	r24, Z
    161a:	80 68       	ori	r24, 0x80	; 128
    161c:	8c 93       	st	X, r24
}
    161e:	cf 91       	pop	r28
    1620:	df 91       	pop	r29
    1622:	08 95       	ret

00001624 <GIE_Disable>:

void GIE_Disable(void)
{
    1624:	df 93       	push	r29
    1626:	cf 93       	push	r28
    1628:	cd b7       	in	r28, 0x3d	; 61
    162a:	de b7       	in	r29, 0x3e	; 62
    CLR_BIT(SREG,INT0);
    162c:	af e5       	ldi	r26, 0x5F	; 95
    162e:	b0 e0       	ldi	r27, 0x00	; 0
    1630:	ef e5       	ldi	r30, 0x5F	; 95
    1632:	f0 e0       	ldi	r31, 0x00	; 0
    1634:	80 81       	ld	r24, Z
    1636:	8f 7b       	andi	r24, 0xBF	; 191
    1638:	8c 93       	st	X, r24
}
    163a:	cf 91       	pop	r28
    163c:	df 91       	pop	r29
    163e:	08 95       	ret

00001640 <LCD_Vid4Initialization>:
#include "avr/delay.h"

static u8 InitStepFinishid= 0;

void LCD_Vid4Initialization(void)
{
    1640:	df 93       	push	r29
    1642:	cf 93       	push	r28
    1644:	cd b7       	in	r28, 0x3d	; 61
    1646:	de b7       	in	r29, 0x3e	; 62
    1648:	e8 97       	sbiw	r28, 0x38	; 56
    164a:	0f b6       	in	r0, 0x3f	; 63
    164c:	f8 94       	cli
    164e:	de bf       	out	0x3e, r29	; 62
    1650:	0f be       	out	0x3f, r0	; 63
    1652:	cd bf       	out	0x3d, r28	; 61
	DIO_VidSetPortDirection(LCD_PORT, 0xff);
    1654:	83 e0       	ldi	r24, 0x03	; 3
    1656:	6f ef       	ldi	r22, 0xFF	; 255
    1658:	0e 94 29 09 	call	0x1252	; 0x1252 <DIO_VidSetPortDirection>
	DIO_VidSetPinDirection(LCD_INIT,LCD_RS,1);   //RS
    165c:	81 e0       	ldi	r24, 0x01	; 1
    165e:	63 e0       	ldi	r22, 0x03	; 3
    1660:	41 e0       	ldi	r20, 0x01	; 1
    1662:	0e 94 29 07 	call	0xe52	; 0xe52 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(LCD_INIT,LCD_RW,1);   //RW
    1666:	81 e0       	ldi	r24, 0x01	; 1
    1668:	64 e0       	ldi	r22, 0x04	; 4
    166a:	41 e0       	ldi	r20, 0x01	; 1
    166c:	0e 94 29 07 	call	0xe52	; 0xe52 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(LCD_INIT,LCD_EN,1);   //EN
    1670:	81 e0       	ldi	r24, 0x01	; 1
    1672:	65 e0       	ldi	r22, 0x05	; 5
    1674:	41 e0       	ldi	r20, 0x01	; 1
    1676:	0e 94 29 07 	call	0xe52	; 0xe52 <DIO_VidSetPinDirection>
    167a:	80 e0       	ldi	r24, 0x00	; 0
    167c:	90 e0       	ldi	r25, 0x00	; 0
    167e:	a8 e4       	ldi	r26, 0x48	; 72
    1680:	b2 e4       	ldi	r27, 0x42	; 66
    1682:	8d ab       	std	Y+53, r24	; 0x35
    1684:	9e ab       	std	Y+54, r25	; 0x36
    1686:	af ab       	std	Y+55, r26	; 0x37
    1688:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    168a:	6d a9       	ldd	r22, Y+53	; 0x35
    168c:	7e a9       	ldd	r23, Y+54	; 0x36
    168e:	8f a9       	ldd	r24, Y+55	; 0x37
    1690:	98 ad       	ldd	r25, Y+56	; 0x38
    1692:	20 e0       	ldi	r18, 0x00	; 0
    1694:	30 e0       	ldi	r19, 0x00	; 0
    1696:	4a ef       	ldi	r20, 0xFA	; 250
    1698:	54 e4       	ldi	r21, 0x44	; 68
    169a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    169e:	dc 01       	movw	r26, r24
    16a0:	cb 01       	movw	r24, r22
    16a2:	89 ab       	std	Y+49, r24	; 0x31
    16a4:	9a ab       	std	Y+50, r25	; 0x32
    16a6:	ab ab       	std	Y+51, r26	; 0x33
    16a8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    16aa:	69 a9       	ldd	r22, Y+49	; 0x31
    16ac:	7a a9       	ldd	r23, Y+50	; 0x32
    16ae:	8b a9       	ldd	r24, Y+51	; 0x33
    16b0:	9c a9       	ldd	r25, Y+52	; 0x34
    16b2:	20 e0       	ldi	r18, 0x00	; 0
    16b4:	30 e0       	ldi	r19, 0x00	; 0
    16b6:	40 e8       	ldi	r20, 0x80	; 128
    16b8:	5f e3       	ldi	r21, 0x3F	; 63
    16ba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16be:	88 23       	and	r24, r24
    16c0:	2c f4       	brge	.+10     	; 0x16cc <LCD_Vid4Initialization+0x8c>
		__ticks = 1;
    16c2:	81 e0       	ldi	r24, 0x01	; 1
    16c4:	90 e0       	ldi	r25, 0x00	; 0
    16c6:	98 ab       	std	Y+48, r25	; 0x30
    16c8:	8f a7       	std	Y+47, r24	; 0x2f
    16ca:	3f c0       	rjmp	.+126    	; 0x174a <LCD_Vid4Initialization+0x10a>
	else if (__tmp > 65535)
    16cc:	69 a9       	ldd	r22, Y+49	; 0x31
    16ce:	7a a9       	ldd	r23, Y+50	; 0x32
    16d0:	8b a9       	ldd	r24, Y+51	; 0x33
    16d2:	9c a9       	ldd	r25, Y+52	; 0x34
    16d4:	20 e0       	ldi	r18, 0x00	; 0
    16d6:	3f ef       	ldi	r19, 0xFF	; 255
    16d8:	4f e7       	ldi	r20, 0x7F	; 127
    16da:	57 e4       	ldi	r21, 0x47	; 71
    16dc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16e0:	18 16       	cp	r1, r24
    16e2:	4c f5       	brge	.+82     	; 0x1736 <LCD_Vid4Initialization+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16e4:	6d a9       	ldd	r22, Y+53	; 0x35
    16e6:	7e a9       	ldd	r23, Y+54	; 0x36
    16e8:	8f a9       	ldd	r24, Y+55	; 0x37
    16ea:	98 ad       	ldd	r25, Y+56	; 0x38
    16ec:	20 e0       	ldi	r18, 0x00	; 0
    16ee:	30 e0       	ldi	r19, 0x00	; 0
    16f0:	40 e2       	ldi	r20, 0x20	; 32
    16f2:	51 e4       	ldi	r21, 0x41	; 65
    16f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16f8:	dc 01       	movw	r26, r24
    16fa:	cb 01       	movw	r24, r22
    16fc:	bc 01       	movw	r22, r24
    16fe:	cd 01       	movw	r24, r26
    1700:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1704:	dc 01       	movw	r26, r24
    1706:	cb 01       	movw	r24, r22
    1708:	98 ab       	std	Y+48, r25	; 0x30
    170a:	8f a7       	std	Y+47, r24	; 0x2f
    170c:	0f c0       	rjmp	.+30     	; 0x172c <LCD_Vid4Initialization+0xec>
    170e:	88 ec       	ldi	r24, 0xC8	; 200
    1710:	90 e0       	ldi	r25, 0x00	; 0
    1712:	9e a7       	std	Y+46, r25	; 0x2e
    1714:	8d a7       	std	Y+45, r24	; 0x2d
    1716:	8d a5       	ldd	r24, Y+45	; 0x2d
    1718:	9e a5       	ldd	r25, Y+46	; 0x2e
    171a:	01 97       	sbiw	r24, 0x01	; 1
    171c:	f1 f7       	brne	.-4      	; 0x171a <LCD_Vid4Initialization+0xda>
    171e:	9e a7       	std	Y+46, r25	; 0x2e
    1720:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1722:	8f a5       	ldd	r24, Y+47	; 0x2f
    1724:	98 a9       	ldd	r25, Y+48	; 0x30
    1726:	01 97       	sbiw	r24, 0x01	; 1
    1728:	98 ab       	std	Y+48, r25	; 0x30
    172a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    172c:	8f a5       	ldd	r24, Y+47	; 0x2f
    172e:	98 a9       	ldd	r25, Y+48	; 0x30
    1730:	00 97       	sbiw	r24, 0x00	; 0
    1732:	69 f7       	brne	.-38     	; 0x170e <LCD_Vid4Initialization+0xce>
    1734:	14 c0       	rjmp	.+40     	; 0x175e <LCD_Vid4Initialization+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1736:	69 a9       	ldd	r22, Y+49	; 0x31
    1738:	7a a9       	ldd	r23, Y+50	; 0x32
    173a:	8b a9       	ldd	r24, Y+51	; 0x33
    173c:	9c a9       	ldd	r25, Y+52	; 0x34
    173e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1742:	dc 01       	movw	r26, r24
    1744:	cb 01       	movw	r24, r22
    1746:	98 ab       	std	Y+48, r25	; 0x30
    1748:	8f a7       	std	Y+47, r24	; 0x2f
    174a:	8f a5       	ldd	r24, Y+47	; 0x2f
    174c:	98 a9       	ldd	r25, Y+48	; 0x30
    174e:	9c a7       	std	Y+44, r25	; 0x2c
    1750:	8b a7       	std	Y+43, r24	; 0x2b
    1752:	8b a5       	ldd	r24, Y+43	; 0x2b
    1754:	9c a5       	ldd	r25, Y+44	; 0x2c
    1756:	01 97       	sbiw	r24, 0x01	; 1
    1758:	f1 f7       	brne	.-4      	; 0x1756 <LCD_Vid4Initialization+0x116>
    175a:	9c a7       	std	Y+44, r25	; 0x2c
    175c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(50); // wait for LCD to initialize

	LCD_VidWrite4Cmd(0x20);
    175e:	80 e2       	ldi	r24, 0x20	; 32
    1760:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <LCD_VidWrite4Cmd>
	LCD_VidWrite4Cmd(0x20);
    1764:	80 e2       	ldi	r24, 0x20	; 32
    1766:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <LCD_VidWrite4Cmd>
	LCD_VidWrite4Cmd(0x80);
    176a:	80 e8       	ldi	r24, 0x80	; 128
    176c:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <LCD_VidWrite4Cmd>
    1770:	80 e0       	ldi	r24, 0x00	; 0
    1772:	90 e0       	ldi	r25, 0x00	; 0
    1774:	a0 e0       	ldi	r26, 0x00	; 0
    1776:	b0 e4       	ldi	r27, 0x40	; 64
    1778:	8f a3       	std	Y+39, r24	; 0x27
    177a:	98 a7       	std	Y+40, r25	; 0x28
    177c:	a9 a7       	std	Y+41, r26	; 0x29
    177e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1780:	6f a1       	ldd	r22, Y+39	; 0x27
    1782:	78 a5       	ldd	r23, Y+40	; 0x28
    1784:	89 a5       	ldd	r24, Y+41	; 0x29
    1786:	9a a5       	ldd	r25, Y+42	; 0x2a
    1788:	20 e0       	ldi	r18, 0x00	; 0
    178a:	30 e0       	ldi	r19, 0x00	; 0
    178c:	4a ef       	ldi	r20, 0xFA	; 250
    178e:	54 e4       	ldi	r21, 0x44	; 68
    1790:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1794:	dc 01       	movw	r26, r24
    1796:	cb 01       	movw	r24, r22
    1798:	8b a3       	std	Y+35, r24	; 0x23
    179a:	9c a3       	std	Y+36, r25	; 0x24
    179c:	ad a3       	std	Y+37, r26	; 0x25
    179e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    17a0:	6b a1       	ldd	r22, Y+35	; 0x23
    17a2:	7c a1       	ldd	r23, Y+36	; 0x24
    17a4:	8d a1       	ldd	r24, Y+37	; 0x25
    17a6:	9e a1       	ldd	r25, Y+38	; 0x26
    17a8:	20 e0       	ldi	r18, 0x00	; 0
    17aa:	30 e0       	ldi	r19, 0x00	; 0
    17ac:	40 e8       	ldi	r20, 0x80	; 128
    17ae:	5f e3       	ldi	r21, 0x3F	; 63
    17b0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17b4:	88 23       	and	r24, r24
    17b6:	2c f4       	brge	.+10     	; 0x17c2 <LCD_Vid4Initialization+0x182>
		__ticks = 1;
    17b8:	81 e0       	ldi	r24, 0x01	; 1
    17ba:	90 e0       	ldi	r25, 0x00	; 0
    17bc:	9a a3       	std	Y+34, r25	; 0x22
    17be:	89 a3       	std	Y+33, r24	; 0x21
    17c0:	3f c0       	rjmp	.+126    	; 0x1840 <LCD_Vid4Initialization+0x200>
	else if (__tmp > 65535)
    17c2:	6b a1       	ldd	r22, Y+35	; 0x23
    17c4:	7c a1       	ldd	r23, Y+36	; 0x24
    17c6:	8d a1       	ldd	r24, Y+37	; 0x25
    17c8:	9e a1       	ldd	r25, Y+38	; 0x26
    17ca:	20 e0       	ldi	r18, 0x00	; 0
    17cc:	3f ef       	ldi	r19, 0xFF	; 255
    17ce:	4f e7       	ldi	r20, 0x7F	; 127
    17d0:	57 e4       	ldi	r21, 0x47	; 71
    17d2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17d6:	18 16       	cp	r1, r24
    17d8:	4c f5       	brge	.+82     	; 0x182c <LCD_Vid4Initialization+0x1ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17da:	6f a1       	ldd	r22, Y+39	; 0x27
    17dc:	78 a5       	ldd	r23, Y+40	; 0x28
    17de:	89 a5       	ldd	r24, Y+41	; 0x29
    17e0:	9a a5       	ldd	r25, Y+42	; 0x2a
    17e2:	20 e0       	ldi	r18, 0x00	; 0
    17e4:	30 e0       	ldi	r19, 0x00	; 0
    17e6:	40 e2       	ldi	r20, 0x20	; 32
    17e8:	51 e4       	ldi	r21, 0x41	; 65
    17ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17ee:	dc 01       	movw	r26, r24
    17f0:	cb 01       	movw	r24, r22
    17f2:	bc 01       	movw	r22, r24
    17f4:	cd 01       	movw	r24, r26
    17f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17fa:	dc 01       	movw	r26, r24
    17fc:	cb 01       	movw	r24, r22
    17fe:	9a a3       	std	Y+34, r25	; 0x22
    1800:	89 a3       	std	Y+33, r24	; 0x21
    1802:	0f c0       	rjmp	.+30     	; 0x1822 <LCD_Vid4Initialization+0x1e2>
    1804:	88 ec       	ldi	r24, 0xC8	; 200
    1806:	90 e0       	ldi	r25, 0x00	; 0
    1808:	98 a3       	std	Y+32, r25	; 0x20
    180a:	8f 8f       	std	Y+31, r24	; 0x1f
    180c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    180e:	98 a1       	ldd	r25, Y+32	; 0x20
    1810:	01 97       	sbiw	r24, 0x01	; 1
    1812:	f1 f7       	brne	.-4      	; 0x1810 <LCD_Vid4Initialization+0x1d0>
    1814:	98 a3       	std	Y+32, r25	; 0x20
    1816:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1818:	89 a1       	ldd	r24, Y+33	; 0x21
    181a:	9a a1       	ldd	r25, Y+34	; 0x22
    181c:	01 97       	sbiw	r24, 0x01	; 1
    181e:	9a a3       	std	Y+34, r25	; 0x22
    1820:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1822:	89 a1       	ldd	r24, Y+33	; 0x21
    1824:	9a a1       	ldd	r25, Y+34	; 0x22
    1826:	00 97       	sbiw	r24, 0x00	; 0
    1828:	69 f7       	brne	.-38     	; 0x1804 <LCD_Vid4Initialization+0x1c4>
    182a:	14 c0       	rjmp	.+40     	; 0x1854 <LCD_Vid4Initialization+0x214>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    182c:	6b a1       	ldd	r22, Y+35	; 0x23
    182e:	7c a1       	ldd	r23, Y+36	; 0x24
    1830:	8d a1       	ldd	r24, Y+37	; 0x25
    1832:	9e a1       	ldd	r25, Y+38	; 0x26
    1834:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1838:	dc 01       	movw	r26, r24
    183a:	cb 01       	movw	r24, r22
    183c:	9a a3       	std	Y+34, r25	; 0x22
    183e:	89 a3       	std	Y+33, r24	; 0x21
    1840:	89 a1       	ldd	r24, Y+33	; 0x21
    1842:	9a a1       	ldd	r25, Y+34	; 0x22
    1844:	9e 8f       	std	Y+30, r25	; 0x1e
    1846:	8d 8f       	std	Y+29, r24	; 0x1d
    1848:	8d 8d       	ldd	r24, Y+29	; 0x1d
    184a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    184c:	01 97       	sbiw	r24, 0x01	; 1
    184e:	f1 f7       	brne	.-4      	; 0x184c <LCD_Vid4Initialization+0x20c>
    1850:	9e 8f       	std	Y+30, r25	; 0x1e
    1852:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);
	LCD_VidWrite4Cmd(0x00);
    1854:	80 e0       	ldi	r24, 0x00	; 0
    1856:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <LCD_VidWrite4Cmd>
	LCD_VidWrite4Cmd(0xC0);
    185a:	80 ec       	ldi	r24, 0xC0	; 192
    185c:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <LCD_VidWrite4Cmd>
    1860:	80 e0       	ldi	r24, 0x00	; 0
    1862:	90 e0       	ldi	r25, 0x00	; 0
    1864:	a0 e8       	ldi	r26, 0x80	; 128
    1866:	bf e3       	ldi	r27, 0x3F	; 63
    1868:	89 8f       	std	Y+25, r24	; 0x19
    186a:	9a 8f       	std	Y+26, r25	; 0x1a
    186c:	ab 8f       	std	Y+27, r26	; 0x1b
    186e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1870:	69 8d       	ldd	r22, Y+25	; 0x19
    1872:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1874:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1876:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1878:	20 e0       	ldi	r18, 0x00	; 0
    187a:	30 e0       	ldi	r19, 0x00	; 0
    187c:	4a ef       	ldi	r20, 0xFA	; 250
    187e:	54 e4       	ldi	r21, 0x44	; 68
    1880:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1884:	dc 01       	movw	r26, r24
    1886:	cb 01       	movw	r24, r22
    1888:	8d 8b       	std	Y+21, r24	; 0x15
    188a:	9e 8b       	std	Y+22, r25	; 0x16
    188c:	af 8b       	std	Y+23, r26	; 0x17
    188e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1890:	6d 89       	ldd	r22, Y+21	; 0x15
    1892:	7e 89       	ldd	r23, Y+22	; 0x16
    1894:	8f 89       	ldd	r24, Y+23	; 0x17
    1896:	98 8d       	ldd	r25, Y+24	; 0x18
    1898:	20 e0       	ldi	r18, 0x00	; 0
    189a:	30 e0       	ldi	r19, 0x00	; 0
    189c:	40 e8       	ldi	r20, 0x80	; 128
    189e:	5f e3       	ldi	r21, 0x3F	; 63
    18a0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18a4:	88 23       	and	r24, r24
    18a6:	2c f4       	brge	.+10     	; 0x18b2 <LCD_Vid4Initialization+0x272>
		__ticks = 1;
    18a8:	81 e0       	ldi	r24, 0x01	; 1
    18aa:	90 e0       	ldi	r25, 0x00	; 0
    18ac:	9c 8b       	std	Y+20, r25	; 0x14
    18ae:	8b 8b       	std	Y+19, r24	; 0x13
    18b0:	3f c0       	rjmp	.+126    	; 0x1930 <LCD_Vid4Initialization+0x2f0>
	else if (__tmp > 65535)
    18b2:	6d 89       	ldd	r22, Y+21	; 0x15
    18b4:	7e 89       	ldd	r23, Y+22	; 0x16
    18b6:	8f 89       	ldd	r24, Y+23	; 0x17
    18b8:	98 8d       	ldd	r25, Y+24	; 0x18
    18ba:	20 e0       	ldi	r18, 0x00	; 0
    18bc:	3f ef       	ldi	r19, 0xFF	; 255
    18be:	4f e7       	ldi	r20, 0x7F	; 127
    18c0:	57 e4       	ldi	r21, 0x47	; 71
    18c2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18c6:	18 16       	cp	r1, r24
    18c8:	4c f5       	brge	.+82     	; 0x191c <LCD_Vid4Initialization+0x2dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18ca:	69 8d       	ldd	r22, Y+25	; 0x19
    18cc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18ce:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18d0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18d2:	20 e0       	ldi	r18, 0x00	; 0
    18d4:	30 e0       	ldi	r19, 0x00	; 0
    18d6:	40 e2       	ldi	r20, 0x20	; 32
    18d8:	51 e4       	ldi	r21, 0x41	; 65
    18da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18de:	dc 01       	movw	r26, r24
    18e0:	cb 01       	movw	r24, r22
    18e2:	bc 01       	movw	r22, r24
    18e4:	cd 01       	movw	r24, r26
    18e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18ea:	dc 01       	movw	r26, r24
    18ec:	cb 01       	movw	r24, r22
    18ee:	9c 8b       	std	Y+20, r25	; 0x14
    18f0:	8b 8b       	std	Y+19, r24	; 0x13
    18f2:	0f c0       	rjmp	.+30     	; 0x1912 <LCD_Vid4Initialization+0x2d2>
    18f4:	88 ec       	ldi	r24, 0xC8	; 200
    18f6:	90 e0       	ldi	r25, 0x00	; 0
    18f8:	9a 8b       	std	Y+18, r25	; 0x12
    18fa:	89 8b       	std	Y+17, r24	; 0x11
    18fc:	89 89       	ldd	r24, Y+17	; 0x11
    18fe:	9a 89       	ldd	r25, Y+18	; 0x12
    1900:	01 97       	sbiw	r24, 0x01	; 1
    1902:	f1 f7       	brne	.-4      	; 0x1900 <LCD_Vid4Initialization+0x2c0>
    1904:	9a 8b       	std	Y+18, r25	; 0x12
    1906:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1908:	8b 89       	ldd	r24, Y+19	; 0x13
    190a:	9c 89       	ldd	r25, Y+20	; 0x14
    190c:	01 97       	sbiw	r24, 0x01	; 1
    190e:	9c 8b       	std	Y+20, r25	; 0x14
    1910:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1912:	8b 89       	ldd	r24, Y+19	; 0x13
    1914:	9c 89       	ldd	r25, Y+20	; 0x14
    1916:	00 97       	sbiw	r24, 0x00	; 0
    1918:	69 f7       	brne	.-38     	; 0x18f4 <LCD_Vid4Initialization+0x2b4>
    191a:	14 c0       	rjmp	.+40     	; 0x1944 <LCD_Vid4Initialization+0x304>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    191c:	6d 89       	ldd	r22, Y+21	; 0x15
    191e:	7e 89       	ldd	r23, Y+22	; 0x16
    1920:	8f 89       	ldd	r24, Y+23	; 0x17
    1922:	98 8d       	ldd	r25, Y+24	; 0x18
    1924:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1928:	dc 01       	movw	r26, r24
    192a:	cb 01       	movw	r24, r22
    192c:	9c 8b       	std	Y+20, r25	; 0x14
    192e:	8b 8b       	std	Y+19, r24	; 0x13
    1930:	8b 89       	ldd	r24, Y+19	; 0x13
    1932:	9c 89       	ldd	r25, Y+20	; 0x14
    1934:	98 8b       	std	Y+16, r25	; 0x10
    1936:	8f 87       	std	Y+15, r24	; 0x0f
    1938:	8f 85       	ldd	r24, Y+15	; 0x0f
    193a:	98 89       	ldd	r25, Y+16	; 0x10
    193c:	01 97       	sbiw	r24, 0x01	; 1
    193e:	f1 f7       	brne	.-4      	; 0x193c <LCD_Vid4Initialization+0x2fc>
    1940:	98 8b       	std	Y+16, r25	; 0x10
    1942:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_VidWrite4Cmd(0x00);
    1944:	80 e0       	ldi	r24, 0x00	; 0
    1946:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <LCD_VidWrite4Cmd>
	LCD_VidWrite4Cmd(0x10);
    194a:	80 e1       	ldi	r24, 0x10	; 16
    194c:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <LCD_VidWrite4Cmd>
    1950:	80 e0       	ldi	r24, 0x00	; 0
    1952:	90 e0       	ldi	r25, 0x00	; 0
    1954:	a0 e0       	ldi	r26, 0x00	; 0
    1956:	b0 e4       	ldi	r27, 0x40	; 64
    1958:	8b 87       	std	Y+11, r24	; 0x0b
    195a:	9c 87       	std	Y+12, r25	; 0x0c
    195c:	ad 87       	std	Y+13, r26	; 0x0d
    195e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1960:	6b 85       	ldd	r22, Y+11	; 0x0b
    1962:	7c 85       	ldd	r23, Y+12	; 0x0c
    1964:	8d 85       	ldd	r24, Y+13	; 0x0d
    1966:	9e 85       	ldd	r25, Y+14	; 0x0e
    1968:	20 e0       	ldi	r18, 0x00	; 0
    196a:	30 e0       	ldi	r19, 0x00	; 0
    196c:	4a ef       	ldi	r20, 0xFA	; 250
    196e:	54 e4       	ldi	r21, 0x44	; 68
    1970:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1974:	dc 01       	movw	r26, r24
    1976:	cb 01       	movw	r24, r22
    1978:	8f 83       	std	Y+7, r24	; 0x07
    197a:	98 87       	std	Y+8, r25	; 0x08
    197c:	a9 87       	std	Y+9, r26	; 0x09
    197e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1980:	6f 81       	ldd	r22, Y+7	; 0x07
    1982:	78 85       	ldd	r23, Y+8	; 0x08
    1984:	89 85       	ldd	r24, Y+9	; 0x09
    1986:	9a 85       	ldd	r25, Y+10	; 0x0a
    1988:	20 e0       	ldi	r18, 0x00	; 0
    198a:	30 e0       	ldi	r19, 0x00	; 0
    198c:	40 e8       	ldi	r20, 0x80	; 128
    198e:	5f e3       	ldi	r21, 0x3F	; 63
    1990:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1994:	88 23       	and	r24, r24
    1996:	2c f4       	brge	.+10     	; 0x19a2 <LCD_Vid4Initialization+0x362>
		__ticks = 1;
    1998:	81 e0       	ldi	r24, 0x01	; 1
    199a:	90 e0       	ldi	r25, 0x00	; 0
    199c:	9e 83       	std	Y+6, r25	; 0x06
    199e:	8d 83       	std	Y+5, r24	; 0x05
    19a0:	3f c0       	rjmp	.+126    	; 0x1a20 <LCD_Vid4Initialization+0x3e0>
	else if (__tmp > 65535)
    19a2:	6f 81       	ldd	r22, Y+7	; 0x07
    19a4:	78 85       	ldd	r23, Y+8	; 0x08
    19a6:	89 85       	ldd	r24, Y+9	; 0x09
    19a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    19aa:	20 e0       	ldi	r18, 0x00	; 0
    19ac:	3f ef       	ldi	r19, 0xFF	; 255
    19ae:	4f e7       	ldi	r20, 0x7F	; 127
    19b0:	57 e4       	ldi	r21, 0x47	; 71
    19b2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19b6:	18 16       	cp	r1, r24
    19b8:	4c f5       	brge	.+82     	; 0x1a0c <LCD_Vid4Initialization+0x3cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    19bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    19be:	8d 85       	ldd	r24, Y+13	; 0x0d
    19c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    19c2:	20 e0       	ldi	r18, 0x00	; 0
    19c4:	30 e0       	ldi	r19, 0x00	; 0
    19c6:	40 e2       	ldi	r20, 0x20	; 32
    19c8:	51 e4       	ldi	r21, 0x41	; 65
    19ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19ce:	dc 01       	movw	r26, r24
    19d0:	cb 01       	movw	r24, r22
    19d2:	bc 01       	movw	r22, r24
    19d4:	cd 01       	movw	r24, r26
    19d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19da:	dc 01       	movw	r26, r24
    19dc:	cb 01       	movw	r24, r22
    19de:	9e 83       	std	Y+6, r25	; 0x06
    19e0:	8d 83       	std	Y+5, r24	; 0x05
    19e2:	0f c0       	rjmp	.+30     	; 0x1a02 <LCD_Vid4Initialization+0x3c2>
    19e4:	88 ec       	ldi	r24, 0xC8	; 200
    19e6:	90 e0       	ldi	r25, 0x00	; 0
    19e8:	9c 83       	std	Y+4, r25	; 0x04
    19ea:	8b 83       	std	Y+3, r24	; 0x03
    19ec:	8b 81       	ldd	r24, Y+3	; 0x03
    19ee:	9c 81       	ldd	r25, Y+4	; 0x04
    19f0:	01 97       	sbiw	r24, 0x01	; 1
    19f2:	f1 f7       	brne	.-4      	; 0x19f0 <LCD_Vid4Initialization+0x3b0>
    19f4:	9c 83       	std	Y+4, r25	; 0x04
    19f6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19f8:	8d 81       	ldd	r24, Y+5	; 0x05
    19fa:	9e 81       	ldd	r25, Y+6	; 0x06
    19fc:	01 97       	sbiw	r24, 0x01	; 1
    19fe:	9e 83       	std	Y+6, r25	; 0x06
    1a00:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a02:	8d 81       	ldd	r24, Y+5	; 0x05
    1a04:	9e 81       	ldd	r25, Y+6	; 0x06
    1a06:	00 97       	sbiw	r24, 0x00	; 0
    1a08:	69 f7       	brne	.-38     	; 0x19e4 <LCD_Vid4Initialization+0x3a4>
    1a0a:	14 c0       	rjmp	.+40     	; 0x1a34 <LCD_Vid4Initialization+0x3f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a0c:	6f 81       	ldd	r22, Y+7	; 0x07
    1a0e:	78 85       	ldd	r23, Y+8	; 0x08
    1a10:	89 85       	ldd	r24, Y+9	; 0x09
    1a12:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a18:	dc 01       	movw	r26, r24
    1a1a:	cb 01       	movw	r24, r22
    1a1c:	9e 83       	std	Y+6, r25	; 0x06
    1a1e:	8d 83       	std	Y+5, r24	; 0x05
    1a20:	8d 81       	ldd	r24, Y+5	; 0x05
    1a22:	9e 81       	ldd	r25, Y+6	; 0x06
    1a24:	9a 83       	std	Y+2, r25	; 0x02
    1a26:	89 83       	std	Y+1, r24	; 0x01
    1a28:	89 81       	ldd	r24, Y+1	; 0x01
    1a2a:	9a 81       	ldd	r25, Y+2	; 0x02
    1a2c:	01 97       	sbiw	r24, 0x01	; 1
    1a2e:	f1 f7       	brne	.-4      	; 0x1a2c <LCD_Vid4Initialization+0x3ec>
    1a30:	9a 83       	std	Y+2, r25	; 0x02
    1a32:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	InitStepFinishid=1;
    1a34:	81 e0       	ldi	r24, 0x01	; 1
    1a36:	80 93 78 00 	sts	0x0078, r24
}
    1a3a:	e8 96       	adiw	r28, 0x38	; 56
    1a3c:	0f b6       	in	r0, 0x3f	; 63
    1a3e:	f8 94       	cli
    1a40:	de bf       	out	0x3e, r29	; 62
    1a42:	0f be       	out	0x3f, r0	; 63
    1a44:	cd bf       	out	0x3d, r28	; 61
    1a46:	cf 91       	pop	r28
    1a48:	df 91       	pop	r29
    1a4a:	08 95       	ret

00001a4c <LCD_VidWrite4Cmd>:


void LCD_VidWrite4Cmd(u8 LOC_Cmd)
{
    1a4c:	0f 93       	push	r16
    1a4e:	1f 93       	push	r17
    1a50:	df 93       	push	r29
    1a52:	cf 93       	push	r28
    1a54:	cd b7       	in	r28, 0x3d	; 61
    1a56:	de b7       	in	r29, 0x3e	; 62
    1a58:	c7 54       	subi	r28, 0x47	; 71
    1a5a:	d0 40       	sbci	r29, 0x00	; 0
    1a5c:	0f b6       	in	r0, 0x3f	; 63
    1a5e:	f8 94       	cli
    1a60:	de bf       	out	0x3e, r29	; 62
    1a62:	0f be       	out	0x3f, r0	; 63
    1a64:	cd bf       	out	0x3d, r28	; 61
    1a66:	fe 01       	movw	r30, r28
    1a68:	e9 5b       	subi	r30, 0xB9	; 185
    1a6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a6c:	80 83       	st	Z, r24
	DIO_VidSetPinValue(LCD_INIT,LCD_RS,0);
    1a6e:	81 e0       	ldi	r24, 0x01	; 1
    1a70:	63 e0       	ldi	r22, 0x03	; 3
    1a72:	40 e0       	ldi	r20, 0x00	; 0
    1a74:	0e 94 29 08 	call	0x1052	; 0x1052 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(LCD_INIT,LCD_RW,0);
    1a78:	81 e0       	ldi	r24, 0x01	; 1
    1a7a:	64 e0       	ldi	r22, 0x04	; 4
    1a7c:	40 e0       	ldi	r20, 0x00	; 0
    1a7e:	0e 94 29 08 	call	0x1052	; 0x1052 <DIO_VidSetPinValue>

	DIO_VidSetPinValue(LCD_PORT,PIN4,GET_BIT(LOC_Cmd,4));
    1a82:	fe 01       	movw	r30, r28
    1a84:	e9 5b       	subi	r30, 0xB9	; 185
    1a86:	ff 4f       	sbci	r31, 0xFF	; 255
    1a88:	80 81       	ld	r24, Z
    1a8a:	82 95       	swap	r24
    1a8c:	8f 70       	andi	r24, 0x0F	; 15
    1a8e:	98 2f       	mov	r25, r24
    1a90:	91 70       	andi	r25, 0x01	; 1
    1a92:	83 e0       	ldi	r24, 0x03	; 3
    1a94:	64 e0       	ldi	r22, 0x04	; 4
    1a96:	49 2f       	mov	r20, r25
    1a98:	0e 94 29 08 	call	0x1052	; 0x1052 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(LCD_PORT,PIN5,GET_BIT(LOC_Cmd,5));
    1a9c:	fe 01       	movw	r30, r28
    1a9e:	e9 5b       	subi	r30, 0xB9	; 185
    1aa0:	ff 4f       	sbci	r31, 0xFF	; 255
    1aa2:	80 81       	ld	r24, Z
    1aa4:	82 95       	swap	r24
    1aa6:	86 95       	lsr	r24
    1aa8:	87 70       	andi	r24, 0x07	; 7
    1aaa:	98 2f       	mov	r25, r24
    1aac:	91 70       	andi	r25, 0x01	; 1
    1aae:	83 e0       	ldi	r24, 0x03	; 3
    1ab0:	65 e0       	ldi	r22, 0x05	; 5
    1ab2:	49 2f       	mov	r20, r25
    1ab4:	0e 94 29 08 	call	0x1052	; 0x1052 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(LCD_PORT,PIN6,GET_BIT(LOC_Cmd,6));
    1ab8:	fe 01       	movw	r30, r28
    1aba:	e9 5b       	subi	r30, 0xB9	; 185
    1abc:	ff 4f       	sbci	r31, 0xFF	; 255
    1abe:	80 81       	ld	r24, Z
    1ac0:	82 95       	swap	r24
    1ac2:	86 95       	lsr	r24
    1ac4:	86 95       	lsr	r24
    1ac6:	83 70       	andi	r24, 0x03	; 3
    1ac8:	98 2f       	mov	r25, r24
    1aca:	91 70       	andi	r25, 0x01	; 1
    1acc:	83 e0       	ldi	r24, 0x03	; 3
    1ace:	66 e0       	ldi	r22, 0x06	; 6
    1ad0:	49 2f       	mov	r20, r25
    1ad2:	0e 94 29 08 	call	0x1052	; 0x1052 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(LCD_PORT,PIN7,GET_BIT(LOC_Cmd,7));
    1ad6:	fe 01       	movw	r30, r28
    1ad8:	e9 5b       	subi	r30, 0xB9	; 185
    1ada:	ff 4f       	sbci	r31, 0xFF	; 255
    1adc:	80 81       	ld	r24, Z
    1ade:	98 2f       	mov	r25, r24
    1ae0:	99 1f       	adc	r25, r25
    1ae2:	99 27       	eor	r25, r25
    1ae4:	99 1f       	adc	r25, r25
    1ae6:	83 e0       	ldi	r24, 0x03	; 3
    1ae8:	67 e0       	ldi	r22, 0x07	; 7
    1aea:	49 2f       	mov	r20, r25
    1aec:	0e 94 29 08 	call	0x1052	; 0x1052 <DIO_VidSetPinValue>

	DIO_VidSetPinValue(LCD_INIT,LCD_EN,1);
    1af0:	81 e0       	ldi	r24, 0x01	; 1
    1af2:	65 e0       	ldi	r22, 0x05	; 5
    1af4:	41 e0       	ldi	r20, 0x01	; 1
    1af6:	0e 94 29 08 	call	0x1052	; 0x1052 <DIO_VidSetPinValue>
    1afa:	fe 01       	movw	r30, r28
    1afc:	ed 5b       	subi	r30, 0xBD	; 189
    1afe:	ff 4f       	sbci	r31, 0xFF	; 255
    1b00:	80 e0       	ldi	r24, 0x00	; 0
    1b02:	90 e0       	ldi	r25, 0x00	; 0
    1b04:	a0 e8       	ldi	r26, 0x80	; 128
    1b06:	bf e3       	ldi	r27, 0x3F	; 63
    1b08:	80 83       	st	Z, r24
    1b0a:	91 83       	std	Z+1, r25	; 0x01
    1b0c:	a2 83       	std	Z+2, r26	; 0x02
    1b0e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b10:	8e 01       	movw	r16, r28
    1b12:	01 5c       	subi	r16, 0xC1	; 193
    1b14:	1f 4f       	sbci	r17, 0xFF	; 255
    1b16:	fe 01       	movw	r30, r28
    1b18:	ed 5b       	subi	r30, 0xBD	; 189
    1b1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b1c:	60 81       	ld	r22, Z
    1b1e:	71 81       	ldd	r23, Z+1	; 0x01
    1b20:	82 81       	ldd	r24, Z+2	; 0x02
    1b22:	93 81       	ldd	r25, Z+3	; 0x03
    1b24:	20 e0       	ldi	r18, 0x00	; 0
    1b26:	30 e0       	ldi	r19, 0x00	; 0
    1b28:	4a ef       	ldi	r20, 0xFA	; 250
    1b2a:	54 e4       	ldi	r21, 0x44	; 68
    1b2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b30:	dc 01       	movw	r26, r24
    1b32:	cb 01       	movw	r24, r22
    1b34:	f8 01       	movw	r30, r16
    1b36:	80 83       	st	Z, r24
    1b38:	91 83       	std	Z+1, r25	; 0x01
    1b3a:	a2 83       	std	Z+2, r26	; 0x02
    1b3c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b3e:	fe 01       	movw	r30, r28
    1b40:	ff 96       	adiw	r30, 0x3f	; 63
    1b42:	60 81       	ld	r22, Z
    1b44:	71 81       	ldd	r23, Z+1	; 0x01
    1b46:	82 81       	ldd	r24, Z+2	; 0x02
    1b48:	93 81       	ldd	r25, Z+3	; 0x03
    1b4a:	20 e0       	ldi	r18, 0x00	; 0
    1b4c:	30 e0       	ldi	r19, 0x00	; 0
    1b4e:	40 e8       	ldi	r20, 0x80	; 128
    1b50:	5f e3       	ldi	r21, 0x3F	; 63
    1b52:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b56:	88 23       	and	r24, r24
    1b58:	2c f4       	brge	.+10     	; 0x1b64 <LCD_VidWrite4Cmd+0x118>
		__ticks = 1;
    1b5a:	81 e0       	ldi	r24, 0x01	; 1
    1b5c:	90 e0       	ldi	r25, 0x00	; 0
    1b5e:	9e af       	std	Y+62, r25	; 0x3e
    1b60:	8d af       	std	Y+61, r24	; 0x3d
    1b62:	46 c0       	rjmp	.+140    	; 0x1bf0 <LCD_VidWrite4Cmd+0x1a4>
	else if (__tmp > 65535)
    1b64:	fe 01       	movw	r30, r28
    1b66:	ff 96       	adiw	r30, 0x3f	; 63
    1b68:	60 81       	ld	r22, Z
    1b6a:	71 81       	ldd	r23, Z+1	; 0x01
    1b6c:	82 81       	ldd	r24, Z+2	; 0x02
    1b6e:	93 81       	ldd	r25, Z+3	; 0x03
    1b70:	20 e0       	ldi	r18, 0x00	; 0
    1b72:	3f ef       	ldi	r19, 0xFF	; 255
    1b74:	4f e7       	ldi	r20, 0x7F	; 127
    1b76:	57 e4       	ldi	r21, 0x47	; 71
    1b78:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b7c:	18 16       	cp	r1, r24
    1b7e:	64 f5       	brge	.+88     	; 0x1bd8 <LCD_VidWrite4Cmd+0x18c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b80:	fe 01       	movw	r30, r28
    1b82:	ed 5b       	subi	r30, 0xBD	; 189
    1b84:	ff 4f       	sbci	r31, 0xFF	; 255
    1b86:	60 81       	ld	r22, Z
    1b88:	71 81       	ldd	r23, Z+1	; 0x01
    1b8a:	82 81       	ldd	r24, Z+2	; 0x02
    1b8c:	93 81       	ldd	r25, Z+3	; 0x03
    1b8e:	20 e0       	ldi	r18, 0x00	; 0
    1b90:	30 e0       	ldi	r19, 0x00	; 0
    1b92:	40 e2       	ldi	r20, 0x20	; 32
    1b94:	51 e4       	ldi	r21, 0x41	; 65
    1b96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b9a:	dc 01       	movw	r26, r24
    1b9c:	cb 01       	movw	r24, r22
    1b9e:	bc 01       	movw	r22, r24
    1ba0:	cd 01       	movw	r24, r26
    1ba2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ba6:	dc 01       	movw	r26, r24
    1ba8:	cb 01       	movw	r24, r22
    1baa:	9e af       	std	Y+62, r25	; 0x3e
    1bac:	8d af       	std	Y+61, r24	; 0x3d
    1bae:	0f c0       	rjmp	.+30     	; 0x1bce <LCD_VidWrite4Cmd+0x182>
    1bb0:	88 ec       	ldi	r24, 0xC8	; 200
    1bb2:	90 e0       	ldi	r25, 0x00	; 0
    1bb4:	9c af       	std	Y+60, r25	; 0x3c
    1bb6:	8b af       	std	Y+59, r24	; 0x3b
    1bb8:	8b ad       	ldd	r24, Y+59	; 0x3b
    1bba:	9c ad       	ldd	r25, Y+60	; 0x3c
    1bbc:	01 97       	sbiw	r24, 0x01	; 1
    1bbe:	f1 f7       	brne	.-4      	; 0x1bbc <LCD_VidWrite4Cmd+0x170>
    1bc0:	9c af       	std	Y+60, r25	; 0x3c
    1bc2:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bc4:	8d ad       	ldd	r24, Y+61	; 0x3d
    1bc6:	9e ad       	ldd	r25, Y+62	; 0x3e
    1bc8:	01 97       	sbiw	r24, 0x01	; 1
    1bca:	9e af       	std	Y+62, r25	; 0x3e
    1bcc:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bce:	8d ad       	ldd	r24, Y+61	; 0x3d
    1bd0:	9e ad       	ldd	r25, Y+62	; 0x3e
    1bd2:	00 97       	sbiw	r24, 0x00	; 0
    1bd4:	69 f7       	brne	.-38     	; 0x1bb0 <LCD_VidWrite4Cmd+0x164>
    1bd6:	16 c0       	rjmp	.+44     	; 0x1c04 <LCD_VidWrite4Cmd+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bd8:	fe 01       	movw	r30, r28
    1bda:	ff 96       	adiw	r30, 0x3f	; 63
    1bdc:	60 81       	ld	r22, Z
    1bde:	71 81       	ldd	r23, Z+1	; 0x01
    1be0:	82 81       	ldd	r24, Z+2	; 0x02
    1be2:	93 81       	ldd	r25, Z+3	; 0x03
    1be4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1be8:	dc 01       	movw	r26, r24
    1bea:	cb 01       	movw	r24, r22
    1bec:	9e af       	std	Y+62, r25	; 0x3e
    1bee:	8d af       	std	Y+61, r24	; 0x3d
    1bf0:	8d ad       	ldd	r24, Y+61	; 0x3d
    1bf2:	9e ad       	ldd	r25, Y+62	; 0x3e
    1bf4:	9a af       	std	Y+58, r25	; 0x3a
    1bf6:	89 af       	std	Y+57, r24	; 0x39
    1bf8:	89 ad       	ldd	r24, Y+57	; 0x39
    1bfa:	9a ad       	ldd	r25, Y+58	; 0x3a
    1bfc:	01 97       	sbiw	r24, 0x01	; 1
    1bfe:	f1 f7       	brne	.-4      	; 0x1bfc <LCD_VidWrite4Cmd+0x1b0>
    1c00:	9a af       	std	Y+58, r25	; 0x3a
    1c02:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);
	DIO_VidSetPinValue(LCD_INIT,LCD_EN,0);
    1c04:	81 e0       	ldi	r24, 0x01	; 1
    1c06:	65 e0       	ldi	r22, 0x05	; 5
    1c08:	40 e0       	ldi	r20, 0x00	; 0
    1c0a:	0e 94 29 08 	call	0x1052	; 0x1052 <DIO_VidSetPinValue>
    1c0e:	80 e0       	ldi	r24, 0x00	; 0
    1c10:	90 e0       	ldi	r25, 0x00	; 0
    1c12:	a0 e8       	ldi	r26, 0x80	; 128
    1c14:	bf e3       	ldi	r27, 0x3F	; 63
    1c16:	8d ab       	std	Y+53, r24	; 0x35
    1c18:	9e ab       	std	Y+54, r25	; 0x36
    1c1a:	af ab       	std	Y+55, r26	; 0x37
    1c1c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c1e:	6d a9       	ldd	r22, Y+53	; 0x35
    1c20:	7e a9       	ldd	r23, Y+54	; 0x36
    1c22:	8f a9       	ldd	r24, Y+55	; 0x37
    1c24:	98 ad       	ldd	r25, Y+56	; 0x38
    1c26:	20 e0       	ldi	r18, 0x00	; 0
    1c28:	30 e0       	ldi	r19, 0x00	; 0
    1c2a:	4a ef       	ldi	r20, 0xFA	; 250
    1c2c:	54 e4       	ldi	r21, 0x44	; 68
    1c2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c32:	dc 01       	movw	r26, r24
    1c34:	cb 01       	movw	r24, r22
    1c36:	89 ab       	std	Y+49, r24	; 0x31
    1c38:	9a ab       	std	Y+50, r25	; 0x32
    1c3a:	ab ab       	std	Y+51, r26	; 0x33
    1c3c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1c3e:	69 a9       	ldd	r22, Y+49	; 0x31
    1c40:	7a a9       	ldd	r23, Y+50	; 0x32
    1c42:	8b a9       	ldd	r24, Y+51	; 0x33
    1c44:	9c a9       	ldd	r25, Y+52	; 0x34
    1c46:	20 e0       	ldi	r18, 0x00	; 0
    1c48:	30 e0       	ldi	r19, 0x00	; 0
    1c4a:	40 e8       	ldi	r20, 0x80	; 128
    1c4c:	5f e3       	ldi	r21, 0x3F	; 63
    1c4e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c52:	88 23       	and	r24, r24
    1c54:	2c f4       	brge	.+10     	; 0x1c60 <LCD_VidWrite4Cmd+0x214>
		__ticks = 1;
    1c56:	81 e0       	ldi	r24, 0x01	; 1
    1c58:	90 e0       	ldi	r25, 0x00	; 0
    1c5a:	98 ab       	std	Y+48, r25	; 0x30
    1c5c:	8f a7       	std	Y+47, r24	; 0x2f
    1c5e:	3f c0       	rjmp	.+126    	; 0x1cde <LCD_VidWrite4Cmd+0x292>
	else if (__tmp > 65535)
    1c60:	69 a9       	ldd	r22, Y+49	; 0x31
    1c62:	7a a9       	ldd	r23, Y+50	; 0x32
    1c64:	8b a9       	ldd	r24, Y+51	; 0x33
    1c66:	9c a9       	ldd	r25, Y+52	; 0x34
    1c68:	20 e0       	ldi	r18, 0x00	; 0
    1c6a:	3f ef       	ldi	r19, 0xFF	; 255
    1c6c:	4f e7       	ldi	r20, 0x7F	; 127
    1c6e:	57 e4       	ldi	r21, 0x47	; 71
    1c70:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c74:	18 16       	cp	r1, r24
    1c76:	4c f5       	brge	.+82     	; 0x1cca <LCD_VidWrite4Cmd+0x27e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c78:	6d a9       	ldd	r22, Y+53	; 0x35
    1c7a:	7e a9       	ldd	r23, Y+54	; 0x36
    1c7c:	8f a9       	ldd	r24, Y+55	; 0x37
    1c7e:	98 ad       	ldd	r25, Y+56	; 0x38
    1c80:	20 e0       	ldi	r18, 0x00	; 0
    1c82:	30 e0       	ldi	r19, 0x00	; 0
    1c84:	40 e2       	ldi	r20, 0x20	; 32
    1c86:	51 e4       	ldi	r21, 0x41	; 65
    1c88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c8c:	dc 01       	movw	r26, r24
    1c8e:	cb 01       	movw	r24, r22
    1c90:	bc 01       	movw	r22, r24
    1c92:	cd 01       	movw	r24, r26
    1c94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c98:	dc 01       	movw	r26, r24
    1c9a:	cb 01       	movw	r24, r22
    1c9c:	98 ab       	std	Y+48, r25	; 0x30
    1c9e:	8f a7       	std	Y+47, r24	; 0x2f
    1ca0:	0f c0       	rjmp	.+30     	; 0x1cc0 <LCD_VidWrite4Cmd+0x274>
    1ca2:	88 ec       	ldi	r24, 0xC8	; 200
    1ca4:	90 e0       	ldi	r25, 0x00	; 0
    1ca6:	9e a7       	std	Y+46, r25	; 0x2e
    1ca8:	8d a7       	std	Y+45, r24	; 0x2d
    1caa:	8d a5       	ldd	r24, Y+45	; 0x2d
    1cac:	9e a5       	ldd	r25, Y+46	; 0x2e
    1cae:	01 97       	sbiw	r24, 0x01	; 1
    1cb0:	f1 f7       	brne	.-4      	; 0x1cae <LCD_VidWrite4Cmd+0x262>
    1cb2:	9e a7       	std	Y+46, r25	; 0x2e
    1cb4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cb6:	8f a5       	ldd	r24, Y+47	; 0x2f
    1cb8:	98 a9       	ldd	r25, Y+48	; 0x30
    1cba:	01 97       	sbiw	r24, 0x01	; 1
    1cbc:	98 ab       	std	Y+48, r25	; 0x30
    1cbe:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cc0:	8f a5       	ldd	r24, Y+47	; 0x2f
    1cc2:	98 a9       	ldd	r25, Y+48	; 0x30
    1cc4:	00 97       	sbiw	r24, 0x00	; 0
    1cc6:	69 f7       	brne	.-38     	; 0x1ca2 <LCD_VidWrite4Cmd+0x256>
    1cc8:	14 c0       	rjmp	.+40     	; 0x1cf2 <LCD_VidWrite4Cmd+0x2a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cca:	69 a9       	ldd	r22, Y+49	; 0x31
    1ccc:	7a a9       	ldd	r23, Y+50	; 0x32
    1cce:	8b a9       	ldd	r24, Y+51	; 0x33
    1cd0:	9c a9       	ldd	r25, Y+52	; 0x34
    1cd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cd6:	dc 01       	movw	r26, r24
    1cd8:	cb 01       	movw	r24, r22
    1cda:	98 ab       	std	Y+48, r25	; 0x30
    1cdc:	8f a7       	std	Y+47, r24	; 0x2f
    1cde:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ce0:	98 a9       	ldd	r25, Y+48	; 0x30
    1ce2:	9c a7       	std	Y+44, r25	; 0x2c
    1ce4:	8b a7       	std	Y+43, r24	; 0x2b
    1ce6:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ce8:	9c a5       	ldd	r25, Y+44	; 0x2c
    1cea:	01 97       	sbiw	r24, 0x01	; 1
    1cec:	f1 f7       	brne	.-4      	; 0x1cea <LCD_VidWrite4Cmd+0x29e>
    1cee:	9c a7       	std	Y+44, r25	; 0x2c
    1cf0:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);

	if(InitStepFinishid)
    1cf2:	80 91 78 00 	lds	r24, 0x0078
    1cf6:	88 23       	and	r24, r24
    1cf8:	09 f4       	brne	.+2      	; 0x1cfc <LCD_VidWrite4Cmd+0x2b0>
    1cfa:	20 c1       	rjmp	.+576    	; 0x1f3c <LCD_VidWrite4Cmd+0x4f0>
	{
		DIO_VidSetPinValue(LCD_PORT,PIN4,GET_BIT(LOC_Cmd,0));
    1cfc:	fe 01       	movw	r30, r28
    1cfe:	e9 5b       	subi	r30, 0xB9	; 185
    1d00:	ff 4f       	sbci	r31, 0xFF	; 255
    1d02:	80 81       	ld	r24, Z
    1d04:	98 2f       	mov	r25, r24
    1d06:	91 70       	andi	r25, 0x01	; 1
    1d08:	83 e0       	ldi	r24, 0x03	; 3
    1d0a:	64 e0       	ldi	r22, 0x04	; 4
    1d0c:	49 2f       	mov	r20, r25
    1d0e:	0e 94 29 08 	call	0x1052	; 0x1052 <DIO_VidSetPinValue>
		DIO_VidSetPinValue(LCD_PORT,PIN5,GET_BIT(LOC_Cmd,1));
    1d12:	fe 01       	movw	r30, r28
    1d14:	e9 5b       	subi	r30, 0xB9	; 185
    1d16:	ff 4f       	sbci	r31, 0xFF	; 255
    1d18:	80 81       	ld	r24, Z
    1d1a:	86 95       	lsr	r24
    1d1c:	98 2f       	mov	r25, r24
    1d1e:	91 70       	andi	r25, 0x01	; 1
    1d20:	83 e0       	ldi	r24, 0x03	; 3
    1d22:	65 e0       	ldi	r22, 0x05	; 5
    1d24:	49 2f       	mov	r20, r25
    1d26:	0e 94 29 08 	call	0x1052	; 0x1052 <DIO_VidSetPinValue>
		DIO_VidSetPinValue(LCD_PORT,PIN6,GET_BIT(LOC_Cmd,2));
    1d2a:	fe 01       	movw	r30, r28
    1d2c:	e9 5b       	subi	r30, 0xB9	; 185
    1d2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d30:	80 81       	ld	r24, Z
    1d32:	86 95       	lsr	r24
    1d34:	86 95       	lsr	r24
    1d36:	98 2f       	mov	r25, r24
    1d38:	91 70       	andi	r25, 0x01	; 1
    1d3a:	83 e0       	ldi	r24, 0x03	; 3
    1d3c:	66 e0       	ldi	r22, 0x06	; 6
    1d3e:	49 2f       	mov	r20, r25
    1d40:	0e 94 29 08 	call	0x1052	; 0x1052 <DIO_VidSetPinValue>
		DIO_VidSetPinValue(LCD_PORT,PIN7,GET_BIT(LOC_Cmd,3));
    1d44:	fe 01       	movw	r30, r28
    1d46:	e9 5b       	subi	r30, 0xB9	; 185
    1d48:	ff 4f       	sbci	r31, 0xFF	; 255
    1d4a:	80 81       	ld	r24, Z
    1d4c:	86 95       	lsr	r24
    1d4e:	86 95       	lsr	r24
    1d50:	86 95       	lsr	r24
    1d52:	98 2f       	mov	r25, r24
    1d54:	91 70       	andi	r25, 0x01	; 1
    1d56:	83 e0       	ldi	r24, 0x03	; 3
    1d58:	67 e0       	ldi	r22, 0x07	; 7
    1d5a:	49 2f       	mov	r20, r25
    1d5c:	0e 94 29 08 	call	0x1052	; 0x1052 <DIO_VidSetPinValue>

		DIO_VidSetPinValue(LCD_INIT,LCD_EN,1);
    1d60:	81 e0       	ldi	r24, 0x01	; 1
    1d62:	65 e0       	ldi	r22, 0x05	; 5
    1d64:	41 e0       	ldi	r20, 0x01	; 1
    1d66:	0e 94 29 08 	call	0x1052	; 0x1052 <DIO_VidSetPinValue>
    1d6a:	80 e0       	ldi	r24, 0x00	; 0
    1d6c:	90 e0       	ldi	r25, 0x00	; 0
    1d6e:	a0 e8       	ldi	r26, 0x80	; 128
    1d70:	bf e3       	ldi	r27, 0x3F	; 63
    1d72:	8f a3       	std	Y+39, r24	; 0x27
    1d74:	98 a7       	std	Y+40, r25	; 0x28
    1d76:	a9 a7       	std	Y+41, r26	; 0x29
    1d78:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d7a:	6f a1       	ldd	r22, Y+39	; 0x27
    1d7c:	78 a5       	ldd	r23, Y+40	; 0x28
    1d7e:	89 a5       	ldd	r24, Y+41	; 0x29
    1d80:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d82:	20 e0       	ldi	r18, 0x00	; 0
    1d84:	30 e0       	ldi	r19, 0x00	; 0
    1d86:	4a ef       	ldi	r20, 0xFA	; 250
    1d88:	54 e4       	ldi	r21, 0x44	; 68
    1d8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d8e:	dc 01       	movw	r26, r24
    1d90:	cb 01       	movw	r24, r22
    1d92:	8b a3       	std	Y+35, r24	; 0x23
    1d94:	9c a3       	std	Y+36, r25	; 0x24
    1d96:	ad a3       	std	Y+37, r26	; 0x25
    1d98:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1d9a:	6b a1       	ldd	r22, Y+35	; 0x23
    1d9c:	7c a1       	ldd	r23, Y+36	; 0x24
    1d9e:	8d a1       	ldd	r24, Y+37	; 0x25
    1da0:	9e a1       	ldd	r25, Y+38	; 0x26
    1da2:	20 e0       	ldi	r18, 0x00	; 0
    1da4:	30 e0       	ldi	r19, 0x00	; 0
    1da6:	40 e8       	ldi	r20, 0x80	; 128
    1da8:	5f e3       	ldi	r21, 0x3F	; 63
    1daa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1dae:	88 23       	and	r24, r24
    1db0:	2c f4       	brge	.+10     	; 0x1dbc <LCD_VidWrite4Cmd+0x370>
		__ticks = 1;
    1db2:	81 e0       	ldi	r24, 0x01	; 1
    1db4:	90 e0       	ldi	r25, 0x00	; 0
    1db6:	9a a3       	std	Y+34, r25	; 0x22
    1db8:	89 a3       	std	Y+33, r24	; 0x21
    1dba:	3f c0       	rjmp	.+126    	; 0x1e3a <LCD_VidWrite4Cmd+0x3ee>
	else if (__tmp > 65535)
    1dbc:	6b a1       	ldd	r22, Y+35	; 0x23
    1dbe:	7c a1       	ldd	r23, Y+36	; 0x24
    1dc0:	8d a1       	ldd	r24, Y+37	; 0x25
    1dc2:	9e a1       	ldd	r25, Y+38	; 0x26
    1dc4:	20 e0       	ldi	r18, 0x00	; 0
    1dc6:	3f ef       	ldi	r19, 0xFF	; 255
    1dc8:	4f e7       	ldi	r20, 0x7F	; 127
    1dca:	57 e4       	ldi	r21, 0x47	; 71
    1dcc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1dd0:	18 16       	cp	r1, r24
    1dd2:	4c f5       	brge	.+82     	; 0x1e26 <LCD_VidWrite4Cmd+0x3da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dd4:	6f a1       	ldd	r22, Y+39	; 0x27
    1dd6:	78 a5       	ldd	r23, Y+40	; 0x28
    1dd8:	89 a5       	ldd	r24, Y+41	; 0x29
    1dda:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ddc:	20 e0       	ldi	r18, 0x00	; 0
    1dde:	30 e0       	ldi	r19, 0x00	; 0
    1de0:	40 e2       	ldi	r20, 0x20	; 32
    1de2:	51 e4       	ldi	r21, 0x41	; 65
    1de4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1de8:	dc 01       	movw	r26, r24
    1dea:	cb 01       	movw	r24, r22
    1dec:	bc 01       	movw	r22, r24
    1dee:	cd 01       	movw	r24, r26
    1df0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1df4:	dc 01       	movw	r26, r24
    1df6:	cb 01       	movw	r24, r22
    1df8:	9a a3       	std	Y+34, r25	; 0x22
    1dfa:	89 a3       	std	Y+33, r24	; 0x21
    1dfc:	0f c0       	rjmp	.+30     	; 0x1e1c <LCD_VidWrite4Cmd+0x3d0>
    1dfe:	88 ec       	ldi	r24, 0xC8	; 200
    1e00:	90 e0       	ldi	r25, 0x00	; 0
    1e02:	98 a3       	std	Y+32, r25	; 0x20
    1e04:	8f 8f       	std	Y+31, r24	; 0x1f
    1e06:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1e08:	98 a1       	ldd	r25, Y+32	; 0x20
    1e0a:	01 97       	sbiw	r24, 0x01	; 1
    1e0c:	f1 f7       	brne	.-4      	; 0x1e0a <LCD_VidWrite4Cmd+0x3be>
    1e0e:	98 a3       	std	Y+32, r25	; 0x20
    1e10:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e12:	89 a1       	ldd	r24, Y+33	; 0x21
    1e14:	9a a1       	ldd	r25, Y+34	; 0x22
    1e16:	01 97       	sbiw	r24, 0x01	; 1
    1e18:	9a a3       	std	Y+34, r25	; 0x22
    1e1a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e1c:	89 a1       	ldd	r24, Y+33	; 0x21
    1e1e:	9a a1       	ldd	r25, Y+34	; 0x22
    1e20:	00 97       	sbiw	r24, 0x00	; 0
    1e22:	69 f7       	brne	.-38     	; 0x1dfe <LCD_VidWrite4Cmd+0x3b2>
    1e24:	14 c0       	rjmp	.+40     	; 0x1e4e <LCD_VidWrite4Cmd+0x402>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e26:	6b a1       	ldd	r22, Y+35	; 0x23
    1e28:	7c a1       	ldd	r23, Y+36	; 0x24
    1e2a:	8d a1       	ldd	r24, Y+37	; 0x25
    1e2c:	9e a1       	ldd	r25, Y+38	; 0x26
    1e2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e32:	dc 01       	movw	r26, r24
    1e34:	cb 01       	movw	r24, r22
    1e36:	9a a3       	std	Y+34, r25	; 0x22
    1e38:	89 a3       	std	Y+33, r24	; 0x21
    1e3a:	89 a1       	ldd	r24, Y+33	; 0x21
    1e3c:	9a a1       	ldd	r25, Y+34	; 0x22
    1e3e:	9e 8f       	std	Y+30, r25	; 0x1e
    1e40:	8d 8f       	std	Y+29, r24	; 0x1d
    1e42:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e44:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1e46:	01 97       	sbiw	r24, 0x01	; 1
    1e48:	f1 f7       	brne	.-4      	; 0x1e46 <LCD_VidWrite4Cmd+0x3fa>
    1e4a:	9e 8f       	std	Y+30, r25	; 0x1e
    1e4c:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1);
		DIO_VidSetPinValue(LCD_INIT,LCD_EN,0);
    1e4e:	81 e0       	ldi	r24, 0x01	; 1
    1e50:	65 e0       	ldi	r22, 0x05	; 5
    1e52:	40 e0       	ldi	r20, 0x00	; 0
    1e54:	0e 94 29 08 	call	0x1052	; 0x1052 <DIO_VidSetPinValue>
    1e58:	80 e0       	ldi	r24, 0x00	; 0
    1e5a:	90 e0       	ldi	r25, 0x00	; 0
    1e5c:	a0 e8       	ldi	r26, 0x80	; 128
    1e5e:	bf e3       	ldi	r27, 0x3F	; 63
    1e60:	89 8f       	std	Y+25, r24	; 0x19
    1e62:	9a 8f       	std	Y+26, r25	; 0x1a
    1e64:	ab 8f       	std	Y+27, r26	; 0x1b
    1e66:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e68:	69 8d       	ldd	r22, Y+25	; 0x19
    1e6a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e6c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e6e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e70:	20 e0       	ldi	r18, 0x00	; 0
    1e72:	30 e0       	ldi	r19, 0x00	; 0
    1e74:	4a ef       	ldi	r20, 0xFA	; 250
    1e76:	54 e4       	ldi	r21, 0x44	; 68
    1e78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e7c:	dc 01       	movw	r26, r24
    1e7e:	cb 01       	movw	r24, r22
    1e80:	8d 8b       	std	Y+21, r24	; 0x15
    1e82:	9e 8b       	std	Y+22, r25	; 0x16
    1e84:	af 8b       	std	Y+23, r26	; 0x17
    1e86:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1e88:	6d 89       	ldd	r22, Y+21	; 0x15
    1e8a:	7e 89       	ldd	r23, Y+22	; 0x16
    1e8c:	8f 89       	ldd	r24, Y+23	; 0x17
    1e8e:	98 8d       	ldd	r25, Y+24	; 0x18
    1e90:	20 e0       	ldi	r18, 0x00	; 0
    1e92:	30 e0       	ldi	r19, 0x00	; 0
    1e94:	40 e8       	ldi	r20, 0x80	; 128
    1e96:	5f e3       	ldi	r21, 0x3F	; 63
    1e98:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e9c:	88 23       	and	r24, r24
    1e9e:	2c f4       	brge	.+10     	; 0x1eaa <LCD_VidWrite4Cmd+0x45e>
		__ticks = 1;
    1ea0:	81 e0       	ldi	r24, 0x01	; 1
    1ea2:	90 e0       	ldi	r25, 0x00	; 0
    1ea4:	9c 8b       	std	Y+20, r25	; 0x14
    1ea6:	8b 8b       	std	Y+19, r24	; 0x13
    1ea8:	3f c0       	rjmp	.+126    	; 0x1f28 <LCD_VidWrite4Cmd+0x4dc>
	else if (__tmp > 65535)
    1eaa:	6d 89       	ldd	r22, Y+21	; 0x15
    1eac:	7e 89       	ldd	r23, Y+22	; 0x16
    1eae:	8f 89       	ldd	r24, Y+23	; 0x17
    1eb0:	98 8d       	ldd	r25, Y+24	; 0x18
    1eb2:	20 e0       	ldi	r18, 0x00	; 0
    1eb4:	3f ef       	ldi	r19, 0xFF	; 255
    1eb6:	4f e7       	ldi	r20, 0x7F	; 127
    1eb8:	57 e4       	ldi	r21, 0x47	; 71
    1eba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ebe:	18 16       	cp	r1, r24
    1ec0:	4c f5       	brge	.+82     	; 0x1f14 <LCD_VidWrite4Cmd+0x4c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ec2:	69 8d       	ldd	r22, Y+25	; 0x19
    1ec4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ec6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ec8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1eca:	20 e0       	ldi	r18, 0x00	; 0
    1ecc:	30 e0       	ldi	r19, 0x00	; 0
    1ece:	40 e2       	ldi	r20, 0x20	; 32
    1ed0:	51 e4       	ldi	r21, 0x41	; 65
    1ed2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ed6:	dc 01       	movw	r26, r24
    1ed8:	cb 01       	movw	r24, r22
    1eda:	bc 01       	movw	r22, r24
    1edc:	cd 01       	movw	r24, r26
    1ede:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ee2:	dc 01       	movw	r26, r24
    1ee4:	cb 01       	movw	r24, r22
    1ee6:	9c 8b       	std	Y+20, r25	; 0x14
    1ee8:	8b 8b       	std	Y+19, r24	; 0x13
    1eea:	0f c0       	rjmp	.+30     	; 0x1f0a <LCD_VidWrite4Cmd+0x4be>
    1eec:	88 ec       	ldi	r24, 0xC8	; 200
    1eee:	90 e0       	ldi	r25, 0x00	; 0
    1ef0:	9a 8b       	std	Y+18, r25	; 0x12
    1ef2:	89 8b       	std	Y+17, r24	; 0x11
    1ef4:	89 89       	ldd	r24, Y+17	; 0x11
    1ef6:	9a 89       	ldd	r25, Y+18	; 0x12
    1ef8:	01 97       	sbiw	r24, 0x01	; 1
    1efa:	f1 f7       	brne	.-4      	; 0x1ef8 <LCD_VidWrite4Cmd+0x4ac>
    1efc:	9a 8b       	std	Y+18, r25	; 0x12
    1efe:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f00:	8b 89       	ldd	r24, Y+19	; 0x13
    1f02:	9c 89       	ldd	r25, Y+20	; 0x14
    1f04:	01 97       	sbiw	r24, 0x01	; 1
    1f06:	9c 8b       	std	Y+20, r25	; 0x14
    1f08:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f0a:	8b 89       	ldd	r24, Y+19	; 0x13
    1f0c:	9c 89       	ldd	r25, Y+20	; 0x14
    1f0e:	00 97       	sbiw	r24, 0x00	; 0
    1f10:	69 f7       	brne	.-38     	; 0x1eec <LCD_VidWrite4Cmd+0x4a0>
    1f12:	14 c0       	rjmp	.+40     	; 0x1f3c <LCD_VidWrite4Cmd+0x4f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f14:	6d 89       	ldd	r22, Y+21	; 0x15
    1f16:	7e 89       	ldd	r23, Y+22	; 0x16
    1f18:	8f 89       	ldd	r24, Y+23	; 0x17
    1f1a:	98 8d       	ldd	r25, Y+24	; 0x18
    1f1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f20:	dc 01       	movw	r26, r24
    1f22:	cb 01       	movw	r24, r22
    1f24:	9c 8b       	std	Y+20, r25	; 0x14
    1f26:	8b 8b       	std	Y+19, r24	; 0x13
    1f28:	8b 89       	ldd	r24, Y+19	; 0x13
    1f2a:	9c 89       	ldd	r25, Y+20	; 0x14
    1f2c:	98 8b       	std	Y+16, r25	; 0x10
    1f2e:	8f 87       	std	Y+15, r24	; 0x0f
    1f30:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f32:	98 89       	ldd	r25, Y+16	; 0x10
    1f34:	01 97       	sbiw	r24, 0x01	; 1
    1f36:	f1 f7       	brne	.-4      	; 0x1f34 <LCD_VidWrite4Cmd+0x4e8>
    1f38:	98 8b       	std	Y+16, r25	; 0x10
    1f3a:	8f 87       	std	Y+15, r24	; 0x0f
    1f3c:	80 e0       	ldi	r24, 0x00	; 0
    1f3e:	90 e0       	ldi	r25, 0x00	; 0
    1f40:	a0 e0       	ldi	r26, 0x00	; 0
    1f42:	b0 e4       	ldi	r27, 0x40	; 64
    1f44:	8b 87       	std	Y+11, r24	; 0x0b
    1f46:	9c 87       	std	Y+12, r25	; 0x0c
    1f48:	ad 87       	std	Y+13, r26	; 0x0d
    1f4a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f4c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f4e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f50:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f52:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f54:	20 e0       	ldi	r18, 0x00	; 0
    1f56:	30 e0       	ldi	r19, 0x00	; 0
    1f58:	4a ef       	ldi	r20, 0xFA	; 250
    1f5a:	54 e4       	ldi	r21, 0x44	; 68
    1f5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f60:	dc 01       	movw	r26, r24
    1f62:	cb 01       	movw	r24, r22
    1f64:	8f 83       	std	Y+7, r24	; 0x07
    1f66:	98 87       	std	Y+8, r25	; 0x08
    1f68:	a9 87       	std	Y+9, r26	; 0x09
    1f6a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f6c:	6f 81       	ldd	r22, Y+7	; 0x07
    1f6e:	78 85       	ldd	r23, Y+8	; 0x08
    1f70:	89 85       	ldd	r24, Y+9	; 0x09
    1f72:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f74:	20 e0       	ldi	r18, 0x00	; 0
    1f76:	30 e0       	ldi	r19, 0x00	; 0
    1f78:	40 e8       	ldi	r20, 0x80	; 128
    1f7a:	5f e3       	ldi	r21, 0x3F	; 63
    1f7c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f80:	88 23       	and	r24, r24
    1f82:	2c f4       	brge	.+10     	; 0x1f8e <LCD_VidWrite4Cmd+0x542>
		__ticks = 1;
    1f84:	81 e0       	ldi	r24, 0x01	; 1
    1f86:	90 e0       	ldi	r25, 0x00	; 0
    1f88:	9e 83       	std	Y+6, r25	; 0x06
    1f8a:	8d 83       	std	Y+5, r24	; 0x05
    1f8c:	3f c0       	rjmp	.+126    	; 0x200c <LCD_VidWrite4Cmd+0x5c0>
	else if (__tmp > 65535)
    1f8e:	6f 81       	ldd	r22, Y+7	; 0x07
    1f90:	78 85       	ldd	r23, Y+8	; 0x08
    1f92:	89 85       	ldd	r24, Y+9	; 0x09
    1f94:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f96:	20 e0       	ldi	r18, 0x00	; 0
    1f98:	3f ef       	ldi	r19, 0xFF	; 255
    1f9a:	4f e7       	ldi	r20, 0x7F	; 127
    1f9c:	57 e4       	ldi	r21, 0x47	; 71
    1f9e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fa2:	18 16       	cp	r1, r24
    1fa4:	4c f5       	brge	.+82     	; 0x1ff8 <LCD_VidWrite4Cmd+0x5ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fa6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fa8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1faa:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fac:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fae:	20 e0       	ldi	r18, 0x00	; 0
    1fb0:	30 e0       	ldi	r19, 0x00	; 0
    1fb2:	40 e2       	ldi	r20, 0x20	; 32
    1fb4:	51 e4       	ldi	r21, 0x41	; 65
    1fb6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fba:	dc 01       	movw	r26, r24
    1fbc:	cb 01       	movw	r24, r22
    1fbe:	bc 01       	movw	r22, r24
    1fc0:	cd 01       	movw	r24, r26
    1fc2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fc6:	dc 01       	movw	r26, r24
    1fc8:	cb 01       	movw	r24, r22
    1fca:	9e 83       	std	Y+6, r25	; 0x06
    1fcc:	8d 83       	std	Y+5, r24	; 0x05
    1fce:	0f c0       	rjmp	.+30     	; 0x1fee <LCD_VidWrite4Cmd+0x5a2>
    1fd0:	88 ec       	ldi	r24, 0xC8	; 200
    1fd2:	90 e0       	ldi	r25, 0x00	; 0
    1fd4:	9c 83       	std	Y+4, r25	; 0x04
    1fd6:	8b 83       	std	Y+3, r24	; 0x03
    1fd8:	8b 81       	ldd	r24, Y+3	; 0x03
    1fda:	9c 81       	ldd	r25, Y+4	; 0x04
    1fdc:	01 97       	sbiw	r24, 0x01	; 1
    1fde:	f1 f7       	brne	.-4      	; 0x1fdc <LCD_VidWrite4Cmd+0x590>
    1fe0:	9c 83       	std	Y+4, r25	; 0x04
    1fe2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fe4:	8d 81       	ldd	r24, Y+5	; 0x05
    1fe6:	9e 81       	ldd	r25, Y+6	; 0x06
    1fe8:	01 97       	sbiw	r24, 0x01	; 1
    1fea:	9e 83       	std	Y+6, r25	; 0x06
    1fec:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fee:	8d 81       	ldd	r24, Y+5	; 0x05
    1ff0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ff2:	00 97       	sbiw	r24, 0x00	; 0
    1ff4:	69 f7       	brne	.-38     	; 0x1fd0 <LCD_VidWrite4Cmd+0x584>
    1ff6:	14 c0       	rjmp	.+40     	; 0x2020 <LCD_VidWrite4Cmd+0x5d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ff8:	6f 81       	ldd	r22, Y+7	; 0x07
    1ffa:	78 85       	ldd	r23, Y+8	; 0x08
    1ffc:	89 85       	ldd	r24, Y+9	; 0x09
    1ffe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2000:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2004:	dc 01       	movw	r26, r24
    2006:	cb 01       	movw	r24, r22
    2008:	9e 83       	std	Y+6, r25	; 0x06
    200a:	8d 83       	std	Y+5, r24	; 0x05
    200c:	8d 81       	ldd	r24, Y+5	; 0x05
    200e:	9e 81       	ldd	r25, Y+6	; 0x06
    2010:	9a 83       	std	Y+2, r25	; 0x02
    2012:	89 83       	std	Y+1, r24	; 0x01
    2014:	89 81       	ldd	r24, Y+1	; 0x01
    2016:	9a 81       	ldd	r25, Y+2	; 0x02
    2018:	01 97       	sbiw	r24, 0x01	; 1
    201a:	f1 f7       	brne	.-4      	; 0x2018 <LCD_VidWrite4Cmd+0x5cc>
    201c:	9a 83       	std	Y+2, r25	; 0x02
    201e:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1);
	}
	_delay_ms(2);
}
    2020:	c9 5b       	subi	r28, 0xB9	; 185
    2022:	df 4f       	sbci	r29, 0xFF	; 255
    2024:	0f b6       	in	r0, 0x3f	; 63
    2026:	f8 94       	cli
    2028:	de bf       	out	0x3e, r29	; 62
    202a:	0f be       	out	0x3f, r0	; 63
    202c:	cd bf       	out	0x3d, r28	; 61
    202e:	cf 91       	pop	r28
    2030:	df 91       	pop	r29
    2032:	1f 91       	pop	r17
    2034:	0f 91       	pop	r16
    2036:	08 95       	ret

00002038 <LCD_VidWrite4Data>:


void LCD_VidWrite4Data(u8 LOC_Data)
{
    2038:	df 93       	push	r29
    203a:	cf 93       	push	r28
    203c:	cd b7       	in	r28, 0x3d	; 61
    203e:	de b7       	in	r29, 0x3e	; 62
    2040:	ab 97       	sbiw	r28, 0x2b	; 43
    2042:	0f b6       	in	r0, 0x3f	; 63
    2044:	f8 94       	cli
    2046:	de bf       	out	0x3e, r29	; 62
    2048:	0f be       	out	0x3f, r0	; 63
    204a:	cd bf       	out	0x3d, r28	; 61
    204c:	8b a7       	std	Y+43, r24	; 0x2b
	DIO_VidSetPinValue(LCD_INIT,LCD_RS,1);
    204e:	81 e0       	ldi	r24, 0x01	; 1
    2050:	63 e0       	ldi	r22, 0x03	; 3
    2052:	41 e0       	ldi	r20, 0x01	; 1
    2054:	0e 94 29 08 	call	0x1052	; 0x1052 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(LCD_INIT,LCD_RW,0);
    2058:	81 e0       	ldi	r24, 0x01	; 1
    205a:	64 e0       	ldi	r22, 0x04	; 4
    205c:	40 e0       	ldi	r20, 0x00	; 0
    205e:	0e 94 29 08 	call	0x1052	; 0x1052 <DIO_VidSetPinValue>

	DIO_VidSetPinValue(LCD_PORT,PIN4,GET_BIT(LOC_Data,4));
    2062:	8b a5       	ldd	r24, Y+43	; 0x2b
    2064:	82 95       	swap	r24
    2066:	8f 70       	andi	r24, 0x0F	; 15
    2068:	98 2f       	mov	r25, r24
    206a:	91 70       	andi	r25, 0x01	; 1
    206c:	83 e0       	ldi	r24, 0x03	; 3
    206e:	64 e0       	ldi	r22, 0x04	; 4
    2070:	49 2f       	mov	r20, r25
    2072:	0e 94 29 08 	call	0x1052	; 0x1052 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(LCD_PORT,PIN5,GET_BIT(LOC_Data,5));
    2076:	8b a5       	ldd	r24, Y+43	; 0x2b
    2078:	82 95       	swap	r24
    207a:	86 95       	lsr	r24
    207c:	87 70       	andi	r24, 0x07	; 7
    207e:	98 2f       	mov	r25, r24
    2080:	91 70       	andi	r25, 0x01	; 1
    2082:	83 e0       	ldi	r24, 0x03	; 3
    2084:	65 e0       	ldi	r22, 0x05	; 5
    2086:	49 2f       	mov	r20, r25
    2088:	0e 94 29 08 	call	0x1052	; 0x1052 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(LCD_PORT,PIN6,GET_BIT(LOC_Data,6));
    208c:	8b a5       	ldd	r24, Y+43	; 0x2b
    208e:	82 95       	swap	r24
    2090:	86 95       	lsr	r24
    2092:	86 95       	lsr	r24
    2094:	83 70       	andi	r24, 0x03	; 3
    2096:	98 2f       	mov	r25, r24
    2098:	91 70       	andi	r25, 0x01	; 1
    209a:	83 e0       	ldi	r24, 0x03	; 3
    209c:	66 e0       	ldi	r22, 0x06	; 6
    209e:	49 2f       	mov	r20, r25
    20a0:	0e 94 29 08 	call	0x1052	; 0x1052 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(LCD_PORT,PIN7,GET_BIT(LOC_Data,7));
    20a4:	8b a5       	ldd	r24, Y+43	; 0x2b
    20a6:	98 2f       	mov	r25, r24
    20a8:	99 1f       	adc	r25, r25
    20aa:	99 27       	eor	r25, r25
    20ac:	99 1f       	adc	r25, r25
    20ae:	83 e0       	ldi	r24, 0x03	; 3
    20b0:	67 e0       	ldi	r22, 0x07	; 7
    20b2:	49 2f       	mov	r20, r25
    20b4:	0e 94 29 08 	call	0x1052	; 0x1052 <DIO_VidSetPinValue>

	DIO_VidSetPinValue(LCD_INIT,LCD_EN,1);
    20b8:	81 e0       	ldi	r24, 0x01	; 1
    20ba:	65 e0       	ldi	r22, 0x05	; 5
    20bc:	41 e0       	ldi	r20, 0x01	; 1
    20be:	0e 94 29 08 	call	0x1052	; 0x1052 <DIO_VidSetPinValue>
    20c2:	80 e0       	ldi	r24, 0x00	; 0
    20c4:	90 e0       	ldi	r25, 0x00	; 0
    20c6:	a0 e8       	ldi	r26, 0x80	; 128
    20c8:	bf e3       	ldi	r27, 0x3F	; 63
    20ca:	8f a3       	std	Y+39, r24	; 0x27
    20cc:	98 a7       	std	Y+40, r25	; 0x28
    20ce:	a9 a7       	std	Y+41, r26	; 0x29
    20d0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20d2:	6f a1       	ldd	r22, Y+39	; 0x27
    20d4:	78 a5       	ldd	r23, Y+40	; 0x28
    20d6:	89 a5       	ldd	r24, Y+41	; 0x29
    20d8:	9a a5       	ldd	r25, Y+42	; 0x2a
    20da:	20 e0       	ldi	r18, 0x00	; 0
    20dc:	30 e0       	ldi	r19, 0x00	; 0
    20de:	4a ef       	ldi	r20, 0xFA	; 250
    20e0:	54 e4       	ldi	r21, 0x44	; 68
    20e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20e6:	dc 01       	movw	r26, r24
    20e8:	cb 01       	movw	r24, r22
    20ea:	8b a3       	std	Y+35, r24	; 0x23
    20ec:	9c a3       	std	Y+36, r25	; 0x24
    20ee:	ad a3       	std	Y+37, r26	; 0x25
    20f0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    20f2:	6b a1       	ldd	r22, Y+35	; 0x23
    20f4:	7c a1       	ldd	r23, Y+36	; 0x24
    20f6:	8d a1       	ldd	r24, Y+37	; 0x25
    20f8:	9e a1       	ldd	r25, Y+38	; 0x26
    20fa:	20 e0       	ldi	r18, 0x00	; 0
    20fc:	30 e0       	ldi	r19, 0x00	; 0
    20fe:	40 e8       	ldi	r20, 0x80	; 128
    2100:	5f e3       	ldi	r21, 0x3F	; 63
    2102:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2106:	88 23       	and	r24, r24
    2108:	2c f4       	brge	.+10     	; 0x2114 <LCD_VidWrite4Data+0xdc>
		__ticks = 1;
    210a:	81 e0       	ldi	r24, 0x01	; 1
    210c:	90 e0       	ldi	r25, 0x00	; 0
    210e:	9a a3       	std	Y+34, r25	; 0x22
    2110:	89 a3       	std	Y+33, r24	; 0x21
    2112:	3f c0       	rjmp	.+126    	; 0x2192 <LCD_VidWrite4Data+0x15a>
	else if (__tmp > 65535)
    2114:	6b a1       	ldd	r22, Y+35	; 0x23
    2116:	7c a1       	ldd	r23, Y+36	; 0x24
    2118:	8d a1       	ldd	r24, Y+37	; 0x25
    211a:	9e a1       	ldd	r25, Y+38	; 0x26
    211c:	20 e0       	ldi	r18, 0x00	; 0
    211e:	3f ef       	ldi	r19, 0xFF	; 255
    2120:	4f e7       	ldi	r20, 0x7F	; 127
    2122:	57 e4       	ldi	r21, 0x47	; 71
    2124:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2128:	18 16       	cp	r1, r24
    212a:	4c f5       	brge	.+82     	; 0x217e <LCD_VidWrite4Data+0x146>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    212c:	6f a1       	ldd	r22, Y+39	; 0x27
    212e:	78 a5       	ldd	r23, Y+40	; 0x28
    2130:	89 a5       	ldd	r24, Y+41	; 0x29
    2132:	9a a5       	ldd	r25, Y+42	; 0x2a
    2134:	20 e0       	ldi	r18, 0x00	; 0
    2136:	30 e0       	ldi	r19, 0x00	; 0
    2138:	40 e2       	ldi	r20, 0x20	; 32
    213a:	51 e4       	ldi	r21, 0x41	; 65
    213c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2140:	dc 01       	movw	r26, r24
    2142:	cb 01       	movw	r24, r22
    2144:	bc 01       	movw	r22, r24
    2146:	cd 01       	movw	r24, r26
    2148:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    214c:	dc 01       	movw	r26, r24
    214e:	cb 01       	movw	r24, r22
    2150:	9a a3       	std	Y+34, r25	; 0x22
    2152:	89 a3       	std	Y+33, r24	; 0x21
    2154:	0f c0       	rjmp	.+30     	; 0x2174 <LCD_VidWrite4Data+0x13c>
    2156:	88 ec       	ldi	r24, 0xC8	; 200
    2158:	90 e0       	ldi	r25, 0x00	; 0
    215a:	98 a3       	std	Y+32, r25	; 0x20
    215c:	8f 8f       	std	Y+31, r24	; 0x1f
    215e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2160:	98 a1       	ldd	r25, Y+32	; 0x20
    2162:	01 97       	sbiw	r24, 0x01	; 1
    2164:	f1 f7       	brne	.-4      	; 0x2162 <LCD_VidWrite4Data+0x12a>
    2166:	98 a3       	std	Y+32, r25	; 0x20
    2168:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    216a:	89 a1       	ldd	r24, Y+33	; 0x21
    216c:	9a a1       	ldd	r25, Y+34	; 0x22
    216e:	01 97       	sbiw	r24, 0x01	; 1
    2170:	9a a3       	std	Y+34, r25	; 0x22
    2172:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2174:	89 a1       	ldd	r24, Y+33	; 0x21
    2176:	9a a1       	ldd	r25, Y+34	; 0x22
    2178:	00 97       	sbiw	r24, 0x00	; 0
    217a:	69 f7       	brne	.-38     	; 0x2156 <LCD_VidWrite4Data+0x11e>
    217c:	14 c0       	rjmp	.+40     	; 0x21a6 <LCD_VidWrite4Data+0x16e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    217e:	6b a1       	ldd	r22, Y+35	; 0x23
    2180:	7c a1       	ldd	r23, Y+36	; 0x24
    2182:	8d a1       	ldd	r24, Y+37	; 0x25
    2184:	9e a1       	ldd	r25, Y+38	; 0x26
    2186:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    218a:	dc 01       	movw	r26, r24
    218c:	cb 01       	movw	r24, r22
    218e:	9a a3       	std	Y+34, r25	; 0x22
    2190:	89 a3       	std	Y+33, r24	; 0x21
    2192:	89 a1       	ldd	r24, Y+33	; 0x21
    2194:	9a a1       	ldd	r25, Y+34	; 0x22
    2196:	9e 8f       	std	Y+30, r25	; 0x1e
    2198:	8d 8f       	std	Y+29, r24	; 0x1d
    219a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    219c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    219e:	01 97       	sbiw	r24, 0x01	; 1
    21a0:	f1 f7       	brne	.-4      	; 0x219e <LCD_VidWrite4Data+0x166>
    21a2:	9e 8f       	std	Y+30, r25	; 0x1e
    21a4:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	DIO_VidSetPinValue(LCD_INIT,LCD_EN,0);
    21a6:	81 e0       	ldi	r24, 0x01	; 1
    21a8:	65 e0       	ldi	r22, 0x05	; 5
    21aa:	40 e0       	ldi	r20, 0x00	; 0
    21ac:	0e 94 29 08 	call	0x1052	; 0x1052 <DIO_VidSetPinValue>

	DIO_VidSetPinValue(LCD_PORT,PIN4,GET_BIT(LOC_Data,0));
    21b0:	8b a5       	ldd	r24, Y+43	; 0x2b
    21b2:	98 2f       	mov	r25, r24
    21b4:	91 70       	andi	r25, 0x01	; 1
    21b6:	83 e0       	ldi	r24, 0x03	; 3
    21b8:	64 e0       	ldi	r22, 0x04	; 4
    21ba:	49 2f       	mov	r20, r25
    21bc:	0e 94 29 08 	call	0x1052	; 0x1052 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(LCD_PORT,PIN5,GET_BIT(LOC_Data,1));
    21c0:	8b a5       	ldd	r24, Y+43	; 0x2b
    21c2:	86 95       	lsr	r24
    21c4:	98 2f       	mov	r25, r24
    21c6:	91 70       	andi	r25, 0x01	; 1
    21c8:	83 e0       	ldi	r24, 0x03	; 3
    21ca:	65 e0       	ldi	r22, 0x05	; 5
    21cc:	49 2f       	mov	r20, r25
    21ce:	0e 94 29 08 	call	0x1052	; 0x1052 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(LCD_PORT,PIN6,GET_BIT(LOC_Data,2));
    21d2:	8b a5       	ldd	r24, Y+43	; 0x2b
    21d4:	86 95       	lsr	r24
    21d6:	86 95       	lsr	r24
    21d8:	98 2f       	mov	r25, r24
    21da:	91 70       	andi	r25, 0x01	; 1
    21dc:	83 e0       	ldi	r24, 0x03	; 3
    21de:	66 e0       	ldi	r22, 0x06	; 6
    21e0:	49 2f       	mov	r20, r25
    21e2:	0e 94 29 08 	call	0x1052	; 0x1052 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(LCD_PORT,PIN7,GET_BIT(LOC_Data,3));
    21e6:	8b a5       	ldd	r24, Y+43	; 0x2b
    21e8:	86 95       	lsr	r24
    21ea:	86 95       	lsr	r24
    21ec:	86 95       	lsr	r24
    21ee:	98 2f       	mov	r25, r24
    21f0:	91 70       	andi	r25, 0x01	; 1
    21f2:	83 e0       	ldi	r24, 0x03	; 3
    21f4:	67 e0       	ldi	r22, 0x07	; 7
    21f6:	49 2f       	mov	r20, r25
    21f8:	0e 94 29 08 	call	0x1052	; 0x1052 <DIO_VidSetPinValue>

	DIO_VidSetPinValue(LCD_INIT,LCD_EN,1);
    21fc:	81 e0       	ldi	r24, 0x01	; 1
    21fe:	65 e0       	ldi	r22, 0x05	; 5
    2200:	41 e0       	ldi	r20, 0x01	; 1
    2202:	0e 94 29 08 	call	0x1052	; 0x1052 <DIO_VidSetPinValue>
    2206:	80 e0       	ldi	r24, 0x00	; 0
    2208:	90 e0       	ldi	r25, 0x00	; 0
    220a:	a0 e8       	ldi	r26, 0x80	; 128
    220c:	bf e3       	ldi	r27, 0x3F	; 63
    220e:	89 8f       	std	Y+25, r24	; 0x19
    2210:	9a 8f       	std	Y+26, r25	; 0x1a
    2212:	ab 8f       	std	Y+27, r26	; 0x1b
    2214:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2216:	69 8d       	ldd	r22, Y+25	; 0x19
    2218:	7a 8d       	ldd	r23, Y+26	; 0x1a
    221a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    221c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    221e:	20 e0       	ldi	r18, 0x00	; 0
    2220:	30 e0       	ldi	r19, 0x00	; 0
    2222:	4a ef       	ldi	r20, 0xFA	; 250
    2224:	54 e4       	ldi	r21, 0x44	; 68
    2226:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    222a:	dc 01       	movw	r26, r24
    222c:	cb 01       	movw	r24, r22
    222e:	8d 8b       	std	Y+21, r24	; 0x15
    2230:	9e 8b       	std	Y+22, r25	; 0x16
    2232:	af 8b       	std	Y+23, r26	; 0x17
    2234:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2236:	6d 89       	ldd	r22, Y+21	; 0x15
    2238:	7e 89       	ldd	r23, Y+22	; 0x16
    223a:	8f 89       	ldd	r24, Y+23	; 0x17
    223c:	98 8d       	ldd	r25, Y+24	; 0x18
    223e:	20 e0       	ldi	r18, 0x00	; 0
    2240:	30 e0       	ldi	r19, 0x00	; 0
    2242:	40 e8       	ldi	r20, 0x80	; 128
    2244:	5f e3       	ldi	r21, 0x3F	; 63
    2246:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    224a:	88 23       	and	r24, r24
    224c:	2c f4       	brge	.+10     	; 0x2258 <LCD_VidWrite4Data+0x220>
		__ticks = 1;
    224e:	81 e0       	ldi	r24, 0x01	; 1
    2250:	90 e0       	ldi	r25, 0x00	; 0
    2252:	9c 8b       	std	Y+20, r25	; 0x14
    2254:	8b 8b       	std	Y+19, r24	; 0x13
    2256:	3f c0       	rjmp	.+126    	; 0x22d6 <LCD_VidWrite4Data+0x29e>
	else if (__tmp > 65535)
    2258:	6d 89       	ldd	r22, Y+21	; 0x15
    225a:	7e 89       	ldd	r23, Y+22	; 0x16
    225c:	8f 89       	ldd	r24, Y+23	; 0x17
    225e:	98 8d       	ldd	r25, Y+24	; 0x18
    2260:	20 e0       	ldi	r18, 0x00	; 0
    2262:	3f ef       	ldi	r19, 0xFF	; 255
    2264:	4f e7       	ldi	r20, 0x7F	; 127
    2266:	57 e4       	ldi	r21, 0x47	; 71
    2268:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    226c:	18 16       	cp	r1, r24
    226e:	4c f5       	brge	.+82     	; 0x22c2 <LCD_VidWrite4Data+0x28a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2270:	69 8d       	ldd	r22, Y+25	; 0x19
    2272:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2274:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2276:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2278:	20 e0       	ldi	r18, 0x00	; 0
    227a:	30 e0       	ldi	r19, 0x00	; 0
    227c:	40 e2       	ldi	r20, 0x20	; 32
    227e:	51 e4       	ldi	r21, 0x41	; 65
    2280:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2284:	dc 01       	movw	r26, r24
    2286:	cb 01       	movw	r24, r22
    2288:	bc 01       	movw	r22, r24
    228a:	cd 01       	movw	r24, r26
    228c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2290:	dc 01       	movw	r26, r24
    2292:	cb 01       	movw	r24, r22
    2294:	9c 8b       	std	Y+20, r25	; 0x14
    2296:	8b 8b       	std	Y+19, r24	; 0x13
    2298:	0f c0       	rjmp	.+30     	; 0x22b8 <LCD_VidWrite4Data+0x280>
    229a:	88 ec       	ldi	r24, 0xC8	; 200
    229c:	90 e0       	ldi	r25, 0x00	; 0
    229e:	9a 8b       	std	Y+18, r25	; 0x12
    22a0:	89 8b       	std	Y+17, r24	; 0x11
    22a2:	89 89       	ldd	r24, Y+17	; 0x11
    22a4:	9a 89       	ldd	r25, Y+18	; 0x12
    22a6:	01 97       	sbiw	r24, 0x01	; 1
    22a8:	f1 f7       	brne	.-4      	; 0x22a6 <LCD_VidWrite4Data+0x26e>
    22aa:	9a 8b       	std	Y+18, r25	; 0x12
    22ac:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22ae:	8b 89       	ldd	r24, Y+19	; 0x13
    22b0:	9c 89       	ldd	r25, Y+20	; 0x14
    22b2:	01 97       	sbiw	r24, 0x01	; 1
    22b4:	9c 8b       	std	Y+20, r25	; 0x14
    22b6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22b8:	8b 89       	ldd	r24, Y+19	; 0x13
    22ba:	9c 89       	ldd	r25, Y+20	; 0x14
    22bc:	00 97       	sbiw	r24, 0x00	; 0
    22be:	69 f7       	brne	.-38     	; 0x229a <LCD_VidWrite4Data+0x262>
    22c0:	14 c0       	rjmp	.+40     	; 0x22ea <LCD_VidWrite4Data+0x2b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22c2:	6d 89       	ldd	r22, Y+21	; 0x15
    22c4:	7e 89       	ldd	r23, Y+22	; 0x16
    22c6:	8f 89       	ldd	r24, Y+23	; 0x17
    22c8:	98 8d       	ldd	r25, Y+24	; 0x18
    22ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22ce:	dc 01       	movw	r26, r24
    22d0:	cb 01       	movw	r24, r22
    22d2:	9c 8b       	std	Y+20, r25	; 0x14
    22d4:	8b 8b       	std	Y+19, r24	; 0x13
    22d6:	8b 89       	ldd	r24, Y+19	; 0x13
    22d8:	9c 89       	ldd	r25, Y+20	; 0x14
    22da:	98 8b       	std	Y+16, r25	; 0x10
    22dc:	8f 87       	std	Y+15, r24	; 0x0f
    22de:	8f 85       	ldd	r24, Y+15	; 0x0f
    22e0:	98 89       	ldd	r25, Y+16	; 0x10
    22e2:	01 97       	sbiw	r24, 0x01	; 1
    22e4:	f1 f7       	brne	.-4      	; 0x22e2 <LCD_VidWrite4Data+0x2aa>
    22e6:	98 8b       	std	Y+16, r25	; 0x10
    22e8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_VidSetPinValue(LCD_INIT,LCD_EN,0);
    22ea:	81 e0       	ldi	r24, 0x01	; 1
    22ec:	65 e0       	ldi	r22, 0x05	; 5
    22ee:	40 e0       	ldi	r20, 0x00	; 0
    22f0:	0e 94 29 08 	call	0x1052	; 0x1052 <DIO_VidSetPinValue>
    22f4:	80 e0       	ldi	r24, 0x00	; 0
    22f6:	90 e0       	ldi	r25, 0x00	; 0
    22f8:	a0 e0       	ldi	r26, 0x00	; 0
    22fa:	b0 e4       	ldi	r27, 0x40	; 64
    22fc:	8b 87       	std	Y+11, r24	; 0x0b
    22fe:	9c 87       	std	Y+12, r25	; 0x0c
    2300:	ad 87       	std	Y+13, r26	; 0x0d
    2302:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2304:	6b 85       	ldd	r22, Y+11	; 0x0b
    2306:	7c 85       	ldd	r23, Y+12	; 0x0c
    2308:	8d 85       	ldd	r24, Y+13	; 0x0d
    230a:	9e 85       	ldd	r25, Y+14	; 0x0e
    230c:	20 e0       	ldi	r18, 0x00	; 0
    230e:	30 e0       	ldi	r19, 0x00	; 0
    2310:	4a ef       	ldi	r20, 0xFA	; 250
    2312:	54 e4       	ldi	r21, 0x44	; 68
    2314:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2318:	dc 01       	movw	r26, r24
    231a:	cb 01       	movw	r24, r22
    231c:	8f 83       	std	Y+7, r24	; 0x07
    231e:	98 87       	std	Y+8, r25	; 0x08
    2320:	a9 87       	std	Y+9, r26	; 0x09
    2322:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2324:	6f 81       	ldd	r22, Y+7	; 0x07
    2326:	78 85       	ldd	r23, Y+8	; 0x08
    2328:	89 85       	ldd	r24, Y+9	; 0x09
    232a:	9a 85       	ldd	r25, Y+10	; 0x0a
    232c:	20 e0       	ldi	r18, 0x00	; 0
    232e:	30 e0       	ldi	r19, 0x00	; 0
    2330:	40 e8       	ldi	r20, 0x80	; 128
    2332:	5f e3       	ldi	r21, 0x3F	; 63
    2334:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2338:	88 23       	and	r24, r24
    233a:	2c f4       	brge	.+10     	; 0x2346 <LCD_VidWrite4Data+0x30e>
		__ticks = 1;
    233c:	81 e0       	ldi	r24, 0x01	; 1
    233e:	90 e0       	ldi	r25, 0x00	; 0
    2340:	9e 83       	std	Y+6, r25	; 0x06
    2342:	8d 83       	std	Y+5, r24	; 0x05
    2344:	3f c0       	rjmp	.+126    	; 0x23c4 <LCD_VidWrite4Data+0x38c>
	else if (__tmp > 65535)
    2346:	6f 81       	ldd	r22, Y+7	; 0x07
    2348:	78 85       	ldd	r23, Y+8	; 0x08
    234a:	89 85       	ldd	r24, Y+9	; 0x09
    234c:	9a 85       	ldd	r25, Y+10	; 0x0a
    234e:	20 e0       	ldi	r18, 0x00	; 0
    2350:	3f ef       	ldi	r19, 0xFF	; 255
    2352:	4f e7       	ldi	r20, 0x7F	; 127
    2354:	57 e4       	ldi	r21, 0x47	; 71
    2356:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    235a:	18 16       	cp	r1, r24
    235c:	4c f5       	brge	.+82     	; 0x23b0 <LCD_VidWrite4Data+0x378>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    235e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2360:	7c 85       	ldd	r23, Y+12	; 0x0c
    2362:	8d 85       	ldd	r24, Y+13	; 0x0d
    2364:	9e 85       	ldd	r25, Y+14	; 0x0e
    2366:	20 e0       	ldi	r18, 0x00	; 0
    2368:	30 e0       	ldi	r19, 0x00	; 0
    236a:	40 e2       	ldi	r20, 0x20	; 32
    236c:	51 e4       	ldi	r21, 0x41	; 65
    236e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2372:	dc 01       	movw	r26, r24
    2374:	cb 01       	movw	r24, r22
    2376:	bc 01       	movw	r22, r24
    2378:	cd 01       	movw	r24, r26
    237a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    237e:	dc 01       	movw	r26, r24
    2380:	cb 01       	movw	r24, r22
    2382:	9e 83       	std	Y+6, r25	; 0x06
    2384:	8d 83       	std	Y+5, r24	; 0x05
    2386:	0f c0       	rjmp	.+30     	; 0x23a6 <LCD_VidWrite4Data+0x36e>
    2388:	88 ec       	ldi	r24, 0xC8	; 200
    238a:	90 e0       	ldi	r25, 0x00	; 0
    238c:	9c 83       	std	Y+4, r25	; 0x04
    238e:	8b 83       	std	Y+3, r24	; 0x03
    2390:	8b 81       	ldd	r24, Y+3	; 0x03
    2392:	9c 81       	ldd	r25, Y+4	; 0x04
    2394:	01 97       	sbiw	r24, 0x01	; 1
    2396:	f1 f7       	brne	.-4      	; 0x2394 <LCD_VidWrite4Data+0x35c>
    2398:	9c 83       	std	Y+4, r25	; 0x04
    239a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    239c:	8d 81       	ldd	r24, Y+5	; 0x05
    239e:	9e 81       	ldd	r25, Y+6	; 0x06
    23a0:	01 97       	sbiw	r24, 0x01	; 1
    23a2:	9e 83       	std	Y+6, r25	; 0x06
    23a4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23a6:	8d 81       	ldd	r24, Y+5	; 0x05
    23a8:	9e 81       	ldd	r25, Y+6	; 0x06
    23aa:	00 97       	sbiw	r24, 0x00	; 0
    23ac:	69 f7       	brne	.-38     	; 0x2388 <LCD_VidWrite4Data+0x350>
    23ae:	14 c0       	rjmp	.+40     	; 0x23d8 <LCD_VidWrite4Data+0x3a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23b0:	6f 81       	ldd	r22, Y+7	; 0x07
    23b2:	78 85       	ldd	r23, Y+8	; 0x08
    23b4:	89 85       	ldd	r24, Y+9	; 0x09
    23b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    23b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23bc:	dc 01       	movw	r26, r24
    23be:	cb 01       	movw	r24, r22
    23c0:	9e 83       	std	Y+6, r25	; 0x06
    23c2:	8d 83       	std	Y+5, r24	; 0x05
    23c4:	8d 81       	ldd	r24, Y+5	; 0x05
    23c6:	9e 81       	ldd	r25, Y+6	; 0x06
    23c8:	9a 83       	std	Y+2, r25	; 0x02
    23ca:	89 83       	std	Y+1, r24	; 0x01
    23cc:	89 81       	ldd	r24, Y+1	; 0x01
    23ce:	9a 81       	ldd	r25, Y+2	; 0x02
    23d0:	01 97       	sbiw	r24, 0x01	; 1
    23d2:	f1 f7       	brne	.-4      	; 0x23d0 <LCD_VidWrite4Data+0x398>
    23d4:	9a 83       	std	Y+2, r25	; 0x02
    23d6:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(2);

}
    23d8:	ab 96       	adiw	r28, 0x2b	; 43
    23da:	0f b6       	in	r0, 0x3f	; 63
    23dc:	f8 94       	cli
    23de:	de bf       	out	0x3e, r29	; 62
    23e0:	0f be       	out	0x3f, r0	; 63
    23e2:	cd bf       	out	0x3d, r28	; 61
    23e4:	cf 91       	pop	r28
    23e6:	df 91       	pop	r29
    23e8:	08 95       	ret

000023ea <LCD_Write4String>:

void LCD_Write4String(u8* str,u8 row,u8 col)
{
    23ea:	df 93       	push	r29
    23ec:	cf 93       	push	r28
    23ee:	00 d0       	rcall	.+0      	; 0x23f0 <LCD_Write4String+0x6>
    23f0:	00 d0       	rcall	.+0      	; 0x23f2 <LCD_Write4String+0x8>
    23f2:	00 d0       	rcall	.+0      	; 0x23f4 <LCD_Write4String+0xa>
    23f4:	cd b7       	in	r28, 0x3d	; 61
    23f6:	de b7       	in	r29, 0x3e	; 62
    23f8:	9c 83       	std	Y+4, r25	; 0x04
    23fa:	8b 83       	std	Y+3, r24	; 0x03
    23fc:	6d 83       	std	Y+5, r22	; 0x05
    23fe:	4e 83       	std	Y+6, r20	; 0x06
	LCD_GoToPosition(row,col);
    2400:	8d 81       	ldd	r24, Y+5	; 0x05
    2402:	6e 81       	ldd	r22, Y+6	; 0x06
    2404:	0e 94 bd 12 	call	0x257a	; 0x257a <LCD_GoToPosition>
	u8 index=0;
    2408:	1a 82       	std	Y+2, r1	; 0x02
	u8 line0=0;
    240a:	19 82       	std	Y+1, r1	; 0x01
    240c:	8a c0       	rjmp	.+276    	; 0x2522 <LCD_Write4String+0x138>
	while (str[index] !='\0' && ((row*16)+(col+index))<32)
	{
		if (((row*16)+(col+index))<16&&(line0==0))
    240e:	8d 81       	ldd	r24, Y+5	; 0x05
    2410:	88 2f       	mov	r24, r24
    2412:	90 e0       	ldi	r25, 0x00	; 0
    2414:	ac 01       	movw	r20, r24
    2416:	42 95       	swap	r20
    2418:	52 95       	swap	r21
    241a:	50 7f       	andi	r21, 0xF0	; 240
    241c:	54 27       	eor	r21, r20
    241e:	40 7f       	andi	r20, 0xF0	; 240
    2420:	54 27       	eor	r21, r20
    2422:	8e 81       	ldd	r24, Y+6	; 0x06
    2424:	28 2f       	mov	r18, r24
    2426:	30 e0       	ldi	r19, 0x00	; 0
    2428:	8a 81       	ldd	r24, Y+2	; 0x02
    242a:	88 2f       	mov	r24, r24
    242c:	90 e0       	ldi	r25, 0x00	; 0
    242e:	82 0f       	add	r24, r18
    2430:	93 1f       	adc	r25, r19
    2432:	84 0f       	add	r24, r20
    2434:	95 1f       	adc	r25, r21
    2436:	80 31       	cpi	r24, 0x10	; 16
    2438:	91 05       	cpc	r25, r1
    243a:	94 f4       	brge	.+36     	; 0x2460 <LCD_Write4String+0x76>
    243c:	89 81       	ldd	r24, Y+1	; 0x01
    243e:	88 23       	and	r24, r24
    2440:	79 f4       	brne	.+30     	; 0x2460 <LCD_Write4String+0x76>
		{
			LCD_VidWrite4Data(str[index]);
    2442:	8a 81       	ldd	r24, Y+2	; 0x02
    2444:	28 2f       	mov	r18, r24
    2446:	30 e0       	ldi	r19, 0x00	; 0
    2448:	8b 81       	ldd	r24, Y+3	; 0x03
    244a:	9c 81       	ldd	r25, Y+4	; 0x04
    244c:	fc 01       	movw	r30, r24
    244e:	e2 0f       	add	r30, r18
    2450:	f3 1f       	adc	r31, r19
    2452:	80 81       	ld	r24, Z
    2454:	0e 94 1c 10 	call	0x2038	; 0x2038 <LCD_VidWrite4Data>
			index++;
    2458:	8a 81       	ldd	r24, Y+2	; 0x02
    245a:	8f 5f       	subi	r24, 0xFF	; 255
    245c:	8a 83       	std	Y+2, r24	; 0x02
    245e:	61 c0       	rjmp	.+194    	; 0x2522 <LCD_Write4String+0x138>
		}
		else if (((row*16)+(col+index))>=16&& ((row*16)+(col+index))<32 &&(line0==0))
    2460:	8d 81       	ldd	r24, Y+5	; 0x05
    2462:	88 2f       	mov	r24, r24
    2464:	90 e0       	ldi	r25, 0x00	; 0
    2466:	ac 01       	movw	r20, r24
    2468:	42 95       	swap	r20
    246a:	52 95       	swap	r21
    246c:	50 7f       	andi	r21, 0xF0	; 240
    246e:	54 27       	eor	r21, r20
    2470:	40 7f       	andi	r20, 0xF0	; 240
    2472:	54 27       	eor	r21, r20
    2474:	8e 81       	ldd	r24, Y+6	; 0x06
    2476:	28 2f       	mov	r18, r24
    2478:	30 e0       	ldi	r19, 0x00	; 0
    247a:	8a 81       	ldd	r24, Y+2	; 0x02
    247c:	88 2f       	mov	r24, r24
    247e:	90 e0       	ldi	r25, 0x00	; 0
    2480:	82 0f       	add	r24, r18
    2482:	93 1f       	adc	r25, r19
    2484:	84 0f       	add	r24, r20
    2486:	95 1f       	adc	r25, r21
    2488:	80 31       	cpi	r24, 0x10	; 16
    248a:	91 05       	cpc	r25, r1
    248c:	14 f1       	brlt	.+68     	; 0x24d2 <LCD_Write4String+0xe8>
    248e:	8d 81       	ldd	r24, Y+5	; 0x05
    2490:	88 2f       	mov	r24, r24
    2492:	90 e0       	ldi	r25, 0x00	; 0
    2494:	ac 01       	movw	r20, r24
    2496:	42 95       	swap	r20
    2498:	52 95       	swap	r21
    249a:	50 7f       	andi	r21, 0xF0	; 240
    249c:	54 27       	eor	r21, r20
    249e:	40 7f       	andi	r20, 0xF0	; 240
    24a0:	54 27       	eor	r21, r20
    24a2:	8e 81       	ldd	r24, Y+6	; 0x06
    24a4:	28 2f       	mov	r18, r24
    24a6:	30 e0       	ldi	r19, 0x00	; 0
    24a8:	8a 81       	ldd	r24, Y+2	; 0x02
    24aa:	88 2f       	mov	r24, r24
    24ac:	90 e0       	ldi	r25, 0x00	; 0
    24ae:	82 0f       	add	r24, r18
    24b0:	93 1f       	adc	r25, r19
    24b2:	84 0f       	add	r24, r20
    24b4:	95 1f       	adc	r25, r21
    24b6:	80 32       	cpi	r24, 0x20	; 32
    24b8:	91 05       	cpc	r25, r1
    24ba:	5c f4       	brge	.+22     	; 0x24d2 <LCD_Write4String+0xe8>
    24bc:	89 81       	ldd	r24, Y+1	; 0x01
    24be:	88 23       	and	r24, r24
    24c0:	41 f4       	brne	.+16     	; 0x24d2 <LCD_Write4String+0xe8>
		{
			LCD_GoToPosition(1,col);
    24c2:	81 e0       	ldi	r24, 0x01	; 1
    24c4:	6e 81       	ldd	r22, Y+6	; 0x06
    24c6:	0e 94 bd 12 	call	0x257a	; 0x257a <LCD_GoToPosition>
			line0++;
    24ca:	89 81       	ldd	r24, Y+1	; 0x01
    24cc:	8f 5f       	subi	r24, 0xFF	; 255
    24ce:	89 83       	std	Y+1, r24	; 0x01
    24d0:	28 c0       	rjmp	.+80     	; 0x2522 <LCD_Write4String+0x138>
		}
		else if (((row*16)+(col+index))<32&&(line0==1))
    24d2:	8d 81       	ldd	r24, Y+5	; 0x05
    24d4:	88 2f       	mov	r24, r24
    24d6:	90 e0       	ldi	r25, 0x00	; 0
    24d8:	ac 01       	movw	r20, r24
    24da:	42 95       	swap	r20
    24dc:	52 95       	swap	r21
    24de:	50 7f       	andi	r21, 0xF0	; 240
    24e0:	54 27       	eor	r21, r20
    24e2:	40 7f       	andi	r20, 0xF0	; 240
    24e4:	54 27       	eor	r21, r20
    24e6:	8e 81       	ldd	r24, Y+6	; 0x06
    24e8:	28 2f       	mov	r18, r24
    24ea:	30 e0       	ldi	r19, 0x00	; 0
    24ec:	8a 81       	ldd	r24, Y+2	; 0x02
    24ee:	88 2f       	mov	r24, r24
    24f0:	90 e0       	ldi	r25, 0x00	; 0
    24f2:	82 0f       	add	r24, r18
    24f4:	93 1f       	adc	r25, r19
    24f6:	84 0f       	add	r24, r20
    24f8:	95 1f       	adc	r25, r21
    24fa:	80 32       	cpi	r24, 0x20	; 32
    24fc:	91 05       	cpc	r25, r1
    24fe:	8c f4       	brge	.+34     	; 0x2522 <LCD_Write4String+0x138>
    2500:	89 81       	ldd	r24, Y+1	; 0x01
    2502:	81 30       	cpi	r24, 0x01	; 1
    2504:	71 f4       	brne	.+28     	; 0x2522 <LCD_Write4String+0x138>
		{
			LCD_VidWrite4Data(str[index]);
    2506:	8a 81       	ldd	r24, Y+2	; 0x02
    2508:	28 2f       	mov	r18, r24
    250a:	30 e0       	ldi	r19, 0x00	; 0
    250c:	8b 81       	ldd	r24, Y+3	; 0x03
    250e:	9c 81       	ldd	r25, Y+4	; 0x04
    2510:	fc 01       	movw	r30, r24
    2512:	e2 0f       	add	r30, r18
    2514:	f3 1f       	adc	r31, r19
    2516:	80 81       	ld	r24, Z
    2518:	0e 94 1c 10 	call	0x2038	; 0x2038 <LCD_VidWrite4Data>
			index++;
    251c:	8a 81       	ldd	r24, Y+2	; 0x02
    251e:	8f 5f       	subi	r24, 0xFF	; 255
    2520:	8a 83       	std	Y+2, r24	; 0x02
void LCD_Write4String(u8* str,u8 row,u8 col)
{
	LCD_GoToPosition(row,col);
	u8 index=0;
	u8 line0=0;
	while (str[index] !='\0' && ((row*16)+(col+index))<32)
    2522:	8a 81       	ldd	r24, Y+2	; 0x02
    2524:	28 2f       	mov	r18, r24
    2526:	30 e0       	ldi	r19, 0x00	; 0
    2528:	8b 81       	ldd	r24, Y+3	; 0x03
    252a:	9c 81       	ldd	r25, Y+4	; 0x04
    252c:	fc 01       	movw	r30, r24
    252e:	e2 0f       	add	r30, r18
    2530:	f3 1f       	adc	r31, r19
    2532:	80 81       	ld	r24, Z
    2534:	88 23       	and	r24, r24
    2536:	c1 f0       	breq	.+48     	; 0x2568 <LCD_Write4String+0x17e>
    2538:	8d 81       	ldd	r24, Y+5	; 0x05
    253a:	88 2f       	mov	r24, r24
    253c:	90 e0       	ldi	r25, 0x00	; 0
    253e:	ac 01       	movw	r20, r24
    2540:	42 95       	swap	r20
    2542:	52 95       	swap	r21
    2544:	50 7f       	andi	r21, 0xF0	; 240
    2546:	54 27       	eor	r21, r20
    2548:	40 7f       	andi	r20, 0xF0	; 240
    254a:	54 27       	eor	r21, r20
    254c:	8e 81       	ldd	r24, Y+6	; 0x06
    254e:	28 2f       	mov	r18, r24
    2550:	30 e0       	ldi	r19, 0x00	; 0
    2552:	8a 81       	ldd	r24, Y+2	; 0x02
    2554:	88 2f       	mov	r24, r24
    2556:	90 e0       	ldi	r25, 0x00	; 0
    2558:	82 0f       	add	r24, r18
    255a:	93 1f       	adc	r25, r19
    255c:	84 0f       	add	r24, r20
    255e:	95 1f       	adc	r25, r21
    2560:	80 32       	cpi	r24, 0x20	; 32
    2562:	91 05       	cpc	r25, r1
    2564:	0c f4       	brge	.+2      	; 0x2568 <LCD_Write4String+0x17e>
    2566:	53 cf       	rjmp	.-346    	; 0x240e <LCD_Write4String+0x24>
		{
			LCD_VidWrite4Data(str[index]);
			index++;
		}
	}
}
    2568:	26 96       	adiw	r28, 0x06	; 6
    256a:	0f b6       	in	r0, 0x3f	; 63
    256c:	f8 94       	cli
    256e:	de bf       	out	0x3e, r29	; 62
    2570:	0f be       	out	0x3f, r0	; 63
    2572:	cd bf       	out	0x3d, r28	; 61
    2574:	cf 91       	pop	r28
    2576:	df 91       	pop	r29
    2578:	08 95       	ret

0000257a <LCD_GoToPosition>:

void LCD_GoToPosition(u8 row,u8 col)
{
    257a:	df 93       	push	r29
    257c:	cf 93       	push	r28
    257e:	00 d0       	rcall	.+0      	; 0x2580 <LCD_GoToPosition+0x6>
    2580:	0f 92       	push	r0
    2582:	cd b7       	in	r28, 0x3d	; 61
    2584:	de b7       	in	r29, 0x3e	; 62
    2586:	8a 83       	std	Y+2, r24	; 0x02
    2588:	6b 83       	std	Y+3, r22	; 0x03
	u8 adress;
	adress= (row*0x40)+col;
    258a:	8a 81       	ldd	r24, Y+2	; 0x02
    258c:	88 2f       	mov	r24, r24
    258e:	90 e0       	ldi	r25, 0x00	; 0
    2590:	00 24       	eor	r0, r0
    2592:	96 95       	lsr	r25
    2594:	87 95       	ror	r24
    2596:	07 94       	ror	r0
    2598:	96 95       	lsr	r25
    259a:	87 95       	ror	r24
    259c:	07 94       	ror	r0
    259e:	98 2f       	mov	r25, r24
    25a0:	80 2d       	mov	r24, r0
    25a2:	98 2f       	mov	r25, r24
    25a4:	8b 81       	ldd	r24, Y+3	; 0x03
    25a6:	89 0f       	add	r24, r25
    25a8:	89 83       	std	Y+1, r24	; 0x01
	adress = SET_BIT(adress,7);
    25aa:	89 81       	ldd	r24, Y+1	; 0x01
    25ac:	80 68       	ori	r24, 0x80	; 128
    25ae:	89 83       	std	Y+1, r24	; 0x01
	LCD_VidWrite4Cmd(adress);
    25b0:	89 81       	ldd	r24, Y+1	; 0x01
    25b2:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <LCD_VidWrite4Cmd>
}
    25b6:	0f 90       	pop	r0
    25b8:	0f 90       	pop	r0
    25ba:	0f 90       	pop	r0
    25bc:	cf 91       	pop	r28
    25be:	df 91       	pop	r29
    25c0:	08 95       	ret

000025c2 <LCD_VidDisp4Number>:

void LCD_VidDisp4Number(u32 number)
{
    25c2:	df 93       	push	r29
    25c4:	cf 93       	push	r28
    25c6:	cd b7       	in	r28, 0x3d	; 61
    25c8:	de b7       	in	r29, 0x3e	; 62
    25ca:	68 97       	sbiw	r28, 0x18	; 24
    25cc:	0f b6       	in	r0, 0x3f	; 63
    25ce:	f8 94       	cli
    25d0:	de bf       	out	0x3e, r29	; 62
    25d2:	0f be       	out	0x3f, r0	; 63
    25d4:	cd bf       	out	0x3d, r28	; 61
    25d6:	6d 8b       	std	Y+21, r22	; 0x15
    25d8:	7e 8b       	std	Y+22, r23	; 0x16
    25da:	8f 8b       	std	Y+23, r24	; 0x17
    25dc:	98 8f       	std	Y+24, r25	; 0x18

	u32 digit=0;
    25de:	1f 82       	std	Y+7, r1	; 0x07
    25e0:	18 86       	std	Y+8, r1	; 0x08
    25e2:	19 86       	std	Y+9, r1	; 0x09
    25e4:	1a 86       	std	Y+10, r1	; 0x0a
	u16 i=0;
    25e6:	1e 82       	std	Y+6, r1	; 0x06
    25e8:	1d 82       	std	Y+5, r1	; 0x05
	u32 f=0;
    25ea:	19 82       	std	Y+1, r1	; 0x01
    25ec:	1a 82       	std	Y+2, r1	; 0x02
    25ee:	1b 82       	std	Y+3, r1	; 0x03
    25f0:	1c 82       	std	Y+4, r1	; 0x04
    25f2:	45 c0       	rjmp	.+138    	; 0x267e <LCD_VidDisp4Number+0xbc>
	u8 number_holder[10];

	while(number>0)
	{
		f=number%10;
    25f4:	8d 89       	ldd	r24, Y+21	; 0x15
    25f6:	9e 89       	ldd	r25, Y+22	; 0x16
    25f8:	af 89       	ldd	r26, Y+23	; 0x17
    25fa:	b8 8d       	ldd	r27, Y+24	; 0x18
    25fc:	2a e0       	ldi	r18, 0x0A	; 10
    25fe:	30 e0       	ldi	r19, 0x00	; 0
    2600:	40 e0       	ldi	r20, 0x00	; 0
    2602:	50 e0       	ldi	r21, 0x00	; 0
    2604:	bc 01       	movw	r22, r24
    2606:	cd 01       	movw	r24, r26
    2608:	0e 94 02 14 	call	0x2804	; 0x2804 <__udivmodsi4>
    260c:	dc 01       	movw	r26, r24
    260e:	cb 01       	movw	r24, r22
    2610:	89 83       	std	Y+1, r24	; 0x01
    2612:	9a 83       	std	Y+2, r25	; 0x02
    2614:	ab 83       	std	Y+3, r26	; 0x03
    2616:	bc 83       	std	Y+4, r27	; 0x04
		number_holder[i]=f;
    2618:	2d 81       	ldd	r18, Y+5	; 0x05
    261a:	3e 81       	ldd	r19, Y+6	; 0x06
    261c:	49 81       	ldd	r20, Y+1	; 0x01
    261e:	ce 01       	movw	r24, r28
    2620:	0b 96       	adiw	r24, 0x0b	; 11
    2622:	fc 01       	movw	r30, r24
    2624:	e2 0f       	add	r30, r18
    2626:	f3 1f       	adc	r31, r19
    2628:	40 83       	st	Z, r20
		number=number/10;
    262a:	8d 89       	ldd	r24, Y+21	; 0x15
    262c:	9e 89       	ldd	r25, Y+22	; 0x16
    262e:	af 89       	ldd	r26, Y+23	; 0x17
    2630:	b8 8d       	ldd	r27, Y+24	; 0x18
    2632:	2a e0       	ldi	r18, 0x0A	; 10
    2634:	30 e0       	ldi	r19, 0x00	; 0
    2636:	40 e0       	ldi	r20, 0x00	; 0
    2638:	50 e0       	ldi	r21, 0x00	; 0
    263a:	bc 01       	movw	r22, r24
    263c:	cd 01       	movw	r24, r26
    263e:	0e 94 02 14 	call	0x2804	; 0x2804 <__udivmodsi4>
    2642:	da 01       	movw	r26, r20
    2644:	c9 01       	movw	r24, r18
    2646:	8d 8b       	std	Y+21, r24	; 0x15
    2648:	9e 8b       	std	Y+22, r25	; 0x16
    264a:	af 8b       	std	Y+23, r26	; 0x17
    264c:	b8 8f       	std	Y+24, r27	; 0x18
		i++;
    264e:	8d 81       	ldd	r24, Y+5	; 0x05
    2650:	9e 81       	ldd	r25, Y+6	; 0x06
    2652:	01 96       	adiw	r24, 0x01	; 1
    2654:	9e 83       	std	Y+6, r25	; 0x06
    2656:	8d 83       	std	Y+5, r24	; 0x05
		digit++;
    2658:	8f 81       	ldd	r24, Y+7	; 0x07
    265a:	98 85       	ldd	r25, Y+8	; 0x08
    265c:	a9 85       	ldd	r26, Y+9	; 0x09
    265e:	ba 85       	ldd	r27, Y+10	; 0x0a
    2660:	01 96       	adiw	r24, 0x01	; 1
    2662:	a1 1d       	adc	r26, r1
    2664:	b1 1d       	adc	r27, r1
    2666:	8f 83       	std	Y+7, r24	; 0x07
    2668:	98 87       	std	Y+8, r25	; 0x08
    266a:	a9 87       	std	Y+9, r26	; 0x09
    266c:	ba 87       	std	Y+10, r27	; 0x0a
		if(number==0)
    266e:	8d 89       	ldd	r24, Y+21	; 0x15
    2670:	9e 89       	ldd	r25, Y+22	; 0x16
    2672:	af 89       	ldd	r26, Y+23	; 0x17
    2674:	b8 8d       	ldd	r27, Y+24	; 0x18
    2676:	00 97       	sbiw	r24, 0x00	; 0
    2678:	a1 05       	cpc	r26, r1
    267a:	b1 05       	cpc	r27, r1
    267c:	49 f0       	breq	.+18     	; 0x2690 <LCD_VidDisp4Number+0xce>
	u32 digit=0;
	u16 i=0;
	u32 f=0;
	u8 number_holder[10];

	while(number>0)
    267e:	8d 89       	ldd	r24, Y+21	; 0x15
    2680:	9e 89       	ldd	r25, Y+22	; 0x16
    2682:	af 89       	ldd	r26, Y+23	; 0x17
    2684:	b8 8d       	ldd	r27, Y+24	; 0x18
    2686:	00 97       	sbiw	r24, 0x00	; 0
    2688:	a1 05       	cpc	r26, r1
    268a:	b1 05       	cpc	r27, r1
    268c:	09 f0       	breq	.+2      	; 0x2690 <LCD_VidDisp4Number+0xce>
    268e:	b2 cf       	rjmp	.-156    	; 0x25f4 <LCD_VidDisp4Number+0x32>
		i++;
		digit++;
		if(number==0)
		{break;}
	}
	for(i=digit;i>0;i--)
    2690:	8f 81       	ldd	r24, Y+7	; 0x07
    2692:	98 85       	ldd	r25, Y+8	; 0x08
    2694:	9e 83       	std	Y+6, r25	; 0x06
    2696:	8d 83       	std	Y+5, r24	; 0x05
    2698:	13 c0       	rjmp	.+38     	; 0x26c0 <LCD_VidDisp4Number+0xfe>
	{
		LCD_VidWrite4Data(number_holder[i-1]+48);
    269a:	8d 81       	ldd	r24, Y+5	; 0x05
    269c:	9e 81       	ldd	r25, Y+6	; 0x06
    269e:	9c 01       	movw	r18, r24
    26a0:	21 50       	subi	r18, 0x01	; 1
    26a2:	30 40       	sbci	r19, 0x00	; 0
    26a4:	ce 01       	movw	r24, r28
    26a6:	0b 96       	adiw	r24, 0x0b	; 11
    26a8:	fc 01       	movw	r30, r24
    26aa:	e2 0f       	add	r30, r18
    26ac:	f3 1f       	adc	r31, r19
    26ae:	80 81       	ld	r24, Z
    26b0:	80 5d       	subi	r24, 0xD0	; 208
    26b2:	0e 94 1c 10 	call	0x2038	; 0x2038 <LCD_VidWrite4Data>
		i++;
		digit++;
		if(number==0)
		{break;}
	}
	for(i=digit;i>0;i--)
    26b6:	8d 81       	ldd	r24, Y+5	; 0x05
    26b8:	9e 81       	ldd	r25, Y+6	; 0x06
    26ba:	01 97       	sbiw	r24, 0x01	; 1
    26bc:	9e 83       	std	Y+6, r25	; 0x06
    26be:	8d 83       	std	Y+5, r24	; 0x05
    26c0:	8d 81       	ldd	r24, Y+5	; 0x05
    26c2:	9e 81       	ldd	r25, Y+6	; 0x06
    26c4:	00 97       	sbiw	r24, 0x00	; 0
    26c6:	49 f7       	brne	.-46     	; 0x269a <LCD_VidDisp4Number+0xd8>
	{
		LCD_VidWrite4Data(number_holder[i-1]+48);
	}

}
    26c8:	68 96       	adiw	r28, 0x18	; 24
    26ca:	0f b6       	in	r0, 0x3f	; 63
    26cc:	f8 94       	cli
    26ce:	de bf       	out	0x3e, r29	; 62
    26d0:	0f be       	out	0x3f, r0	; 63
    26d2:	cd bf       	out	0x3d, r28	; 61
    26d4:	cf 91       	pop	r28
    26d6:	df 91       	pop	r29
    26d8:	08 95       	ret

000026da <LCD_StoreCustomChr>:


void LCD_StoreCustomChr(u8* LOC_pattern, u8 LOC_CGRAM_Index)
{
    26da:	df 93       	push	r29
    26dc:	cf 93       	push	r28
    26de:	00 d0       	rcall	.+0      	; 0x26e0 <LCD_StoreCustomChr+0x6>
    26e0:	00 d0       	rcall	.+0      	; 0x26e2 <LCD_StoreCustomChr+0x8>
    26e2:	0f 92       	push	r0
    26e4:	cd b7       	in	r28, 0x3d	; 61
    26e6:	de b7       	in	r29, 0x3e	; 62
    26e8:	9c 83       	std	Y+4, r25	; 0x04
    26ea:	8b 83       	std	Y+3, r24	; 0x03
    26ec:	6d 83       	std	Y+5, r22	; 0x05
	u8 LOC_Adress;
	u8 LOC_Adress_Index;
	if(LOC_CGRAM_Index < 8)
    26ee:	8d 81       	ldd	r24, Y+5	; 0x05
    26f0:	88 30       	cpi	r24, 0x08	; 8
    26f2:	18 f5       	brcc	.+70     	; 0x273a <LCD_StoreCustomChr+0x60>
	{
		LOC_Adress = LOC_CGRAM_Index *8;
    26f4:	8d 81       	ldd	r24, Y+5	; 0x05
    26f6:	88 2f       	mov	r24, r24
    26f8:	90 e0       	ldi	r25, 0x00	; 0
    26fa:	88 0f       	add	r24, r24
    26fc:	99 1f       	adc	r25, r25
    26fe:	88 0f       	add	r24, r24
    2700:	99 1f       	adc	r25, r25
    2702:	88 0f       	add	r24, r24
    2704:	99 1f       	adc	r25, r25
    2706:	8a 83       	std	Y+2, r24	; 0x02
		LOC_Adress = SET_BIT(LOC_Adress,6);
    2708:	8a 81       	ldd	r24, Y+2	; 0x02
    270a:	80 64       	ori	r24, 0x40	; 64
    270c:	8a 83       	std	Y+2, r24	; 0x02
		LCD_VidWrite4Cmd(LOC_Adress);
    270e:	8a 81       	ldd	r24, Y+2	; 0x02
    2710:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <LCD_VidWrite4Cmd>
		for(LOC_Adress_Index=0;LOC_Adress_Index<8;LOC_Adress_Index++)
    2714:	19 82       	std	Y+1, r1	; 0x01
    2716:	0e c0       	rjmp	.+28     	; 0x2734 <LCD_StoreCustomChr+0x5a>
		{
			LCD_VidWrite4Data(LOC_pattern[LOC_Adress_Index]);
    2718:	89 81       	ldd	r24, Y+1	; 0x01
    271a:	28 2f       	mov	r18, r24
    271c:	30 e0       	ldi	r19, 0x00	; 0
    271e:	8b 81       	ldd	r24, Y+3	; 0x03
    2720:	9c 81       	ldd	r25, Y+4	; 0x04
    2722:	fc 01       	movw	r30, r24
    2724:	e2 0f       	add	r30, r18
    2726:	f3 1f       	adc	r31, r19
    2728:	80 81       	ld	r24, Z
    272a:	0e 94 1c 10 	call	0x2038	; 0x2038 <LCD_VidWrite4Data>
	if(LOC_CGRAM_Index < 8)
	{
		LOC_Adress = LOC_CGRAM_Index *8;
		LOC_Adress = SET_BIT(LOC_Adress,6);
		LCD_VidWrite4Cmd(LOC_Adress);
		for(LOC_Adress_Index=0;LOC_Adress_Index<8;LOC_Adress_Index++)
    272e:	89 81       	ldd	r24, Y+1	; 0x01
    2730:	8f 5f       	subi	r24, 0xFF	; 255
    2732:	89 83       	std	Y+1, r24	; 0x01
    2734:	89 81       	ldd	r24, Y+1	; 0x01
    2736:	88 30       	cpi	r24, 0x08	; 8
    2738:	78 f3       	brcs	.-34     	; 0x2718 <LCD_StoreCustomChr+0x3e>
		{
			LCD_VidWrite4Data(LOC_pattern[LOC_Adress_Index]);
		}
	}
	LCD_VidWrite4Cmd(RETURN_HOME);
    273a:	82 e0       	ldi	r24, 0x02	; 2
    273c:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <LCD_VidWrite4Cmd>
}
    2740:	0f 90       	pop	r0
    2742:	0f 90       	pop	r0
    2744:	0f 90       	pop	r0
    2746:	0f 90       	pop	r0
    2748:	0f 90       	pop	r0
    274a:	cf 91       	pop	r28
    274c:	df 91       	pop	r29
    274e:	08 95       	ret

00002750 <LCD_Disply>:

void LCD_Disply(u8 LOC_CGRAM_Index,u8 LOC_row,u8 LOC_col)
{
    2750:	df 93       	push	r29
    2752:	cf 93       	push	r28
    2754:	00 d0       	rcall	.+0      	; 0x2756 <LCD_Disply+0x6>
    2756:	0f 92       	push	r0
    2758:	cd b7       	in	r28, 0x3d	; 61
    275a:	de b7       	in	r29, 0x3e	; 62
    275c:	89 83       	std	Y+1, r24	; 0x01
    275e:	6a 83       	std	Y+2, r22	; 0x02
    2760:	4b 83       	std	Y+3, r20	; 0x03
	LCD_GoToPosition(LOC_row,LOC_col);
    2762:	8a 81       	ldd	r24, Y+2	; 0x02
    2764:	6b 81       	ldd	r22, Y+3	; 0x03
    2766:	0e 94 bd 12 	call	0x257a	; 0x257a <LCD_GoToPosition>

	LCD_VidWrite4Data(LOC_CGRAM_Index);
    276a:	89 81       	ldd	r24, Y+1	; 0x01
    276c:	0e 94 1c 10 	call	0x2038	; 0x2038 <LCD_VidWrite4Data>
}
    2770:	0f 90       	pop	r0
    2772:	0f 90       	pop	r0
    2774:	0f 90       	pop	r0
    2776:	cf 91       	pop	r28
    2778:	df 91       	pop	r29
    277a:	08 95       	ret

0000277c <main>:
#include "GIE_Interface.h"
#include "ADC_Interface.h"
#include <avr/delay.h>

void main (void)
{
    277c:	df 93       	push	r29
    277e:	cf 93       	push	r28
    2780:	cd b7       	in	r28, 0x3d	; 61
    2782:	de b7       	in	r29, 0x3e	; 62
	}*/



	//lcd int
		LCD_Vid4Initialization();
    2784:	0e 94 20 0b 	call	0x1640	; 0x1640 <LCD_Vid4Initialization>
		LCD_Write4String("analog signal:",0,0);
    2788:	80 e6       	ldi	r24, 0x60	; 96
    278a:	90 e0       	ldi	r25, 0x00	; 0
    278c:	60 e0       	ldi	r22, 0x00	; 0
    278e:	40 e0       	ldi	r20, 0x00	; 0
    2790:	0e 94 f5 11 	call	0x23ea	; 0x23ea <LCD_Write4String>

		//INTRRUPT ENABLE
		GIE_Enable();
    2794:	0e 94 04 0b 	call	0x1608	; 0x1608 <GIE_Enable>
		//adc init
		ADC_VidInit();
    2798:	0e 94 a3 05 	call	0xb46	; 0xb46 <ADC_VidInit>
		//PORT DIRCTION
		DIO_VidSetPinDirection(PORTB,PIN0,OUTPUT);
    279c:	81 e0       	ldi	r24, 0x01	; 1
    279e:	60 e0       	ldi	r22, 0x00	; 0
    27a0:	41 e0       	ldi	r20, 0x01	; 1
    27a2:	0e 94 29 07 	call	0xe52	; 0xe52 <DIO_VidSetPinDirection>
		DIO_VidSetPinDirection(PORTB,PIN1,OUTPUT);
    27a6:	81 e0       	ldi	r24, 0x01	; 1
    27a8:	61 e0       	ldi	r22, 0x01	; 1
    27aa:	41 e0       	ldi	r20, 0x01	; 1
    27ac:	0e 94 29 07 	call	0xe52	; 0xe52 <DIO_VidSetPinDirection>
		DIO_VidSetPinDirection(PORTB,PIN7,OUTPUT);
    27b0:	81 e0       	ldi	r24, 0x01	; 1
    27b2:	67 e0       	ldi	r22, 0x07	; 7
    27b4:	41 e0       	ldi	r20, 0x01	; 1
    27b6:	0e 94 29 07 	call	0xe52	; 0xe52 <DIO_VidSetPinDirection>

		//ADC ENABLE
		ADC_VidEnableInt();
    27ba:	0e 94 4d 06 	call	0xc9a	; 0xc9a <ADC_VidEnableInt>
		//ADC CHANNAL
		ADC_VidStartConvertion(0);
    27be:	80 e0       	ldi	r24, 0x00	; 0
    27c0:	0e 94 2d 06 	call	0xc5a	; 0xc5a <ADC_VidStartConvertion>
    27c4:	ff cf       	rjmp	.-2      	; 0x27c4 <main+0x48>

000027c6 <__mulsi3>:
    27c6:	62 9f       	mul	r22, r18
    27c8:	d0 01       	movw	r26, r0
    27ca:	73 9f       	mul	r23, r19
    27cc:	f0 01       	movw	r30, r0
    27ce:	82 9f       	mul	r24, r18
    27d0:	e0 0d       	add	r30, r0
    27d2:	f1 1d       	adc	r31, r1
    27d4:	64 9f       	mul	r22, r20
    27d6:	e0 0d       	add	r30, r0
    27d8:	f1 1d       	adc	r31, r1
    27da:	92 9f       	mul	r25, r18
    27dc:	f0 0d       	add	r31, r0
    27de:	83 9f       	mul	r24, r19
    27e0:	f0 0d       	add	r31, r0
    27e2:	74 9f       	mul	r23, r20
    27e4:	f0 0d       	add	r31, r0
    27e6:	65 9f       	mul	r22, r21
    27e8:	f0 0d       	add	r31, r0
    27ea:	99 27       	eor	r25, r25
    27ec:	72 9f       	mul	r23, r18
    27ee:	b0 0d       	add	r27, r0
    27f0:	e1 1d       	adc	r30, r1
    27f2:	f9 1f       	adc	r31, r25
    27f4:	63 9f       	mul	r22, r19
    27f6:	b0 0d       	add	r27, r0
    27f8:	e1 1d       	adc	r30, r1
    27fa:	f9 1f       	adc	r31, r25
    27fc:	bd 01       	movw	r22, r26
    27fe:	cf 01       	movw	r24, r30
    2800:	11 24       	eor	r1, r1
    2802:	08 95       	ret

00002804 <__udivmodsi4>:
    2804:	a1 e2       	ldi	r26, 0x21	; 33
    2806:	1a 2e       	mov	r1, r26
    2808:	aa 1b       	sub	r26, r26
    280a:	bb 1b       	sub	r27, r27
    280c:	fd 01       	movw	r30, r26
    280e:	0d c0       	rjmp	.+26     	; 0x282a <__udivmodsi4_ep>

00002810 <__udivmodsi4_loop>:
    2810:	aa 1f       	adc	r26, r26
    2812:	bb 1f       	adc	r27, r27
    2814:	ee 1f       	adc	r30, r30
    2816:	ff 1f       	adc	r31, r31
    2818:	a2 17       	cp	r26, r18
    281a:	b3 07       	cpc	r27, r19
    281c:	e4 07       	cpc	r30, r20
    281e:	f5 07       	cpc	r31, r21
    2820:	20 f0       	brcs	.+8      	; 0x282a <__udivmodsi4_ep>
    2822:	a2 1b       	sub	r26, r18
    2824:	b3 0b       	sbc	r27, r19
    2826:	e4 0b       	sbc	r30, r20
    2828:	f5 0b       	sbc	r31, r21

0000282a <__udivmodsi4_ep>:
    282a:	66 1f       	adc	r22, r22
    282c:	77 1f       	adc	r23, r23
    282e:	88 1f       	adc	r24, r24
    2830:	99 1f       	adc	r25, r25
    2832:	1a 94       	dec	r1
    2834:	69 f7       	brne	.-38     	; 0x2810 <__udivmodsi4_loop>
    2836:	60 95       	com	r22
    2838:	70 95       	com	r23
    283a:	80 95       	com	r24
    283c:	90 95       	com	r25
    283e:	9b 01       	movw	r18, r22
    2840:	ac 01       	movw	r20, r24
    2842:	bd 01       	movw	r22, r26
    2844:	cf 01       	movw	r24, r30
    2846:	08 95       	ret

00002848 <__prologue_saves__>:
    2848:	2f 92       	push	r2
    284a:	3f 92       	push	r3
    284c:	4f 92       	push	r4
    284e:	5f 92       	push	r5
    2850:	6f 92       	push	r6
    2852:	7f 92       	push	r7
    2854:	8f 92       	push	r8
    2856:	9f 92       	push	r9
    2858:	af 92       	push	r10
    285a:	bf 92       	push	r11
    285c:	cf 92       	push	r12
    285e:	df 92       	push	r13
    2860:	ef 92       	push	r14
    2862:	ff 92       	push	r15
    2864:	0f 93       	push	r16
    2866:	1f 93       	push	r17
    2868:	cf 93       	push	r28
    286a:	df 93       	push	r29
    286c:	cd b7       	in	r28, 0x3d	; 61
    286e:	de b7       	in	r29, 0x3e	; 62
    2870:	ca 1b       	sub	r28, r26
    2872:	db 0b       	sbc	r29, r27
    2874:	0f b6       	in	r0, 0x3f	; 63
    2876:	f8 94       	cli
    2878:	de bf       	out	0x3e, r29	; 62
    287a:	0f be       	out	0x3f, r0	; 63
    287c:	cd bf       	out	0x3d, r28	; 61
    287e:	09 94       	ijmp

00002880 <__epilogue_restores__>:
    2880:	2a 88       	ldd	r2, Y+18	; 0x12
    2882:	39 88       	ldd	r3, Y+17	; 0x11
    2884:	48 88       	ldd	r4, Y+16	; 0x10
    2886:	5f 84       	ldd	r5, Y+15	; 0x0f
    2888:	6e 84       	ldd	r6, Y+14	; 0x0e
    288a:	7d 84       	ldd	r7, Y+13	; 0x0d
    288c:	8c 84       	ldd	r8, Y+12	; 0x0c
    288e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2890:	aa 84       	ldd	r10, Y+10	; 0x0a
    2892:	b9 84       	ldd	r11, Y+9	; 0x09
    2894:	c8 84       	ldd	r12, Y+8	; 0x08
    2896:	df 80       	ldd	r13, Y+7	; 0x07
    2898:	ee 80       	ldd	r14, Y+6	; 0x06
    289a:	fd 80       	ldd	r15, Y+5	; 0x05
    289c:	0c 81       	ldd	r16, Y+4	; 0x04
    289e:	1b 81       	ldd	r17, Y+3	; 0x03
    28a0:	aa 81       	ldd	r26, Y+2	; 0x02
    28a2:	b9 81       	ldd	r27, Y+1	; 0x01
    28a4:	ce 0f       	add	r28, r30
    28a6:	d1 1d       	adc	r29, r1
    28a8:	0f b6       	in	r0, 0x3f	; 63
    28aa:	f8 94       	cli
    28ac:	de bf       	out	0x3e, r29	; 62
    28ae:	0f be       	out	0x3f, r0	; 63
    28b0:	cd bf       	out	0x3d, r28	; 61
    28b2:	ed 01       	movw	r28, r26
    28b4:	08 95       	ret

000028b6 <_exit>:
    28b6:	f8 94       	cli

000028b8 <__stop_program>:
    28b8:	ff cf       	rjmp	.-2      	; 0x28b8 <__stop_program>
