
smart_home.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000399e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000e8  00800060  0000399e  00003a32  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800148  00800148  00003b1a  2**0
                  ALLOC
  3 .stab         00003480  00000000  00000000  00003b1c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001151  00000000  00000000  00006f9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000080ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000822d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000839d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009fe6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000aed1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000bc80  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000bde0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000c06d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c83b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 5e 0a 	jmp	0x14bc	; 0x14bc <__vector_2>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 35 16 	jmp	0x2c6a	; 0x2c6a <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 71 06 	jmp	0xce2	; 0xce2 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e9       	ldi	r30, 0x9E	; 158
      68:	f9 e3       	ldi	r31, 0x39	; 57
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 34       	cpi	r26, 0x48	; 72
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a8 e4       	ldi	r26, 0x48	; 72
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 35       	cpi	r26, 0x50	; 80
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 68 16 	call	0x2cd0	; 0x2cd0 <main>
      8a:	0c 94 cd 1c 	jmp	0x399a	; 0x399a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 96 1c 	jmp	0x392c	; 0x392c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e2       	ldi	r26, 0x20	; 32
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 b2 1c 	jmp	0x3964	; 0x3964 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 a2 1c 	jmp	0x3944	; 0x3944 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 be 1c 	jmp	0x397c	; 0x397c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 a2 1c 	jmp	0x3944	; 0x3944 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 be 1c 	jmp	0x397c	; 0x397c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 96 1c 	jmp	0x392c	; 0x392c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e2       	ldi	r24, 0x20	; 32
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 b2 1c 	jmp	0x3964	; 0x3964 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 a2 1c 	jmp	0x3944	; 0x3944 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 be 1c 	jmp	0x397c	; 0x397c <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 a2 1c 	jmp	0x3944	; 0x3944 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 be 1c 	jmp	0x397c	; 0x397c <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 a2 1c 	jmp	0x3944	; 0x3944 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 be 1c 	jmp	0x397c	; 0x397c <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 a6 1c 	jmp	0x394c	; 0x394c <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 c2 1c 	jmp	0x3984	; 0x3984 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <ADC_VidSetCallBack>:

static void  (*CallBackFuncPtr)(void)= NULL;


void  ADC_VidSetCallBack (void (*LOC_funcptr)(void) )
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <ADC_VidSetCallBack+0x6>
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
     b50:	9a 83       	std	Y+2, r25	; 0x02
     b52:	89 83       	std	Y+1, r24	; 0x01
	if(LOC_funcptr  != NULL )
     b54:	89 81       	ldd	r24, Y+1	; 0x01
     b56:	9a 81       	ldd	r25, Y+2	; 0x02
     b58:	00 97       	sbiw	r24, 0x00	; 0
     b5a:	31 f0       	breq	.+12     	; 0xb68 <ADC_VidSetCallBack+0x22>
	{
		CallBackFuncPtr = LOC_funcptr ;
     b5c:	89 81       	ldd	r24, Y+1	; 0x01
     b5e:	9a 81       	ldd	r25, Y+2	; 0x02
     b60:	90 93 49 01 	sts	0x0149, r25
     b64:	80 93 48 01 	sts	0x0148, r24
	}
}
     b68:	0f 90       	pop	r0
     b6a:	0f 90       	pop	r0
     b6c:	cf 91       	pop	r28
     b6e:	df 91       	pop	r29
     b70:	08 95       	ret

00000b72 <ADC_VidInit>:


void ADC_VidInit(void)
{
     b72:	df 93       	push	r29
     b74:	cf 93       	push	r28
     b76:	cd b7       	in	r28, 0x3d	; 61
     b78:	de b7       	in	r29, 0x3e	; 62
#if Voltage_Reference__mode== Voltage_Reference_off
	CLR_BIT(ADMUX,REFS0);
	CLR_BIT(ADMUX,REFS1);              //V reference

#elif  Voltage_Reference__mode== Voltage_Reference_vcc
	SET_BIT(ADMUX,REFS0);
     b7a:	a7 e2       	ldi	r26, 0x27	; 39
     b7c:	b0 e0       	ldi	r27, 0x00	; 0
     b7e:	e7 e2       	ldi	r30, 0x27	; 39
     b80:	f0 e0       	ldi	r31, 0x00	; 0
     b82:	80 81       	ld	r24, Z
     b84:	80 64       	ori	r24, 0x40	; 64
     b86:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,REFS1);              //V reference
     b88:	a7 e2       	ldi	r26, 0x27	; 39
     b8a:	b0 e0       	ldi	r27, 0x00	; 0
     b8c:	e7 e2       	ldi	r30, 0x27	; 39
     b8e:	f0 e0       	ldi	r31, 0x00	; 0
     b90:	80 81       	ld	r24, Z
     b92:	8f 77       	andi	r24, 0x7F	; 127
     b94:	8c 93       	st	X, r24
	SET_BIT(ADMUX,REFS0);
	SET_BIT(ADMUX,REFS1);              //V reference
#endif

#if	ADC_Right_Adjust== enable
		CLR_BIT(ADMUX,ADLAR);
     b96:	a7 e2       	ldi	r26, 0x27	; 39
     b98:	b0 e0       	ldi	r27, 0x00	; 0
     b9a:	e7 e2       	ldi	r30, 0x27	; 39
     b9c:	f0 e0       	ldi	r31, 0x00	; 0
     b9e:	80 81       	ld	r24, Z
     ba0:	8f 7d       	andi	r24, 0xDF	; 223
     ba2:	8c 93       	st	X, r24
#elif prescaler_mode== prescaler_32
			SET_BIT(ADCSRA,ADPS0);
			CLR_BIT(ADCSRA,ADPS1);
			SET_BIT(ADCSRA,ADPS2);	         //Prescaler
	#elif prescaler_mode== prescaler_64
			SET_BIT(ADCSRA,ADPS2);
     ba4:	a6 e2       	ldi	r26, 0x26	; 38
     ba6:	b0 e0       	ldi	r27, 0x00	; 0
     ba8:	e6 e2       	ldi	r30, 0x26	; 38
     baa:	f0 e0       	ldi	r31, 0x00	; 0
     bac:	80 81       	ld	r24, Z
     bae:	84 60       	ori	r24, 0x04	; 4
     bb0:	8c 93       	st	X, r24
			SET_BIT(ADCSRA,ADPS1);
     bb2:	a6 e2       	ldi	r26, 0x26	; 38
     bb4:	b0 e0       	ldi	r27, 0x00	; 0
     bb6:	e6 e2       	ldi	r30, 0x26	; 38
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	80 81       	ld	r24, Z
     bbc:	82 60       	ori	r24, 0x02	; 2
     bbe:	8c 93       	st	X, r24
			CLR_BIT(ADCSRA,ADPS0);	         //Prescaler
     bc0:	a6 e2       	ldi	r26, 0x26	; 38
     bc2:	b0 e0       	ldi	r27, 0x00	; 0
     bc4:	e6 e2       	ldi	r30, 0x26	; 38
     bc6:	f0 e0       	ldi	r31, 0x00	; 0
     bc8:	80 81       	ld	r24, Z
     bca:	8e 7f       	andi	r24, 0xFE	; 254
     bcc:	8c 93       	st	X, r24
		#error  "wrong choice"
	#endif


#if Auto_Trigger_Source_Selections==Free_Running_mode
			CLR_BIT(SFIOR,ADTS0);
     bce:	a0 e5       	ldi	r26, 0x50	; 80
     bd0:	b0 e0       	ldi	r27, 0x00	; 0
     bd2:	e0 e5       	ldi	r30, 0x50	; 80
     bd4:	f0 e0       	ldi	r31, 0x00	; 0
     bd6:	80 81       	ld	r24, Z
     bd8:	8f 7d       	andi	r24, 0xDF	; 223
     bda:	8c 93       	st	X, r24
			CLR_BIT(SFIOR,ADTS1);
     bdc:	a0 e5       	ldi	r26, 0x50	; 80
     bde:	b0 e0       	ldi	r27, 0x00	; 0
     be0:	e0 e5       	ldi	r30, 0x50	; 80
     be2:	f0 e0       	ldi	r31, 0x00	; 0
     be4:	80 81       	ld	r24, Z
     be6:	8f 7b       	andi	r24, 0xBF	; 191
     be8:	8c 93       	st	X, r24
			CLR_BIT(SFIOR,ADTS2);
     bea:	a0 e5       	ldi	r26, 0x50	; 80
     bec:	b0 e0       	ldi	r27, 0x00	; 0
     bee:	e0 e5       	ldi	r30, 0x50	; 80
     bf0:	f0 e0       	ldi	r31, 0x00	; 0
     bf2:	80 81       	ld	r24, Z
     bf4:	8f 77       	andi	r24, 0x7F	; 127
     bf6:	8c 93       	st	X, r24
#else
	#error  "wrong choice"
#endif

#if	Auto_trigger== enable
			SET_BIT(ADCSRA,ADATE);
     bf8:	a6 e2       	ldi	r26, 0x26	; 38
     bfa:	b0 e0       	ldi	r27, 0x00	; 0
     bfc:	e6 e2       	ldi	r30, 0x26	; 38
     bfe:	f0 e0       	ldi	r31, 0x00	; 0
     c00:	80 81       	ld	r24, Z
     c02:	80 62       	ori	r24, 0x20	; 32
     c04:	8c 93       	st	X, r24
	#error  "wrong choice Auto_trigger"
#endif


#if	ADC_TRIGGER== enable
			SET_BIT(ADCSRA,ADEN);
     c06:	a6 e2       	ldi	r26, 0x26	; 38
     c08:	b0 e0       	ldi	r27, 0x00	; 0
     c0a:	e6 e2       	ldi	r30, 0x26	; 38
     c0c:	f0 e0       	ldi	r31, 0x00	; 0
     c0e:	80 81       	ld	r24, Z
     c10:	80 68       	ori	r24, 0x80	; 128
     c12:	8c 93       	st	X, r24
			CLR_BIT(ADCSRA,ADEN);
#else
	#error  "wrong choice Auto_trigger"
#endif

}
     c14:	cf 91       	pop	r28
     c16:	df 91       	pop	r29
     c18:	08 95       	ret

00000c1a <ADC_U16GitDigital>:

u16 ADC_U16GitDigital(u8 LOC_Channel)
{
     c1a:	df 93       	push	r29
     c1c:	cf 93       	push	r28
     c1e:	0f 92       	push	r0
     c20:	cd b7       	in	r28, 0x3d	; 61
     c22:	de b7       	in	r29, 0x3e	; 62
     c24:	89 83       	std	Y+1, r24	; 0x01
	ADMUX&=singel_ended;
     c26:	a7 e2       	ldi	r26, 0x27	; 39
     c28:	b0 e0       	ldi	r27, 0x00	; 0
     c2a:	e7 e2       	ldi	r30, 0x27	; 39
     c2c:	f0 e0       	ldi	r31, 0x00	; 0
     c2e:	80 81       	ld	r24, Z
     c30:	80 7e       	andi	r24, 0xE0	; 224
     c32:	8c 93       	st	X, r24
	ADMUX|=LOC_Channel;              //number of channel by user
     c34:	a7 e2       	ldi	r26, 0x27	; 39
     c36:	b0 e0       	ldi	r27, 0x00	; 0
     c38:	e7 e2       	ldi	r30, 0x27	; 39
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	90 81       	ld	r25, Z
     c3e:	89 81       	ldd	r24, Y+1	; 0x01
     c40:	89 2b       	or	r24, r25
     c42:	8c 93       	st	X, r24

	SET_BIT(ADCSRA,ADSC);           //Start Conversion
     c44:	a6 e2       	ldi	r26, 0x26	; 38
     c46:	b0 e0       	ldi	r27, 0x00	; 0
     c48:	e6 e2       	ldi	r30, 0x26	; 38
     c4a:	f0 e0       	ldi	r31, 0x00	; 0
     c4c:	80 81       	ld	r24, Z
     c4e:	80 64       	ori	r24, 0x40	; 64
     c50:	8c 93       	st	X, r24
	while(0==GET_BIT(ADCSRA,ADIF))  //if ADC interrupt flag=0 waite until be one
     c52:	e6 e2       	ldi	r30, 0x26	; 38
     c54:	f0 e0       	ldi	r31, 0x00	; 0
     c56:	80 81       	ld	r24, Z
     c58:	82 95       	swap	r24
     c5a:	8f 70       	andi	r24, 0x0F	; 15
     c5c:	88 2f       	mov	r24, r24
     c5e:	90 e0       	ldi	r25, 0x00	; 0
     c60:	81 70       	andi	r24, 0x01	; 1
     c62:	90 70       	andi	r25, 0x00	; 0
     c64:	00 97       	sbiw	r24, 0x00	; 0
     c66:	a9 f3       	breq	.-22     	; 0xc52 <ADC_U16GitDigital+0x38>
	{
	}
	SET_BIT(ADCSRA,ADIF);           //reset the interrupt flag over write one to be zero
     c68:	a6 e2       	ldi	r26, 0x26	; 38
     c6a:	b0 e0       	ldi	r27, 0x00	; 0
     c6c:	e6 e2       	ldi	r30, 0x26	; 38
     c6e:	f0 e0       	ldi	r31, 0x00	; 0
     c70:	80 81       	ld	r24, Z
     c72:	80 61       	ori	r24, 0x10	; 16
     c74:	8c 93       	st	X, r24
    return ADC;
     c76:	e4 e2       	ldi	r30, 0x24	; 36
     c78:	f0 e0       	ldi	r31, 0x00	; 0
     c7a:	80 81       	ld	r24, Z
     c7c:	91 81       	ldd	r25, Z+1	; 0x01

}
     c7e:	0f 90       	pop	r0
     c80:	cf 91       	pop	r28
     c82:	df 91       	pop	r29
     c84:	08 95       	ret

00000c86 <ADC_VidStartConvertion>:


void ADC_VidStartConvertion(u8  LOC_Channel)
{
     c86:	df 93       	push	r29
     c88:	cf 93       	push	r28
     c8a:	0f 92       	push	r0
     c8c:	cd b7       	in	r28, 0x3d	; 61
     c8e:	de b7       	in	r29, 0x3e	; 62
     c90:	89 83       	std	Y+1, r24	; 0x01
	ADMUX&=singel_ended;               //singel ended
     c92:	a7 e2       	ldi	r26, 0x27	; 39
     c94:	b0 e0       	ldi	r27, 0x00	; 0
     c96:	e7 e2       	ldi	r30, 0x27	; 39
     c98:	f0 e0       	ldi	r31, 0x00	; 0
     c9a:	80 81       	ld	r24, Z
     c9c:	80 7e       	andi	r24, 0xE0	; 224
     c9e:	8c 93       	st	X, r24
	ADMUX|=LOC_Channel;              //number of channel by user
     ca0:	a7 e2       	ldi	r26, 0x27	; 39
     ca2:	b0 e0       	ldi	r27, 0x00	; 0
     ca4:	e7 e2       	ldi	r30, 0x27	; 39
     ca6:	f0 e0       	ldi	r31, 0x00	; 0
     ca8:	90 81       	ld	r25, Z
     caa:	89 81       	ldd	r24, Y+1	; 0x01
     cac:	89 2b       	or	r24, r25
     cae:	8c 93       	st	X, r24

	//SET_BIT(ADCSRA,ADIE);              //enable intruppt

	SET_BIT(ADCSRA,ADSC);           //Start Conversion
     cb0:	a6 e2       	ldi	r26, 0x26	; 38
     cb2:	b0 e0       	ldi	r27, 0x00	; 0
     cb4:	e6 e2       	ldi	r30, 0x26	; 38
     cb6:	f0 e0       	ldi	r31, 0x00	; 0
     cb8:	80 81       	ld	r24, Z
     cba:	80 64       	ori	r24, 0x40	; 64
     cbc:	8c 93       	st	X, r24

}
     cbe:	0f 90       	pop	r0
     cc0:	cf 91       	pop	r28
     cc2:	df 91       	pop	r29
     cc4:	08 95       	ret

00000cc6 <ADC_VidEnableInt>:

void ADC_VidEnableInt(void)
{
     cc6:	df 93       	push	r29
     cc8:	cf 93       	push	r28
     cca:	cd b7       	in	r28, 0x3d	; 61
     ccc:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADCSRA,ADIE);              //enable intruppt
     cce:	a6 e2       	ldi	r26, 0x26	; 38
     cd0:	b0 e0       	ldi	r27, 0x00	; 0
     cd2:	e6 e2       	ldi	r30, 0x26	; 38
     cd4:	f0 e0       	ldi	r31, 0x00	; 0
     cd6:	80 81       	ld	r24, Z
     cd8:	88 60       	ori	r24, 0x08	; 8
     cda:	8c 93       	st	X, r24
	}
     cdc:	cf 91       	pop	r28
     cde:	df 91       	pop	r29
     ce0:	08 95       	ret

00000ce2 <__vector_16>:

ISR(ADC_VECT)
{
     ce2:	1f 92       	push	r1
     ce4:	0f 92       	push	r0
     ce6:	0f b6       	in	r0, 0x3f	; 63
     ce8:	0f 92       	push	r0
     cea:	11 24       	eor	r1, r1
     cec:	2f 93       	push	r18
     cee:	3f 93       	push	r19
     cf0:	4f 93       	push	r20
     cf2:	5f 93       	push	r21
     cf4:	6f 93       	push	r22
     cf6:	7f 93       	push	r23
     cf8:	8f 93       	push	r24
     cfa:	9f 93       	push	r25
     cfc:	af 93       	push	r26
     cfe:	bf 93       	push	r27
     d00:	ef 93       	push	r30
     d02:	ff 93       	push	r31
     d04:	df 93       	push	r29
     d06:	cf 93       	push	r28
     d08:	cd b7       	in	r28, 0x3d	; 61
     d0a:	de b7       	in	r29, 0x3e	; 62
	if(CallBackFuncPtr != NULL )
     d0c:	80 91 48 01 	lds	r24, 0x0148
     d10:	90 91 49 01 	lds	r25, 0x0149
     d14:	00 97       	sbiw	r24, 0x00	; 0
     d16:	29 f0       	breq	.+10     	; 0xd22 <__vector_16+0x40>
	{
		CallBackFuncPtr();
     d18:	e0 91 48 01 	lds	r30, 0x0148
     d1c:	f0 91 49 01 	lds	r31, 0x0149
     d20:	09 95       	icall
	{
		DIO_VidSetPinValue(PORTB,PIN7,1);
		DIO_VidSetPinValue(PORTB,PIN0,0);
		DIO_VidSetPinValue(PORTB,PIN1,0);
	}*/
}
     d22:	cf 91       	pop	r28
     d24:	df 91       	pop	r29
     d26:	ff 91       	pop	r31
     d28:	ef 91       	pop	r30
     d2a:	bf 91       	pop	r27
     d2c:	af 91       	pop	r26
     d2e:	9f 91       	pop	r25
     d30:	8f 91       	pop	r24
     d32:	7f 91       	pop	r23
     d34:	6f 91       	pop	r22
     d36:	5f 91       	pop	r21
     d38:	4f 91       	pop	r20
     d3a:	3f 91       	pop	r19
     d3c:	2f 91       	pop	r18
     d3e:	0f 90       	pop	r0
     d40:	0f be       	out	0x3f, r0	; 63
     d42:	0f 90       	pop	r0
     d44:	1f 90       	pop	r1
     d46:	18 95       	reti

00000d48 <DIO_VidSetPinDirection>:
#include "STD_TYPES.h"
#include "DIO_Register.h"
#include "BIT_Math.h"

void DIO_VidSetPinDirection	( u8 LOC_u8Port, u8 LOC_u8Pin, u8 LOC_u8State)
{
     d48:	df 93       	push	r29
     d4a:	cf 93       	push	r28
     d4c:	cd b7       	in	r28, 0x3d	; 61
     d4e:	de b7       	in	r29, 0x3e	; 62
     d50:	27 97       	sbiw	r28, 0x07	; 7
     d52:	0f b6       	in	r0, 0x3f	; 63
     d54:	f8 94       	cli
     d56:	de bf       	out	0x3e, r29	; 62
     d58:	0f be       	out	0x3f, r0	; 63
     d5a:	cd bf       	out	0x3d, r28	; 61
     d5c:	89 83       	std	Y+1, r24	; 0x01
     d5e:	6a 83       	std	Y+2, r22	; 0x02
     d60:	4b 83       	std	Y+3, r20	; 0x03
	if ( OUTPUT==LOC_u8State)
     d62:	8b 81       	ldd	r24, Y+3	; 0x03
     d64:	81 30       	cpi	r24, 0x01	; 1
     d66:	09 f0       	breq	.+2      	; 0xd6a <DIO_VidSetPinDirection+0x22>
     d68:	6f c0       	rjmp	.+222    	; 0xe48 <DIO_VidSetPinDirection+0x100>
	{
		switch (LOC_u8Port)
     d6a:	89 81       	ldd	r24, Y+1	; 0x01
     d6c:	28 2f       	mov	r18, r24
     d6e:	30 e0       	ldi	r19, 0x00	; 0
     d70:	3f 83       	std	Y+7, r19	; 0x07
     d72:	2e 83       	std	Y+6, r18	; 0x06
     d74:	8e 81       	ldd	r24, Y+6	; 0x06
     d76:	9f 81       	ldd	r25, Y+7	; 0x07
     d78:	81 30       	cpi	r24, 0x01	; 1
     d7a:	91 05       	cpc	r25, r1
     d7c:	49 f1       	breq	.+82     	; 0xdd0 <DIO_VidSetPinDirection+0x88>
     d7e:	2e 81       	ldd	r18, Y+6	; 0x06
     d80:	3f 81       	ldd	r19, Y+7	; 0x07
     d82:	22 30       	cpi	r18, 0x02	; 2
     d84:	31 05       	cpc	r19, r1
     d86:	2c f4       	brge	.+10     	; 0xd92 <DIO_VidSetPinDirection+0x4a>
     d88:	8e 81       	ldd	r24, Y+6	; 0x06
     d8a:	9f 81       	ldd	r25, Y+7	; 0x07
     d8c:	00 97       	sbiw	r24, 0x00	; 0
     d8e:	61 f0       	breq	.+24     	; 0xda8 <DIO_VidSetPinDirection+0x60>
     d90:	d2 c0       	rjmp	.+420    	; 0xf36 <DIO_VidSetPinDirection+0x1ee>
     d92:	2e 81       	ldd	r18, Y+6	; 0x06
     d94:	3f 81       	ldd	r19, Y+7	; 0x07
     d96:	22 30       	cpi	r18, 0x02	; 2
     d98:	31 05       	cpc	r19, r1
     d9a:	71 f1       	breq	.+92     	; 0xdf8 <DIO_VidSetPinDirection+0xb0>
     d9c:	8e 81       	ldd	r24, Y+6	; 0x06
     d9e:	9f 81       	ldd	r25, Y+7	; 0x07
     da0:	83 30       	cpi	r24, 0x03	; 3
     da2:	91 05       	cpc	r25, r1
     da4:	e9 f1       	breq	.+122    	; 0xe20 <DIO_VidSetPinDirection+0xd8>
     da6:	c7 c0       	rjmp	.+398    	; 0xf36 <DIO_VidSetPinDirection+0x1ee>
		{
		case 0: SET_BIT(DDRA, LOC_u8Pin); break;
     da8:	aa e3       	ldi	r26, 0x3A	; 58
     daa:	b0 e0       	ldi	r27, 0x00	; 0
     dac:	ea e3       	ldi	r30, 0x3A	; 58
     dae:	f0 e0       	ldi	r31, 0x00	; 0
     db0:	80 81       	ld	r24, Z
     db2:	48 2f       	mov	r20, r24
     db4:	8a 81       	ldd	r24, Y+2	; 0x02
     db6:	28 2f       	mov	r18, r24
     db8:	30 e0       	ldi	r19, 0x00	; 0
     dba:	81 e0       	ldi	r24, 0x01	; 1
     dbc:	90 e0       	ldi	r25, 0x00	; 0
     dbe:	02 2e       	mov	r0, r18
     dc0:	02 c0       	rjmp	.+4      	; 0xdc6 <DIO_VidSetPinDirection+0x7e>
     dc2:	88 0f       	add	r24, r24
     dc4:	99 1f       	adc	r25, r25
     dc6:	0a 94       	dec	r0
     dc8:	e2 f7       	brpl	.-8      	; 0xdc2 <DIO_VidSetPinDirection+0x7a>
     dca:	84 2b       	or	r24, r20
     dcc:	8c 93       	st	X, r24
     dce:	b3 c0       	rjmp	.+358    	; 0xf36 <DIO_VidSetPinDirection+0x1ee>
		case 1: SET_BIT(DDRB, LOC_u8Pin); break;
     dd0:	a7 e3       	ldi	r26, 0x37	; 55
     dd2:	b0 e0       	ldi	r27, 0x00	; 0
     dd4:	e7 e3       	ldi	r30, 0x37	; 55
     dd6:	f0 e0       	ldi	r31, 0x00	; 0
     dd8:	80 81       	ld	r24, Z
     dda:	48 2f       	mov	r20, r24
     ddc:	8a 81       	ldd	r24, Y+2	; 0x02
     dde:	28 2f       	mov	r18, r24
     de0:	30 e0       	ldi	r19, 0x00	; 0
     de2:	81 e0       	ldi	r24, 0x01	; 1
     de4:	90 e0       	ldi	r25, 0x00	; 0
     de6:	02 2e       	mov	r0, r18
     de8:	02 c0       	rjmp	.+4      	; 0xdee <DIO_VidSetPinDirection+0xa6>
     dea:	88 0f       	add	r24, r24
     dec:	99 1f       	adc	r25, r25
     dee:	0a 94       	dec	r0
     df0:	e2 f7       	brpl	.-8      	; 0xdea <DIO_VidSetPinDirection+0xa2>
     df2:	84 2b       	or	r24, r20
     df4:	8c 93       	st	X, r24
     df6:	9f c0       	rjmp	.+318    	; 0xf36 <DIO_VidSetPinDirection+0x1ee>
		case 2: SET_BIT(DDRC, LOC_u8Pin); break;
     df8:	a4 e3       	ldi	r26, 0x34	; 52
     dfa:	b0 e0       	ldi	r27, 0x00	; 0
     dfc:	e4 e3       	ldi	r30, 0x34	; 52
     dfe:	f0 e0       	ldi	r31, 0x00	; 0
     e00:	80 81       	ld	r24, Z
     e02:	48 2f       	mov	r20, r24
     e04:	8a 81       	ldd	r24, Y+2	; 0x02
     e06:	28 2f       	mov	r18, r24
     e08:	30 e0       	ldi	r19, 0x00	; 0
     e0a:	81 e0       	ldi	r24, 0x01	; 1
     e0c:	90 e0       	ldi	r25, 0x00	; 0
     e0e:	02 2e       	mov	r0, r18
     e10:	02 c0       	rjmp	.+4      	; 0xe16 <DIO_VidSetPinDirection+0xce>
     e12:	88 0f       	add	r24, r24
     e14:	99 1f       	adc	r25, r25
     e16:	0a 94       	dec	r0
     e18:	e2 f7       	brpl	.-8      	; 0xe12 <DIO_VidSetPinDirection+0xca>
     e1a:	84 2b       	or	r24, r20
     e1c:	8c 93       	st	X, r24
     e1e:	8b c0       	rjmp	.+278    	; 0xf36 <DIO_VidSetPinDirection+0x1ee>
		case 3: SET_BIT(DDRD, LOC_u8Pin); break;
     e20:	a1 e3       	ldi	r26, 0x31	; 49
     e22:	b0 e0       	ldi	r27, 0x00	; 0
     e24:	e1 e3       	ldi	r30, 0x31	; 49
     e26:	f0 e0       	ldi	r31, 0x00	; 0
     e28:	80 81       	ld	r24, Z
     e2a:	48 2f       	mov	r20, r24
     e2c:	8a 81       	ldd	r24, Y+2	; 0x02
     e2e:	28 2f       	mov	r18, r24
     e30:	30 e0       	ldi	r19, 0x00	; 0
     e32:	81 e0       	ldi	r24, 0x01	; 1
     e34:	90 e0       	ldi	r25, 0x00	; 0
     e36:	02 2e       	mov	r0, r18
     e38:	02 c0       	rjmp	.+4      	; 0xe3e <DIO_VidSetPinDirection+0xf6>
     e3a:	88 0f       	add	r24, r24
     e3c:	99 1f       	adc	r25, r25
     e3e:	0a 94       	dec	r0
     e40:	e2 f7       	brpl	.-8      	; 0xe3a <DIO_VidSetPinDirection+0xf2>
     e42:	84 2b       	or	r24, r20
     e44:	8c 93       	st	X, r24
     e46:	77 c0       	rjmp	.+238    	; 0xf36 <DIO_VidSetPinDirection+0x1ee>
		}
	}
	else if (INPUT==LOC_u8State)
     e48:	8b 81       	ldd	r24, Y+3	; 0x03
     e4a:	88 23       	and	r24, r24
     e4c:	09 f0       	breq	.+2      	; 0xe50 <DIO_VidSetPinDirection+0x108>
     e4e:	73 c0       	rjmp	.+230    	; 0xf36 <DIO_VidSetPinDirection+0x1ee>
	{
		switch (LOC_u8Port)
     e50:	89 81       	ldd	r24, Y+1	; 0x01
     e52:	28 2f       	mov	r18, r24
     e54:	30 e0       	ldi	r19, 0x00	; 0
     e56:	3d 83       	std	Y+5, r19	; 0x05
     e58:	2c 83       	std	Y+4, r18	; 0x04
     e5a:	8c 81       	ldd	r24, Y+4	; 0x04
     e5c:	9d 81       	ldd	r25, Y+5	; 0x05
     e5e:	81 30       	cpi	r24, 0x01	; 1
     e60:	91 05       	cpc	r25, r1
     e62:	59 f1       	breq	.+86     	; 0xeba <DIO_VidSetPinDirection+0x172>
     e64:	2c 81       	ldd	r18, Y+4	; 0x04
     e66:	3d 81       	ldd	r19, Y+5	; 0x05
     e68:	22 30       	cpi	r18, 0x02	; 2
     e6a:	31 05       	cpc	r19, r1
     e6c:	2c f4       	brge	.+10     	; 0xe78 <DIO_VidSetPinDirection+0x130>
     e6e:	8c 81       	ldd	r24, Y+4	; 0x04
     e70:	9d 81       	ldd	r25, Y+5	; 0x05
     e72:	00 97       	sbiw	r24, 0x00	; 0
     e74:	69 f0       	breq	.+26     	; 0xe90 <DIO_VidSetPinDirection+0x148>
     e76:	5f c0       	rjmp	.+190    	; 0xf36 <DIO_VidSetPinDirection+0x1ee>
     e78:	2c 81       	ldd	r18, Y+4	; 0x04
     e7a:	3d 81       	ldd	r19, Y+5	; 0x05
     e7c:	22 30       	cpi	r18, 0x02	; 2
     e7e:	31 05       	cpc	r19, r1
     e80:	89 f1       	breq	.+98     	; 0xee4 <DIO_VidSetPinDirection+0x19c>
     e82:	8c 81       	ldd	r24, Y+4	; 0x04
     e84:	9d 81       	ldd	r25, Y+5	; 0x05
     e86:	83 30       	cpi	r24, 0x03	; 3
     e88:	91 05       	cpc	r25, r1
     e8a:	09 f4       	brne	.+2      	; 0xe8e <DIO_VidSetPinDirection+0x146>
     e8c:	40 c0       	rjmp	.+128    	; 0xf0e <DIO_VidSetPinDirection+0x1c6>
     e8e:	53 c0       	rjmp	.+166    	; 0xf36 <DIO_VidSetPinDirection+0x1ee>
		{
		case 0: CLR_BIT(DDRA, LOC_u8Pin); break;
     e90:	aa e3       	ldi	r26, 0x3A	; 58
     e92:	b0 e0       	ldi	r27, 0x00	; 0
     e94:	ea e3       	ldi	r30, 0x3A	; 58
     e96:	f0 e0       	ldi	r31, 0x00	; 0
     e98:	80 81       	ld	r24, Z
     e9a:	48 2f       	mov	r20, r24
     e9c:	8a 81       	ldd	r24, Y+2	; 0x02
     e9e:	28 2f       	mov	r18, r24
     ea0:	30 e0       	ldi	r19, 0x00	; 0
     ea2:	81 e0       	ldi	r24, 0x01	; 1
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	02 2e       	mov	r0, r18
     ea8:	02 c0       	rjmp	.+4      	; 0xeae <DIO_VidSetPinDirection+0x166>
     eaa:	88 0f       	add	r24, r24
     eac:	99 1f       	adc	r25, r25
     eae:	0a 94       	dec	r0
     eb0:	e2 f7       	brpl	.-8      	; 0xeaa <DIO_VidSetPinDirection+0x162>
     eb2:	80 95       	com	r24
     eb4:	84 23       	and	r24, r20
     eb6:	8c 93       	st	X, r24
     eb8:	3e c0       	rjmp	.+124    	; 0xf36 <DIO_VidSetPinDirection+0x1ee>
		case 1: CLR_BIT(DDRB, LOC_u8Pin); break;
     eba:	a7 e3       	ldi	r26, 0x37	; 55
     ebc:	b0 e0       	ldi	r27, 0x00	; 0
     ebe:	e7 e3       	ldi	r30, 0x37	; 55
     ec0:	f0 e0       	ldi	r31, 0x00	; 0
     ec2:	80 81       	ld	r24, Z
     ec4:	48 2f       	mov	r20, r24
     ec6:	8a 81       	ldd	r24, Y+2	; 0x02
     ec8:	28 2f       	mov	r18, r24
     eca:	30 e0       	ldi	r19, 0x00	; 0
     ecc:	81 e0       	ldi	r24, 0x01	; 1
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	02 2e       	mov	r0, r18
     ed2:	02 c0       	rjmp	.+4      	; 0xed8 <DIO_VidSetPinDirection+0x190>
     ed4:	88 0f       	add	r24, r24
     ed6:	99 1f       	adc	r25, r25
     ed8:	0a 94       	dec	r0
     eda:	e2 f7       	brpl	.-8      	; 0xed4 <DIO_VidSetPinDirection+0x18c>
     edc:	80 95       	com	r24
     ede:	84 23       	and	r24, r20
     ee0:	8c 93       	st	X, r24
     ee2:	29 c0       	rjmp	.+82     	; 0xf36 <DIO_VidSetPinDirection+0x1ee>
		case 2: CLR_BIT(DDRC, LOC_u8Pin); break;
     ee4:	a4 e3       	ldi	r26, 0x34	; 52
     ee6:	b0 e0       	ldi	r27, 0x00	; 0
     ee8:	e4 e3       	ldi	r30, 0x34	; 52
     eea:	f0 e0       	ldi	r31, 0x00	; 0
     eec:	80 81       	ld	r24, Z
     eee:	48 2f       	mov	r20, r24
     ef0:	8a 81       	ldd	r24, Y+2	; 0x02
     ef2:	28 2f       	mov	r18, r24
     ef4:	30 e0       	ldi	r19, 0x00	; 0
     ef6:	81 e0       	ldi	r24, 0x01	; 1
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	02 2e       	mov	r0, r18
     efc:	02 c0       	rjmp	.+4      	; 0xf02 <DIO_VidSetPinDirection+0x1ba>
     efe:	88 0f       	add	r24, r24
     f00:	99 1f       	adc	r25, r25
     f02:	0a 94       	dec	r0
     f04:	e2 f7       	brpl	.-8      	; 0xefe <DIO_VidSetPinDirection+0x1b6>
     f06:	80 95       	com	r24
     f08:	84 23       	and	r24, r20
     f0a:	8c 93       	st	X, r24
     f0c:	14 c0       	rjmp	.+40     	; 0xf36 <DIO_VidSetPinDirection+0x1ee>
		case 3: CLR_BIT(DDRD, LOC_u8Pin); break;
     f0e:	a1 e3       	ldi	r26, 0x31	; 49
     f10:	b0 e0       	ldi	r27, 0x00	; 0
     f12:	e1 e3       	ldi	r30, 0x31	; 49
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	80 81       	ld	r24, Z
     f18:	48 2f       	mov	r20, r24
     f1a:	8a 81       	ldd	r24, Y+2	; 0x02
     f1c:	28 2f       	mov	r18, r24
     f1e:	30 e0       	ldi	r19, 0x00	; 0
     f20:	81 e0       	ldi	r24, 0x01	; 1
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	02 2e       	mov	r0, r18
     f26:	02 c0       	rjmp	.+4      	; 0xf2c <DIO_VidSetPinDirection+0x1e4>
     f28:	88 0f       	add	r24, r24
     f2a:	99 1f       	adc	r25, r25
     f2c:	0a 94       	dec	r0
     f2e:	e2 f7       	brpl	.-8      	; 0xf28 <DIO_VidSetPinDirection+0x1e0>
     f30:	80 95       	com	r24
     f32:	84 23       	and	r24, r20
     f34:	8c 93       	st	X, r24
		}
	}
}
     f36:	27 96       	adiw	r28, 0x07	; 7
     f38:	0f b6       	in	r0, 0x3f	; 63
     f3a:	f8 94       	cli
     f3c:	de bf       	out	0x3e, r29	; 62
     f3e:	0f be       	out	0x3f, r0	; 63
     f40:	cd bf       	out	0x3d, r28	; 61
     f42:	cf 91       	pop	r28
     f44:	df 91       	pop	r29
     f46:	08 95       	ret

00000f48 <DIO_VidSetPinValue>:

void DIO_VidSetPinValue	( u8 LOC_u8Port, u8 LOC_u8Pin, u8 LOC_u8Value)
{
     f48:	df 93       	push	r29
     f4a:	cf 93       	push	r28
     f4c:	cd b7       	in	r28, 0x3d	; 61
     f4e:	de b7       	in	r29, 0x3e	; 62
     f50:	27 97       	sbiw	r28, 0x07	; 7
     f52:	0f b6       	in	r0, 0x3f	; 63
     f54:	f8 94       	cli
     f56:	de bf       	out	0x3e, r29	; 62
     f58:	0f be       	out	0x3f, r0	; 63
     f5a:	cd bf       	out	0x3d, r28	; 61
     f5c:	89 83       	std	Y+1, r24	; 0x01
     f5e:	6a 83       	std	Y+2, r22	; 0x02
     f60:	4b 83       	std	Y+3, r20	; 0x03
	if ( 1==LOC_u8Value)
     f62:	8b 81       	ldd	r24, Y+3	; 0x03
     f64:	81 30       	cpi	r24, 0x01	; 1
     f66:	09 f0       	breq	.+2      	; 0xf6a <DIO_VidSetPinValue+0x22>
     f68:	6f c0       	rjmp	.+222    	; 0x1048 <DIO_VidSetPinValue+0x100>
	{
		switch (LOC_u8Port)
     f6a:	89 81       	ldd	r24, Y+1	; 0x01
     f6c:	28 2f       	mov	r18, r24
     f6e:	30 e0       	ldi	r19, 0x00	; 0
     f70:	3f 83       	std	Y+7, r19	; 0x07
     f72:	2e 83       	std	Y+6, r18	; 0x06
     f74:	8e 81       	ldd	r24, Y+6	; 0x06
     f76:	9f 81       	ldd	r25, Y+7	; 0x07
     f78:	81 30       	cpi	r24, 0x01	; 1
     f7a:	91 05       	cpc	r25, r1
     f7c:	49 f1       	breq	.+82     	; 0xfd0 <DIO_VidSetPinValue+0x88>
     f7e:	2e 81       	ldd	r18, Y+6	; 0x06
     f80:	3f 81       	ldd	r19, Y+7	; 0x07
     f82:	22 30       	cpi	r18, 0x02	; 2
     f84:	31 05       	cpc	r19, r1
     f86:	2c f4       	brge	.+10     	; 0xf92 <DIO_VidSetPinValue+0x4a>
     f88:	8e 81       	ldd	r24, Y+6	; 0x06
     f8a:	9f 81       	ldd	r25, Y+7	; 0x07
     f8c:	00 97       	sbiw	r24, 0x00	; 0
     f8e:	61 f0       	breq	.+24     	; 0xfa8 <DIO_VidSetPinValue+0x60>
     f90:	d2 c0       	rjmp	.+420    	; 0x1136 <DIO_VidSetPinValue+0x1ee>
     f92:	2e 81       	ldd	r18, Y+6	; 0x06
     f94:	3f 81       	ldd	r19, Y+7	; 0x07
     f96:	22 30       	cpi	r18, 0x02	; 2
     f98:	31 05       	cpc	r19, r1
     f9a:	71 f1       	breq	.+92     	; 0xff8 <DIO_VidSetPinValue+0xb0>
     f9c:	8e 81       	ldd	r24, Y+6	; 0x06
     f9e:	9f 81       	ldd	r25, Y+7	; 0x07
     fa0:	83 30       	cpi	r24, 0x03	; 3
     fa2:	91 05       	cpc	r25, r1
     fa4:	e9 f1       	breq	.+122    	; 0x1020 <DIO_VidSetPinValue+0xd8>
     fa6:	c7 c0       	rjmp	.+398    	; 0x1136 <DIO_VidSetPinValue+0x1ee>
		{
		case 0: SET_BIT(PORTA_1, LOC_u8Pin); break;
     fa8:	ab e3       	ldi	r26, 0x3B	; 59
     faa:	b0 e0       	ldi	r27, 0x00	; 0
     fac:	eb e3       	ldi	r30, 0x3B	; 59
     fae:	f0 e0       	ldi	r31, 0x00	; 0
     fb0:	80 81       	ld	r24, Z
     fb2:	48 2f       	mov	r20, r24
     fb4:	8a 81       	ldd	r24, Y+2	; 0x02
     fb6:	28 2f       	mov	r18, r24
     fb8:	30 e0       	ldi	r19, 0x00	; 0
     fba:	81 e0       	ldi	r24, 0x01	; 1
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	02 2e       	mov	r0, r18
     fc0:	02 c0       	rjmp	.+4      	; 0xfc6 <DIO_VidSetPinValue+0x7e>
     fc2:	88 0f       	add	r24, r24
     fc4:	99 1f       	adc	r25, r25
     fc6:	0a 94       	dec	r0
     fc8:	e2 f7       	brpl	.-8      	; 0xfc2 <DIO_VidSetPinValue+0x7a>
     fca:	84 2b       	or	r24, r20
     fcc:	8c 93       	st	X, r24
     fce:	b3 c0       	rjmp	.+358    	; 0x1136 <DIO_VidSetPinValue+0x1ee>
		case 1: SET_BIT(PORTB_1, LOC_u8Pin); break;
     fd0:	a8 e3       	ldi	r26, 0x38	; 56
     fd2:	b0 e0       	ldi	r27, 0x00	; 0
     fd4:	e8 e3       	ldi	r30, 0x38	; 56
     fd6:	f0 e0       	ldi	r31, 0x00	; 0
     fd8:	80 81       	ld	r24, Z
     fda:	48 2f       	mov	r20, r24
     fdc:	8a 81       	ldd	r24, Y+2	; 0x02
     fde:	28 2f       	mov	r18, r24
     fe0:	30 e0       	ldi	r19, 0x00	; 0
     fe2:	81 e0       	ldi	r24, 0x01	; 1
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	02 2e       	mov	r0, r18
     fe8:	02 c0       	rjmp	.+4      	; 0xfee <DIO_VidSetPinValue+0xa6>
     fea:	88 0f       	add	r24, r24
     fec:	99 1f       	adc	r25, r25
     fee:	0a 94       	dec	r0
     ff0:	e2 f7       	brpl	.-8      	; 0xfea <DIO_VidSetPinValue+0xa2>
     ff2:	84 2b       	or	r24, r20
     ff4:	8c 93       	st	X, r24
     ff6:	9f c0       	rjmp	.+318    	; 0x1136 <DIO_VidSetPinValue+0x1ee>
		case 2: SET_BIT(PORTC_1, LOC_u8Pin); break;
     ff8:	a5 e3       	ldi	r26, 0x35	; 53
     ffa:	b0 e0       	ldi	r27, 0x00	; 0
     ffc:	e5 e3       	ldi	r30, 0x35	; 53
     ffe:	f0 e0       	ldi	r31, 0x00	; 0
    1000:	80 81       	ld	r24, Z
    1002:	48 2f       	mov	r20, r24
    1004:	8a 81       	ldd	r24, Y+2	; 0x02
    1006:	28 2f       	mov	r18, r24
    1008:	30 e0       	ldi	r19, 0x00	; 0
    100a:	81 e0       	ldi	r24, 0x01	; 1
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	02 2e       	mov	r0, r18
    1010:	02 c0       	rjmp	.+4      	; 0x1016 <DIO_VidSetPinValue+0xce>
    1012:	88 0f       	add	r24, r24
    1014:	99 1f       	adc	r25, r25
    1016:	0a 94       	dec	r0
    1018:	e2 f7       	brpl	.-8      	; 0x1012 <DIO_VidSetPinValue+0xca>
    101a:	84 2b       	or	r24, r20
    101c:	8c 93       	st	X, r24
    101e:	8b c0       	rjmp	.+278    	; 0x1136 <DIO_VidSetPinValue+0x1ee>
		case 3: SET_BIT(PORTD_1, LOC_u8Pin); break;
    1020:	a2 e3       	ldi	r26, 0x32	; 50
    1022:	b0 e0       	ldi	r27, 0x00	; 0
    1024:	e2 e3       	ldi	r30, 0x32	; 50
    1026:	f0 e0       	ldi	r31, 0x00	; 0
    1028:	80 81       	ld	r24, Z
    102a:	48 2f       	mov	r20, r24
    102c:	8a 81       	ldd	r24, Y+2	; 0x02
    102e:	28 2f       	mov	r18, r24
    1030:	30 e0       	ldi	r19, 0x00	; 0
    1032:	81 e0       	ldi	r24, 0x01	; 1
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	02 2e       	mov	r0, r18
    1038:	02 c0       	rjmp	.+4      	; 0x103e <DIO_VidSetPinValue+0xf6>
    103a:	88 0f       	add	r24, r24
    103c:	99 1f       	adc	r25, r25
    103e:	0a 94       	dec	r0
    1040:	e2 f7       	brpl	.-8      	; 0x103a <DIO_VidSetPinValue+0xf2>
    1042:	84 2b       	or	r24, r20
    1044:	8c 93       	st	X, r24
    1046:	77 c0       	rjmp	.+238    	; 0x1136 <DIO_VidSetPinValue+0x1ee>
		}
	}
	else if (0==LOC_u8Value)
    1048:	8b 81       	ldd	r24, Y+3	; 0x03
    104a:	88 23       	and	r24, r24
    104c:	09 f0       	breq	.+2      	; 0x1050 <DIO_VidSetPinValue+0x108>
    104e:	73 c0       	rjmp	.+230    	; 0x1136 <DIO_VidSetPinValue+0x1ee>
	{
		switch (LOC_u8Port)
    1050:	89 81       	ldd	r24, Y+1	; 0x01
    1052:	28 2f       	mov	r18, r24
    1054:	30 e0       	ldi	r19, 0x00	; 0
    1056:	3d 83       	std	Y+5, r19	; 0x05
    1058:	2c 83       	std	Y+4, r18	; 0x04
    105a:	8c 81       	ldd	r24, Y+4	; 0x04
    105c:	9d 81       	ldd	r25, Y+5	; 0x05
    105e:	81 30       	cpi	r24, 0x01	; 1
    1060:	91 05       	cpc	r25, r1
    1062:	59 f1       	breq	.+86     	; 0x10ba <DIO_VidSetPinValue+0x172>
    1064:	2c 81       	ldd	r18, Y+4	; 0x04
    1066:	3d 81       	ldd	r19, Y+5	; 0x05
    1068:	22 30       	cpi	r18, 0x02	; 2
    106a:	31 05       	cpc	r19, r1
    106c:	2c f4       	brge	.+10     	; 0x1078 <DIO_VidSetPinValue+0x130>
    106e:	8c 81       	ldd	r24, Y+4	; 0x04
    1070:	9d 81       	ldd	r25, Y+5	; 0x05
    1072:	00 97       	sbiw	r24, 0x00	; 0
    1074:	69 f0       	breq	.+26     	; 0x1090 <DIO_VidSetPinValue+0x148>
    1076:	5f c0       	rjmp	.+190    	; 0x1136 <DIO_VidSetPinValue+0x1ee>
    1078:	2c 81       	ldd	r18, Y+4	; 0x04
    107a:	3d 81       	ldd	r19, Y+5	; 0x05
    107c:	22 30       	cpi	r18, 0x02	; 2
    107e:	31 05       	cpc	r19, r1
    1080:	89 f1       	breq	.+98     	; 0x10e4 <DIO_VidSetPinValue+0x19c>
    1082:	8c 81       	ldd	r24, Y+4	; 0x04
    1084:	9d 81       	ldd	r25, Y+5	; 0x05
    1086:	83 30       	cpi	r24, 0x03	; 3
    1088:	91 05       	cpc	r25, r1
    108a:	09 f4       	brne	.+2      	; 0x108e <DIO_VidSetPinValue+0x146>
    108c:	40 c0       	rjmp	.+128    	; 0x110e <DIO_VidSetPinValue+0x1c6>
    108e:	53 c0       	rjmp	.+166    	; 0x1136 <DIO_VidSetPinValue+0x1ee>
		{
		case 0: CLR_BIT(PORTA_1, LOC_u8Pin); break;
    1090:	ab e3       	ldi	r26, 0x3B	; 59
    1092:	b0 e0       	ldi	r27, 0x00	; 0
    1094:	eb e3       	ldi	r30, 0x3B	; 59
    1096:	f0 e0       	ldi	r31, 0x00	; 0
    1098:	80 81       	ld	r24, Z
    109a:	48 2f       	mov	r20, r24
    109c:	8a 81       	ldd	r24, Y+2	; 0x02
    109e:	28 2f       	mov	r18, r24
    10a0:	30 e0       	ldi	r19, 0x00	; 0
    10a2:	81 e0       	ldi	r24, 0x01	; 1
    10a4:	90 e0       	ldi	r25, 0x00	; 0
    10a6:	02 2e       	mov	r0, r18
    10a8:	02 c0       	rjmp	.+4      	; 0x10ae <DIO_VidSetPinValue+0x166>
    10aa:	88 0f       	add	r24, r24
    10ac:	99 1f       	adc	r25, r25
    10ae:	0a 94       	dec	r0
    10b0:	e2 f7       	brpl	.-8      	; 0x10aa <DIO_VidSetPinValue+0x162>
    10b2:	80 95       	com	r24
    10b4:	84 23       	and	r24, r20
    10b6:	8c 93       	st	X, r24
    10b8:	3e c0       	rjmp	.+124    	; 0x1136 <DIO_VidSetPinValue+0x1ee>
		case 1: CLR_BIT(PORTB_1, LOC_u8Pin); break;
    10ba:	a8 e3       	ldi	r26, 0x38	; 56
    10bc:	b0 e0       	ldi	r27, 0x00	; 0
    10be:	e8 e3       	ldi	r30, 0x38	; 56
    10c0:	f0 e0       	ldi	r31, 0x00	; 0
    10c2:	80 81       	ld	r24, Z
    10c4:	48 2f       	mov	r20, r24
    10c6:	8a 81       	ldd	r24, Y+2	; 0x02
    10c8:	28 2f       	mov	r18, r24
    10ca:	30 e0       	ldi	r19, 0x00	; 0
    10cc:	81 e0       	ldi	r24, 0x01	; 1
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	02 2e       	mov	r0, r18
    10d2:	02 c0       	rjmp	.+4      	; 0x10d8 <DIO_VidSetPinValue+0x190>
    10d4:	88 0f       	add	r24, r24
    10d6:	99 1f       	adc	r25, r25
    10d8:	0a 94       	dec	r0
    10da:	e2 f7       	brpl	.-8      	; 0x10d4 <DIO_VidSetPinValue+0x18c>
    10dc:	80 95       	com	r24
    10de:	84 23       	and	r24, r20
    10e0:	8c 93       	st	X, r24
    10e2:	29 c0       	rjmp	.+82     	; 0x1136 <DIO_VidSetPinValue+0x1ee>
		case 2: CLR_BIT(PORTC_1, LOC_u8Pin); break;
    10e4:	a5 e3       	ldi	r26, 0x35	; 53
    10e6:	b0 e0       	ldi	r27, 0x00	; 0
    10e8:	e5 e3       	ldi	r30, 0x35	; 53
    10ea:	f0 e0       	ldi	r31, 0x00	; 0
    10ec:	80 81       	ld	r24, Z
    10ee:	48 2f       	mov	r20, r24
    10f0:	8a 81       	ldd	r24, Y+2	; 0x02
    10f2:	28 2f       	mov	r18, r24
    10f4:	30 e0       	ldi	r19, 0x00	; 0
    10f6:	81 e0       	ldi	r24, 0x01	; 1
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	02 2e       	mov	r0, r18
    10fc:	02 c0       	rjmp	.+4      	; 0x1102 <DIO_VidSetPinValue+0x1ba>
    10fe:	88 0f       	add	r24, r24
    1100:	99 1f       	adc	r25, r25
    1102:	0a 94       	dec	r0
    1104:	e2 f7       	brpl	.-8      	; 0x10fe <DIO_VidSetPinValue+0x1b6>
    1106:	80 95       	com	r24
    1108:	84 23       	and	r24, r20
    110a:	8c 93       	st	X, r24
    110c:	14 c0       	rjmp	.+40     	; 0x1136 <DIO_VidSetPinValue+0x1ee>
		case 3: CLR_BIT(PORTD_1, LOC_u8Pin); break;
    110e:	a2 e3       	ldi	r26, 0x32	; 50
    1110:	b0 e0       	ldi	r27, 0x00	; 0
    1112:	e2 e3       	ldi	r30, 0x32	; 50
    1114:	f0 e0       	ldi	r31, 0x00	; 0
    1116:	80 81       	ld	r24, Z
    1118:	48 2f       	mov	r20, r24
    111a:	8a 81       	ldd	r24, Y+2	; 0x02
    111c:	28 2f       	mov	r18, r24
    111e:	30 e0       	ldi	r19, 0x00	; 0
    1120:	81 e0       	ldi	r24, 0x01	; 1
    1122:	90 e0       	ldi	r25, 0x00	; 0
    1124:	02 2e       	mov	r0, r18
    1126:	02 c0       	rjmp	.+4      	; 0x112c <DIO_VidSetPinValue+0x1e4>
    1128:	88 0f       	add	r24, r24
    112a:	99 1f       	adc	r25, r25
    112c:	0a 94       	dec	r0
    112e:	e2 f7       	brpl	.-8      	; 0x1128 <DIO_VidSetPinValue+0x1e0>
    1130:	80 95       	com	r24
    1132:	84 23       	and	r24, r20
    1134:	8c 93       	st	X, r24
		}
	}
}
    1136:	27 96       	adiw	r28, 0x07	; 7
    1138:	0f b6       	in	r0, 0x3f	; 63
    113a:	f8 94       	cli
    113c:	de bf       	out	0x3e, r29	; 62
    113e:	0f be       	out	0x3f, r0	; 63
    1140:	cd bf       	out	0x3d, r28	; 61
    1142:	cf 91       	pop	r28
    1144:	df 91       	pop	r29
    1146:	08 95       	ret

00001148 <DIO_VidSetPortDirection>:

void DIO_VidSetPortDirection	( u8 LOC_u8Port, u8 LOC_u8Value)
{
    1148:	df 93       	push	r29
    114a:	cf 93       	push	r28
    114c:	00 d0       	rcall	.+0      	; 0x114e <DIO_VidSetPortDirection+0x6>
    114e:	00 d0       	rcall	.+0      	; 0x1150 <DIO_VidSetPortDirection+0x8>
    1150:	cd b7       	in	r28, 0x3d	; 61
    1152:	de b7       	in	r29, 0x3e	; 62
    1154:	89 83       	std	Y+1, r24	; 0x01
    1156:	6a 83       	std	Y+2, r22	; 0x02
	switch (LOC_u8Port)
    1158:	89 81       	ldd	r24, Y+1	; 0x01
    115a:	28 2f       	mov	r18, r24
    115c:	30 e0       	ldi	r19, 0x00	; 0
    115e:	3c 83       	std	Y+4, r19	; 0x04
    1160:	2b 83       	std	Y+3, r18	; 0x03
    1162:	8b 81       	ldd	r24, Y+3	; 0x03
    1164:	9c 81       	ldd	r25, Y+4	; 0x04
    1166:	81 30       	cpi	r24, 0x01	; 1
    1168:	91 05       	cpc	r25, r1
    116a:	d1 f0       	breq	.+52     	; 0x11a0 <DIO_VidSetPortDirection+0x58>
    116c:	2b 81       	ldd	r18, Y+3	; 0x03
    116e:	3c 81       	ldd	r19, Y+4	; 0x04
    1170:	22 30       	cpi	r18, 0x02	; 2
    1172:	31 05       	cpc	r19, r1
    1174:	2c f4       	brge	.+10     	; 0x1180 <DIO_VidSetPortDirection+0x38>
    1176:	8b 81       	ldd	r24, Y+3	; 0x03
    1178:	9c 81       	ldd	r25, Y+4	; 0x04
    117a:	00 97       	sbiw	r24, 0x00	; 0
    117c:	61 f0       	breq	.+24     	; 0x1196 <DIO_VidSetPortDirection+0x4e>
    117e:	1e c0       	rjmp	.+60     	; 0x11bc <DIO_VidSetPortDirection+0x74>
    1180:	2b 81       	ldd	r18, Y+3	; 0x03
    1182:	3c 81       	ldd	r19, Y+4	; 0x04
    1184:	22 30       	cpi	r18, 0x02	; 2
    1186:	31 05       	cpc	r19, r1
    1188:	81 f0       	breq	.+32     	; 0x11aa <DIO_VidSetPortDirection+0x62>
    118a:	8b 81       	ldd	r24, Y+3	; 0x03
    118c:	9c 81       	ldd	r25, Y+4	; 0x04
    118e:	83 30       	cpi	r24, 0x03	; 3
    1190:	91 05       	cpc	r25, r1
    1192:	81 f0       	breq	.+32     	; 0x11b4 <DIO_VidSetPortDirection+0x6c>
    1194:	13 c0       	rjmp	.+38     	; 0x11bc <DIO_VidSetPortDirection+0x74>
	{
	case 0: DDRA = LOC_u8Value; break;
    1196:	ea e3       	ldi	r30, 0x3A	; 58
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	8a 81       	ldd	r24, Y+2	; 0x02
    119c:	80 83       	st	Z, r24
    119e:	0e c0       	rjmp	.+28     	; 0x11bc <DIO_VidSetPortDirection+0x74>
	case 1: DDRB = LOC_u8Value; break;
    11a0:	e7 e3       	ldi	r30, 0x37	; 55
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	8a 81       	ldd	r24, Y+2	; 0x02
    11a6:	80 83       	st	Z, r24
    11a8:	09 c0       	rjmp	.+18     	; 0x11bc <DIO_VidSetPortDirection+0x74>
	case 2: DDRC = LOC_u8Value; break;
    11aa:	e4 e3       	ldi	r30, 0x34	; 52
    11ac:	f0 e0       	ldi	r31, 0x00	; 0
    11ae:	8a 81       	ldd	r24, Y+2	; 0x02
    11b0:	80 83       	st	Z, r24
    11b2:	04 c0       	rjmp	.+8      	; 0x11bc <DIO_VidSetPortDirection+0x74>
	case 3: DDRD = LOC_u8Value; break;
    11b4:	e1 e3       	ldi	r30, 0x31	; 49
    11b6:	f0 e0       	ldi	r31, 0x00	; 0
    11b8:	8a 81       	ldd	r24, Y+2	; 0x02
    11ba:	80 83       	st	Z, r24
	}
}
    11bc:	0f 90       	pop	r0
    11be:	0f 90       	pop	r0
    11c0:	0f 90       	pop	r0
    11c2:	0f 90       	pop	r0
    11c4:	cf 91       	pop	r28
    11c6:	df 91       	pop	r29
    11c8:	08 95       	ret

000011ca <DIO_VidSetPortValue>:

void DIO_VidSetPortValue	( u8 LOC_u8Port, u8 LOC_u8Value)
{
    11ca:	df 93       	push	r29
    11cc:	cf 93       	push	r28
    11ce:	00 d0       	rcall	.+0      	; 0x11d0 <DIO_VidSetPortValue+0x6>
    11d0:	00 d0       	rcall	.+0      	; 0x11d2 <DIO_VidSetPortValue+0x8>
    11d2:	cd b7       	in	r28, 0x3d	; 61
    11d4:	de b7       	in	r29, 0x3e	; 62
    11d6:	89 83       	std	Y+1, r24	; 0x01
    11d8:	6a 83       	std	Y+2, r22	; 0x02
	switch (LOC_u8Port)
    11da:	89 81       	ldd	r24, Y+1	; 0x01
    11dc:	28 2f       	mov	r18, r24
    11de:	30 e0       	ldi	r19, 0x00	; 0
    11e0:	3c 83       	std	Y+4, r19	; 0x04
    11e2:	2b 83       	std	Y+3, r18	; 0x03
    11e4:	8b 81       	ldd	r24, Y+3	; 0x03
    11e6:	9c 81       	ldd	r25, Y+4	; 0x04
    11e8:	81 30       	cpi	r24, 0x01	; 1
    11ea:	91 05       	cpc	r25, r1
    11ec:	d1 f0       	breq	.+52     	; 0x1222 <DIO_VidSetPortValue+0x58>
    11ee:	2b 81       	ldd	r18, Y+3	; 0x03
    11f0:	3c 81       	ldd	r19, Y+4	; 0x04
    11f2:	22 30       	cpi	r18, 0x02	; 2
    11f4:	31 05       	cpc	r19, r1
    11f6:	2c f4       	brge	.+10     	; 0x1202 <DIO_VidSetPortValue+0x38>
    11f8:	8b 81       	ldd	r24, Y+3	; 0x03
    11fa:	9c 81       	ldd	r25, Y+4	; 0x04
    11fc:	00 97       	sbiw	r24, 0x00	; 0
    11fe:	61 f0       	breq	.+24     	; 0x1218 <DIO_VidSetPortValue+0x4e>
    1200:	1e c0       	rjmp	.+60     	; 0x123e <DIO_VidSetPortValue+0x74>
    1202:	2b 81       	ldd	r18, Y+3	; 0x03
    1204:	3c 81       	ldd	r19, Y+4	; 0x04
    1206:	22 30       	cpi	r18, 0x02	; 2
    1208:	31 05       	cpc	r19, r1
    120a:	81 f0       	breq	.+32     	; 0x122c <DIO_VidSetPortValue+0x62>
    120c:	8b 81       	ldd	r24, Y+3	; 0x03
    120e:	9c 81       	ldd	r25, Y+4	; 0x04
    1210:	83 30       	cpi	r24, 0x03	; 3
    1212:	91 05       	cpc	r25, r1
    1214:	81 f0       	breq	.+32     	; 0x1236 <DIO_VidSetPortValue+0x6c>
    1216:	13 c0       	rjmp	.+38     	; 0x123e <DIO_VidSetPortValue+0x74>
	{
	case 0: PORTA_1 = LOC_u8Value; break;
    1218:	eb e3       	ldi	r30, 0x3B	; 59
    121a:	f0 e0       	ldi	r31, 0x00	; 0
    121c:	8a 81       	ldd	r24, Y+2	; 0x02
    121e:	80 83       	st	Z, r24
    1220:	0e c0       	rjmp	.+28     	; 0x123e <DIO_VidSetPortValue+0x74>
	case 1: PORTB_1 = LOC_u8Value; break;
    1222:	e8 e3       	ldi	r30, 0x38	; 56
    1224:	f0 e0       	ldi	r31, 0x00	; 0
    1226:	8a 81       	ldd	r24, Y+2	; 0x02
    1228:	80 83       	st	Z, r24
    122a:	09 c0       	rjmp	.+18     	; 0x123e <DIO_VidSetPortValue+0x74>
	case 2: PORTC_1 = LOC_u8Value; break;
    122c:	e5 e3       	ldi	r30, 0x35	; 53
    122e:	f0 e0       	ldi	r31, 0x00	; 0
    1230:	8a 81       	ldd	r24, Y+2	; 0x02
    1232:	80 83       	st	Z, r24
    1234:	04 c0       	rjmp	.+8      	; 0x123e <DIO_VidSetPortValue+0x74>
	case 3: PORTD_1 = LOC_u8Value; break;
    1236:	e2 e3       	ldi	r30, 0x32	; 50
    1238:	f0 e0       	ldi	r31, 0x00	; 0
    123a:	8a 81       	ldd	r24, Y+2	; 0x02
    123c:	80 83       	st	Z, r24
	}
}
    123e:	0f 90       	pop	r0
    1240:	0f 90       	pop	r0
    1242:	0f 90       	pop	r0
    1244:	0f 90       	pop	r0
    1246:	cf 91       	pop	r28
    1248:	df 91       	pop	r29
    124a:	08 95       	ret

0000124c <DIO_u8GetPinValue>:

u8 	 DIO_u8GetPinValue	( u8 LOC_u8Port, u8 LOC_u8Pin)
{
    124c:	df 93       	push	r29
    124e:	cf 93       	push	r28
    1250:	00 d0       	rcall	.+0      	; 0x1252 <DIO_u8GetPinValue+0x6>
    1252:	00 d0       	rcall	.+0      	; 0x1254 <DIO_u8GetPinValue+0x8>
    1254:	0f 92       	push	r0
    1256:	cd b7       	in	r28, 0x3d	; 61
    1258:	de b7       	in	r29, 0x3e	; 62
    125a:	8a 83       	std	Y+2, r24	; 0x02
    125c:	6b 83       	std	Y+3, r22	; 0x03
	u8 value;
	switch (LOC_u8Port)
    125e:	8a 81       	ldd	r24, Y+2	; 0x02
    1260:	28 2f       	mov	r18, r24
    1262:	30 e0       	ldi	r19, 0x00	; 0
    1264:	3d 83       	std	Y+5, r19	; 0x05
    1266:	2c 83       	std	Y+4, r18	; 0x04
    1268:	4c 81       	ldd	r20, Y+4	; 0x04
    126a:	5d 81       	ldd	r21, Y+5	; 0x05
    126c:	41 30       	cpi	r20, 0x01	; 1
    126e:	51 05       	cpc	r21, r1
    1270:	41 f1       	breq	.+80     	; 0x12c2 <DIO_u8GetPinValue+0x76>
    1272:	8c 81       	ldd	r24, Y+4	; 0x04
    1274:	9d 81       	ldd	r25, Y+5	; 0x05
    1276:	82 30       	cpi	r24, 0x02	; 2
    1278:	91 05       	cpc	r25, r1
    127a:	34 f4       	brge	.+12     	; 0x1288 <DIO_u8GetPinValue+0x3c>
    127c:	2c 81       	ldd	r18, Y+4	; 0x04
    127e:	3d 81       	ldd	r19, Y+5	; 0x05
    1280:	21 15       	cp	r18, r1
    1282:	31 05       	cpc	r19, r1
    1284:	61 f0       	breq	.+24     	; 0x129e <DIO_u8GetPinValue+0x52>
    1286:	52 c0       	rjmp	.+164    	; 0x132c <DIO_u8GetPinValue+0xe0>
    1288:	4c 81       	ldd	r20, Y+4	; 0x04
    128a:	5d 81       	ldd	r21, Y+5	; 0x05
    128c:	42 30       	cpi	r20, 0x02	; 2
    128e:	51 05       	cpc	r21, r1
    1290:	51 f1       	breq	.+84     	; 0x12e6 <DIO_u8GetPinValue+0x9a>
    1292:	8c 81       	ldd	r24, Y+4	; 0x04
    1294:	9d 81       	ldd	r25, Y+5	; 0x05
    1296:	83 30       	cpi	r24, 0x03	; 3
    1298:	91 05       	cpc	r25, r1
    129a:	b9 f1       	breq	.+110    	; 0x130a <DIO_u8GetPinValue+0xbe>
    129c:	47 c0       	rjmp	.+142    	; 0x132c <DIO_u8GetPinValue+0xe0>
	{
	case 0: value = GET_BIT(PINA, LOC_u8Pin); break;
    129e:	e9 e3       	ldi	r30, 0x39	; 57
    12a0:	f0 e0       	ldi	r31, 0x00	; 0
    12a2:	80 81       	ld	r24, Z
    12a4:	28 2f       	mov	r18, r24
    12a6:	30 e0       	ldi	r19, 0x00	; 0
    12a8:	8b 81       	ldd	r24, Y+3	; 0x03
    12aa:	88 2f       	mov	r24, r24
    12ac:	90 e0       	ldi	r25, 0x00	; 0
    12ae:	a9 01       	movw	r20, r18
    12b0:	02 c0       	rjmp	.+4      	; 0x12b6 <DIO_u8GetPinValue+0x6a>
    12b2:	55 95       	asr	r21
    12b4:	47 95       	ror	r20
    12b6:	8a 95       	dec	r24
    12b8:	e2 f7       	brpl	.-8      	; 0x12b2 <DIO_u8GetPinValue+0x66>
    12ba:	ca 01       	movw	r24, r20
    12bc:	81 70       	andi	r24, 0x01	; 1
    12be:	89 83       	std	Y+1, r24	; 0x01
    12c0:	35 c0       	rjmp	.+106    	; 0x132c <DIO_u8GetPinValue+0xe0>
	case 1: value = GET_BIT(PINB, LOC_u8Pin); break;
    12c2:	e6 e3       	ldi	r30, 0x36	; 54
    12c4:	f0 e0       	ldi	r31, 0x00	; 0
    12c6:	80 81       	ld	r24, Z
    12c8:	28 2f       	mov	r18, r24
    12ca:	30 e0       	ldi	r19, 0x00	; 0
    12cc:	8b 81       	ldd	r24, Y+3	; 0x03
    12ce:	88 2f       	mov	r24, r24
    12d0:	90 e0       	ldi	r25, 0x00	; 0
    12d2:	a9 01       	movw	r20, r18
    12d4:	02 c0       	rjmp	.+4      	; 0x12da <DIO_u8GetPinValue+0x8e>
    12d6:	55 95       	asr	r21
    12d8:	47 95       	ror	r20
    12da:	8a 95       	dec	r24
    12dc:	e2 f7       	brpl	.-8      	; 0x12d6 <DIO_u8GetPinValue+0x8a>
    12de:	ca 01       	movw	r24, r20
    12e0:	81 70       	andi	r24, 0x01	; 1
    12e2:	89 83       	std	Y+1, r24	; 0x01
    12e4:	23 c0       	rjmp	.+70     	; 0x132c <DIO_u8GetPinValue+0xe0>
	case 2: value = GET_BIT(PINC, LOC_u8Pin); break;
    12e6:	e3 e3       	ldi	r30, 0x33	; 51
    12e8:	f0 e0       	ldi	r31, 0x00	; 0
    12ea:	80 81       	ld	r24, Z
    12ec:	28 2f       	mov	r18, r24
    12ee:	30 e0       	ldi	r19, 0x00	; 0
    12f0:	8b 81       	ldd	r24, Y+3	; 0x03
    12f2:	88 2f       	mov	r24, r24
    12f4:	90 e0       	ldi	r25, 0x00	; 0
    12f6:	a9 01       	movw	r20, r18
    12f8:	02 c0       	rjmp	.+4      	; 0x12fe <DIO_u8GetPinValue+0xb2>
    12fa:	55 95       	asr	r21
    12fc:	47 95       	ror	r20
    12fe:	8a 95       	dec	r24
    1300:	e2 f7       	brpl	.-8      	; 0x12fa <DIO_u8GetPinValue+0xae>
    1302:	ca 01       	movw	r24, r20
    1304:	81 70       	andi	r24, 0x01	; 1
    1306:	89 83       	std	Y+1, r24	; 0x01
    1308:	11 c0       	rjmp	.+34     	; 0x132c <DIO_u8GetPinValue+0xe0>
	case 3: value = GET_BIT(PIND, LOC_u8Pin); break;
    130a:	e0 e3       	ldi	r30, 0x30	; 48
    130c:	f0 e0       	ldi	r31, 0x00	; 0
    130e:	80 81       	ld	r24, Z
    1310:	28 2f       	mov	r18, r24
    1312:	30 e0       	ldi	r19, 0x00	; 0
    1314:	8b 81       	ldd	r24, Y+3	; 0x03
    1316:	88 2f       	mov	r24, r24
    1318:	90 e0       	ldi	r25, 0x00	; 0
    131a:	a9 01       	movw	r20, r18
    131c:	02 c0       	rjmp	.+4      	; 0x1322 <DIO_u8GetPinValue+0xd6>
    131e:	55 95       	asr	r21
    1320:	47 95       	ror	r20
    1322:	8a 95       	dec	r24
    1324:	e2 f7       	brpl	.-8      	; 0x131e <DIO_u8GetPinValue+0xd2>
    1326:	ca 01       	movw	r24, r20
    1328:	81 70       	andi	r24, 0x01	; 1
    132a:	89 83       	std	Y+1, r24	; 0x01
	}
	return value;
    132c:	89 81       	ldd	r24, Y+1	; 0x01
}
    132e:	0f 90       	pop	r0
    1330:	0f 90       	pop	r0
    1332:	0f 90       	pop	r0
    1334:	0f 90       	pop	r0
    1336:	0f 90       	pop	r0
    1338:	cf 91       	pop	r28
    133a:	df 91       	pop	r29
    133c:	08 95       	ret

0000133e <DIO_VidToggPinValue>:




void DIO_VidToggPinValue	( u8 LOC_u8Port, u8 LOC_u8Pin, u8 LOC_u8Value)
{
    133e:	df 93       	push	r29
    1340:	cf 93       	push	r28
    1342:	00 d0       	rcall	.+0      	; 0x1344 <DIO_VidToggPinValue+0x6>
    1344:	00 d0       	rcall	.+0      	; 0x1346 <DIO_VidToggPinValue+0x8>
    1346:	0f 92       	push	r0
    1348:	cd b7       	in	r28, 0x3d	; 61
    134a:	de b7       	in	r29, 0x3e	; 62
    134c:	89 83       	std	Y+1, r24	; 0x01
    134e:	6a 83       	std	Y+2, r22	; 0x02
    1350:	4b 83       	std	Y+3, r20	; 0x03
	if ( 1==LOC_u8Value)
    1352:	8b 81       	ldd	r24, Y+3	; 0x03
    1354:	81 30       	cpi	r24, 0x01	; 1
    1356:	09 f0       	breq	.+2      	; 0x135a <DIO_VidToggPinValue+0x1c>
    1358:	6e c0       	rjmp	.+220    	; 0x1436 <DIO_VidToggPinValue+0xf8>
	{

		switch (LOC_u8Port)
    135a:	89 81       	ldd	r24, Y+1	; 0x01
    135c:	28 2f       	mov	r18, r24
    135e:	30 e0       	ldi	r19, 0x00	; 0
    1360:	3d 83       	std	Y+5, r19	; 0x05
    1362:	2c 83       	std	Y+4, r18	; 0x04
    1364:	8c 81       	ldd	r24, Y+4	; 0x04
    1366:	9d 81       	ldd	r25, Y+5	; 0x05
    1368:	81 30       	cpi	r24, 0x01	; 1
    136a:	91 05       	cpc	r25, r1
    136c:	49 f1       	breq	.+82     	; 0x13c0 <DIO_VidToggPinValue+0x82>
    136e:	2c 81       	ldd	r18, Y+4	; 0x04
    1370:	3d 81       	ldd	r19, Y+5	; 0x05
    1372:	22 30       	cpi	r18, 0x02	; 2
    1374:	31 05       	cpc	r19, r1
    1376:	2c f4       	brge	.+10     	; 0x1382 <DIO_VidToggPinValue+0x44>
    1378:	8c 81       	ldd	r24, Y+4	; 0x04
    137a:	9d 81       	ldd	r25, Y+5	; 0x05
    137c:	00 97       	sbiw	r24, 0x00	; 0
    137e:	61 f0       	breq	.+24     	; 0x1398 <DIO_VidToggPinValue+0x5a>
    1380:	5a c0       	rjmp	.+180    	; 0x1436 <DIO_VidToggPinValue+0xf8>
    1382:	2c 81       	ldd	r18, Y+4	; 0x04
    1384:	3d 81       	ldd	r19, Y+5	; 0x05
    1386:	22 30       	cpi	r18, 0x02	; 2
    1388:	31 05       	cpc	r19, r1
    138a:	71 f1       	breq	.+92     	; 0x13e8 <DIO_VidToggPinValue+0xaa>
    138c:	8c 81       	ldd	r24, Y+4	; 0x04
    138e:	9d 81       	ldd	r25, Y+5	; 0x05
    1390:	83 30       	cpi	r24, 0x03	; 3
    1392:	91 05       	cpc	r25, r1
    1394:	e9 f1       	breq	.+122    	; 0x1410 <DIO_VidToggPinValue+0xd2>
    1396:	4f c0       	rjmp	.+158    	; 0x1436 <DIO_VidToggPinValue+0xf8>
		{
		case 0: TOG_BIT(PORTA_1, LOC_u8Pin); break;
    1398:	ab e3       	ldi	r26, 0x3B	; 59
    139a:	b0 e0       	ldi	r27, 0x00	; 0
    139c:	eb e3       	ldi	r30, 0x3B	; 59
    139e:	f0 e0       	ldi	r31, 0x00	; 0
    13a0:	80 81       	ld	r24, Z
    13a2:	48 2f       	mov	r20, r24
    13a4:	8a 81       	ldd	r24, Y+2	; 0x02
    13a6:	28 2f       	mov	r18, r24
    13a8:	30 e0       	ldi	r19, 0x00	; 0
    13aa:	81 e0       	ldi	r24, 0x01	; 1
    13ac:	90 e0       	ldi	r25, 0x00	; 0
    13ae:	02 2e       	mov	r0, r18
    13b0:	02 c0       	rjmp	.+4      	; 0x13b6 <DIO_VidToggPinValue+0x78>
    13b2:	88 0f       	add	r24, r24
    13b4:	99 1f       	adc	r25, r25
    13b6:	0a 94       	dec	r0
    13b8:	e2 f7       	brpl	.-8      	; 0x13b2 <DIO_VidToggPinValue+0x74>
    13ba:	84 27       	eor	r24, r20
    13bc:	8c 93       	st	X, r24
    13be:	3b c0       	rjmp	.+118    	; 0x1436 <DIO_VidToggPinValue+0xf8>
		case 1: TOG_BIT(PORTB_1, LOC_u8Pin); break;
    13c0:	a8 e3       	ldi	r26, 0x38	; 56
    13c2:	b0 e0       	ldi	r27, 0x00	; 0
    13c4:	e8 e3       	ldi	r30, 0x38	; 56
    13c6:	f0 e0       	ldi	r31, 0x00	; 0
    13c8:	80 81       	ld	r24, Z
    13ca:	48 2f       	mov	r20, r24
    13cc:	8a 81       	ldd	r24, Y+2	; 0x02
    13ce:	28 2f       	mov	r18, r24
    13d0:	30 e0       	ldi	r19, 0x00	; 0
    13d2:	81 e0       	ldi	r24, 0x01	; 1
    13d4:	90 e0       	ldi	r25, 0x00	; 0
    13d6:	02 2e       	mov	r0, r18
    13d8:	02 c0       	rjmp	.+4      	; 0x13de <DIO_VidToggPinValue+0xa0>
    13da:	88 0f       	add	r24, r24
    13dc:	99 1f       	adc	r25, r25
    13de:	0a 94       	dec	r0
    13e0:	e2 f7       	brpl	.-8      	; 0x13da <DIO_VidToggPinValue+0x9c>
    13e2:	84 27       	eor	r24, r20
    13e4:	8c 93       	st	X, r24
    13e6:	27 c0       	rjmp	.+78     	; 0x1436 <DIO_VidToggPinValue+0xf8>
		case 2: TOG_BIT(PORTC_1, LOC_u8Pin); break;
    13e8:	a5 e3       	ldi	r26, 0x35	; 53
    13ea:	b0 e0       	ldi	r27, 0x00	; 0
    13ec:	e5 e3       	ldi	r30, 0x35	; 53
    13ee:	f0 e0       	ldi	r31, 0x00	; 0
    13f0:	80 81       	ld	r24, Z
    13f2:	48 2f       	mov	r20, r24
    13f4:	8a 81       	ldd	r24, Y+2	; 0x02
    13f6:	28 2f       	mov	r18, r24
    13f8:	30 e0       	ldi	r19, 0x00	; 0
    13fa:	81 e0       	ldi	r24, 0x01	; 1
    13fc:	90 e0       	ldi	r25, 0x00	; 0
    13fe:	02 2e       	mov	r0, r18
    1400:	02 c0       	rjmp	.+4      	; 0x1406 <DIO_VidToggPinValue+0xc8>
    1402:	88 0f       	add	r24, r24
    1404:	99 1f       	adc	r25, r25
    1406:	0a 94       	dec	r0
    1408:	e2 f7       	brpl	.-8      	; 0x1402 <DIO_VidToggPinValue+0xc4>
    140a:	84 27       	eor	r24, r20
    140c:	8c 93       	st	X, r24
    140e:	13 c0       	rjmp	.+38     	; 0x1436 <DIO_VidToggPinValue+0xf8>
		case 3: TOG_BIT(PORTD_1, LOC_u8Pin); break;
    1410:	a2 e3       	ldi	r26, 0x32	; 50
    1412:	b0 e0       	ldi	r27, 0x00	; 0
    1414:	e2 e3       	ldi	r30, 0x32	; 50
    1416:	f0 e0       	ldi	r31, 0x00	; 0
    1418:	80 81       	ld	r24, Z
    141a:	48 2f       	mov	r20, r24
    141c:	8a 81       	ldd	r24, Y+2	; 0x02
    141e:	28 2f       	mov	r18, r24
    1420:	30 e0       	ldi	r19, 0x00	; 0
    1422:	81 e0       	ldi	r24, 0x01	; 1
    1424:	90 e0       	ldi	r25, 0x00	; 0
    1426:	02 2e       	mov	r0, r18
    1428:	02 c0       	rjmp	.+4      	; 0x142e <DIO_VidToggPinValue+0xf0>
    142a:	88 0f       	add	r24, r24
    142c:	99 1f       	adc	r25, r25
    142e:	0a 94       	dec	r0
    1430:	e2 f7       	brpl	.-8      	; 0x142a <DIO_VidToggPinValue+0xec>
    1432:	84 27       	eor	r24, r20
    1434:	8c 93       	st	X, r24
		}
	}
}
    1436:	0f 90       	pop	r0
    1438:	0f 90       	pop	r0
    143a:	0f 90       	pop	r0
    143c:	0f 90       	pop	r0
    143e:	0f 90       	pop	r0
    1440:	cf 91       	pop	r28
    1442:	df 91       	pop	r29
    1444:	08 95       	ret

00001446 <EXI_Enable>:
#include "DIO_Register.h"
#include "DIO_Interface.h"
#include <avr/delay.h>
void EXI_Enable(void)

{
    1446:	df 93       	push	r29
    1448:	cf 93       	push	r28
    144a:	cd b7       	in	r28, 0x3d	; 61
    144c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GICR,INT1);
    144e:	ab e5       	ldi	r26, 0x5B	; 91
    1450:	b0 e0       	ldi	r27, 0x00	; 0
    1452:	eb e5       	ldi	r30, 0x5B	; 91
    1454:	f0 e0       	ldi	r31, 0x00	; 0
    1456:	80 81       	ld	r24, Z
    1458:	80 68       	ori	r24, 0x80	; 128
    145a:	8c 93       	st	X, r24
}
    145c:	cf 91       	pop	r28
    145e:	df 91       	pop	r29
    1460:	08 95       	ret

00001462 <EXI_Disable>:
void EXI_Disable(void)
{
    1462:	df 93       	push	r29
    1464:	cf 93       	push	r28
    1466:	cd b7       	in	r28, 0x3d	; 61
    1468:	de b7       	in	r29, 0x3e	; 62
    CLR_BIT(GICR,INT1);
    146a:	ab e5       	ldi	r26, 0x5B	; 91
    146c:	b0 e0       	ldi	r27, 0x00	; 0
    146e:	eb e5       	ldi	r30, 0x5B	; 91
    1470:	f0 e0       	ldi	r31, 0x00	; 0
    1472:	80 81       	ld	r24, Z
    1474:	8f 77       	andi	r24, 0x7F	; 127
    1476:	8c 93       	st	X, r24
}
    1478:	cf 91       	pop	r28
    147a:	df 91       	pop	r29
    147c:	08 95       	ret

0000147e <EXI_VidInt>:
void EXI_VidInt(void)
{
    147e:	df 93       	push	r29
    1480:	cf 93       	push	r28
    1482:	cd b7       	in	r28, 0x3d	; 61
    1484:	de b7       	in	r29, 0x3e	; 62
	DIO_VidSetPinDirection(PORTD,PIN3, INPUT);
    1486:	83 e0       	ldi	r24, 0x03	; 3
    1488:	63 e0       	ldi	r22, 0x03	; 3
    148a:	40 e0       	ldi	r20, 0x00	; 0
    148c:	0e 94 a4 06 	call	0xd48	; 0xd48 <DIO_VidSetPinDirection>
	DIO_VidSetPinValue(PORTD,PIN3, 1);
    1490:	83 e0       	ldi	r24, 0x03	; 3
    1492:	63 e0       	ldi	r22, 0x03	; 3
    1494:	41 e0       	ldi	r20, 0x01	; 1
    1496:	0e 94 a4 07 	call	0xf48	; 0xf48 <DIO_VidSetPinValue>
	#if control_sens==falling
			CLR_BIT(MCUCR,ISC00);
			SET_BIT(MCUCR,ISC01);
	#elif control_sens==rising
			SET_BIT(MCUCR,ISC00);
    149a:	a5 e5       	ldi	r26, 0x55	; 85
    149c:	b0 e0       	ldi	r27, 0x00	; 0
    149e:	e5 e5       	ldi	r30, 0x55	; 85
    14a0:	f0 e0       	ldi	r31, 0x00	; 0
    14a2:	80 81       	ld	r24, Z
    14a4:	81 60       	ori	r24, 0x01	; 1
    14a6:	8c 93       	st	X, r24
			SET_BIT(MCUCR,ISC01);
    14a8:	a5 e5       	ldi	r26, 0x55	; 85
    14aa:	b0 e0       	ldi	r27, 0x00	; 0
    14ac:	e5 e5       	ldi	r30, 0x55	; 85
    14ae:	f0 e0       	ldi	r31, 0x00	; 0
    14b0:	80 81       	ld	r24, Z
    14b2:	82 60       	ori	r24, 0x02	; 2
    14b4:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,ISC01);
	#else
		#error  "wrong choice"
	#endif

}
    14b6:	cf 91       	pop	r28
    14b8:	df 91       	pop	r29
    14ba:	08 95       	ret

000014bc <__vector_2>:


ISR (INT1_VECT)
{
    14bc:	1f 92       	push	r1
    14be:	0f 92       	push	r0
    14c0:	0f b6       	in	r0, 0x3f	; 63
    14c2:	0f 92       	push	r0
    14c4:	11 24       	eor	r1, r1
    14c6:	2f 93       	push	r18
    14c8:	3f 93       	push	r19
    14ca:	4f 93       	push	r20
    14cc:	5f 93       	push	r21
    14ce:	6f 93       	push	r22
    14d0:	7f 93       	push	r23
    14d2:	8f 93       	push	r24
    14d4:	9f 93       	push	r25
    14d6:	af 93       	push	r26
    14d8:	bf 93       	push	r27
    14da:	ef 93       	push	r30
    14dc:	ff 93       	push	r31
    14de:	df 93       	push	r29
    14e0:	cf 93       	push	r28
    14e2:	cd b7       	in	r28, 0x3d	; 61
    14e4:	de b7       	in	r29, 0x3e	; 62
    14e6:	2e 97       	sbiw	r28, 0x0e	; 14
    14e8:	de bf       	out	0x3e, r29	; 62
    14ea:	cd bf       	out	0x3d, r28	; 61
		DIO_VidSetPinValue(PORTA,PIN0,1);
    14ec:	80 e0       	ldi	r24, 0x00	; 0
    14ee:	60 e0       	ldi	r22, 0x00	; 0
    14f0:	41 e0       	ldi	r20, 0x01	; 1
    14f2:	0e 94 a4 07 	call	0xf48	; 0xf48 <DIO_VidSetPinValue>
    14f6:	80 e0       	ldi	r24, 0x00	; 0
    14f8:	90 e0       	ldi	r25, 0x00	; 0
    14fa:	aa e7       	ldi	r26, 0x7A	; 122
    14fc:	b5 e4       	ldi	r27, 0x45	; 69
    14fe:	8b 87       	std	Y+11, r24	; 0x0b
    1500:	9c 87       	std	Y+12, r25	; 0x0c
    1502:	ad 87       	std	Y+13, r26	; 0x0d
    1504:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1506:	6b 85       	ldd	r22, Y+11	; 0x0b
    1508:	7c 85       	ldd	r23, Y+12	; 0x0c
    150a:	8d 85       	ldd	r24, Y+13	; 0x0d
    150c:	9e 85       	ldd	r25, Y+14	; 0x0e
    150e:	20 e0       	ldi	r18, 0x00	; 0
    1510:	30 e0       	ldi	r19, 0x00	; 0
    1512:	4a ef       	ldi	r20, 0xFA	; 250
    1514:	54 e4       	ldi	r21, 0x44	; 68
    1516:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    151a:	dc 01       	movw	r26, r24
    151c:	cb 01       	movw	r24, r22
    151e:	8f 83       	std	Y+7, r24	; 0x07
    1520:	98 87       	std	Y+8, r25	; 0x08
    1522:	a9 87       	std	Y+9, r26	; 0x09
    1524:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1526:	6f 81       	ldd	r22, Y+7	; 0x07
    1528:	78 85       	ldd	r23, Y+8	; 0x08
    152a:	89 85       	ldd	r24, Y+9	; 0x09
    152c:	9a 85       	ldd	r25, Y+10	; 0x0a
    152e:	20 e0       	ldi	r18, 0x00	; 0
    1530:	30 e0       	ldi	r19, 0x00	; 0
    1532:	40 e8       	ldi	r20, 0x80	; 128
    1534:	5f e3       	ldi	r21, 0x3F	; 63
    1536:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    153a:	88 23       	and	r24, r24
    153c:	2c f4       	brge	.+10     	; 0x1548 <__vector_2+0x8c>
		__ticks = 1;
    153e:	81 e0       	ldi	r24, 0x01	; 1
    1540:	90 e0       	ldi	r25, 0x00	; 0
    1542:	9e 83       	std	Y+6, r25	; 0x06
    1544:	8d 83       	std	Y+5, r24	; 0x05
    1546:	3f c0       	rjmp	.+126    	; 0x15c6 <__vector_2+0x10a>
	else if (__tmp > 65535)
    1548:	6f 81       	ldd	r22, Y+7	; 0x07
    154a:	78 85       	ldd	r23, Y+8	; 0x08
    154c:	89 85       	ldd	r24, Y+9	; 0x09
    154e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1550:	20 e0       	ldi	r18, 0x00	; 0
    1552:	3f ef       	ldi	r19, 0xFF	; 255
    1554:	4f e7       	ldi	r20, 0x7F	; 127
    1556:	57 e4       	ldi	r21, 0x47	; 71
    1558:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    155c:	18 16       	cp	r1, r24
    155e:	4c f5       	brge	.+82     	; 0x15b2 <__vector_2+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1560:	6b 85       	ldd	r22, Y+11	; 0x0b
    1562:	7c 85       	ldd	r23, Y+12	; 0x0c
    1564:	8d 85       	ldd	r24, Y+13	; 0x0d
    1566:	9e 85       	ldd	r25, Y+14	; 0x0e
    1568:	20 e0       	ldi	r18, 0x00	; 0
    156a:	30 e0       	ldi	r19, 0x00	; 0
    156c:	40 e2       	ldi	r20, 0x20	; 32
    156e:	51 e4       	ldi	r21, 0x41	; 65
    1570:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1574:	dc 01       	movw	r26, r24
    1576:	cb 01       	movw	r24, r22
    1578:	bc 01       	movw	r22, r24
    157a:	cd 01       	movw	r24, r26
    157c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1580:	dc 01       	movw	r26, r24
    1582:	cb 01       	movw	r24, r22
    1584:	9e 83       	std	Y+6, r25	; 0x06
    1586:	8d 83       	std	Y+5, r24	; 0x05
    1588:	0f c0       	rjmp	.+30     	; 0x15a8 <__vector_2+0xec>
    158a:	88 ec       	ldi	r24, 0xC8	; 200
    158c:	90 e0       	ldi	r25, 0x00	; 0
    158e:	9c 83       	std	Y+4, r25	; 0x04
    1590:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1592:	8b 81       	ldd	r24, Y+3	; 0x03
    1594:	9c 81       	ldd	r25, Y+4	; 0x04
    1596:	01 97       	sbiw	r24, 0x01	; 1
    1598:	f1 f7       	brne	.-4      	; 0x1596 <__vector_2+0xda>
    159a:	9c 83       	std	Y+4, r25	; 0x04
    159c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    159e:	8d 81       	ldd	r24, Y+5	; 0x05
    15a0:	9e 81       	ldd	r25, Y+6	; 0x06
    15a2:	01 97       	sbiw	r24, 0x01	; 1
    15a4:	9e 83       	std	Y+6, r25	; 0x06
    15a6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15a8:	8d 81       	ldd	r24, Y+5	; 0x05
    15aa:	9e 81       	ldd	r25, Y+6	; 0x06
    15ac:	00 97       	sbiw	r24, 0x00	; 0
    15ae:	69 f7       	brne	.-38     	; 0x158a <__vector_2+0xce>
    15b0:	14 c0       	rjmp	.+40     	; 0x15da <__vector_2+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15b2:	6f 81       	ldd	r22, Y+7	; 0x07
    15b4:	78 85       	ldd	r23, Y+8	; 0x08
    15b6:	89 85       	ldd	r24, Y+9	; 0x09
    15b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    15ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15be:	dc 01       	movw	r26, r24
    15c0:	cb 01       	movw	r24, r22
    15c2:	9e 83       	std	Y+6, r25	; 0x06
    15c4:	8d 83       	std	Y+5, r24	; 0x05
    15c6:	8d 81       	ldd	r24, Y+5	; 0x05
    15c8:	9e 81       	ldd	r25, Y+6	; 0x06
    15ca:	9a 83       	std	Y+2, r25	; 0x02
    15cc:	89 83       	std	Y+1, r24	; 0x01
    15ce:	89 81       	ldd	r24, Y+1	; 0x01
    15d0:	9a 81       	ldd	r25, Y+2	; 0x02
    15d2:	01 97       	sbiw	r24, 0x01	; 1
    15d4:	f1 f7       	brne	.-4      	; 0x15d2 <__vector_2+0x116>
    15d6:	9a 83       	std	Y+2, r25	; 0x02
    15d8:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(4000);
}
    15da:	2e 96       	adiw	r28, 0x0e	; 14
    15dc:	de bf       	out	0x3e, r29	; 62
    15de:	cd bf       	out	0x3d, r28	; 61
    15e0:	cf 91       	pop	r28
    15e2:	df 91       	pop	r29
    15e4:	ff 91       	pop	r31
    15e6:	ef 91       	pop	r30
    15e8:	bf 91       	pop	r27
    15ea:	af 91       	pop	r26
    15ec:	9f 91       	pop	r25
    15ee:	8f 91       	pop	r24
    15f0:	7f 91       	pop	r23
    15f2:	6f 91       	pop	r22
    15f4:	5f 91       	pop	r21
    15f6:	4f 91       	pop	r20
    15f8:	3f 91       	pop	r19
    15fa:	2f 91       	pop	r18
    15fc:	0f 90       	pop	r0
    15fe:	0f be       	out	0x3f, r0	; 63
    1600:	0f 90       	pop	r0
    1602:	1f 90       	pop	r1
    1604:	18 95       	reti

00001606 <GIE_Enable>:
#include "GIE_Regster.h"
#include "BIT_MATH.h"

void GIE_Enable(void)

{
    1606:	df 93       	push	r29
    1608:	cf 93       	push	r28
    160a:	cd b7       	in	r28, 0x3d	; 61
    160c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,7);
    160e:	af e5       	ldi	r26, 0x5F	; 95
    1610:	b0 e0       	ldi	r27, 0x00	; 0
    1612:	ef e5       	ldi	r30, 0x5F	; 95
    1614:	f0 e0       	ldi	r31, 0x00	; 0
    1616:	80 81       	ld	r24, Z
    1618:	80 68       	ori	r24, 0x80	; 128
    161a:	8c 93       	st	X, r24
}
    161c:	cf 91       	pop	r28
    161e:	df 91       	pop	r29
    1620:	08 95       	ret

00001622 <GIE_Disable>:

void GIE_Disable(void)
{
    1622:	df 93       	push	r29
    1624:	cf 93       	push	r28
    1626:	cd b7       	in	r28, 0x3d	; 61
    1628:	de b7       	in	r29, 0x3e	; 62
    CLR_BIT(SREG,INT0);
    162a:	af e5       	ldi	r26, 0x5F	; 95
    162c:	b0 e0       	ldi	r27, 0x00	; 0
    162e:	ef e5       	ldi	r30, 0x5F	; 95
    1630:	f0 e0       	ldi	r31, 0x00	; 0
    1632:	80 81       	ld	r24, Z
    1634:	8f 7b       	andi	r24, 0xBF	; 191
    1636:	8c 93       	st	X, r24
}
    1638:	cf 91       	pop	r28
    163a:	df 91       	pop	r29
    163c:	08 95       	ret

0000163e <KEY_PAD_VidInit>:
#include "DIO_Interface.h"
#include "KEY_PAD_Interface.h"
#include "avr/delay.h"

void KEY_PAD_VidInit(void)
{
    163e:	df 93       	push	r29
    1640:	cf 93       	push	r28
    1642:	cd b7       	in	r28, 0x3d	; 61
    1644:	de b7       	in	r29, 0x3e	; 62
	DIO_VidSetPortDirection(KEY_pad_port,KEY_pad_dirction_init);
    1646:	81 e0       	ldi	r24, 0x01	; 1
    1648:	6f e0       	ldi	r22, 0x0F	; 15
    164a:	0e 94 a4 08 	call	0x1148	; 0x1148 <DIO_VidSetPortDirection>
	DIO_VidSetPortValue(KEY_pad_port,KEY_pad_value_init);
    164e:	81 e0       	ldi	r24, 0x01	; 1
    1650:	6f ef       	ldi	r22, 0xFF	; 255
    1652:	0e 94 e5 08 	call	0x11ca	; 0x11ca <DIO_VidSetPortValue>
}
    1656:	cf 91       	pop	r28
    1658:	df 91       	pop	r29
    165a:	08 95       	ret

0000165c <KEY_PAD_VidGitPresed>:

u8 KEY_PAD_VidGitPresed(void)
{
    165c:	df 93       	push	r29
    165e:	cf 93       	push	r28
    1660:	cd b7       	in	r28, 0x3d	; 61
    1662:	de b7       	in	r29, 0x3e	; 62
    1664:	a6 97       	sbiw	r28, 0x26	; 38
    1666:	0f b6       	in	r0, 0x3f	; 63
    1668:	f8 94       	cli
    166a:	de bf       	out	0x3e, r29	; 62
    166c:	0f be       	out	0x3f, r0	; 63
    166e:	cd bf       	out	0x3d, r28	; 61
	u8 colum, row;
	u8 keypad_OUT=0;
    1670:	1f 86       	std	Y+15, r1	; 0x0f
	u8 KEYPAmap[4][4]={{1,2,3,4},
										{5,6,7,8},
										{9,10,11,12},
										{13,14,15,'c'}};
    1672:	ce 01       	movw	r24, r28
    1674:	42 96       	adiw	r24, 0x12	; 18
    1676:	9b a3       	std	Y+35, r25	; 0x23
    1678:	8a a3       	std	Y+34, r24	; 0x22
    167a:	e8 e2       	ldi	r30, 0x28	; 40
    167c:	f1 e0       	ldi	r31, 0x01	; 1
    167e:	fd a3       	std	Y+37, r31	; 0x25
    1680:	ec a3       	std	Y+36, r30	; 0x24
    1682:	f0 e1       	ldi	r31, 0x10	; 16
    1684:	fe a3       	std	Y+38, r31	; 0x26
    1686:	ec a1       	ldd	r30, Y+36	; 0x24
    1688:	fd a1       	ldd	r31, Y+37	; 0x25
    168a:	00 80       	ld	r0, Z
    168c:	8c a1       	ldd	r24, Y+36	; 0x24
    168e:	9d a1       	ldd	r25, Y+37	; 0x25
    1690:	01 96       	adiw	r24, 0x01	; 1
    1692:	9d a3       	std	Y+37, r25	; 0x25
    1694:	8c a3       	std	Y+36, r24	; 0x24
    1696:	ea a1       	ldd	r30, Y+34	; 0x22
    1698:	fb a1       	ldd	r31, Y+35	; 0x23
    169a:	00 82       	st	Z, r0
    169c:	8a a1       	ldd	r24, Y+34	; 0x22
    169e:	9b a1       	ldd	r25, Y+35	; 0x23
    16a0:	01 96       	adiw	r24, 0x01	; 1
    16a2:	9b a3       	std	Y+35, r25	; 0x23
    16a4:	8a a3       	std	Y+34, r24	; 0x22
    16a6:	9e a1       	ldd	r25, Y+38	; 0x26
    16a8:	91 50       	subi	r25, 0x01	; 1
    16aa:	9e a3       	std	Y+38, r25	; 0x26
    16ac:	ee a1       	ldd	r30, Y+38	; 0x26
    16ae:	ee 23       	and	r30, r30
    16b0:	51 f7       	brne	.-44     	; 0x1686 <KEY_PAD_VidGitPresed+0x2a>
	for(colum=0;colum<4;colum++)
    16b2:	19 8a       	std	Y+17, r1	; 0x11
    16b4:	ad c0       	rjmp	.+346    	; 0x1810 <KEY_PAD_VidGitPresed+0x1b4>
	{
		DIO_VidSetPinValue(KEY_pad_port,colum,0);
    16b6:	81 e0       	ldi	r24, 0x01	; 1
    16b8:	69 89       	ldd	r22, Y+17	; 0x11
    16ba:	40 e0       	ldi	r20, 0x00	; 0
    16bc:	0e 94 a4 07 	call	0xf48	; 0xf48 <DIO_VidSetPinValue>
		for(row=4;row<8;row++)
    16c0:	84 e0       	ldi	r24, 0x04	; 4
    16c2:	88 8b       	std	Y+16, r24	; 0x10
    16c4:	99 c0       	rjmp	.+306    	; 0x17f8 <KEY_PAD_VidGitPresed+0x19c>
		{
			if(puuton_pressed==DIO_u8GetPinValue(KEY_pad_port,row))
    16c6:	81 e0       	ldi	r24, 0x01	; 1
    16c8:	68 89       	ldd	r22, Y+16	; 0x10
    16ca:	0e 94 26 09 	call	0x124c	; 0x124c <DIO_u8GetPinValue>
    16ce:	88 23       	and	r24, r24
    16d0:	09 f0       	breq	.+2      	; 0x16d4 <KEY_PAD_VidGitPresed+0x78>
    16d2:	8f c0       	rjmp	.+286    	; 0x17f2 <KEY_PAD_VidGitPresed+0x196>
			{
				keypad_OUT=KEYPAmap[row-4][colum];
    16d4:	88 89       	ldd	r24, Y+16	; 0x10
    16d6:	88 2f       	mov	r24, r24
    16d8:	90 e0       	ldi	r25, 0x00	; 0
    16da:	9c 01       	movw	r18, r24
    16dc:	24 50       	subi	r18, 0x04	; 4
    16de:	30 40       	sbci	r19, 0x00	; 0
    16e0:	89 89       	ldd	r24, Y+17	; 0x11
    16e2:	48 2f       	mov	r20, r24
    16e4:	50 e0       	ldi	r21, 0x00	; 0
    16e6:	22 0f       	add	r18, r18
    16e8:	33 1f       	adc	r19, r19
    16ea:	22 0f       	add	r18, r18
    16ec:	33 1f       	adc	r19, r19
    16ee:	ce 01       	movw	r24, r28
    16f0:	01 96       	adiw	r24, 0x01	; 1
    16f2:	82 0f       	add	r24, r18
    16f4:	93 1f       	adc	r25, r19
    16f6:	84 0f       	add	r24, r20
    16f8:	95 1f       	adc	r25, r21
    16fa:	fc 01       	movw	r30, r24
    16fc:	71 96       	adiw	r30, 0x11	; 17
    16fe:	80 81       	ld	r24, Z
    1700:	8f 87       	std	Y+15, r24	; 0x0f
				while(puuton_pressed==DIO_u8GetPinValue(KEY_pad_port,row))
    1702:	81 e0       	ldi	r24, 0x01	; 1
    1704:	68 89       	ldd	r22, Y+16	; 0x10
    1706:	0e 94 26 09 	call	0x124c	; 0x124c <DIO_u8GetPinValue>
    170a:	88 23       	and	r24, r24
    170c:	d1 f3       	breq	.-12     	; 0x1702 <KEY_PAD_VidGitPresed+0xa6>
    170e:	80 e0       	ldi	r24, 0x00	; 0
    1710:	90 e0       	ldi	r25, 0x00	; 0
    1712:	a8 e4       	ldi	r26, 0x48	; 72
    1714:	b2 e4       	ldi	r27, 0x42	; 66
    1716:	8b 87       	std	Y+11, r24	; 0x0b
    1718:	9c 87       	std	Y+12, r25	; 0x0c
    171a:	ad 87       	std	Y+13, r26	; 0x0d
    171c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    171e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1720:	7c 85       	ldd	r23, Y+12	; 0x0c
    1722:	8d 85       	ldd	r24, Y+13	; 0x0d
    1724:	9e 85       	ldd	r25, Y+14	; 0x0e
    1726:	20 e0       	ldi	r18, 0x00	; 0
    1728:	30 e0       	ldi	r19, 0x00	; 0
    172a:	4a ef       	ldi	r20, 0xFA	; 250
    172c:	54 e4       	ldi	r21, 0x44	; 68
    172e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1732:	dc 01       	movw	r26, r24
    1734:	cb 01       	movw	r24, r22
    1736:	8f 83       	std	Y+7, r24	; 0x07
    1738:	98 87       	std	Y+8, r25	; 0x08
    173a:	a9 87       	std	Y+9, r26	; 0x09
    173c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    173e:	6f 81       	ldd	r22, Y+7	; 0x07
    1740:	78 85       	ldd	r23, Y+8	; 0x08
    1742:	89 85       	ldd	r24, Y+9	; 0x09
    1744:	9a 85       	ldd	r25, Y+10	; 0x0a
    1746:	20 e0       	ldi	r18, 0x00	; 0
    1748:	30 e0       	ldi	r19, 0x00	; 0
    174a:	40 e8       	ldi	r20, 0x80	; 128
    174c:	5f e3       	ldi	r21, 0x3F	; 63
    174e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1752:	88 23       	and	r24, r24
    1754:	2c f4       	brge	.+10     	; 0x1760 <KEY_PAD_VidGitPresed+0x104>
		__ticks = 1;
    1756:	81 e0       	ldi	r24, 0x01	; 1
    1758:	90 e0       	ldi	r25, 0x00	; 0
    175a:	9e 83       	std	Y+6, r25	; 0x06
    175c:	8d 83       	std	Y+5, r24	; 0x05
    175e:	3f c0       	rjmp	.+126    	; 0x17de <KEY_PAD_VidGitPresed+0x182>
	else if (__tmp > 65535)
    1760:	6f 81       	ldd	r22, Y+7	; 0x07
    1762:	78 85       	ldd	r23, Y+8	; 0x08
    1764:	89 85       	ldd	r24, Y+9	; 0x09
    1766:	9a 85       	ldd	r25, Y+10	; 0x0a
    1768:	20 e0       	ldi	r18, 0x00	; 0
    176a:	3f ef       	ldi	r19, 0xFF	; 255
    176c:	4f e7       	ldi	r20, 0x7F	; 127
    176e:	57 e4       	ldi	r21, 0x47	; 71
    1770:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1774:	18 16       	cp	r1, r24
    1776:	4c f5       	brge	.+82     	; 0x17ca <KEY_PAD_VidGitPresed+0x16e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1778:	6b 85       	ldd	r22, Y+11	; 0x0b
    177a:	7c 85       	ldd	r23, Y+12	; 0x0c
    177c:	8d 85       	ldd	r24, Y+13	; 0x0d
    177e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1780:	20 e0       	ldi	r18, 0x00	; 0
    1782:	30 e0       	ldi	r19, 0x00	; 0
    1784:	40 e2       	ldi	r20, 0x20	; 32
    1786:	51 e4       	ldi	r21, 0x41	; 65
    1788:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    178c:	dc 01       	movw	r26, r24
    178e:	cb 01       	movw	r24, r22
    1790:	bc 01       	movw	r22, r24
    1792:	cd 01       	movw	r24, r26
    1794:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1798:	dc 01       	movw	r26, r24
    179a:	cb 01       	movw	r24, r22
    179c:	9e 83       	std	Y+6, r25	; 0x06
    179e:	8d 83       	std	Y+5, r24	; 0x05
    17a0:	0f c0       	rjmp	.+30     	; 0x17c0 <KEY_PAD_VidGitPresed+0x164>
    17a2:	88 ec       	ldi	r24, 0xC8	; 200
    17a4:	90 e0       	ldi	r25, 0x00	; 0
    17a6:	9c 83       	std	Y+4, r25	; 0x04
    17a8:	8b 83       	std	Y+3, r24	; 0x03
    17aa:	8b 81       	ldd	r24, Y+3	; 0x03
    17ac:	9c 81       	ldd	r25, Y+4	; 0x04
    17ae:	01 97       	sbiw	r24, 0x01	; 1
    17b0:	f1 f7       	brne	.-4      	; 0x17ae <KEY_PAD_VidGitPresed+0x152>
    17b2:	9c 83       	std	Y+4, r25	; 0x04
    17b4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17b6:	8d 81       	ldd	r24, Y+5	; 0x05
    17b8:	9e 81       	ldd	r25, Y+6	; 0x06
    17ba:	01 97       	sbiw	r24, 0x01	; 1
    17bc:	9e 83       	std	Y+6, r25	; 0x06
    17be:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17c0:	8d 81       	ldd	r24, Y+5	; 0x05
    17c2:	9e 81       	ldd	r25, Y+6	; 0x06
    17c4:	00 97       	sbiw	r24, 0x00	; 0
    17c6:	69 f7       	brne	.-38     	; 0x17a2 <KEY_PAD_VidGitPresed+0x146>
    17c8:	14 c0       	rjmp	.+40     	; 0x17f2 <KEY_PAD_VidGitPresed+0x196>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17ca:	6f 81       	ldd	r22, Y+7	; 0x07
    17cc:	78 85       	ldd	r23, Y+8	; 0x08
    17ce:	89 85       	ldd	r24, Y+9	; 0x09
    17d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    17d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17d6:	dc 01       	movw	r26, r24
    17d8:	cb 01       	movw	r24, r22
    17da:	9e 83       	std	Y+6, r25	; 0x06
    17dc:	8d 83       	std	Y+5, r24	; 0x05
    17de:	8d 81       	ldd	r24, Y+5	; 0x05
    17e0:	9e 81       	ldd	r25, Y+6	; 0x06
    17e2:	9a 83       	std	Y+2, r25	; 0x02
    17e4:	89 83       	std	Y+1, r24	; 0x01
    17e6:	89 81       	ldd	r24, Y+1	; 0x01
    17e8:	9a 81       	ldd	r25, Y+2	; 0x02
    17ea:	01 97       	sbiw	r24, 0x01	; 1
    17ec:	f1 f7       	brne	.-4      	; 0x17ea <KEY_PAD_VidGitPresed+0x18e>
    17ee:	9a 83       	std	Y+2, r25	; 0x02
    17f0:	89 83       	std	Y+1, r24	; 0x01
										{9,10,11,12},
										{13,14,15,'c'}};
	for(colum=0;colum<4;colum++)
	{
		DIO_VidSetPinValue(KEY_pad_port,colum,0);
		for(row=4;row<8;row++)
    17f2:	88 89       	ldd	r24, Y+16	; 0x10
    17f4:	8f 5f       	subi	r24, 0xFF	; 255
    17f6:	88 8b       	std	Y+16, r24	; 0x10
    17f8:	88 89       	ldd	r24, Y+16	; 0x10
    17fa:	88 30       	cpi	r24, 0x08	; 8
    17fc:	08 f4       	brcc	.+2      	; 0x1800 <KEY_PAD_VidGitPresed+0x1a4>
    17fe:	63 cf       	rjmp	.-314    	; 0x16c6 <KEY_PAD_VidGitPresed+0x6a>

				}
				_delay_ms(50);
			}
		}
		DIO_VidSetPinValue(KEY_pad_port,colum,1);
    1800:	81 e0       	ldi	r24, 0x01	; 1
    1802:	69 89       	ldd	r22, Y+17	; 0x11
    1804:	41 e0       	ldi	r20, 0x01	; 1
    1806:	0e 94 a4 07 	call	0xf48	; 0xf48 <DIO_VidSetPinValue>
	u8 keypad_OUT=0;
	u8 KEYPAmap[4][4]={{1,2,3,4},
										{5,6,7,8},
										{9,10,11,12},
										{13,14,15,'c'}};
	for(colum=0;colum<4;colum++)
    180a:	89 89       	ldd	r24, Y+17	; 0x11
    180c:	8f 5f       	subi	r24, 0xFF	; 255
    180e:	89 8b       	std	Y+17, r24	; 0x11
    1810:	89 89       	ldd	r24, Y+17	; 0x11
    1812:	84 30       	cpi	r24, 0x04	; 4
    1814:	08 f4       	brcc	.+2      	; 0x1818 <KEY_PAD_VidGitPresed+0x1bc>
    1816:	4f cf       	rjmp	.-354    	; 0x16b6 <KEY_PAD_VidGitPresed+0x5a>
				_delay_ms(50);
			}
		}
		DIO_VidSetPinValue(KEY_pad_port,colum,1);
	}
	return keypad_OUT;
    1818:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    181a:	a6 96       	adiw	r28, 0x26	; 38
    181c:	0f b6       	in	r0, 0x3f	; 63
    181e:	f8 94       	cli
    1820:	de bf       	out	0x3e, r29	; 62
    1822:	0f be       	out	0x3f, r0	; 63
    1824:	cd bf       	out	0x3d, r28	; 61
    1826:	cf 91       	pop	r28
    1828:	df 91       	pop	r29
    182a:	08 95       	ret

0000182c <KEY_PAD_VidGitPresedcalc>:

u8 KEY_PAD_VidGitPresedcalc(void)
{
    182c:	df 93       	push	r29
    182e:	cf 93       	push	r28
    1830:	cd b7       	in	r28, 0x3d	; 61
    1832:	de b7       	in	r29, 0x3e	; 62
    1834:	a6 97       	sbiw	r28, 0x26	; 38
    1836:	0f b6       	in	r0, 0x3f	; 63
    1838:	f8 94       	cli
    183a:	de bf       	out	0x3e, r29	; 62
    183c:	0f be       	out	0x3f, r0	; 63
    183e:	cd bf       	out	0x3d, r28	; 61
	u8 colum, row;
	u8 keypad_OUT=0;
    1840:	1f 86       	std	Y+15, r1	; 0x0f
	u8 KEYPAmap[4][4]={{1,2,3,'+'},
											{4,5,6,'-'},
											{7,8,9,'*'},
											{'l','.','c','='}};
    1842:	ce 01       	movw	r24, r28
    1844:	42 96       	adiw	r24, 0x12	; 18
    1846:	9b a3       	std	Y+35, r25	; 0x23
    1848:	8a a3       	std	Y+34, r24	; 0x22
    184a:	e8 e3       	ldi	r30, 0x38	; 56
    184c:	f1 e0       	ldi	r31, 0x01	; 1
    184e:	fd a3       	std	Y+37, r31	; 0x25
    1850:	ec a3       	std	Y+36, r30	; 0x24
    1852:	f0 e1       	ldi	r31, 0x10	; 16
    1854:	fe a3       	std	Y+38, r31	; 0x26
    1856:	ec a1       	ldd	r30, Y+36	; 0x24
    1858:	fd a1       	ldd	r31, Y+37	; 0x25
    185a:	00 80       	ld	r0, Z
    185c:	8c a1       	ldd	r24, Y+36	; 0x24
    185e:	9d a1       	ldd	r25, Y+37	; 0x25
    1860:	01 96       	adiw	r24, 0x01	; 1
    1862:	9d a3       	std	Y+37, r25	; 0x25
    1864:	8c a3       	std	Y+36, r24	; 0x24
    1866:	ea a1       	ldd	r30, Y+34	; 0x22
    1868:	fb a1       	ldd	r31, Y+35	; 0x23
    186a:	00 82       	st	Z, r0
    186c:	8a a1       	ldd	r24, Y+34	; 0x22
    186e:	9b a1       	ldd	r25, Y+35	; 0x23
    1870:	01 96       	adiw	r24, 0x01	; 1
    1872:	9b a3       	std	Y+35, r25	; 0x23
    1874:	8a a3       	std	Y+34, r24	; 0x22
    1876:	9e a1       	ldd	r25, Y+38	; 0x26
    1878:	91 50       	subi	r25, 0x01	; 1
    187a:	9e a3       	std	Y+38, r25	; 0x26
    187c:	ee a1       	ldd	r30, Y+38	; 0x26
    187e:	ee 23       	and	r30, r30
    1880:	51 f7       	brne	.-44     	; 0x1856 <KEY_PAD_VidGitPresedcalc+0x2a>
	for(colum=0;colum<4;colum++)
    1882:	19 8a       	std	Y+17, r1	; 0x11
    1884:	ad c0       	rjmp	.+346    	; 0x19e0 <KEY_PAD_VidGitPresedcalc+0x1b4>
	{
		DIO_VidSetPinValue(KEY_pad_port,colum,0);
    1886:	81 e0       	ldi	r24, 0x01	; 1
    1888:	69 89       	ldd	r22, Y+17	; 0x11
    188a:	40 e0       	ldi	r20, 0x00	; 0
    188c:	0e 94 a4 07 	call	0xf48	; 0xf48 <DIO_VidSetPinValue>
		for(row=4;row<8;row++)
    1890:	84 e0       	ldi	r24, 0x04	; 4
    1892:	88 8b       	std	Y+16, r24	; 0x10
    1894:	99 c0       	rjmp	.+306    	; 0x19c8 <KEY_PAD_VidGitPresedcalc+0x19c>
		{
			if(puuton_pressed==DIO_u8GetPinValue(KEY_pad_port,row))
    1896:	81 e0       	ldi	r24, 0x01	; 1
    1898:	68 89       	ldd	r22, Y+16	; 0x10
    189a:	0e 94 26 09 	call	0x124c	; 0x124c <DIO_u8GetPinValue>
    189e:	88 23       	and	r24, r24
    18a0:	09 f0       	breq	.+2      	; 0x18a4 <KEY_PAD_VidGitPresedcalc+0x78>
    18a2:	8f c0       	rjmp	.+286    	; 0x19c2 <KEY_PAD_VidGitPresedcalc+0x196>
			{
				keypad_OUT=KEYPAmap[row-4][colum];
    18a4:	88 89       	ldd	r24, Y+16	; 0x10
    18a6:	88 2f       	mov	r24, r24
    18a8:	90 e0       	ldi	r25, 0x00	; 0
    18aa:	9c 01       	movw	r18, r24
    18ac:	24 50       	subi	r18, 0x04	; 4
    18ae:	30 40       	sbci	r19, 0x00	; 0
    18b0:	89 89       	ldd	r24, Y+17	; 0x11
    18b2:	48 2f       	mov	r20, r24
    18b4:	50 e0       	ldi	r21, 0x00	; 0
    18b6:	22 0f       	add	r18, r18
    18b8:	33 1f       	adc	r19, r19
    18ba:	22 0f       	add	r18, r18
    18bc:	33 1f       	adc	r19, r19
    18be:	ce 01       	movw	r24, r28
    18c0:	01 96       	adiw	r24, 0x01	; 1
    18c2:	82 0f       	add	r24, r18
    18c4:	93 1f       	adc	r25, r19
    18c6:	84 0f       	add	r24, r20
    18c8:	95 1f       	adc	r25, r21
    18ca:	fc 01       	movw	r30, r24
    18cc:	71 96       	adiw	r30, 0x11	; 17
    18ce:	80 81       	ld	r24, Z
    18d0:	8f 87       	std	Y+15, r24	; 0x0f

				while(puuton_pressed==DIO_u8GetPinValue(KEY_pad_port,row))
    18d2:	81 e0       	ldi	r24, 0x01	; 1
    18d4:	68 89       	ldd	r22, Y+16	; 0x10
    18d6:	0e 94 26 09 	call	0x124c	; 0x124c <DIO_u8GetPinValue>
    18da:	88 23       	and	r24, r24
    18dc:	d1 f3       	breq	.-12     	; 0x18d2 <KEY_PAD_VidGitPresedcalc+0xa6>
    18de:	80 e0       	ldi	r24, 0x00	; 0
    18e0:	90 e0       	ldi	r25, 0x00	; 0
    18e2:	a0 e2       	ldi	r26, 0x20	; 32
    18e4:	b2 e4       	ldi	r27, 0x42	; 66
    18e6:	8b 87       	std	Y+11, r24	; 0x0b
    18e8:	9c 87       	std	Y+12, r25	; 0x0c
    18ea:	ad 87       	std	Y+13, r26	; 0x0d
    18ec:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    18f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    18f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    18f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    18f6:	20 e0       	ldi	r18, 0x00	; 0
    18f8:	30 e0       	ldi	r19, 0x00	; 0
    18fa:	4a ef       	ldi	r20, 0xFA	; 250
    18fc:	54 e4       	ldi	r21, 0x44	; 68
    18fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1902:	dc 01       	movw	r26, r24
    1904:	cb 01       	movw	r24, r22
    1906:	8f 83       	std	Y+7, r24	; 0x07
    1908:	98 87       	std	Y+8, r25	; 0x08
    190a:	a9 87       	std	Y+9, r26	; 0x09
    190c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    190e:	6f 81       	ldd	r22, Y+7	; 0x07
    1910:	78 85       	ldd	r23, Y+8	; 0x08
    1912:	89 85       	ldd	r24, Y+9	; 0x09
    1914:	9a 85       	ldd	r25, Y+10	; 0x0a
    1916:	20 e0       	ldi	r18, 0x00	; 0
    1918:	30 e0       	ldi	r19, 0x00	; 0
    191a:	40 e8       	ldi	r20, 0x80	; 128
    191c:	5f e3       	ldi	r21, 0x3F	; 63
    191e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1922:	88 23       	and	r24, r24
    1924:	2c f4       	brge	.+10     	; 0x1930 <KEY_PAD_VidGitPresedcalc+0x104>
		__ticks = 1;
    1926:	81 e0       	ldi	r24, 0x01	; 1
    1928:	90 e0       	ldi	r25, 0x00	; 0
    192a:	9e 83       	std	Y+6, r25	; 0x06
    192c:	8d 83       	std	Y+5, r24	; 0x05
    192e:	3f c0       	rjmp	.+126    	; 0x19ae <KEY_PAD_VidGitPresedcalc+0x182>
	else if (__tmp > 65535)
    1930:	6f 81       	ldd	r22, Y+7	; 0x07
    1932:	78 85       	ldd	r23, Y+8	; 0x08
    1934:	89 85       	ldd	r24, Y+9	; 0x09
    1936:	9a 85       	ldd	r25, Y+10	; 0x0a
    1938:	20 e0       	ldi	r18, 0x00	; 0
    193a:	3f ef       	ldi	r19, 0xFF	; 255
    193c:	4f e7       	ldi	r20, 0x7F	; 127
    193e:	57 e4       	ldi	r21, 0x47	; 71
    1940:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1944:	18 16       	cp	r1, r24
    1946:	4c f5       	brge	.+82     	; 0x199a <KEY_PAD_VidGitPresedcalc+0x16e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1948:	6b 85       	ldd	r22, Y+11	; 0x0b
    194a:	7c 85       	ldd	r23, Y+12	; 0x0c
    194c:	8d 85       	ldd	r24, Y+13	; 0x0d
    194e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1950:	20 e0       	ldi	r18, 0x00	; 0
    1952:	30 e0       	ldi	r19, 0x00	; 0
    1954:	40 e2       	ldi	r20, 0x20	; 32
    1956:	51 e4       	ldi	r21, 0x41	; 65
    1958:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    195c:	dc 01       	movw	r26, r24
    195e:	cb 01       	movw	r24, r22
    1960:	bc 01       	movw	r22, r24
    1962:	cd 01       	movw	r24, r26
    1964:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1968:	dc 01       	movw	r26, r24
    196a:	cb 01       	movw	r24, r22
    196c:	9e 83       	std	Y+6, r25	; 0x06
    196e:	8d 83       	std	Y+5, r24	; 0x05
    1970:	0f c0       	rjmp	.+30     	; 0x1990 <KEY_PAD_VidGitPresedcalc+0x164>
    1972:	88 ec       	ldi	r24, 0xC8	; 200
    1974:	90 e0       	ldi	r25, 0x00	; 0
    1976:	9c 83       	std	Y+4, r25	; 0x04
    1978:	8b 83       	std	Y+3, r24	; 0x03
    197a:	8b 81       	ldd	r24, Y+3	; 0x03
    197c:	9c 81       	ldd	r25, Y+4	; 0x04
    197e:	01 97       	sbiw	r24, 0x01	; 1
    1980:	f1 f7       	brne	.-4      	; 0x197e <KEY_PAD_VidGitPresedcalc+0x152>
    1982:	9c 83       	std	Y+4, r25	; 0x04
    1984:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1986:	8d 81       	ldd	r24, Y+5	; 0x05
    1988:	9e 81       	ldd	r25, Y+6	; 0x06
    198a:	01 97       	sbiw	r24, 0x01	; 1
    198c:	9e 83       	std	Y+6, r25	; 0x06
    198e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1990:	8d 81       	ldd	r24, Y+5	; 0x05
    1992:	9e 81       	ldd	r25, Y+6	; 0x06
    1994:	00 97       	sbiw	r24, 0x00	; 0
    1996:	69 f7       	brne	.-38     	; 0x1972 <KEY_PAD_VidGitPresedcalc+0x146>
    1998:	14 c0       	rjmp	.+40     	; 0x19c2 <KEY_PAD_VidGitPresedcalc+0x196>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    199a:	6f 81       	ldd	r22, Y+7	; 0x07
    199c:	78 85       	ldd	r23, Y+8	; 0x08
    199e:	89 85       	ldd	r24, Y+9	; 0x09
    19a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    19a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19a6:	dc 01       	movw	r26, r24
    19a8:	cb 01       	movw	r24, r22
    19aa:	9e 83       	std	Y+6, r25	; 0x06
    19ac:	8d 83       	std	Y+5, r24	; 0x05
    19ae:	8d 81       	ldd	r24, Y+5	; 0x05
    19b0:	9e 81       	ldd	r25, Y+6	; 0x06
    19b2:	9a 83       	std	Y+2, r25	; 0x02
    19b4:	89 83       	std	Y+1, r24	; 0x01
    19b6:	89 81       	ldd	r24, Y+1	; 0x01
    19b8:	9a 81       	ldd	r25, Y+2	; 0x02
    19ba:	01 97       	sbiw	r24, 0x01	; 1
    19bc:	f1 f7       	brne	.-4      	; 0x19ba <KEY_PAD_VidGitPresedcalc+0x18e>
    19be:	9a 83       	std	Y+2, r25	; 0x02
    19c0:	89 83       	std	Y+1, r24	; 0x01
											{7,8,9,'*'},
											{'l','.','c','='}};
	for(colum=0;colum<4;colum++)
	{
		DIO_VidSetPinValue(KEY_pad_port,colum,0);
		for(row=4;row<8;row++)
    19c2:	88 89       	ldd	r24, Y+16	; 0x10
    19c4:	8f 5f       	subi	r24, 0xFF	; 255
    19c6:	88 8b       	std	Y+16, r24	; 0x10
    19c8:	88 89       	ldd	r24, Y+16	; 0x10
    19ca:	88 30       	cpi	r24, 0x08	; 8
    19cc:	08 f4       	brcc	.+2      	; 0x19d0 <KEY_PAD_VidGitPresedcalc+0x1a4>
    19ce:	63 cf       	rjmp	.-314    	; 0x1896 <KEY_PAD_VidGitPresedcalc+0x6a>
				{
				}
				_delay_ms(40);
			}
		}
		DIO_VidSetPinValue(KEY_pad_port,colum,1);
    19d0:	81 e0       	ldi	r24, 0x01	; 1
    19d2:	69 89       	ldd	r22, Y+17	; 0x11
    19d4:	41 e0       	ldi	r20, 0x01	; 1
    19d6:	0e 94 a4 07 	call	0xf48	; 0xf48 <DIO_VidSetPinValue>
	u8 keypad_OUT=0;
	u8 KEYPAmap[4][4]={{1,2,3,'+'},
											{4,5,6,'-'},
											{7,8,9,'*'},
											{'l','.','c','='}};
	for(colum=0;colum<4;colum++)
    19da:	89 89       	ldd	r24, Y+17	; 0x11
    19dc:	8f 5f       	subi	r24, 0xFF	; 255
    19de:	89 8b       	std	Y+17, r24	; 0x11
    19e0:	89 89       	ldd	r24, Y+17	; 0x11
    19e2:	84 30       	cpi	r24, 0x04	; 4
    19e4:	08 f4       	brcc	.+2      	; 0x19e8 <KEY_PAD_VidGitPresedcalc+0x1bc>
    19e6:	4f cf       	rjmp	.-354    	; 0x1886 <KEY_PAD_VidGitPresedcalc+0x5a>
				_delay_ms(40);
			}
		}
		DIO_VidSetPinValue(KEY_pad_port,colum,1);
	}
	return keypad_OUT;
    19e8:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    19ea:	a6 96       	adiw	r28, 0x26	; 38
    19ec:	0f b6       	in	r0, 0x3f	; 63
    19ee:	f8 94       	cli
    19f0:	de bf       	out	0x3e, r29	; 62
    19f2:	0f be       	out	0x3f, r0	; 63
    19f4:	cd bf       	out	0x3d, r28	; 61
    19f6:	cf 91       	pop	r28
    19f8:	df 91       	pop	r29
    19fa:	08 95       	ret

000019fc <LCD_Vid4Initialization>:
#include "avr/delay.h"

static u8 InitStepFinishid= 0;

void LCD_Vid4Initialization(void)
{
    19fc:	df 93       	push	r29
    19fe:	cf 93       	push	r28
    1a00:	cd b7       	in	r28, 0x3d	; 61
    1a02:	de b7       	in	r29, 0x3e	; 62
    1a04:	e8 97       	sbiw	r28, 0x38	; 56
    1a06:	0f b6       	in	r0, 0x3f	; 63
    1a08:	f8 94       	cli
    1a0a:	de bf       	out	0x3e, r29	; 62
    1a0c:	0f be       	out	0x3f, r0	; 63
    1a0e:	cd bf       	out	0x3d, r28	; 61
	DIO_VidSetPortDirection(LCD_PORT, 0xff);
    1a10:	83 e0       	ldi	r24, 0x03	; 3
    1a12:	6f ef       	ldi	r22, 0xFF	; 255
    1a14:	0e 94 a4 08 	call	0x1148	; 0x1148 <DIO_VidSetPortDirection>
	DIO_VidSetPinDirection(LCD_INIT,LCD_RS,1);   //RS
    1a18:	80 e0       	ldi	r24, 0x00	; 0
    1a1a:	65 e0       	ldi	r22, 0x05	; 5
    1a1c:	41 e0       	ldi	r20, 0x01	; 1
    1a1e:	0e 94 a4 06 	call	0xd48	; 0xd48 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(LCD_INIT,LCD_RW,1);   //RW
    1a22:	80 e0       	ldi	r24, 0x00	; 0
    1a24:	66 e0       	ldi	r22, 0x06	; 6
    1a26:	41 e0       	ldi	r20, 0x01	; 1
    1a28:	0e 94 a4 06 	call	0xd48	; 0xd48 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(LCD_INIT,LCD_EN,1);   //EN
    1a2c:	80 e0       	ldi	r24, 0x00	; 0
    1a2e:	67 e0       	ldi	r22, 0x07	; 7
    1a30:	41 e0       	ldi	r20, 0x01	; 1
    1a32:	0e 94 a4 06 	call	0xd48	; 0xd48 <DIO_VidSetPinDirection>
    1a36:	80 e0       	ldi	r24, 0x00	; 0
    1a38:	90 e0       	ldi	r25, 0x00	; 0
    1a3a:	a8 e4       	ldi	r26, 0x48	; 72
    1a3c:	b2 e4       	ldi	r27, 0x42	; 66
    1a3e:	8d ab       	std	Y+53, r24	; 0x35
    1a40:	9e ab       	std	Y+54, r25	; 0x36
    1a42:	af ab       	std	Y+55, r26	; 0x37
    1a44:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a46:	6d a9       	ldd	r22, Y+53	; 0x35
    1a48:	7e a9       	ldd	r23, Y+54	; 0x36
    1a4a:	8f a9       	ldd	r24, Y+55	; 0x37
    1a4c:	98 ad       	ldd	r25, Y+56	; 0x38
    1a4e:	20 e0       	ldi	r18, 0x00	; 0
    1a50:	30 e0       	ldi	r19, 0x00	; 0
    1a52:	4a ef       	ldi	r20, 0xFA	; 250
    1a54:	54 e4       	ldi	r21, 0x44	; 68
    1a56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a5a:	dc 01       	movw	r26, r24
    1a5c:	cb 01       	movw	r24, r22
    1a5e:	89 ab       	std	Y+49, r24	; 0x31
    1a60:	9a ab       	std	Y+50, r25	; 0x32
    1a62:	ab ab       	std	Y+51, r26	; 0x33
    1a64:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1a66:	69 a9       	ldd	r22, Y+49	; 0x31
    1a68:	7a a9       	ldd	r23, Y+50	; 0x32
    1a6a:	8b a9       	ldd	r24, Y+51	; 0x33
    1a6c:	9c a9       	ldd	r25, Y+52	; 0x34
    1a6e:	20 e0       	ldi	r18, 0x00	; 0
    1a70:	30 e0       	ldi	r19, 0x00	; 0
    1a72:	40 e8       	ldi	r20, 0x80	; 128
    1a74:	5f e3       	ldi	r21, 0x3F	; 63
    1a76:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a7a:	88 23       	and	r24, r24
    1a7c:	2c f4       	brge	.+10     	; 0x1a88 <LCD_Vid4Initialization+0x8c>
		__ticks = 1;
    1a7e:	81 e0       	ldi	r24, 0x01	; 1
    1a80:	90 e0       	ldi	r25, 0x00	; 0
    1a82:	98 ab       	std	Y+48, r25	; 0x30
    1a84:	8f a7       	std	Y+47, r24	; 0x2f
    1a86:	3f c0       	rjmp	.+126    	; 0x1b06 <LCD_Vid4Initialization+0x10a>
	else if (__tmp > 65535)
    1a88:	69 a9       	ldd	r22, Y+49	; 0x31
    1a8a:	7a a9       	ldd	r23, Y+50	; 0x32
    1a8c:	8b a9       	ldd	r24, Y+51	; 0x33
    1a8e:	9c a9       	ldd	r25, Y+52	; 0x34
    1a90:	20 e0       	ldi	r18, 0x00	; 0
    1a92:	3f ef       	ldi	r19, 0xFF	; 255
    1a94:	4f e7       	ldi	r20, 0x7F	; 127
    1a96:	57 e4       	ldi	r21, 0x47	; 71
    1a98:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a9c:	18 16       	cp	r1, r24
    1a9e:	4c f5       	brge	.+82     	; 0x1af2 <LCD_Vid4Initialization+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1aa0:	6d a9       	ldd	r22, Y+53	; 0x35
    1aa2:	7e a9       	ldd	r23, Y+54	; 0x36
    1aa4:	8f a9       	ldd	r24, Y+55	; 0x37
    1aa6:	98 ad       	ldd	r25, Y+56	; 0x38
    1aa8:	20 e0       	ldi	r18, 0x00	; 0
    1aaa:	30 e0       	ldi	r19, 0x00	; 0
    1aac:	40 e2       	ldi	r20, 0x20	; 32
    1aae:	51 e4       	ldi	r21, 0x41	; 65
    1ab0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ab4:	dc 01       	movw	r26, r24
    1ab6:	cb 01       	movw	r24, r22
    1ab8:	bc 01       	movw	r22, r24
    1aba:	cd 01       	movw	r24, r26
    1abc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ac0:	dc 01       	movw	r26, r24
    1ac2:	cb 01       	movw	r24, r22
    1ac4:	98 ab       	std	Y+48, r25	; 0x30
    1ac6:	8f a7       	std	Y+47, r24	; 0x2f
    1ac8:	0f c0       	rjmp	.+30     	; 0x1ae8 <LCD_Vid4Initialization+0xec>
    1aca:	88 ec       	ldi	r24, 0xC8	; 200
    1acc:	90 e0       	ldi	r25, 0x00	; 0
    1ace:	9e a7       	std	Y+46, r25	; 0x2e
    1ad0:	8d a7       	std	Y+45, r24	; 0x2d
    1ad2:	8d a5       	ldd	r24, Y+45	; 0x2d
    1ad4:	9e a5       	ldd	r25, Y+46	; 0x2e
    1ad6:	01 97       	sbiw	r24, 0x01	; 1
    1ad8:	f1 f7       	brne	.-4      	; 0x1ad6 <LCD_Vid4Initialization+0xda>
    1ada:	9e a7       	std	Y+46, r25	; 0x2e
    1adc:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ade:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ae0:	98 a9       	ldd	r25, Y+48	; 0x30
    1ae2:	01 97       	sbiw	r24, 0x01	; 1
    1ae4:	98 ab       	std	Y+48, r25	; 0x30
    1ae6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ae8:	8f a5       	ldd	r24, Y+47	; 0x2f
    1aea:	98 a9       	ldd	r25, Y+48	; 0x30
    1aec:	00 97       	sbiw	r24, 0x00	; 0
    1aee:	69 f7       	brne	.-38     	; 0x1aca <LCD_Vid4Initialization+0xce>
    1af0:	14 c0       	rjmp	.+40     	; 0x1b1a <LCD_Vid4Initialization+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1af2:	69 a9       	ldd	r22, Y+49	; 0x31
    1af4:	7a a9       	ldd	r23, Y+50	; 0x32
    1af6:	8b a9       	ldd	r24, Y+51	; 0x33
    1af8:	9c a9       	ldd	r25, Y+52	; 0x34
    1afa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1afe:	dc 01       	movw	r26, r24
    1b00:	cb 01       	movw	r24, r22
    1b02:	98 ab       	std	Y+48, r25	; 0x30
    1b04:	8f a7       	std	Y+47, r24	; 0x2f
    1b06:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b08:	98 a9       	ldd	r25, Y+48	; 0x30
    1b0a:	9c a7       	std	Y+44, r25	; 0x2c
    1b0c:	8b a7       	std	Y+43, r24	; 0x2b
    1b0e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b10:	9c a5       	ldd	r25, Y+44	; 0x2c
    1b12:	01 97       	sbiw	r24, 0x01	; 1
    1b14:	f1 f7       	brne	.-4      	; 0x1b12 <LCD_Vid4Initialization+0x116>
    1b16:	9c a7       	std	Y+44, r25	; 0x2c
    1b18:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(50); // wait for LCD to initialize

	LCD_VidWrite4Cmd(0x20);
    1b1a:	80 e2       	ldi	r24, 0x20	; 32
    1b1c:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <LCD_VidWrite4Cmd>
	LCD_VidWrite4Cmd(0x20);
    1b20:	80 e2       	ldi	r24, 0x20	; 32
    1b22:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <LCD_VidWrite4Cmd>
	LCD_VidWrite4Cmd(0x80);
    1b26:	80 e8       	ldi	r24, 0x80	; 128
    1b28:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <LCD_VidWrite4Cmd>
    1b2c:	80 e0       	ldi	r24, 0x00	; 0
    1b2e:	90 e0       	ldi	r25, 0x00	; 0
    1b30:	a0 e0       	ldi	r26, 0x00	; 0
    1b32:	b0 e4       	ldi	r27, 0x40	; 64
    1b34:	8f a3       	std	Y+39, r24	; 0x27
    1b36:	98 a7       	std	Y+40, r25	; 0x28
    1b38:	a9 a7       	std	Y+41, r26	; 0x29
    1b3a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b3c:	6f a1       	ldd	r22, Y+39	; 0x27
    1b3e:	78 a5       	ldd	r23, Y+40	; 0x28
    1b40:	89 a5       	ldd	r24, Y+41	; 0x29
    1b42:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b44:	20 e0       	ldi	r18, 0x00	; 0
    1b46:	30 e0       	ldi	r19, 0x00	; 0
    1b48:	4a ef       	ldi	r20, 0xFA	; 250
    1b4a:	54 e4       	ldi	r21, 0x44	; 68
    1b4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b50:	dc 01       	movw	r26, r24
    1b52:	cb 01       	movw	r24, r22
    1b54:	8b a3       	std	Y+35, r24	; 0x23
    1b56:	9c a3       	std	Y+36, r25	; 0x24
    1b58:	ad a3       	std	Y+37, r26	; 0x25
    1b5a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1b5c:	6b a1       	ldd	r22, Y+35	; 0x23
    1b5e:	7c a1       	ldd	r23, Y+36	; 0x24
    1b60:	8d a1       	ldd	r24, Y+37	; 0x25
    1b62:	9e a1       	ldd	r25, Y+38	; 0x26
    1b64:	20 e0       	ldi	r18, 0x00	; 0
    1b66:	30 e0       	ldi	r19, 0x00	; 0
    1b68:	40 e8       	ldi	r20, 0x80	; 128
    1b6a:	5f e3       	ldi	r21, 0x3F	; 63
    1b6c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b70:	88 23       	and	r24, r24
    1b72:	2c f4       	brge	.+10     	; 0x1b7e <LCD_Vid4Initialization+0x182>
		__ticks = 1;
    1b74:	81 e0       	ldi	r24, 0x01	; 1
    1b76:	90 e0       	ldi	r25, 0x00	; 0
    1b78:	9a a3       	std	Y+34, r25	; 0x22
    1b7a:	89 a3       	std	Y+33, r24	; 0x21
    1b7c:	3f c0       	rjmp	.+126    	; 0x1bfc <LCD_Vid4Initialization+0x200>
	else if (__tmp > 65535)
    1b7e:	6b a1       	ldd	r22, Y+35	; 0x23
    1b80:	7c a1       	ldd	r23, Y+36	; 0x24
    1b82:	8d a1       	ldd	r24, Y+37	; 0x25
    1b84:	9e a1       	ldd	r25, Y+38	; 0x26
    1b86:	20 e0       	ldi	r18, 0x00	; 0
    1b88:	3f ef       	ldi	r19, 0xFF	; 255
    1b8a:	4f e7       	ldi	r20, 0x7F	; 127
    1b8c:	57 e4       	ldi	r21, 0x47	; 71
    1b8e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b92:	18 16       	cp	r1, r24
    1b94:	4c f5       	brge	.+82     	; 0x1be8 <LCD_Vid4Initialization+0x1ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b96:	6f a1       	ldd	r22, Y+39	; 0x27
    1b98:	78 a5       	ldd	r23, Y+40	; 0x28
    1b9a:	89 a5       	ldd	r24, Y+41	; 0x29
    1b9c:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b9e:	20 e0       	ldi	r18, 0x00	; 0
    1ba0:	30 e0       	ldi	r19, 0x00	; 0
    1ba2:	40 e2       	ldi	r20, 0x20	; 32
    1ba4:	51 e4       	ldi	r21, 0x41	; 65
    1ba6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1baa:	dc 01       	movw	r26, r24
    1bac:	cb 01       	movw	r24, r22
    1bae:	bc 01       	movw	r22, r24
    1bb0:	cd 01       	movw	r24, r26
    1bb2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bb6:	dc 01       	movw	r26, r24
    1bb8:	cb 01       	movw	r24, r22
    1bba:	9a a3       	std	Y+34, r25	; 0x22
    1bbc:	89 a3       	std	Y+33, r24	; 0x21
    1bbe:	0f c0       	rjmp	.+30     	; 0x1bde <LCD_Vid4Initialization+0x1e2>
    1bc0:	88 ec       	ldi	r24, 0xC8	; 200
    1bc2:	90 e0       	ldi	r25, 0x00	; 0
    1bc4:	98 a3       	std	Y+32, r25	; 0x20
    1bc6:	8f 8f       	std	Y+31, r24	; 0x1f
    1bc8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1bca:	98 a1       	ldd	r25, Y+32	; 0x20
    1bcc:	01 97       	sbiw	r24, 0x01	; 1
    1bce:	f1 f7       	brne	.-4      	; 0x1bcc <LCD_Vid4Initialization+0x1d0>
    1bd0:	98 a3       	std	Y+32, r25	; 0x20
    1bd2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bd4:	89 a1       	ldd	r24, Y+33	; 0x21
    1bd6:	9a a1       	ldd	r25, Y+34	; 0x22
    1bd8:	01 97       	sbiw	r24, 0x01	; 1
    1bda:	9a a3       	std	Y+34, r25	; 0x22
    1bdc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bde:	89 a1       	ldd	r24, Y+33	; 0x21
    1be0:	9a a1       	ldd	r25, Y+34	; 0x22
    1be2:	00 97       	sbiw	r24, 0x00	; 0
    1be4:	69 f7       	brne	.-38     	; 0x1bc0 <LCD_Vid4Initialization+0x1c4>
    1be6:	14 c0       	rjmp	.+40     	; 0x1c10 <LCD_Vid4Initialization+0x214>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1be8:	6b a1       	ldd	r22, Y+35	; 0x23
    1bea:	7c a1       	ldd	r23, Y+36	; 0x24
    1bec:	8d a1       	ldd	r24, Y+37	; 0x25
    1bee:	9e a1       	ldd	r25, Y+38	; 0x26
    1bf0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bf4:	dc 01       	movw	r26, r24
    1bf6:	cb 01       	movw	r24, r22
    1bf8:	9a a3       	std	Y+34, r25	; 0x22
    1bfa:	89 a3       	std	Y+33, r24	; 0x21
    1bfc:	89 a1       	ldd	r24, Y+33	; 0x21
    1bfe:	9a a1       	ldd	r25, Y+34	; 0x22
    1c00:	9e 8f       	std	Y+30, r25	; 0x1e
    1c02:	8d 8f       	std	Y+29, r24	; 0x1d
    1c04:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c06:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1c08:	01 97       	sbiw	r24, 0x01	; 1
    1c0a:	f1 f7       	brne	.-4      	; 0x1c08 <LCD_Vid4Initialization+0x20c>
    1c0c:	9e 8f       	std	Y+30, r25	; 0x1e
    1c0e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);
	LCD_VidWrite4Cmd(0x00);
    1c10:	80 e0       	ldi	r24, 0x00	; 0
    1c12:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <LCD_VidWrite4Cmd>
	LCD_VidWrite4Cmd(0xC0);
    1c16:	80 ec       	ldi	r24, 0xC0	; 192
    1c18:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <LCD_VidWrite4Cmd>
    1c1c:	80 e0       	ldi	r24, 0x00	; 0
    1c1e:	90 e0       	ldi	r25, 0x00	; 0
    1c20:	a0 e8       	ldi	r26, 0x80	; 128
    1c22:	bf e3       	ldi	r27, 0x3F	; 63
    1c24:	89 8f       	std	Y+25, r24	; 0x19
    1c26:	9a 8f       	std	Y+26, r25	; 0x1a
    1c28:	ab 8f       	std	Y+27, r26	; 0x1b
    1c2a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c2c:	69 8d       	ldd	r22, Y+25	; 0x19
    1c2e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c30:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c32:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c34:	20 e0       	ldi	r18, 0x00	; 0
    1c36:	30 e0       	ldi	r19, 0x00	; 0
    1c38:	4a ef       	ldi	r20, 0xFA	; 250
    1c3a:	54 e4       	ldi	r21, 0x44	; 68
    1c3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c40:	dc 01       	movw	r26, r24
    1c42:	cb 01       	movw	r24, r22
    1c44:	8d 8b       	std	Y+21, r24	; 0x15
    1c46:	9e 8b       	std	Y+22, r25	; 0x16
    1c48:	af 8b       	std	Y+23, r26	; 0x17
    1c4a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1c4c:	6d 89       	ldd	r22, Y+21	; 0x15
    1c4e:	7e 89       	ldd	r23, Y+22	; 0x16
    1c50:	8f 89       	ldd	r24, Y+23	; 0x17
    1c52:	98 8d       	ldd	r25, Y+24	; 0x18
    1c54:	20 e0       	ldi	r18, 0x00	; 0
    1c56:	30 e0       	ldi	r19, 0x00	; 0
    1c58:	40 e8       	ldi	r20, 0x80	; 128
    1c5a:	5f e3       	ldi	r21, 0x3F	; 63
    1c5c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c60:	88 23       	and	r24, r24
    1c62:	2c f4       	brge	.+10     	; 0x1c6e <LCD_Vid4Initialization+0x272>
		__ticks = 1;
    1c64:	81 e0       	ldi	r24, 0x01	; 1
    1c66:	90 e0       	ldi	r25, 0x00	; 0
    1c68:	9c 8b       	std	Y+20, r25	; 0x14
    1c6a:	8b 8b       	std	Y+19, r24	; 0x13
    1c6c:	3f c0       	rjmp	.+126    	; 0x1cec <LCD_Vid4Initialization+0x2f0>
	else if (__tmp > 65535)
    1c6e:	6d 89       	ldd	r22, Y+21	; 0x15
    1c70:	7e 89       	ldd	r23, Y+22	; 0x16
    1c72:	8f 89       	ldd	r24, Y+23	; 0x17
    1c74:	98 8d       	ldd	r25, Y+24	; 0x18
    1c76:	20 e0       	ldi	r18, 0x00	; 0
    1c78:	3f ef       	ldi	r19, 0xFF	; 255
    1c7a:	4f e7       	ldi	r20, 0x7F	; 127
    1c7c:	57 e4       	ldi	r21, 0x47	; 71
    1c7e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c82:	18 16       	cp	r1, r24
    1c84:	4c f5       	brge	.+82     	; 0x1cd8 <LCD_Vid4Initialization+0x2dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c86:	69 8d       	ldd	r22, Y+25	; 0x19
    1c88:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c8a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c8c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c8e:	20 e0       	ldi	r18, 0x00	; 0
    1c90:	30 e0       	ldi	r19, 0x00	; 0
    1c92:	40 e2       	ldi	r20, 0x20	; 32
    1c94:	51 e4       	ldi	r21, 0x41	; 65
    1c96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c9a:	dc 01       	movw	r26, r24
    1c9c:	cb 01       	movw	r24, r22
    1c9e:	bc 01       	movw	r22, r24
    1ca0:	cd 01       	movw	r24, r26
    1ca2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ca6:	dc 01       	movw	r26, r24
    1ca8:	cb 01       	movw	r24, r22
    1caa:	9c 8b       	std	Y+20, r25	; 0x14
    1cac:	8b 8b       	std	Y+19, r24	; 0x13
    1cae:	0f c0       	rjmp	.+30     	; 0x1cce <LCD_Vid4Initialization+0x2d2>
    1cb0:	88 ec       	ldi	r24, 0xC8	; 200
    1cb2:	90 e0       	ldi	r25, 0x00	; 0
    1cb4:	9a 8b       	std	Y+18, r25	; 0x12
    1cb6:	89 8b       	std	Y+17, r24	; 0x11
    1cb8:	89 89       	ldd	r24, Y+17	; 0x11
    1cba:	9a 89       	ldd	r25, Y+18	; 0x12
    1cbc:	01 97       	sbiw	r24, 0x01	; 1
    1cbe:	f1 f7       	brne	.-4      	; 0x1cbc <LCD_Vid4Initialization+0x2c0>
    1cc0:	9a 8b       	std	Y+18, r25	; 0x12
    1cc2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cc4:	8b 89       	ldd	r24, Y+19	; 0x13
    1cc6:	9c 89       	ldd	r25, Y+20	; 0x14
    1cc8:	01 97       	sbiw	r24, 0x01	; 1
    1cca:	9c 8b       	std	Y+20, r25	; 0x14
    1ccc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cce:	8b 89       	ldd	r24, Y+19	; 0x13
    1cd0:	9c 89       	ldd	r25, Y+20	; 0x14
    1cd2:	00 97       	sbiw	r24, 0x00	; 0
    1cd4:	69 f7       	brne	.-38     	; 0x1cb0 <LCD_Vid4Initialization+0x2b4>
    1cd6:	14 c0       	rjmp	.+40     	; 0x1d00 <LCD_Vid4Initialization+0x304>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cd8:	6d 89       	ldd	r22, Y+21	; 0x15
    1cda:	7e 89       	ldd	r23, Y+22	; 0x16
    1cdc:	8f 89       	ldd	r24, Y+23	; 0x17
    1cde:	98 8d       	ldd	r25, Y+24	; 0x18
    1ce0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ce4:	dc 01       	movw	r26, r24
    1ce6:	cb 01       	movw	r24, r22
    1ce8:	9c 8b       	std	Y+20, r25	; 0x14
    1cea:	8b 8b       	std	Y+19, r24	; 0x13
    1cec:	8b 89       	ldd	r24, Y+19	; 0x13
    1cee:	9c 89       	ldd	r25, Y+20	; 0x14
    1cf0:	98 8b       	std	Y+16, r25	; 0x10
    1cf2:	8f 87       	std	Y+15, r24	; 0x0f
    1cf4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cf6:	98 89       	ldd	r25, Y+16	; 0x10
    1cf8:	01 97       	sbiw	r24, 0x01	; 1
    1cfa:	f1 f7       	brne	.-4      	; 0x1cf8 <LCD_Vid4Initialization+0x2fc>
    1cfc:	98 8b       	std	Y+16, r25	; 0x10
    1cfe:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_VidWrite4Cmd(0x00);
    1d00:	80 e0       	ldi	r24, 0x00	; 0
    1d02:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <LCD_VidWrite4Cmd>
	LCD_VidWrite4Cmd(0x10);
    1d06:	80 e1       	ldi	r24, 0x10	; 16
    1d08:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <LCD_VidWrite4Cmd>
    1d0c:	80 e0       	ldi	r24, 0x00	; 0
    1d0e:	90 e0       	ldi	r25, 0x00	; 0
    1d10:	a0 e0       	ldi	r26, 0x00	; 0
    1d12:	b0 e4       	ldi	r27, 0x40	; 64
    1d14:	8b 87       	std	Y+11, r24	; 0x0b
    1d16:	9c 87       	std	Y+12, r25	; 0x0c
    1d18:	ad 87       	std	Y+13, r26	; 0x0d
    1d1a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d1c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d1e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d20:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d22:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d24:	20 e0       	ldi	r18, 0x00	; 0
    1d26:	30 e0       	ldi	r19, 0x00	; 0
    1d28:	4a ef       	ldi	r20, 0xFA	; 250
    1d2a:	54 e4       	ldi	r21, 0x44	; 68
    1d2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d30:	dc 01       	movw	r26, r24
    1d32:	cb 01       	movw	r24, r22
    1d34:	8f 83       	std	Y+7, r24	; 0x07
    1d36:	98 87       	std	Y+8, r25	; 0x08
    1d38:	a9 87       	std	Y+9, r26	; 0x09
    1d3a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d3c:	6f 81       	ldd	r22, Y+7	; 0x07
    1d3e:	78 85       	ldd	r23, Y+8	; 0x08
    1d40:	89 85       	ldd	r24, Y+9	; 0x09
    1d42:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d44:	20 e0       	ldi	r18, 0x00	; 0
    1d46:	30 e0       	ldi	r19, 0x00	; 0
    1d48:	40 e8       	ldi	r20, 0x80	; 128
    1d4a:	5f e3       	ldi	r21, 0x3F	; 63
    1d4c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d50:	88 23       	and	r24, r24
    1d52:	2c f4       	brge	.+10     	; 0x1d5e <LCD_Vid4Initialization+0x362>
		__ticks = 1;
    1d54:	81 e0       	ldi	r24, 0x01	; 1
    1d56:	90 e0       	ldi	r25, 0x00	; 0
    1d58:	9e 83       	std	Y+6, r25	; 0x06
    1d5a:	8d 83       	std	Y+5, r24	; 0x05
    1d5c:	3f c0       	rjmp	.+126    	; 0x1ddc <LCD_Vid4Initialization+0x3e0>
	else if (__tmp > 65535)
    1d5e:	6f 81       	ldd	r22, Y+7	; 0x07
    1d60:	78 85       	ldd	r23, Y+8	; 0x08
    1d62:	89 85       	ldd	r24, Y+9	; 0x09
    1d64:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d66:	20 e0       	ldi	r18, 0x00	; 0
    1d68:	3f ef       	ldi	r19, 0xFF	; 255
    1d6a:	4f e7       	ldi	r20, 0x7F	; 127
    1d6c:	57 e4       	ldi	r21, 0x47	; 71
    1d6e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d72:	18 16       	cp	r1, r24
    1d74:	4c f5       	brge	.+82     	; 0x1dc8 <LCD_Vid4Initialization+0x3cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d76:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d78:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d7a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d7c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d7e:	20 e0       	ldi	r18, 0x00	; 0
    1d80:	30 e0       	ldi	r19, 0x00	; 0
    1d82:	40 e2       	ldi	r20, 0x20	; 32
    1d84:	51 e4       	ldi	r21, 0x41	; 65
    1d86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d8a:	dc 01       	movw	r26, r24
    1d8c:	cb 01       	movw	r24, r22
    1d8e:	bc 01       	movw	r22, r24
    1d90:	cd 01       	movw	r24, r26
    1d92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d96:	dc 01       	movw	r26, r24
    1d98:	cb 01       	movw	r24, r22
    1d9a:	9e 83       	std	Y+6, r25	; 0x06
    1d9c:	8d 83       	std	Y+5, r24	; 0x05
    1d9e:	0f c0       	rjmp	.+30     	; 0x1dbe <LCD_Vid4Initialization+0x3c2>
    1da0:	88 ec       	ldi	r24, 0xC8	; 200
    1da2:	90 e0       	ldi	r25, 0x00	; 0
    1da4:	9c 83       	std	Y+4, r25	; 0x04
    1da6:	8b 83       	std	Y+3, r24	; 0x03
    1da8:	8b 81       	ldd	r24, Y+3	; 0x03
    1daa:	9c 81       	ldd	r25, Y+4	; 0x04
    1dac:	01 97       	sbiw	r24, 0x01	; 1
    1dae:	f1 f7       	brne	.-4      	; 0x1dac <LCD_Vid4Initialization+0x3b0>
    1db0:	9c 83       	std	Y+4, r25	; 0x04
    1db2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1db4:	8d 81       	ldd	r24, Y+5	; 0x05
    1db6:	9e 81       	ldd	r25, Y+6	; 0x06
    1db8:	01 97       	sbiw	r24, 0x01	; 1
    1dba:	9e 83       	std	Y+6, r25	; 0x06
    1dbc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dbe:	8d 81       	ldd	r24, Y+5	; 0x05
    1dc0:	9e 81       	ldd	r25, Y+6	; 0x06
    1dc2:	00 97       	sbiw	r24, 0x00	; 0
    1dc4:	69 f7       	brne	.-38     	; 0x1da0 <LCD_Vid4Initialization+0x3a4>
    1dc6:	14 c0       	rjmp	.+40     	; 0x1df0 <LCD_Vid4Initialization+0x3f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dc8:	6f 81       	ldd	r22, Y+7	; 0x07
    1dca:	78 85       	ldd	r23, Y+8	; 0x08
    1dcc:	89 85       	ldd	r24, Y+9	; 0x09
    1dce:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dd4:	dc 01       	movw	r26, r24
    1dd6:	cb 01       	movw	r24, r22
    1dd8:	9e 83       	std	Y+6, r25	; 0x06
    1dda:	8d 83       	std	Y+5, r24	; 0x05
    1ddc:	8d 81       	ldd	r24, Y+5	; 0x05
    1dde:	9e 81       	ldd	r25, Y+6	; 0x06
    1de0:	9a 83       	std	Y+2, r25	; 0x02
    1de2:	89 83       	std	Y+1, r24	; 0x01
    1de4:	89 81       	ldd	r24, Y+1	; 0x01
    1de6:	9a 81       	ldd	r25, Y+2	; 0x02
    1de8:	01 97       	sbiw	r24, 0x01	; 1
    1dea:	f1 f7       	brne	.-4      	; 0x1de8 <LCD_Vid4Initialization+0x3ec>
    1dec:	9a 83       	std	Y+2, r25	; 0x02
    1dee:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	InitStepFinishid=1;
    1df0:	81 e0       	ldi	r24, 0x01	; 1
    1df2:	80 93 4a 01 	sts	0x014A, r24
}
    1df6:	e8 96       	adiw	r28, 0x38	; 56
    1df8:	0f b6       	in	r0, 0x3f	; 63
    1dfa:	f8 94       	cli
    1dfc:	de bf       	out	0x3e, r29	; 62
    1dfe:	0f be       	out	0x3f, r0	; 63
    1e00:	cd bf       	out	0x3d, r28	; 61
    1e02:	cf 91       	pop	r28
    1e04:	df 91       	pop	r29
    1e06:	08 95       	ret

00001e08 <LCD_VidWrite4Cmd>:


void LCD_VidWrite4Cmd(u8 LOC_Cmd)
{
    1e08:	0f 93       	push	r16
    1e0a:	1f 93       	push	r17
    1e0c:	df 93       	push	r29
    1e0e:	cf 93       	push	r28
    1e10:	cd b7       	in	r28, 0x3d	; 61
    1e12:	de b7       	in	r29, 0x3e	; 62
    1e14:	c7 54       	subi	r28, 0x47	; 71
    1e16:	d0 40       	sbci	r29, 0x00	; 0
    1e18:	0f b6       	in	r0, 0x3f	; 63
    1e1a:	f8 94       	cli
    1e1c:	de bf       	out	0x3e, r29	; 62
    1e1e:	0f be       	out	0x3f, r0	; 63
    1e20:	cd bf       	out	0x3d, r28	; 61
    1e22:	fe 01       	movw	r30, r28
    1e24:	e9 5b       	subi	r30, 0xB9	; 185
    1e26:	ff 4f       	sbci	r31, 0xFF	; 255
    1e28:	80 83       	st	Z, r24
	DIO_VidSetPinValue(LCD_INIT,LCD_RS,0);
    1e2a:	80 e0       	ldi	r24, 0x00	; 0
    1e2c:	65 e0       	ldi	r22, 0x05	; 5
    1e2e:	40 e0       	ldi	r20, 0x00	; 0
    1e30:	0e 94 a4 07 	call	0xf48	; 0xf48 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(LCD_INIT,LCD_RW,0);
    1e34:	80 e0       	ldi	r24, 0x00	; 0
    1e36:	66 e0       	ldi	r22, 0x06	; 6
    1e38:	40 e0       	ldi	r20, 0x00	; 0
    1e3a:	0e 94 a4 07 	call	0xf48	; 0xf48 <DIO_VidSetPinValue>

	DIO_VidSetPinValue(LCD_PORT,PIN4,GET_BIT(LOC_Cmd,4));
    1e3e:	fe 01       	movw	r30, r28
    1e40:	e9 5b       	subi	r30, 0xB9	; 185
    1e42:	ff 4f       	sbci	r31, 0xFF	; 255
    1e44:	80 81       	ld	r24, Z
    1e46:	82 95       	swap	r24
    1e48:	8f 70       	andi	r24, 0x0F	; 15
    1e4a:	98 2f       	mov	r25, r24
    1e4c:	91 70       	andi	r25, 0x01	; 1
    1e4e:	83 e0       	ldi	r24, 0x03	; 3
    1e50:	64 e0       	ldi	r22, 0x04	; 4
    1e52:	49 2f       	mov	r20, r25
    1e54:	0e 94 a4 07 	call	0xf48	; 0xf48 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(LCD_PORT,PIN5,GET_BIT(LOC_Cmd,5));
    1e58:	fe 01       	movw	r30, r28
    1e5a:	e9 5b       	subi	r30, 0xB9	; 185
    1e5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e5e:	80 81       	ld	r24, Z
    1e60:	82 95       	swap	r24
    1e62:	86 95       	lsr	r24
    1e64:	87 70       	andi	r24, 0x07	; 7
    1e66:	98 2f       	mov	r25, r24
    1e68:	91 70       	andi	r25, 0x01	; 1
    1e6a:	83 e0       	ldi	r24, 0x03	; 3
    1e6c:	65 e0       	ldi	r22, 0x05	; 5
    1e6e:	49 2f       	mov	r20, r25
    1e70:	0e 94 a4 07 	call	0xf48	; 0xf48 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(LCD_PORT,PIN6,GET_BIT(LOC_Cmd,6));
    1e74:	fe 01       	movw	r30, r28
    1e76:	e9 5b       	subi	r30, 0xB9	; 185
    1e78:	ff 4f       	sbci	r31, 0xFF	; 255
    1e7a:	80 81       	ld	r24, Z
    1e7c:	82 95       	swap	r24
    1e7e:	86 95       	lsr	r24
    1e80:	86 95       	lsr	r24
    1e82:	83 70       	andi	r24, 0x03	; 3
    1e84:	98 2f       	mov	r25, r24
    1e86:	91 70       	andi	r25, 0x01	; 1
    1e88:	83 e0       	ldi	r24, 0x03	; 3
    1e8a:	66 e0       	ldi	r22, 0x06	; 6
    1e8c:	49 2f       	mov	r20, r25
    1e8e:	0e 94 a4 07 	call	0xf48	; 0xf48 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(LCD_PORT,PIN7,GET_BIT(LOC_Cmd,7));
    1e92:	fe 01       	movw	r30, r28
    1e94:	e9 5b       	subi	r30, 0xB9	; 185
    1e96:	ff 4f       	sbci	r31, 0xFF	; 255
    1e98:	80 81       	ld	r24, Z
    1e9a:	98 2f       	mov	r25, r24
    1e9c:	99 1f       	adc	r25, r25
    1e9e:	99 27       	eor	r25, r25
    1ea0:	99 1f       	adc	r25, r25
    1ea2:	83 e0       	ldi	r24, 0x03	; 3
    1ea4:	67 e0       	ldi	r22, 0x07	; 7
    1ea6:	49 2f       	mov	r20, r25
    1ea8:	0e 94 a4 07 	call	0xf48	; 0xf48 <DIO_VidSetPinValue>

	DIO_VidSetPinValue(LCD_INIT,LCD_EN,1);
    1eac:	80 e0       	ldi	r24, 0x00	; 0
    1eae:	67 e0       	ldi	r22, 0x07	; 7
    1eb0:	41 e0       	ldi	r20, 0x01	; 1
    1eb2:	0e 94 a4 07 	call	0xf48	; 0xf48 <DIO_VidSetPinValue>
    1eb6:	fe 01       	movw	r30, r28
    1eb8:	ed 5b       	subi	r30, 0xBD	; 189
    1eba:	ff 4f       	sbci	r31, 0xFF	; 255
    1ebc:	80 e0       	ldi	r24, 0x00	; 0
    1ebe:	90 e0       	ldi	r25, 0x00	; 0
    1ec0:	a0 e8       	ldi	r26, 0x80	; 128
    1ec2:	bf e3       	ldi	r27, 0x3F	; 63
    1ec4:	80 83       	st	Z, r24
    1ec6:	91 83       	std	Z+1, r25	; 0x01
    1ec8:	a2 83       	std	Z+2, r26	; 0x02
    1eca:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ecc:	8e 01       	movw	r16, r28
    1ece:	01 5c       	subi	r16, 0xC1	; 193
    1ed0:	1f 4f       	sbci	r17, 0xFF	; 255
    1ed2:	fe 01       	movw	r30, r28
    1ed4:	ed 5b       	subi	r30, 0xBD	; 189
    1ed6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed8:	60 81       	ld	r22, Z
    1eda:	71 81       	ldd	r23, Z+1	; 0x01
    1edc:	82 81       	ldd	r24, Z+2	; 0x02
    1ede:	93 81       	ldd	r25, Z+3	; 0x03
    1ee0:	20 e0       	ldi	r18, 0x00	; 0
    1ee2:	30 e0       	ldi	r19, 0x00	; 0
    1ee4:	4a ef       	ldi	r20, 0xFA	; 250
    1ee6:	54 e4       	ldi	r21, 0x44	; 68
    1ee8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eec:	dc 01       	movw	r26, r24
    1eee:	cb 01       	movw	r24, r22
    1ef0:	f8 01       	movw	r30, r16
    1ef2:	80 83       	st	Z, r24
    1ef4:	91 83       	std	Z+1, r25	; 0x01
    1ef6:	a2 83       	std	Z+2, r26	; 0x02
    1ef8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1efa:	fe 01       	movw	r30, r28
    1efc:	ff 96       	adiw	r30, 0x3f	; 63
    1efe:	60 81       	ld	r22, Z
    1f00:	71 81       	ldd	r23, Z+1	; 0x01
    1f02:	82 81       	ldd	r24, Z+2	; 0x02
    1f04:	93 81       	ldd	r25, Z+3	; 0x03
    1f06:	20 e0       	ldi	r18, 0x00	; 0
    1f08:	30 e0       	ldi	r19, 0x00	; 0
    1f0a:	40 e8       	ldi	r20, 0x80	; 128
    1f0c:	5f e3       	ldi	r21, 0x3F	; 63
    1f0e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f12:	88 23       	and	r24, r24
    1f14:	2c f4       	brge	.+10     	; 0x1f20 <LCD_VidWrite4Cmd+0x118>
		__ticks = 1;
    1f16:	81 e0       	ldi	r24, 0x01	; 1
    1f18:	90 e0       	ldi	r25, 0x00	; 0
    1f1a:	9e af       	std	Y+62, r25	; 0x3e
    1f1c:	8d af       	std	Y+61, r24	; 0x3d
    1f1e:	46 c0       	rjmp	.+140    	; 0x1fac <LCD_VidWrite4Cmd+0x1a4>
	else if (__tmp > 65535)
    1f20:	fe 01       	movw	r30, r28
    1f22:	ff 96       	adiw	r30, 0x3f	; 63
    1f24:	60 81       	ld	r22, Z
    1f26:	71 81       	ldd	r23, Z+1	; 0x01
    1f28:	82 81       	ldd	r24, Z+2	; 0x02
    1f2a:	93 81       	ldd	r25, Z+3	; 0x03
    1f2c:	20 e0       	ldi	r18, 0x00	; 0
    1f2e:	3f ef       	ldi	r19, 0xFF	; 255
    1f30:	4f e7       	ldi	r20, 0x7F	; 127
    1f32:	57 e4       	ldi	r21, 0x47	; 71
    1f34:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f38:	18 16       	cp	r1, r24
    1f3a:	64 f5       	brge	.+88     	; 0x1f94 <LCD_VidWrite4Cmd+0x18c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f3c:	fe 01       	movw	r30, r28
    1f3e:	ed 5b       	subi	r30, 0xBD	; 189
    1f40:	ff 4f       	sbci	r31, 0xFF	; 255
    1f42:	60 81       	ld	r22, Z
    1f44:	71 81       	ldd	r23, Z+1	; 0x01
    1f46:	82 81       	ldd	r24, Z+2	; 0x02
    1f48:	93 81       	ldd	r25, Z+3	; 0x03
    1f4a:	20 e0       	ldi	r18, 0x00	; 0
    1f4c:	30 e0       	ldi	r19, 0x00	; 0
    1f4e:	40 e2       	ldi	r20, 0x20	; 32
    1f50:	51 e4       	ldi	r21, 0x41	; 65
    1f52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f56:	dc 01       	movw	r26, r24
    1f58:	cb 01       	movw	r24, r22
    1f5a:	bc 01       	movw	r22, r24
    1f5c:	cd 01       	movw	r24, r26
    1f5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f62:	dc 01       	movw	r26, r24
    1f64:	cb 01       	movw	r24, r22
    1f66:	9e af       	std	Y+62, r25	; 0x3e
    1f68:	8d af       	std	Y+61, r24	; 0x3d
    1f6a:	0f c0       	rjmp	.+30     	; 0x1f8a <LCD_VidWrite4Cmd+0x182>
    1f6c:	88 ec       	ldi	r24, 0xC8	; 200
    1f6e:	90 e0       	ldi	r25, 0x00	; 0
    1f70:	9c af       	std	Y+60, r25	; 0x3c
    1f72:	8b af       	std	Y+59, r24	; 0x3b
    1f74:	8b ad       	ldd	r24, Y+59	; 0x3b
    1f76:	9c ad       	ldd	r25, Y+60	; 0x3c
    1f78:	01 97       	sbiw	r24, 0x01	; 1
    1f7a:	f1 f7       	brne	.-4      	; 0x1f78 <LCD_VidWrite4Cmd+0x170>
    1f7c:	9c af       	std	Y+60, r25	; 0x3c
    1f7e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f80:	8d ad       	ldd	r24, Y+61	; 0x3d
    1f82:	9e ad       	ldd	r25, Y+62	; 0x3e
    1f84:	01 97       	sbiw	r24, 0x01	; 1
    1f86:	9e af       	std	Y+62, r25	; 0x3e
    1f88:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f8a:	8d ad       	ldd	r24, Y+61	; 0x3d
    1f8c:	9e ad       	ldd	r25, Y+62	; 0x3e
    1f8e:	00 97       	sbiw	r24, 0x00	; 0
    1f90:	69 f7       	brne	.-38     	; 0x1f6c <LCD_VidWrite4Cmd+0x164>
    1f92:	16 c0       	rjmp	.+44     	; 0x1fc0 <LCD_VidWrite4Cmd+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f94:	fe 01       	movw	r30, r28
    1f96:	ff 96       	adiw	r30, 0x3f	; 63
    1f98:	60 81       	ld	r22, Z
    1f9a:	71 81       	ldd	r23, Z+1	; 0x01
    1f9c:	82 81       	ldd	r24, Z+2	; 0x02
    1f9e:	93 81       	ldd	r25, Z+3	; 0x03
    1fa0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fa4:	dc 01       	movw	r26, r24
    1fa6:	cb 01       	movw	r24, r22
    1fa8:	9e af       	std	Y+62, r25	; 0x3e
    1faa:	8d af       	std	Y+61, r24	; 0x3d
    1fac:	8d ad       	ldd	r24, Y+61	; 0x3d
    1fae:	9e ad       	ldd	r25, Y+62	; 0x3e
    1fb0:	9a af       	std	Y+58, r25	; 0x3a
    1fb2:	89 af       	std	Y+57, r24	; 0x39
    1fb4:	89 ad       	ldd	r24, Y+57	; 0x39
    1fb6:	9a ad       	ldd	r25, Y+58	; 0x3a
    1fb8:	01 97       	sbiw	r24, 0x01	; 1
    1fba:	f1 f7       	brne	.-4      	; 0x1fb8 <LCD_VidWrite4Cmd+0x1b0>
    1fbc:	9a af       	std	Y+58, r25	; 0x3a
    1fbe:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);
	DIO_VidSetPinValue(LCD_INIT,LCD_EN,0);
    1fc0:	80 e0       	ldi	r24, 0x00	; 0
    1fc2:	67 e0       	ldi	r22, 0x07	; 7
    1fc4:	40 e0       	ldi	r20, 0x00	; 0
    1fc6:	0e 94 a4 07 	call	0xf48	; 0xf48 <DIO_VidSetPinValue>
    1fca:	80 e0       	ldi	r24, 0x00	; 0
    1fcc:	90 e0       	ldi	r25, 0x00	; 0
    1fce:	a0 e8       	ldi	r26, 0x80	; 128
    1fd0:	bf e3       	ldi	r27, 0x3F	; 63
    1fd2:	8d ab       	std	Y+53, r24	; 0x35
    1fd4:	9e ab       	std	Y+54, r25	; 0x36
    1fd6:	af ab       	std	Y+55, r26	; 0x37
    1fd8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fda:	6d a9       	ldd	r22, Y+53	; 0x35
    1fdc:	7e a9       	ldd	r23, Y+54	; 0x36
    1fde:	8f a9       	ldd	r24, Y+55	; 0x37
    1fe0:	98 ad       	ldd	r25, Y+56	; 0x38
    1fe2:	20 e0       	ldi	r18, 0x00	; 0
    1fe4:	30 e0       	ldi	r19, 0x00	; 0
    1fe6:	4a ef       	ldi	r20, 0xFA	; 250
    1fe8:	54 e4       	ldi	r21, 0x44	; 68
    1fea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fee:	dc 01       	movw	r26, r24
    1ff0:	cb 01       	movw	r24, r22
    1ff2:	89 ab       	std	Y+49, r24	; 0x31
    1ff4:	9a ab       	std	Y+50, r25	; 0x32
    1ff6:	ab ab       	std	Y+51, r26	; 0x33
    1ff8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1ffa:	69 a9       	ldd	r22, Y+49	; 0x31
    1ffc:	7a a9       	ldd	r23, Y+50	; 0x32
    1ffe:	8b a9       	ldd	r24, Y+51	; 0x33
    2000:	9c a9       	ldd	r25, Y+52	; 0x34
    2002:	20 e0       	ldi	r18, 0x00	; 0
    2004:	30 e0       	ldi	r19, 0x00	; 0
    2006:	40 e8       	ldi	r20, 0x80	; 128
    2008:	5f e3       	ldi	r21, 0x3F	; 63
    200a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    200e:	88 23       	and	r24, r24
    2010:	2c f4       	brge	.+10     	; 0x201c <LCD_VidWrite4Cmd+0x214>
		__ticks = 1;
    2012:	81 e0       	ldi	r24, 0x01	; 1
    2014:	90 e0       	ldi	r25, 0x00	; 0
    2016:	98 ab       	std	Y+48, r25	; 0x30
    2018:	8f a7       	std	Y+47, r24	; 0x2f
    201a:	3f c0       	rjmp	.+126    	; 0x209a <LCD_VidWrite4Cmd+0x292>
	else if (__tmp > 65535)
    201c:	69 a9       	ldd	r22, Y+49	; 0x31
    201e:	7a a9       	ldd	r23, Y+50	; 0x32
    2020:	8b a9       	ldd	r24, Y+51	; 0x33
    2022:	9c a9       	ldd	r25, Y+52	; 0x34
    2024:	20 e0       	ldi	r18, 0x00	; 0
    2026:	3f ef       	ldi	r19, 0xFF	; 255
    2028:	4f e7       	ldi	r20, 0x7F	; 127
    202a:	57 e4       	ldi	r21, 0x47	; 71
    202c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2030:	18 16       	cp	r1, r24
    2032:	4c f5       	brge	.+82     	; 0x2086 <LCD_VidWrite4Cmd+0x27e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2034:	6d a9       	ldd	r22, Y+53	; 0x35
    2036:	7e a9       	ldd	r23, Y+54	; 0x36
    2038:	8f a9       	ldd	r24, Y+55	; 0x37
    203a:	98 ad       	ldd	r25, Y+56	; 0x38
    203c:	20 e0       	ldi	r18, 0x00	; 0
    203e:	30 e0       	ldi	r19, 0x00	; 0
    2040:	40 e2       	ldi	r20, 0x20	; 32
    2042:	51 e4       	ldi	r21, 0x41	; 65
    2044:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2048:	dc 01       	movw	r26, r24
    204a:	cb 01       	movw	r24, r22
    204c:	bc 01       	movw	r22, r24
    204e:	cd 01       	movw	r24, r26
    2050:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2054:	dc 01       	movw	r26, r24
    2056:	cb 01       	movw	r24, r22
    2058:	98 ab       	std	Y+48, r25	; 0x30
    205a:	8f a7       	std	Y+47, r24	; 0x2f
    205c:	0f c0       	rjmp	.+30     	; 0x207c <LCD_VidWrite4Cmd+0x274>
    205e:	88 ec       	ldi	r24, 0xC8	; 200
    2060:	90 e0       	ldi	r25, 0x00	; 0
    2062:	9e a7       	std	Y+46, r25	; 0x2e
    2064:	8d a7       	std	Y+45, r24	; 0x2d
    2066:	8d a5       	ldd	r24, Y+45	; 0x2d
    2068:	9e a5       	ldd	r25, Y+46	; 0x2e
    206a:	01 97       	sbiw	r24, 0x01	; 1
    206c:	f1 f7       	brne	.-4      	; 0x206a <LCD_VidWrite4Cmd+0x262>
    206e:	9e a7       	std	Y+46, r25	; 0x2e
    2070:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2072:	8f a5       	ldd	r24, Y+47	; 0x2f
    2074:	98 a9       	ldd	r25, Y+48	; 0x30
    2076:	01 97       	sbiw	r24, 0x01	; 1
    2078:	98 ab       	std	Y+48, r25	; 0x30
    207a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    207c:	8f a5       	ldd	r24, Y+47	; 0x2f
    207e:	98 a9       	ldd	r25, Y+48	; 0x30
    2080:	00 97       	sbiw	r24, 0x00	; 0
    2082:	69 f7       	brne	.-38     	; 0x205e <LCD_VidWrite4Cmd+0x256>
    2084:	14 c0       	rjmp	.+40     	; 0x20ae <LCD_VidWrite4Cmd+0x2a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2086:	69 a9       	ldd	r22, Y+49	; 0x31
    2088:	7a a9       	ldd	r23, Y+50	; 0x32
    208a:	8b a9       	ldd	r24, Y+51	; 0x33
    208c:	9c a9       	ldd	r25, Y+52	; 0x34
    208e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2092:	dc 01       	movw	r26, r24
    2094:	cb 01       	movw	r24, r22
    2096:	98 ab       	std	Y+48, r25	; 0x30
    2098:	8f a7       	std	Y+47, r24	; 0x2f
    209a:	8f a5       	ldd	r24, Y+47	; 0x2f
    209c:	98 a9       	ldd	r25, Y+48	; 0x30
    209e:	9c a7       	std	Y+44, r25	; 0x2c
    20a0:	8b a7       	std	Y+43, r24	; 0x2b
    20a2:	8b a5       	ldd	r24, Y+43	; 0x2b
    20a4:	9c a5       	ldd	r25, Y+44	; 0x2c
    20a6:	01 97       	sbiw	r24, 0x01	; 1
    20a8:	f1 f7       	brne	.-4      	; 0x20a6 <LCD_VidWrite4Cmd+0x29e>
    20aa:	9c a7       	std	Y+44, r25	; 0x2c
    20ac:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);

	if(InitStepFinishid)
    20ae:	80 91 4a 01 	lds	r24, 0x014A
    20b2:	88 23       	and	r24, r24
    20b4:	09 f4       	brne	.+2      	; 0x20b8 <LCD_VidWrite4Cmd+0x2b0>
    20b6:	20 c1       	rjmp	.+576    	; 0x22f8 <LCD_VidWrite4Cmd+0x4f0>
	{
		DIO_VidSetPinValue(LCD_PORT,PIN4,GET_BIT(LOC_Cmd,0));
    20b8:	fe 01       	movw	r30, r28
    20ba:	e9 5b       	subi	r30, 0xB9	; 185
    20bc:	ff 4f       	sbci	r31, 0xFF	; 255
    20be:	80 81       	ld	r24, Z
    20c0:	98 2f       	mov	r25, r24
    20c2:	91 70       	andi	r25, 0x01	; 1
    20c4:	83 e0       	ldi	r24, 0x03	; 3
    20c6:	64 e0       	ldi	r22, 0x04	; 4
    20c8:	49 2f       	mov	r20, r25
    20ca:	0e 94 a4 07 	call	0xf48	; 0xf48 <DIO_VidSetPinValue>
		DIO_VidSetPinValue(LCD_PORT,PIN5,GET_BIT(LOC_Cmd,1));
    20ce:	fe 01       	movw	r30, r28
    20d0:	e9 5b       	subi	r30, 0xB9	; 185
    20d2:	ff 4f       	sbci	r31, 0xFF	; 255
    20d4:	80 81       	ld	r24, Z
    20d6:	86 95       	lsr	r24
    20d8:	98 2f       	mov	r25, r24
    20da:	91 70       	andi	r25, 0x01	; 1
    20dc:	83 e0       	ldi	r24, 0x03	; 3
    20de:	65 e0       	ldi	r22, 0x05	; 5
    20e0:	49 2f       	mov	r20, r25
    20e2:	0e 94 a4 07 	call	0xf48	; 0xf48 <DIO_VidSetPinValue>
		DIO_VidSetPinValue(LCD_PORT,PIN6,GET_BIT(LOC_Cmd,2));
    20e6:	fe 01       	movw	r30, r28
    20e8:	e9 5b       	subi	r30, 0xB9	; 185
    20ea:	ff 4f       	sbci	r31, 0xFF	; 255
    20ec:	80 81       	ld	r24, Z
    20ee:	86 95       	lsr	r24
    20f0:	86 95       	lsr	r24
    20f2:	98 2f       	mov	r25, r24
    20f4:	91 70       	andi	r25, 0x01	; 1
    20f6:	83 e0       	ldi	r24, 0x03	; 3
    20f8:	66 e0       	ldi	r22, 0x06	; 6
    20fa:	49 2f       	mov	r20, r25
    20fc:	0e 94 a4 07 	call	0xf48	; 0xf48 <DIO_VidSetPinValue>
		DIO_VidSetPinValue(LCD_PORT,PIN7,GET_BIT(LOC_Cmd,3));
    2100:	fe 01       	movw	r30, r28
    2102:	e9 5b       	subi	r30, 0xB9	; 185
    2104:	ff 4f       	sbci	r31, 0xFF	; 255
    2106:	80 81       	ld	r24, Z
    2108:	86 95       	lsr	r24
    210a:	86 95       	lsr	r24
    210c:	86 95       	lsr	r24
    210e:	98 2f       	mov	r25, r24
    2110:	91 70       	andi	r25, 0x01	; 1
    2112:	83 e0       	ldi	r24, 0x03	; 3
    2114:	67 e0       	ldi	r22, 0x07	; 7
    2116:	49 2f       	mov	r20, r25
    2118:	0e 94 a4 07 	call	0xf48	; 0xf48 <DIO_VidSetPinValue>

		DIO_VidSetPinValue(LCD_INIT,LCD_EN,1);
    211c:	80 e0       	ldi	r24, 0x00	; 0
    211e:	67 e0       	ldi	r22, 0x07	; 7
    2120:	41 e0       	ldi	r20, 0x01	; 1
    2122:	0e 94 a4 07 	call	0xf48	; 0xf48 <DIO_VidSetPinValue>
    2126:	80 e0       	ldi	r24, 0x00	; 0
    2128:	90 e0       	ldi	r25, 0x00	; 0
    212a:	a0 e8       	ldi	r26, 0x80	; 128
    212c:	bf e3       	ldi	r27, 0x3F	; 63
    212e:	8f a3       	std	Y+39, r24	; 0x27
    2130:	98 a7       	std	Y+40, r25	; 0x28
    2132:	a9 a7       	std	Y+41, r26	; 0x29
    2134:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2136:	6f a1       	ldd	r22, Y+39	; 0x27
    2138:	78 a5       	ldd	r23, Y+40	; 0x28
    213a:	89 a5       	ldd	r24, Y+41	; 0x29
    213c:	9a a5       	ldd	r25, Y+42	; 0x2a
    213e:	20 e0       	ldi	r18, 0x00	; 0
    2140:	30 e0       	ldi	r19, 0x00	; 0
    2142:	4a ef       	ldi	r20, 0xFA	; 250
    2144:	54 e4       	ldi	r21, 0x44	; 68
    2146:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    214a:	dc 01       	movw	r26, r24
    214c:	cb 01       	movw	r24, r22
    214e:	8b a3       	std	Y+35, r24	; 0x23
    2150:	9c a3       	std	Y+36, r25	; 0x24
    2152:	ad a3       	std	Y+37, r26	; 0x25
    2154:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2156:	6b a1       	ldd	r22, Y+35	; 0x23
    2158:	7c a1       	ldd	r23, Y+36	; 0x24
    215a:	8d a1       	ldd	r24, Y+37	; 0x25
    215c:	9e a1       	ldd	r25, Y+38	; 0x26
    215e:	20 e0       	ldi	r18, 0x00	; 0
    2160:	30 e0       	ldi	r19, 0x00	; 0
    2162:	40 e8       	ldi	r20, 0x80	; 128
    2164:	5f e3       	ldi	r21, 0x3F	; 63
    2166:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    216a:	88 23       	and	r24, r24
    216c:	2c f4       	brge	.+10     	; 0x2178 <LCD_VidWrite4Cmd+0x370>
		__ticks = 1;
    216e:	81 e0       	ldi	r24, 0x01	; 1
    2170:	90 e0       	ldi	r25, 0x00	; 0
    2172:	9a a3       	std	Y+34, r25	; 0x22
    2174:	89 a3       	std	Y+33, r24	; 0x21
    2176:	3f c0       	rjmp	.+126    	; 0x21f6 <LCD_VidWrite4Cmd+0x3ee>
	else if (__tmp > 65535)
    2178:	6b a1       	ldd	r22, Y+35	; 0x23
    217a:	7c a1       	ldd	r23, Y+36	; 0x24
    217c:	8d a1       	ldd	r24, Y+37	; 0x25
    217e:	9e a1       	ldd	r25, Y+38	; 0x26
    2180:	20 e0       	ldi	r18, 0x00	; 0
    2182:	3f ef       	ldi	r19, 0xFF	; 255
    2184:	4f e7       	ldi	r20, 0x7F	; 127
    2186:	57 e4       	ldi	r21, 0x47	; 71
    2188:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    218c:	18 16       	cp	r1, r24
    218e:	4c f5       	brge	.+82     	; 0x21e2 <LCD_VidWrite4Cmd+0x3da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2190:	6f a1       	ldd	r22, Y+39	; 0x27
    2192:	78 a5       	ldd	r23, Y+40	; 0x28
    2194:	89 a5       	ldd	r24, Y+41	; 0x29
    2196:	9a a5       	ldd	r25, Y+42	; 0x2a
    2198:	20 e0       	ldi	r18, 0x00	; 0
    219a:	30 e0       	ldi	r19, 0x00	; 0
    219c:	40 e2       	ldi	r20, 0x20	; 32
    219e:	51 e4       	ldi	r21, 0x41	; 65
    21a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21a4:	dc 01       	movw	r26, r24
    21a6:	cb 01       	movw	r24, r22
    21a8:	bc 01       	movw	r22, r24
    21aa:	cd 01       	movw	r24, r26
    21ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21b0:	dc 01       	movw	r26, r24
    21b2:	cb 01       	movw	r24, r22
    21b4:	9a a3       	std	Y+34, r25	; 0x22
    21b6:	89 a3       	std	Y+33, r24	; 0x21
    21b8:	0f c0       	rjmp	.+30     	; 0x21d8 <LCD_VidWrite4Cmd+0x3d0>
    21ba:	88 ec       	ldi	r24, 0xC8	; 200
    21bc:	90 e0       	ldi	r25, 0x00	; 0
    21be:	98 a3       	std	Y+32, r25	; 0x20
    21c0:	8f 8f       	std	Y+31, r24	; 0x1f
    21c2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    21c4:	98 a1       	ldd	r25, Y+32	; 0x20
    21c6:	01 97       	sbiw	r24, 0x01	; 1
    21c8:	f1 f7       	brne	.-4      	; 0x21c6 <LCD_VidWrite4Cmd+0x3be>
    21ca:	98 a3       	std	Y+32, r25	; 0x20
    21cc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21ce:	89 a1       	ldd	r24, Y+33	; 0x21
    21d0:	9a a1       	ldd	r25, Y+34	; 0x22
    21d2:	01 97       	sbiw	r24, 0x01	; 1
    21d4:	9a a3       	std	Y+34, r25	; 0x22
    21d6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21d8:	89 a1       	ldd	r24, Y+33	; 0x21
    21da:	9a a1       	ldd	r25, Y+34	; 0x22
    21dc:	00 97       	sbiw	r24, 0x00	; 0
    21de:	69 f7       	brne	.-38     	; 0x21ba <LCD_VidWrite4Cmd+0x3b2>
    21e0:	14 c0       	rjmp	.+40     	; 0x220a <LCD_VidWrite4Cmd+0x402>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21e2:	6b a1       	ldd	r22, Y+35	; 0x23
    21e4:	7c a1       	ldd	r23, Y+36	; 0x24
    21e6:	8d a1       	ldd	r24, Y+37	; 0x25
    21e8:	9e a1       	ldd	r25, Y+38	; 0x26
    21ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21ee:	dc 01       	movw	r26, r24
    21f0:	cb 01       	movw	r24, r22
    21f2:	9a a3       	std	Y+34, r25	; 0x22
    21f4:	89 a3       	std	Y+33, r24	; 0x21
    21f6:	89 a1       	ldd	r24, Y+33	; 0x21
    21f8:	9a a1       	ldd	r25, Y+34	; 0x22
    21fa:	9e 8f       	std	Y+30, r25	; 0x1e
    21fc:	8d 8f       	std	Y+29, r24	; 0x1d
    21fe:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2200:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2202:	01 97       	sbiw	r24, 0x01	; 1
    2204:	f1 f7       	brne	.-4      	; 0x2202 <LCD_VidWrite4Cmd+0x3fa>
    2206:	9e 8f       	std	Y+30, r25	; 0x1e
    2208:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1);
		DIO_VidSetPinValue(LCD_INIT,LCD_EN,0);
    220a:	80 e0       	ldi	r24, 0x00	; 0
    220c:	67 e0       	ldi	r22, 0x07	; 7
    220e:	40 e0       	ldi	r20, 0x00	; 0
    2210:	0e 94 a4 07 	call	0xf48	; 0xf48 <DIO_VidSetPinValue>
    2214:	80 e0       	ldi	r24, 0x00	; 0
    2216:	90 e0       	ldi	r25, 0x00	; 0
    2218:	a0 e8       	ldi	r26, 0x80	; 128
    221a:	bf e3       	ldi	r27, 0x3F	; 63
    221c:	89 8f       	std	Y+25, r24	; 0x19
    221e:	9a 8f       	std	Y+26, r25	; 0x1a
    2220:	ab 8f       	std	Y+27, r26	; 0x1b
    2222:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2224:	69 8d       	ldd	r22, Y+25	; 0x19
    2226:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2228:	8b 8d       	ldd	r24, Y+27	; 0x1b
    222a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    222c:	20 e0       	ldi	r18, 0x00	; 0
    222e:	30 e0       	ldi	r19, 0x00	; 0
    2230:	4a ef       	ldi	r20, 0xFA	; 250
    2232:	54 e4       	ldi	r21, 0x44	; 68
    2234:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2238:	dc 01       	movw	r26, r24
    223a:	cb 01       	movw	r24, r22
    223c:	8d 8b       	std	Y+21, r24	; 0x15
    223e:	9e 8b       	std	Y+22, r25	; 0x16
    2240:	af 8b       	std	Y+23, r26	; 0x17
    2242:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2244:	6d 89       	ldd	r22, Y+21	; 0x15
    2246:	7e 89       	ldd	r23, Y+22	; 0x16
    2248:	8f 89       	ldd	r24, Y+23	; 0x17
    224a:	98 8d       	ldd	r25, Y+24	; 0x18
    224c:	20 e0       	ldi	r18, 0x00	; 0
    224e:	30 e0       	ldi	r19, 0x00	; 0
    2250:	40 e8       	ldi	r20, 0x80	; 128
    2252:	5f e3       	ldi	r21, 0x3F	; 63
    2254:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2258:	88 23       	and	r24, r24
    225a:	2c f4       	brge	.+10     	; 0x2266 <LCD_VidWrite4Cmd+0x45e>
		__ticks = 1;
    225c:	81 e0       	ldi	r24, 0x01	; 1
    225e:	90 e0       	ldi	r25, 0x00	; 0
    2260:	9c 8b       	std	Y+20, r25	; 0x14
    2262:	8b 8b       	std	Y+19, r24	; 0x13
    2264:	3f c0       	rjmp	.+126    	; 0x22e4 <LCD_VidWrite4Cmd+0x4dc>
	else if (__tmp > 65535)
    2266:	6d 89       	ldd	r22, Y+21	; 0x15
    2268:	7e 89       	ldd	r23, Y+22	; 0x16
    226a:	8f 89       	ldd	r24, Y+23	; 0x17
    226c:	98 8d       	ldd	r25, Y+24	; 0x18
    226e:	20 e0       	ldi	r18, 0x00	; 0
    2270:	3f ef       	ldi	r19, 0xFF	; 255
    2272:	4f e7       	ldi	r20, 0x7F	; 127
    2274:	57 e4       	ldi	r21, 0x47	; 71
    2276:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    227a:	18 16       	cp	r1, r24
    227c:	4c f5       	brge	.+82     	; 0x22d0 <LCD_VidWrite4Cmd+0x4c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    227e:	69 8d       	ldd	r22, Y+25	; 0x19
    2280:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2282:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2284:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2286:	20 e0       	ldi	r18, 0x00	; 0
    2288:	30 e0       	ldi	r19, 0x00	; 0
    228a:	40 e2       	ldi	r20, 0x20	; 32
    228c:	51 e4       	ldi	r21, 0x41	; 65
    228e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2292:	dc 01       	movw	r26, r24
    2294:	cb 01       	movw	r24, r22
    2296:	bc 01       	movw	r22, r24
    2298:	cd 01       	movw	r24, r26
    229a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    229e:	dc 01       	movw	r26, r24
    22a0:	cb 01       	movw	r24, r22
    22a2:	9c 8b       	std	Y+20, r25	; 0x14
    22a4:	8b 8b       	std	Y+19, r24	; 0x13
    22a6:	0f c0       	rjmp	.+30     	; 0x22c6 <LCD_VidWrite4Cmd+0x4be>
    22a8:	88 ec       	ldi	r24, 0xC8	; 200
    22aa:	90 e0       	ldi	r25, 0x00	; 0
    22ac:	9a 8b       	std	Y+18, r25	; 0x12
    22ae:	89 8b       	std	Y+17, r24	; 0x11
    22b0:	89 89       	ldd	r24, Y+17	; 0x11
    22b2:	9a 89       	ldd	r25, Y+18	; 0x12
    22b4:	01 97       	sbiw	r24, 0x01	; 1
    22b6:	f1 f7       	brne	.-4      	; 0x22b4 <LCD_VidWrite4Cmd+0x4ac>
    22b8:	9a 8b       	std	Y+18, r25	; 0x12
    22ba:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22bc:	8b 89       	ldd	r24, Y+19	; 0x13
    22be:	9c 89       	ldd	r25, Y+20	; 0x14
    22c0:	01 97       	sbiw	r24, 0x01	; 1
    22c2:	9c 8b       	std	Y+20, r25	; 0x14
    22c4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22c6:	8b 89       	ldd	r24, Y+19	; 0x13
    22c8:	9c 89       	ldd	r25, Y+20	; 0x14
    22ca:	00 97       	sbiw	r24, 0x00	; 0
    22cc:	69 f7       	brne	.-38     	; 0x22a8 <LCD_VidWrite4Cmd+0x4a0>
    22ce:	14 c0       	rjmp	.+40     	; 0x22f8 <LCD_VidWrite4Cmd+0x4f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22d0:	6d 89       	ldd	r22, Y+21	; 0x15
    22d2:	7e 89       	ldd	r23, Y+22	; 0x16
    22d4:	8f 89       	ldd	r24, Y+23	; 0x17
    22d6:	98 8d       	ldd	r25, Y+24	; 0x18
    22d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22dc:	dc 01       	movw	r26, r24
    22de:	cb 01       	movw	r24, r22
    22e0:	9c 8b       	std	Y+20, r25	; 0x14
    22e2:	8b 8b       	std	Y+19, r24	; 0x13
    22e4:	8b 89       	ldd	r24, Y+19	; 0x13
    22e6:	9c 89       	ldd	r25, Y+20	; 0x14
    22e8:	98 8b       	std	Y+16, r25	; 0x10
    22ea:	8f 87       	std	Y+15, r24	; 0x0f
    22ec:	8f 85       	ldd	r24, Y+15	; 0x0f
    22ee:	98 89       	ldd	r25, Y+16	; 0x10
    22f0:	01 97       	sbiw	r24, 0x01	; 1
    22f2:	f1 f7       	brne	.-4      	; 0x22f0 <LCD_VidWrite4Cmd+0x4e8>
    22f4:	98 8b       	std	Y+16, r25	; 0x10
    22f6:	8f 87       	std	Y+15, r24	; 0x0f
    22f8:	80 e0       	ldi	r24, 0x00	; 0
    22fa:	90 e0       	ldi	r25, 0x00	; 0
    22fc:	a0 e0       	ldi	r26, 0x00	; 0
    22fe:	b0 e4       	ldi	r27, 0x40	; 64
    2300:	8b 87       	std	Y+11, r24	; 0x0b
    2302:	9c 87       	std	Y+12, r25	; 0x0c
    2304:	ad 87       	std	Y+13, r26	; 0x0d
    2306:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2308:	6b 85       	ldd	r22, Y+11	; 0x0b
    230a:	7c 85       	ldd	r23, Y+12	; 0x0c
    230c:	8d 85       	ldd	r24, Y+13	; 0x0d
    230e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2310:	20 e0       	ldi	r18, 0x00	; 0
    2312:	30 e0       	ldi	r19, 0x00	; 0
    2314:	4a ef       	ldi	r20, 0xFA	; 250
    2316:	54 e4       	ldi	r21, 0x44	; 68
    2318:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    231c:	dc 01       	movw	r26, r24
    231e:	cb 01       	movw	r24, r22
    2320:	8f 83       	std	Y+7, r24	; 0x07
    2322:	98 87       	std	Y+8, r25	; 0x08
    2324:	a9 87       	std	Y+9, r26	; 0x09
    2326:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2328:	6f 81       	ldd	r22, Y+7	; 0x07
    232a:	78 85       	ldd	r23, Y+8	; 0x08
    232c:	89 85       	ldd	r24, Y+9	; 0x09
    232e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2330:	20 e0       	ldi	r18, 0x00	; 0
    2332:	30 e0       	ldi	r19, 0x00	; 0
    2334:	40 e8       	ldi	r20, 0x80	; 128
    2336:	5f e3       	ldi	r21, 0x3F	; 63
    2338:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    233c:	88 23       	and	r24, r24
    233e:	2c f4       	brge	.+10     	; 0x234a <LCD_VidWrite4Cmd+0x542>
		__ticks = 1;
    2340:	81 e0       	ldi	r24, 0x01	; 1
    2342:	90 e0       	ldi	r25, 0x00	; 0
    2344:	9e 83       	std	Y+6, r25	; 0x06
    2346:	8d 83       	std	Y+5, r24	; 0x05
    2348:	3f c0       	rjmp	.+126    	; 0x23c8 <LCD_VidWrite4Cmd+0x5c0>
	else if (__tmp > 65535)
    234a:	6f 81       	ldd	r22, Y+7	; 0x07
    234c:	78 85       	ldd	r23, Y+8	; 0x08
    234e:	89 85       	ldd	r24, Y+9	; 0x09
    2350:	9a 85       	ldd	r25, Y+10	; 0x0a
    2352:	20 e0       	ldi	r18, 0x00	; 0
    2354:	3f ef       	ldi	r19, 0xFF	; 255
    2356:	4f e7       	ldi	r20, 0x7F	; 127
    2358:	57 e4       	ldi	r21, 0x47	; 71
    235a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    235e:	18 16       	cp	r1, r24
    2360:	4c f5       	brge	.+82     	; 0x23b4 <LCD_VidWrite4Cmd+0x5ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2362:	6b 85       	ldd	r22, Y+11	; 0x0b
    2364:	7c 85       	ldd	r23, Y+12	; 0x0c
    2366:	8d 85       	ldd	r24, Y+13	; 0x0d
    2368:	9e 85       	ldd	r25, Y+14	; 0x0e
    236a:	20 e0       	ldi	r18, 0x00	; 0
    236c:	30 e0       	ldi	r19, 0x00	; 0
    236e:	40 e2       	ldi	r20, 0x20	; 32
    2370:	51 e4       	ldi	r21, 0x41	; 65
    2372:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2376:	dc 01       	movw	r26, r24
    2378:	cb 01       	movw	r24, r22
    237a:	bc 01       	movw	r22, r24
    237c:	cd 01       	movw	r24, r26
    237e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2382:	dc 01       	movw	r26, r24
    2384:	cb 01       	movw	r24, r22
    2386:	9e 83       	std	Y+6, r25	; 0x06
    2388:	8d 83       	std	Y+5, r24	; 0x05
    238a:	0f c0       	rjmp	.+30     	; 0x23aa <LCD_VidWrite4Cmd+0x5a2>
    238c:	88 ec       	ldi	r24, 0xC8	; 200
    238e:	90 e0       	ldi	r25, 0x00	; 0
    2390:	9c 83       	std	Y+4, r25	; 0x04
    2392:	8b 83       	std	Y+3, r24	; 0x03
    2394:	8b 81       	ldd	r24, Y+3	; 0x03
    2396:	9c 81       	ldd	r25, Y+4	; 0x04
    2398:	01 97       	sbiw	r24, 0x01	; 1
    239a:	f1 f7       	brne	.-4      	; 0x2398 <LCD_VidWrite4Cmd+0x590>
    239c:	9c 83       	std	Y+4, r25	; 0x04
    239e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23a0:	8d 81       	ldd	r24, Y+5	; 0x05
    23a2:	9e 81       	ldd	r25, Y+6	; 0x06
    23a4:	01 97       	sbiw	r24, 0x01	; 1
    23a6:	9e 83       	std	Y+6, r25	; 0x06
    23a8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23aa:	8d 81       	ldd	r24, Y+5	; 0x05
    23ac:	9e 81       	ldd	r25, Y+6	; 0x06
    23ae:	00 97       	sbiw	r24, 0x00	; 0
    23b0:	69 f7       	brne	.-38     	; 0x238c <LCD_VidWrite4Cmd+0x584>
    23b2:	14 c0       	rjmp	.+40     	; 0x23dc <LCD_VidWrite4Cmd+0x5d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23b4:	6f 81       	ldd	r22, Y+7	; 0x07
    23b6:	78 85       	ldd	r23, Y+8	; 0x08
    23b8:	89 85       	ldd	r24, Y+9	; 0x09
    23ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    23bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23c0:	dc 01       	movw	r26, r24
    23c2:	cb 01       	movw	r24, r22
    23c4:	9e 83       	std	Y+6, r25	; 0x06
    23c6:	8d 83       	std	Y+5, r24	; 0x05
    23c8:	8d 81       	ldd	r24, Y+5	; 0x05
    23ca:	9e 81       	ldd	r25, Y+6	; 0x06
    23cc:	9a 83       	std	Y+2, r25	; 0x02
    23ce:	89 83       	std	Y+1, r24	; 0x01
    23d0:	89 81       	ldd	r24, Y+1	; 0x01
    23d2:	9a 81       	ldd	r25, Y+2	; 0x02
    23d4:	01 97       	sbiw	r24, 0x01	; 1
    23d6:	f1 f7       	brne	.-4      	; 0x23d4 <LCD_VidWrite4Cmd+0x5cc>
    23d8:	9a 83       	std	Y+2, r25	; 0x02
    23da:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1);
	}
	_delay_ms(2);
}
    23dc:	c9 5b       	subi	r28, 0xB9	; 185
    23de:	df 4f       	sbci	r29, 0xFF	; 255
    23e0:	0f b6       	in	r0, 0x3f	; 63
    23e2:	f8 94       	cli
    23e4:	de bf       	out	0x3e, r29	; 62
    23e6:	0f be       	out	0x3f, r0	; 63
    23e8:	cd bf       	out	0x3d, r28	; 61
    23ea:	cf 91       	pop	r28
    23ec:	df 91       	pop	r29
    23ee:	1f 91       	pop	r17
    23f0:	0f 91       	pop	r16
    23f2:	08 95       	ret

000023f4 <LCD_VidWrite4Data>:


void LCD_VidWrite4Data(u8 LOC_Data)
{
    23f4:	df 93       	push	r29
    23f6:	cf 93       	push	r28
    23f8:	cd b7       	in	r28, 0x3d	; 61
    23fa:	de b7       	in	r29, 0x3e	; 62
    23fc:	ab 97       	sbiw	r28, 0x2b	; 43
    23fe:	0f b6       	in	r0, 0x3f	; 63
    2400:	f8 94       	cli
    2402:	de bf       	out	0x3e, r29	; 62
    2404:	0f be       	out	0x3f, r0	; 63
    2406:	cd bf       	out	0x3d, r28	; 61
    2408:	8b a7       	std	Y+43, r24	; 0x2b
	DIO_VidSetPinValue(LCD_INIT,LCD_RS,1);
    240a:	80 e0       	ldi	r24, 0x00	; 0
    240c:	65 e0       	ldi	r22, 0x05	; 5
    240e:	41 e0       	ldi	r20, 0x01	; 1
    2410:	0e 94 a4 07 	call	0xf48	; 0xf48 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(LCD_INIT,LCD_RW,0);
    2414:	80 e0       	ldi	r24, 0x00	; 0
    2416:	66 e0       	ldi	r22, 0x06	; 6
    2418:	40 e0       	ldi	r20, 0x00	; 0
    241a:	0e 94 a4 07 	call	0xf48	; 0xf48 <DIO_VidSetPinValue>

	DIO_VidSetPinValue(LCD_PORT,PIN4,GET_BIT(LOC_Data,4));
    241e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2420:	82 95       	swap	r24
    2422:	8f 70       	andi	r24, 0x0F	; 15
    2424:	98 2f       	mov	r25, r24
    2426:	91 70       	andi	r25, 0x01	; 1
    2428:	83 e0       	ldi	r24, 0x03	; 3
    242a:	64 e0       	ldi	r22, 0x04	; 4
    242c:	49 2f       	mov	r20, r25
    242e:	0e 94 a4 07 	call	0xf48	; 0xf48 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(LCD_PORT,PIN5,GET_BIT(LOC_Data,5));
    2432:	8b a5       	ldd	r24, Y+43	; 0x2b
    2434:	82 95       	swap	r24
    2436:	86 95       	lsr	r24
    2438:	87 70       	andi	r24, 0x07	; 7
    243a:	98 2f       	mov	r25, r24
    243c:	91 70       	andi	r25, 0x01	; 1
    243e:	83 e0       	ldi	r24, 0x03	; 3
    2440:	65 e0       	ldi	r22, 0x05	; 5
    2442:	49 2f       	mov	r20, r25
    2444:	0e 94 a4 07 	call	0xf48	; 0xf48 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(LCD_PORT,PIN6,GET_BIT(LOC_Data,6));
    2448:	8b a5       	ldd	r24, Y+43	; 0x2b
    244a:	82 95       	swap	r24
    244c:	86 95       	lsr	r24
    244e:	86 95       	lsr	r24
    2450:	83 70       	andi	r24, 0x03	; 3
    2452:	98 2f       	mov	r25, r24
    2454:	91 70       	andi	r25, 0x01	; 1
    2456:	83 e0       	ldi	r24, 0x03	; 3
    2458:	66 e0       	ldi	r22, 0x06	; 6
    245a:	49 2f       	mov	r20, r25
    245c:	0e 94 a4 07 	call	0xf48	; 0xf48 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(LCD_PORT,PIN7,GET_BIT(LOC_Data,7));
    2460:	8b a5       	ldd	r24, Y+43	; 0x2b
    2462:	98 2f       	mov	r25, r24
    2464:	99 1f       	adc	r25, r25
    2466:	99 27       	eor	r25, r25
    2468:	99 1f       	adc	r25, r25
    246a:	83 e0       	ldi	r24, 0x03	; 3
    246c:	67 e0       	ldi	r22, 0x07	; 7
    246e:	49 2f       	mov	r20, r25
    2470:	0e 94 a4 07 	call	0xf48	; 0xf48 <DIO_VidSetPinValue>

	DIO_VidSetPinValue(LCD_INIT,LCD_EN,1);
    2474:	80 e0       	ldi	r24, 0x00	; 0
    2476:	67 e0       	ldi	r22, 0x07	; 7
    2478:	41 e0       	ldi	r20, 0x01	; 1
    247a:	0e 94 a4 07 	call	0xf48	; 0xf48 <DIO_VidSetPinValue>
    247e:	80 e0       	ldi	r24, 0x00	; 0
    2480:	90 e0       	ldi	r25, 0x00	; 0
    2482:	a0 e8       	ldi	r26, 0x80	; 128
    2484:	bf e3       	ldi	r27, 0x3F	; 63
    2486:	8f a3       	std	Y+39, r24	; 0x27
    2488:	98 a7       	std	Y+40, r25	; 0x28
    248a:	a9 a7       	std	Y+41, r26	; 0x29
    248c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    248e:	6f a1       	ldd	r22, Y+39	; 0x27
    2490:	78 a5       	ldd	r23, Y+40	; 0x28
    2492:	89 a5       	ldd	r24, Y+41	; 0x29
    2494:	9a a5       	ldd	r25, Y+42	; 0x2a
    2496:	20 e0       	ldi	r18, 0x00	; 0
    2498:	30 e0       	ldi	r19, 0x00	; 0
    249a:	4a ef       	ldi	r20, 0xFA	; 250
    249c:	54 e4       	ldi	r21, 0x44	; 68
    249e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24a2:	dc 01       	movw	r26, r24
    24a4:	cb 01       	movw	r24, r22
    24a6:	8b a3       	std	Y+35, r24	; 0x23
    24a8:	9c a3       	std	Y+36, r25	; 0x24
    24aa:	ad a3       	std	Y+37, r26	; 0x25
    24ac:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    24ae:	6b a1       	ldd	r22, Y+35	; 0x23
    24b0:	7c a1       	ldd	r23, Y+36	; 0x24
    24b2:	8d a1       	ldd	r24, Y+37	; 0x25
    24b4:	9e a1       	ldd	r25, Y+38	; 0x26
    24b6:	20 e0       	ldi	r18, 0x00	; 0
    24b8:	30 e0       	ldi	r19, 0x00	; 0
    24ba:	40 e8       	ldi	r20, 0x80	; 128
    24bc:	5f e3       	ldi	r21, 0x3F	; 63
    24be:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24c2:	88 23       	and	r24, r24
    24c4:	2c f4       	brge	.+10     	; 0x24d0 <LCD_VidWrite4Data+0xdc>
		__ticks = 1;
    24c6:	81 e0       	ldi	r24, 0x01	; 1
    24c8:	90 e0       	ldi	r25, 0x00	; 0
    24ca:	9a a3       	std	Y+34, r25	; 0x22
    24cc:	89 a3       	std	Y+33, r24	; 0x21
    24ce:	3f c0       	rjmp	.+126    	; 0x254e <LCD_VidWrite4Data+0x15a>
	else if (__tmp > 65535)
    24d0:	6b a1       	ldd	r22, Y+35	; 0x23
    24d2:	7c a1       	ldd	r23, Y+36	; 0x24
    24d4:	8d a1       	ldd	r24, Y+37	; 0x25
    24d6:	9e a1       	ldd	r25, Y+38	; 0x26
    24d8:	20 e0       	ldi	r18, 0x00	; 0
    24da:	3f ef       	ldi	r19, 0xFF	; 255
    24dc:	4f e7       	ldi	r20, 0x7F	; 127
    24de:	57 e4       	ldi	r21, 0x47	; 71
    24e0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24e4:	18 16       	cp	r1, r24
    24e6:	4c f5       	brge	.+82     	; 0x253a <LCD_VidWrite4Data+0x146>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24e8:	6f a1       	ldd	r22, Y+39	; 0x27
    24ea:	78 a5       	ldd	r23, Y+40	; 0x28
    24ec:	89 a5       	ldd	r24, Y+41	; 0x29
    24ee:	9a a5       	ldd	r25, Y+42	; 0x2a
    24f0:	20 e0       	ldi	r18, 0x00	; 0
    24f2:	30 e0       	ldi	r19, 0x00	; 0
    24f4:	40 e2       	ldi	r20, 0x20	; 32
    24f6:	51 e4       	ldi	r21, 0x41	; 65
    24f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24fc:	dc 01       	movw	r26, r24
    24fe:	cb 01       	movw	r24, r22
    2500:	bc 01       	movw	r22, r24
    2502:	cd 01       	movw	r24, r26
    2504:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2508:	dc 01       	movw	r26, r24
    250a:	cb 01       	movw	r24, r22
    250c:	9a a3       	std	Y+34, r25	; 0x22
    250e:	89 a3       	std	Y+33, r24	; 0x21
    2510:	0f c0       	rjmp	.+30     	; 0x2530 <LCD_VidWrite4Data+0x13c>
    2512:	88 ec       	ldi	r24, 0xC8	; 200
    2514:	90 e0       	ldi	r25, 0x00	; 0
    2516:	98 a3       	std	Y+32, r25	; 0x20
    2518:	8f 8f       	std	Y+31, r24	; 0x1f
    251a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    251c:	98 a1       	ldd	r25, Y+32	; 0x20
    251e:	01 97       	sbiw	r24, 0x01	; 1
    2520:	f1 f7       	brne	.-4      	; 0x251e <LCD_VidWrite4Data+0x12a>
    2522:	98 a3       	std	Y+32, r25	; 0x20
    2524:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2526:	89 a1       	ldd	r24, Y+33	; 0x21
    2528:	9a a1       	ldd	r25, Y+34	; 0x22
    252a:	01 97       	sbiw	r24, 0x01	; 1
    252c:	9a a3       	std	Y+34, r25	; 0x22
    252e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2530:	89 a1       	ldd	r24, Y+33	; 0x21
    2532:	9a a1       	ldd	r25, Y+34	; 0x22
    2534:	00 97       	sbiw	r24, 0x00	; 0
    2536:	69 f7       	brne	.-38     	; 0x2512 <LCD_VidWrite4Data+0x11e>
    2538:	14 c0       	rjmp	.+40     	; 0x2562 <LCD_VidWrite4Data+0x16e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    253a:	6b a1       	ldd	r22, Y+35	; 0x23
    253c:	7c a1       	ldd	r23, Y+36	; 0x24
    253e:	8d a1       	ldd	r24, Y+37	; 0x25
    2540:	9e a1       	ldd	r25, Y+38	; 0x26
    2542:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2546:	dc 01       	movw	r26, r24
    2548:	cb 01       	movw	r24, r22
    254a:	9a a3       	std	Y+34, r25	; 0x22
    254c:	89 a3       	std	Y+33, r24	; 0x21
    254e:	89 a1       	ldd	r24, Y+33	; 0x21
    2550:	9a a1       	ldd	r25, Y+34	; 0x22
    2552:	9e 8f       	std	Y+30, r25	; 0x1e
    2554:	8d 8f       	std	Y+29, r24	; 0x1d
    2556:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2558:	9e 8d       	ldd	r25, Y+30	; 0x1e
    255a:	01 97       	sbiw	r24, 0x01	; 1
    255c:	f1 f7       	brne	.-4      	; 0x255a <LCD_VidWrite4Data+0x166>
    255e:	9e 8f       	std	Y+30, r25	; 0x1e
    2560:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	DIO_VidSetPinValue(LCD_INIT,LCD_EN,0);
    2562:	80 e0       	ldi	r24, 0x00	; 0
    2564:	67 e0       	ldi	r22, 0x07	; 7
    2566:	40 e0       	ldi	r20, 0x00	; 0
    2568:	0e 94 a4 07 	call	0xf48	; 0xf48 <DIO_VidSetPinValue>

	DIO_VidSetPinValue(LCD_PORT,PIN4,GET_BIT(LOC_Data,0));
    256c:	8b a5       	ldd	r24, Y+43	; 0x2b
    256e:	98 2f       	mov	r25, r24
    2570:	91 70       	andi	r25, 0x01	; 1
    2572:	83 e0       	ldi	r24, 0x03	; 3
    2574:	64 e0       	ldi	r22, 0x04	; 4
    2576:	49 2f       	mov	r20, r25
    2578:	0e 94 a4 07 	call	0xf48	; 0xf48 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(LCD_PORT,PIN5,GET_BIT(LOC_Data,1));
    257c:	8b a5       	ldd	r24, Y+43	; 0x2b
    257e:	86 95       	lsr	r24
    2580:	98 2f       	mov	r25, r24
    2582:	91 70       	andi	r25, 0x01	; 1
    2584:	83 e0       	ldi	r24, 0x03	; 3
    2586:	65 e0       	ldi	r22, 0x05	; 5
    2588:	49 2f       	mov	r20, r25
    258a:	0e 94 a4 07 	call	0xf48	; 0xf48 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(LCD_PORT,PIN6,GET_BIT(LOC_Data,2));
    258e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2590:	86 95       	lsr	r24
    2592:	86 95       	lsr	r24
    2594:	98 2f       	mov	r25, r24
    2596:	91 70       	andi	r25, 0x01	; 1
    2598:	83 e0       	ldi	r24, 0x03	; 3
    259a:	66 e0       	ldi	r22, 0x06	; 6
    259c:	49 2f       	mov	r20, r25
    259e:	0e 94 a4 07 	call	0xf48	; 0xf48 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(LCD_PORT,PIN7,GET_BIT(LOC_Data,3));
    25a2:	8b a5       	ldd	r24, Y+43	; 0x2b
    25a4:	86 95       	lsr	r24
    25a6:	86 95       	lsr	r24
    25a8:	86 95       	lsr	r24
    25aa:	98 2f       	mov	r25, r24
    25ac:	91 70       	andi	r25, 0x01	; 1
    25ae:	83 e0       	ldi	r24, 0x03	; 3
    25b0:	67 e0       	ldi	r22, 0x07	; 7
    25b2:	49 2f       	mov	r20, r25
    25b4:	0e 94 a4 07 	call	0xf48	; 0xf48 <DIO_VidSetPinValue>

	DIO_VidSetPinValue(LCD_INIT,LCD_EN,1);
    25b8:	80 e0       	ldi	r24, 0x00	; 0
    25ba:	67 e0       	ldi	r22, 0x07	; 7
    25bc:	41 e0       	ldi	r20, 0x01	; 1
    25be:	0e 94 a4 07 	call	0xf48	; 0xf48 <DIO_VidSetPinValue>
    25c2:	80 e0       	ldi	r24, 0x00	; 0
    25c4:	90 e0       	ldi	r25, 0x00	; 0
    25c6:	a0 e8       	ldi	r26, 0x80	; 128
    25c8:	bf e3       	ldi	r27, 0x3F	; 63
    25ca:	89 8f       	std	Y+25, r24	; 0x19
    25cc:	9a 8f       	std	Y+26, r25	; 0x1a
    25ce:	ab 8f       	std	Y+27, r26	; 0x1b
    25d0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25d2:	69 8d       	ldd	r22, Y+25	; 0x19
    25d4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    25d6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25d8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    25da:	20 e0       	ldi	r18, 0x00	; 0
    25dc:	30 e0       	ldi	r19, 0x00	; 0
    25de:	4a ef       	ldi	r20, 0xFA	; 250
    25e0:	54 e4       	ldi	r21, 0x44	; 68
    25e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25e6:	dc 01       	movw	r26, r24
    25e8:	cb 01       	movw	r24, r22
    25ea:	8d 8b       	std	Y+21, r24	; 0x15
    25ec:	9e 8b       	std	Y+22, r25	; 0x16
    25ee:	af 8b       	std	Y+23, r26	; 0x17
    25f0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    25f2:	6d 89       	ldd	r22, Y+21	; 0x15
    25f4:	7e 89       	ldd	r23, Y+22	; 0x16
    25f6:	8f 89       	ldd	r24, Y+23	; 0x17
    25f8:	98 8d       	ldd	r25, Y+24	; 0x18
    25fa:	20 e0       	ldi	r18, 0x00	; 0
    25fc:	30 e0       	ldi	r19, 0x00	; 0
    25fe:	40 e8       	ldi	r20, 0x80	; 128
    2600:	5f e3       	ldi	r21, 0x3F	; 63
    2602:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2606:	88 23       	and	r24, r24
    2608:	2c f4       	brge	.+10     	; 0x2614 <LCD_VidWrite4Data+0x220>
		__ticks = 1;
    260a:	81 e0       	ldi	r24, 0x01	; 1
    260c:	90 e0       	ldi	r25, 0x00	; 0
    260e:	9c 8b       	std	Y+20, r25	; 0x14
    2610:	8b 8b       	std	Y+19, r24	; 0x13
    2612:	3f c0       	rjmp	.+126    	; 0x2692 <LCD_VidWrite4Data+0x29e>
	else if (__tmp > 65535)
    2614:	6d 89       	ldd	r22, Y+21	; 0x15
    2616:	7e 89       	ldd	r23, Y+22	; 0x16
    2618:	8f 89       	ldd	r24, Y+23	; 0x17
    261a:	98 8d       	ldd	r25, Y+24	; 0x18
    261c:	20 e0       	ldi	r18, 0x00	; 0
    261e:	3f ef       	ldi	r19, 0xFF	; 255
    2620:	4f e7       	ldi	r20, 0x7F	; 127
    2622:	57 e4       	ldi	r21, 0x47	; 71
    2624:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2628:	18 16       	cp	r1, r24
    262a:	4c f5       	brge	.+82     	; 0x267e <LCD_VidWrite4Data+0x28a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    262c:	69 8d       	ldd	r22, Y+25	; 0x19
    262e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2630:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2632:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2634:	20 e0       	ldi	r18, 0x00	; 0
    2636:	30 e0       	ldi	r19, 0x00	; 0
    2638:	40 e2       	ldi	r20, 0x20	; 32
    263a:	51 e4       	ldi	r21, 0x41	; 65
    263c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2640:	dc 01       	movw	r26, r24
    2642:	cb 01       	movw	r24, r22
    2644:	bc 01       	movw	r22, r24
    2646:	cd 01       	movw	r24, r26
    2648:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    264c:	dc 01       	movw	r26, r24
    264e:	cb 01       	movw	r24, r22
    2650:	9c 8b       	std	Y+20, r25	; 0x14
    2652:	8b 8b       	std	Y+19, r24	; 0x13
    2654:	0f c0       	rjmp	.+30     	; 0x2674 <LCD_VidWrite4Data+0x280>
    2656:	88 ec       	ldi	r24, 0xC8	; 200
    2658:	90 e0       	ldi	r25, 0x00	; 0
    265a:	9a 8b       	std	Y+18, r25	; 0x12
    265c:	89 8b       	std	Y+17, r24	; 0x11
    265e:	89 89       	ldd	r24, Y+17	; 0x11
    2660:	9a 89       	ldd	r25, Y+18	; 0x12
    2662:	01 97       	sbiw	r24, 0x01	; 1
    2664:	f1 f7       	brne	.-4      	; 0x2662 <LCD_VidWrite4Data+0x26e>
    2666:	9a 8b       	std	Y+18, r25	; 0x12
    2668:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    266a:	8b 89       	ldd	r24, Y+19	; 0x13
    266c:	9c 89       	ldd	r25, Y+20	; 0x14
    266e:	01 97       	sbiw	r24, 0x01	; 1
    2670:	9c 8b       	std	Y+20, r25	; 0x14
    2672:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2674:	8b 89       	ldd	r24, Y+19	; 0x13
    2676:	9c 89       	ldd	r25, Y+20	; 0x14
    2678:	00 97       	sbiw	r24, 0x00	; 0
    267a:	69 f7       	brne	.-38     	; 0x2656 <LCD_VidWrite4Data+0x262>
    267c:	14 c0       	rjmp	.+40     	; 0x26a6 <LCD_VidWrite4Data+0x2b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    267e:	6d 89       	ldd	r22, Y+21	; 0x15
    2680:	7e 89       	ldd	r23, Y+22	; 0x16
    2682:	8f 89       	ldd	r24, Y+23	; 0x17
    2684:	98 8d       	ldd	r25, Y+24	; 0x18
    2686:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    268a:	dc 01       	movw	r26, r24
    268c:	cb 01       	movw	r24, r22
    268e:	9c 8b       	std	Y+20, r25	; 0x14
    2690:	8b 8b       	std	Y+19, r24	; 0x13
    2692:	8b 89       	ldd	r24, Y+19	; 0x13
    2694:	9c 89       	ldd	r25, Y+20	; 0x14
    2696:	98 8b       	std	Y+16, r25	; 0x10
    2698:	8f 87       	std	Y+15, r24	; 0x0f
    269a:	8f 85       	ldd	r24, Y+15	; 0x0f
    269c:	98 89       	ldd	r25, Y+16	; 0x10
    269e:	01 97       	sbiw	r24, 0x01	; 1
    26a0:	f1 f7       	brne	.-4      	; 0x269e <LCD_VidWrite4Data+0x2aa>
    26a2:	98 8b       	std	Y+16, r25	; 0x10
    26a4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_VidSetPinValue(LCD_INIT,LCD_EN,0);
    26a6:	80 e0       	ldi	r24, 0x00	; 0
    26a8:	67 e0       	ldi	r22, 0x07	; 7
    26aa:	40 e0       	ldi	r20, 0x00	; 0
    26ac:	0e 94 a4 07 	call	0xf48	; 0xf48 <DIO_VidSetPinValue>
    26b0:	80 e0       	ldi	r24, 0x00	; 0
    26b2:	90 e0       	ldi	r25, 0x00	; 0
    26b4:	a0 e0       	ldi	r26, 0x00	; 0
    26b6:	b0 e4       	ldi	r27, 0x40	; 64
    26b8:	8b 87       	std	Y+11, r24	; 0x0b
    26ba:	9c 87       	std	Y+12, r25	; 0x0c
    26bc:	ad 87       	std	Y+13, r26	; 0x0d
    26be:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    26c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    26c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    26c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    26c8:	20 e0       	ldi	r18, 0x00	; 0
    26ca:	30 e0       	ldi	r19, 0x00	; 0
    26cc:	4a ef       	ldi	r20, 0xFA	; 250
    26ce:	54 e4       	ldi	r21, 0x44	; 68
    26d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26d4:	dc 01       	movw	r26, r24
    26d6:	cb 01       	movw	r24, r22
    26d8:	8f 83       	std	Y+7, r24	; 0x07
    26da:	98 87       	std	Y+8, r25	; 0x08
    26dc:	a9 87       	std	Y+9, r26	; 0x09
    26de:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    26e0:	6f 81       	ldd	r22, Y+7	; 0x07
    26e2:	78 85       	ldd	r23, Y+8	; 0x08
    26e4:	89 85       	ldd	r24, Y+9	; 0x09
    26e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    26e8:	20 e0       	ldi	r18, 0x00	; 0
    26ea:	30 e0       	ldi	r19, 0x00	; 0
    26ec:	40 e8       	ldi	r20, 0x80	; 128
    26ee:	5f e3       	ldi	r21, 0x3F	; 63
    26f0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26f4:	88 23       	and	r24, r24
    26f6:	2c f4       	brge	.+10     	; 0x2702 <LCD_VidWrite4Data+0x30e>
		__ticks = 1;
    26f8:	81 e0       	ldi	r24, 0x01	; 1
    26fa:	90 e0       	ldi	r25, 0x00	; 0
    26fc:	9e 83       	std	Y+6, r25	; 0x06
    26fe:	8d 83       	std	Y+5, r24	; 0x05
    2700:	3f c0       	rjmp	.+126    	; 0x2780 <LCD_VidWrite4Data+0x38c>
	else if (__tmp > 65535)
    2702:	6f 81       	ldd	r22, Y+7	; 0x07
    2704:	78 85       	ldd	r23, Y+8	; 0x08
    2706:	89 85       	ldd	r24, Y+9	; 0x09
    2708:	9a 85       	ldd	r25, Y+10	; 0x0a
    270a:	20 e0       	ldi	r18, 0x00	; 0
    270c:	3f ef       	ldi	r19, 0xFF	; 255
    270e:	4f e7       	ldi	r20, 0x7F	; 127
    2710:	57 e4       	ldi	r21, 0x47	; 71
    2712:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2716:	18 16       	cp	r1, r24
    2718:	4c f5       	brge	.+82     	; 0x276c <LCD_VidWrite4Data+0x378>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    271a:	6b 85       	ldd	r22, Y+11	; 0x0b
    271c:	7c 85       	ldd	r23, Y+12	; 0x0c
    271e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2720:	9e 85       	ldd	r25, Y+14	; 0x0e
    2722:	20 e0       	ldi	r18, 0x00	; 0
    2724:	30 e0       	ldi	r19, 0x00	; 0
    2726:	40 e2       	ldi	r20, 0x20	; 32
    2728:	51 e4       	ldi	r21, 0x41	; 65
    272a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    272e:	dc 01       	movw	r26, r24
    2730:	cb 01       	movw	r24, r22
    2732:	bc 01       	movw	r22, r24
    2734:	cd 01       	movw	r24, r26
    2736:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    273a:	dc 01       	movw	r26, r24
    273c:	cb 01       	movw	r24, r22
    273e:	9e 83       	std	Y+6, r25	; 0x06
    2740:	8d 83       	std	Y+5, r24	; 0x05
    2742:	0f c0       	rjmp	.+30     	; 0x2762 <LCD_VidWrite4Data+0x36e>
    2744:	88 ec       	ldi	r24, 0xC8	; 200
    2746:	90 e0       	ldi	r25, 0x00	; 0
    2748:	9c 83       	std	Y+4, r25	; 0x04
    274a:	8b 83       	std	Y+3, r24	; 0x03
    274c:	8b 81       	ldd	r24, Y+3	; 0x03
    274e:	9c 81       	ldd	r25, Y+4	; 0x04
    2750:	01 97       	sbiw	r24, 0x01	; 1
    2752:	f1 f7       	brne	.-4      	; 0x2750 <LCD_VidWrite4Data+0x35c>
    2754:	9c 83       	std	Y+4, r25	; 0x04
    2756:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2758:	8d 81       	ldd	r24, Y+5	; 0x05
    275a:	9e 81       	ldd	r25, Y+6	; 0x06
    275c:	01 97       	sbiw	r24, 0x01	; 1
    275e:	9e 83       	std	Y+6, r25	; 0x06
    2760:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2762:	8d 81       	ldd	r24, Y+5	; 0x05
    2764:	9e 81       	ldd	r25, Y+6	; 0x06
    2766:	00 97       	sbiw	r24, 0x00	; 0
    2768:	69 f7       	brne	.-38     	; 0x2744 <LCD_VidWrite4Data+0x350>
    276a:	14 c0       	rjmp	.+40     	; 0x2794 <LCD_VidWrite4Data+0x3a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    276c:	6f 81       	ldd	r22, Y+7	; 0x07
    276e:	78 85       	ldd	r23, Y+8	; 0x08
    2770:	89 85       	ldd	r24, Y+9	; 0x09
    2772:	9a 85       	ldd	r25, Y+10	; 0x0a
    2774:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2778:	dc 01       	movw	r26, r24
    277a:	cb 01       	movw	r24, r22
    277c:	9e 83       	std	Y+6, r25	; 0x06
    277e:	8d 83       	std	Y+5, r24	; 0x05
    2780:	8d 81       	ldd	r24, Y+5	; 0x05
    2782:	9e 81       	ldd	r25, Y+6	; 0x06
    2784:	9a 83       	std	Y+2, r25	; 0x02
    2786:	89 83       	std	Y+1, r24	; 0x01
    2788:	89 81       	ldd	r24, Y+1	; 0x01
    278a:	9a 81       	ldd	r25, Y+2	; 0x02
    278c:	01 97       	sbiw	r24, 0x01	; 1
    278e:	f1 f7       	brne	.-4      	; 0x278c <LCD_VidWrite4Data+0x398>
    2790:	9a 83       	std	Y+2, r25	; 0x02
    2792:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(2);

}
    2794:	ab 96       	adiw	r28, 0x2b	; 43
    2796:	0f b6       	in	r0, 0x3f	; 63
    2798:	f8 94       	cli
    279a:	de bf       	out	0x3e, r29	; 62
    279c:	0f be       	out	0x3f, r0	; 63
    279e:	cd bf       	out	0x3d, r28	; 61
    27a0:	cf 91       	pop	r28
    27a2:	df 91       	pop	r29
    27a4:	08 95       	ret

000027a6 <LCD_Write4String>:

void LCD_Write4String(u8* str,u8 row,u8 col)
{
    27a6:	df 93       	push	r29
    27a8:	cf 93       	push	r28
    27aa:	00 d0       	rcall	.+0      	; 0x27ac <LCD_Write4String+0x6>
    27ac:	00 d0       	rcall	.+0      	; 0x27ae <LCD_Write4String+0x8>
    27ae:	00 d0       	rcall	.+0      	; 0x27b0 <LCD_Write4String+0xa>
    27b0:	cd b7       	in	r28, 0x3d	; 61
    27b2:	de b7       	in	r29, 0x3e	; 62
    27b4:	9c 83       	std	Y+4, r25	; 0x04
    27b6:	8b 83       	std	Y+3, r24	; 0x03
    27b8:	6d 83       	std	Y+5, r22	; 0x05
    27ba:	4e 83       	std	Y+6, r20	; 0x06
	LCD_GoToPosition(row,col);
    27bc:	8d 81       	ldd	r24, Y+5	; 0x05
    27be:	6e 81       	ldd	r22, Y+6	; 0x06
    27c0:	0e 94 9b 14 	call	0x2936	; 0x2936 <LCD_GoToPosition>
	u8 index=0;
    27c4:	1a 82       	std	Y+2, r1	; 0x02
	u8 line0=0;
    27c6:	19 82       	std	Y+1, r1	; 0x01
    27c8:	8a c0       	rjmp	.+276    	; 0x28de <LCD_Write4String+0x138>
	while (str[index] !='\0' && ((row*16)+(col+index))<32)
	{
		if (((row*16)+(col+index))<16&&(line0==0))
    27ca:	8d 81       	ldd	r24, Y+5	; 0x05
    27cc:	88 2f       	mov	r24, r24
    27ce:	90 e0       	ldi	r25, 0x00	; 0
    27d0:	ac 01       	movw	r20, r24
    27d2:	42 95       	swap	r20
    27d4:	52 95       	swap	r21
    27d6:	50 7f       	andi	r21, 0xF0	; 240
    27d8:	54 27       	eor	r21, r20
    27da:	40 7f       	andi	r20, 0xF0	; 240
    27dc:	54 27       	eor	r21, r20
    27de:	8e 81       	ldd	r24, Y+6	; 0x06
    27e0:	28 2f       	mov	r18, r24
    27e2:	30 e0       	ldi	r19, 0x00	; 0
    27e4:	8a 81       	ldd	r24, Y+2	; 0x02
    27e6:	88 2f       	mov	r24, r24
    27e8:	90 e0       	ldi	r25, 0x00	; 0
    27ea:	82 0f       	add	r24, r18
    27ec:	93 1f       	adc	r25, r19
    27ee:	84 0f       	add	r24, r20
    27f0:	95 1f       	adc	r25, r21
    27f2:	80 31       	cpi	r24, 0x10	; 16
    27f4:	91 05       	cpc	r25, r1
    27f6:	94 f4       	brge	.+36     	; 0x281c <LCD_Write4String+0x76>
    27f8:	89 81       	ldd	r24, Y+1	; 0x01
    27fa:	88 23       	and	r24, r24
    27fc:	79 f4       	brne	.+30     	; 0x281c <LCD_Write4String+0x76>
		{
			LCD_VidWrite4Data(str[index]);
    27fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2800:	28 2f       	mov	r18, r24
    2802:	30 e0       	ldi	r19, 0x00	; 0
    2804:	8b 81       	ldd	r24, Y+3	; 0x03
    2806:	9c 81       	ldd	r25, Y+4	; 0x04
    2808:	fc 01       	movw	r30, r24
    280a:	e2 0f       	add	r30, r18
    280c:	f3 1f       	adc	r31, r19
    280e:	80 81       	ld	r24, Z
    2810:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <LCD_VidWrite4Data>
			index++;
    2814:	8a 81       	ldd	r24, Y+2	; 0x02
    2816:	8f 5f       	subi	r24, 0xFF	; 255
    2818:	8a 83       	std	Y+2, r24	; 0x02
    281a:	61 c0       	rjmp	.+194    	; 0x28de <LCD_Write4String+0x138>
		}
		else if (((row*16)+(col+index))>=16&& ((row*16)+(col+index))<32 &&(line0==0))
    281c:	8d 81       	ldd	r24, Y+5	; 0x05
    281e:	88 2f       	mov	r24, r24
    2820:	90 e0       	ldi	r25, 0x00	; 0
    2822:	ac 01       	movw	r20, r24
    2824:	42 95       	swap	r20
    2826:	52 95       	swap	r21
    2828:	50 7f       	andi	r21, 0xF0	; 240
    282a:	54 27       	eor	r21, r20
    282c:	40 7f       	andi	r20, 0xF0	; 240
    282e:	54 27       	eor	r21, r20
    2830:	8e 81       	ldd	r24, Y+6	; 0x06
    2832:	28 2f       	mov	r18, r24
    2834:	30 e0       	ldi	r19, 0x00	; 0
    2836:	8a 81       	ldd	r24, Y+2	; 0x02
    2838:	88 2f       	mov	r24, r24
    283a:	90 e0       	ldi	r25, 0x00	; 0
    283c:	82 0f       	add	r24, r18
    283e:	93 1f       	adc	r25, r19
    2840:	84 0f       	add	r24, r20
    2842:	95 1f       	adc	r25, r21
    2844:	80 31       	cpi	r24, 0x10	; 16
    2846:	91 05       	cpc	r25, r1
    2848:	14 f1       	brlt	.+68     	; 0x288e <LCD_Write4String+0xe8>
    284a:	8d 81       	ldd	r24, Y+5	; 0x05
    284c:	88 2f       	mov	r24, r24
    284e:	90 e0       	ldi	r25, 0x00	; 0
    2850:	ac 01       	movw	r20, r24
    2852:	42 95       	swap	r20
    2854:	52 95       	swap	r21
    2856:	50 7f       	andi	r21, 0xF0	; 240
    2858:	54 27       	eor	r21, r20
    285a:	40 7f       	andi	r20, 0xF0	; 240
    285c:	54 27       	eor	r21, r20
    285e:	8e 81       	ldd	r24, Y+6	; 0x06
    2860:	28 2f       	mov	r18, r24
    2862:	30 e0       	ldi	r19, 0x00	; 0
    2864:	8a 81       	ldd	r24, Y+2	; 0x02
    2866:	88 2f       	mov	r24, r24
    2868:	90 e0       	ldi	r25, 0x00	; 0
    286a:	82 0f       	add	r24, r18
    286c:	93 1f       	adc	r25, r19
    286e:	84 0f       	add	r24, r20
    2870:	95 1f       	adc	r25, r21
    2872:	80 32       	cpi	r24, 0x20	; 32
    2874:	91 05       	cpc	r25, r1
    2876:	5c f4       	brge	.+22     	; 0x288e <LCD_Write4String+0xe8>
    2878:	89 81       	ldd	r24, Y+1	; 0x01
    287a:	88 23       	and	r24, r24
    287c:	41 f4       	brne	.+16     	; 0x288e <LCD_Write4String+0xe8>
		{
			LCD_GoToPosition(1,col);
    287e:	81 e0       	ldi	r24, 0x01	; 1
    2880:	6e 81       	ldd	r22, Y+6	; 0x06
    2882:	0e 94 9b 14 	call	0x2936	; 0x2936 <LCD_GoToPosition>
			line0++;
    2886:	89 81       	ldd	r24, Y+1	; 0x01
    2888:	8f 5f       	subi	r24, 0xFF	; 255
    288a:	89 83       	std	Y+1, r24	; 0x01
    288c:	28 c0       	rjmp	.+80     	; 0x28de <LCD_Write4String+0x138>
		}
		else if (((row*16)+(col+index))<32&&(line0==1))
    288e:	8d 81       	ldd	r24, Y+5	; 0x05
    2890:	88 2f       	mov	r24, r24
    2892:	90 e0       	ldi	r25, 0x00	; 0
    2894:	ac 01       	movw	r20, r24
    2896:	42 95       	swap	r20
    2898:	52 95       	swap	r21
    289a:	50 7f       	andi	r21, 0xF0	; 240
    289c:	54 27       	eor	r21, r20
    289e:	40 7f       	andi	r20, 0xF0	; 240
    28a0:	54 27       	eor	r21, r20
    28a2:	8e 81       	ldd	r24, Y+6	; 0x06
    28a4:	28 2f       	mov	r18, r24
    28a6:	30 e0       	ldi	r19, 0x00	; 0
    28a8:	8a 81       	ldd	r24, Y+2	; 0x02
    28aa:	88 2f       	mov	r24, r24
    28ac:	90 e0       	ldi	r25, 0x00	; 0
    28ae:	82 0f       	add	r24, r18
    28b0:	93 1f       	adc	r25, r19
    28b2:	84 0f       	add	r24, r20
    28b4:	95 1f       	adc	r25, r21
    28b6:	80 32       	cpi	r24, 0x20	; 32
    28b8:	91 05       	cpc	r25, r1
    28ba:	8c f4       	brge	.+34     	; 0x28de <LCD_Write4String+0x138>
    28bc:	89 81       	ldd	r24, Y+1	; 0x01
    28be:	81 30       	cpi	r24, 0x01	; 1
    28c0:	71 f4       	brne	.+28     	; 0x28de <LCD_Write4String+0x138>
		{
			LCD_VidWrite4Data(str[index]);
    28c2:	8a 81       	ldd	r24, Y+2	; 0x02
    28c4:	28 2f       	mov	r18, r24
    28c6:	30 e0       	ldi	r19, 0x00	; 0
    28c8:	8b 81       	ldd	r24, Y+3	; 0x03
    28ca:	9c 81       	ldd	r25, Y+4	; 0x04
    28cc:	fc 01       	movw	r30, r24
    28ce:	e2 0f       	add	r30, r18
    28d0:	f3 1f       	adc	r31, r19
    28d2:	80 81       	ld	r24, Z
    28d4:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <LCD_VidWrite4Data>
			index++;
    28d8:	8a 81       	ldd	r24, Y+2	; 0x02
    28da:	8f 5f       	subi	r24, 0xFF	; 255
    28dc:	8a 83       	std	Y+2, r24	; 0x02
void LCD_Write4String(u8* str,u8 row,u8 col)
{
	LCD_GoToPosition(row,col);
	u8 index=0;
	u8 line0=0;
	while (str[index] !='\0' && ((row*16)+(col+index))<32)
    28de:	8a 81       	ldd	r24, Y+2	; 0x02
    28e0:	28 2f       	mov	r18, r24
    28e2:	30 e0       	ldi	r19, 0x00	; 0
    28e4:	8b 81       	ldd	r24, Y+3	; 0x03
    28e6:	9c 81       	ldd	r25, Y+4	; 0x04
    28e8:	fc 01       	movw	r30, r24
    28ea:	e2 0f       	add	r30, r18
    28ec:	f3 1f       	adc	r31, r19
    28ee:	80 81       	ld	r24, Z
    28f0:	88 23       	and	r24, r24
    28f2:	c1 f0       	breq	.+48     	; 0x2924 <LCD_Write4String+0x17e>
    28f4:	8d 81       	ldd	r24, Y+5	; 0x05
    28f6:	88 2f       	mov	r24, r24
    28f8:	90 e0       	ldi	r25, 0x00	; 0
    28fa:	ac 01       	movw	r20, r24
    28fc:	42 95       	swap	r20
    28fe:	52 95       	swap	r21
    2900:	50 7f       	andi	r21, 0xF0	; 240
    2902:	54 27       	eor	r21, r20
    2904:	40 7f       	andi	r20, 0xF0	; 240
    2906:	54 27       	eor	r21, r20
    2908:	8e 81       	ldd	r24, Y+6	; 0x06
    290a:	28 2f       	mov	r18, r24
    290c:	30 e0       	ldi	r19, 0x00	; 0
    290e:	8a 81       	ldd	r24, Y+2	; 0x02
    2910:	88 2f       	mov	r24, r24
    2912:	90 e0       	ldi	r25, 0x00	; 0
    2914:	82 0f       	add	r24, r18
    2916:	93 1f       	adc	r25, r19
    2918:	84 0f       	add	r24, r20
    291a:	95 1f       	adc	r25, r21
    291c:	80 32       	cpi	r24, 0x20	; 32
    291e:	91 05       	cpc	r25, r1
    2920:	0c f4       	brge	.+2      	; 0x2924 <LCD_Write4String+0x17e>
    2922:	53 cf       	rjmp	.-346    	; 0x27ca <LCD_Write4String+0x24>
		{
			LCD_VidWrite4Data(str[index]);
			index++;
		}
	}
}
    2924:	26 96       	adiw	r28, 0x06	; 6
    2926:	0f b6       	in	r0, 0x3f	; 63
    2928:	f8 94       	cli
    292a:	de bf       	out	0x3e, r29	; 62
    292c:	0f be       	out	0x3f, r0	; 63
    292e:	cd bf       	out	0x3d, r28	; 61
    2930:	cf 91       	pop	r28
    2932:	df 91       	pop	r29
    2934:	08 95       	ret

00002936 <LCD_GoToPosition>:

void LCD_GoToPosition(u8 row,u8 col)
{
    2936:	df 93       	push	r29
    2938:	cf 93       	push	r28
    293a:	00 d0       	rcall	.+0      	; 0x293c <LCD_GoToPosition+0x6>
    293c:	0f 92       	push	r0
    293e:	cd b7       	in	r28, 0x3d	; 61
    2940:	de b7       	in	r29, 0x3e	; 62
    2942:	8a 83       	std	Y+2, r24	; 0x02
    2944:	6b 83       	std	Y+3, r22	; 0x03
	u8 adress;
	adress= (row*0x40)+col;
    2946:	8a 81       	ldd	r24, Y+2	; 0x02
    2948:	88 2f       	mov	r24, r24
    294a:	90 e0       	ldi	r25, 0x00	; 0
    294c:	00 24       	eor	r0, r0
    294e:	96 95       	lsr	r25
    2950:	87 95       	ror	r24
    2952:	07 94       	ror	r0
    2954:	96 95       	lsr	r25
    2956:	87 95       	ror	r24
    2958:	07 94       	ror	r0
    295a:	98 2f       	mov	r25, r24
    295c:	80 2d       	mov	r24, r0
    295e:	98 2f       	mov	r25, r24
    2960:	8b 81       	ldd	r24, Y+3	; 0x03
    2962:	89 0f       	add	r24, r25
    2964:	89 83       	std	Y+1, r24	; 0x01
	adress = SET_BIT(adress,7);
    2966:	89 81       	ldd	r24, Y+1	; 0x01
    2968:	80 68       	ori	r24, 0x80	; 128
    296a:	89 83       	std	Y+1, r24	; 0x01
	LCD_VidWrite4Cmd(adress);
    296c:	89 81       	ldd	r24, Y+1	; 0x01
    296e:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <LCD_VidWrite4Cmd>
}
    2972:	0f 90       	pop	r0
    2974:	0f 90       	pop	r0
    2976:	0f 90       	pop	r0
    2978:	cf 91       	pop	r28
    297a:	df 91       	pop	r29
    297c:	08 95       	ret

0000297e <LCD_VidDisp4Number>:

void LCD_VidDisp4Number(u32 number)
{
    297e:	df 93       	push	r29
    2980:	cf 93       	push	r28
    2982:	cd b7       	in	r28, 0x3d	; 61
    2984:	de b7       	in	r29, 0x3e	; 62
    2986:	68 97       	sbiw	r28, 0x18	; 24
    2988:	0f b6       	in	r0, 0x3f	; 63
    298a:	f8 94       	cli
    298c:	de bf       	out	0x3e, r29	; 62
    298e:	0f be       	out	0x3f, r0	; 63
    2990:	cd bf       	out	0x3d, r28	; 61
    2992:	6d 8b       	std	Y+21, r22	; 0x15
    2994:	7e 8b       	std	Y+22, r23	; 0x16
    2996:	8f 8b       	std	Y+23, r24	; 0x17
    2998:	98 8f       	std	Y+24, r25	; 0x18

	u32 digit=0;
    299a:	1f 82       	std	Y+7, r1	; 0x07
    299c:	18 86       	std	Y+8, r1	; 0x08
    299e:	19 86       	std	Y+9, r1	; 0x09
    29a0:	1a 86       	std	Y+10, r1	; 0x0a
	u16 i=0;
    29a2:	1e 82       	std	Y+6, r1	; 0x06
    29a4:	1d 82       	std	Y+5, r1	; 0x05
	u32 f=0;
    29a6:	19 82       	std	Y+1, r1	; 0x01
    29a8:	1a 82       	std	Y+2, r1	; 0x02
    29aa:	1b 82       	std	Y+3, r1	; 0x03
    29ac:	1c 82       	std	Y+4, r1	; 0x04
    29ae:	45 c0       	rjmp	.+138    	; 0x2a3a <LCD_VidDisp4Number+0xbc>
	u8 number_holder[10];

	while(number>0)
	{
		f=number%10;
    29b0:	8d 89       	ldd	r24, Y+21	; 0x15
    29b2:	9e 89       	ldd	r25, Y+22	; 0x16
    29b4:	af 89       	ldd	r26, Y+23	; 0x17
    29b6:	b8 8d       	ldd	r27, Y+24	; 0x18
    29b8:	2a e0       	ldi	r18, 0x0A	; 10
    29ba:	30 e0       	ldi	r19, 0x00	; 0
    29bc:	40 e0       	ldi	r20, 0x00	; 0
    29be:	50 e0       	ldi	r21, 0x00	; 0
    29c0:	bc 01       	movw	r22, r24
    29c2:	cd 01       	movw	r24, r26
    29c4:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <__udivmodsi4>
    29c8:	dc 01       	movw	r26, r24
    29ca:	cb 01       	movw	r24, r22
    29cc:	89 83       	std	Y+1, r24	; 0x01
    29ce:	9a 83       	std	Y+2, r25	; 0x02
    29d0:	ab 83       	std	Y+3, r26	; 0x03
    29d2:	bc 83       	std	Y+4, r27	; 0x04
		number_holder[i]=f;
    29d4:	2d 81       	ldd	r18, Y+5	; 0x05
    29d6:	3e 81       	ldd	r19, Y+6	; 0x06
    29d8:	49 81       	ldd	r20, Y+1	; 0x01
    29da:	ce 01       	movw	r24, r28
    29dc:	0b 96       	adiw	r24, 0x0b	; 11
    29de:	fc 01       	movw	r30, r24
    29e0:	e2 0f       	add	r30, r18
    29e2:	f3 1f       	adc	r31, r19
    29e4:	40 83       	st	Z, r20
		number=number/10;
    29e6:	8d 89       	ldd	r24, Y+21	; 0x15
    29e8:	9e 89       	ldd	r25, Y+22	; 0x16
    29ea:	af 89       	ldd	r26, Y+23	; 0x17
    29ec:	b8 8d       	ldd	r27, Y+24	; 0x18
    29ee:	2a e0       	ldi	r18, 0x0A	; 10
    29f0:	30 e0       	ldi	r19, 0x00	; 0
    29f2:	40 e0       	ldi	r20, 0x00	; 0
    29f4:	50 e0       	ldi	r21, 0x00	; 0
    29f6:	bc 01       	movw	r22, r24
    29f8:	cd 01       	movw	r24, r26
    29fa:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <__udivmodsi4>
    29fe:	da 01       	movw	r26, r20
    2a00:	c9 01       	movw	r24, r18
    2a02:	8d 8b       	std	Y+21, r24	; 0x15
    2a04:	9e 8b       	std	Y+22, r25	; 0x16
    2a06:	af 8b       	std	Y+23, r26	; 0x17
    2a08:	b8 8f       	std	Y+24, r27	; 0x18
		i++;
    2a0a:	8d 81       	ldd	r24, Y+5	; 0x05
    2a0c:	9e 81       	ldd	r25, Y+6	; 0x06
    2a0e:	01 96       	adiw	r24, 0x01	; 1
    2a10:	9e 83       	std	Y+6, r25	; 0x06
    2a12:	8d 83       	std	Y+5, r24	; 0x05
		digit++;
    2a14:	8f 81       	ldd	r24, Y+7	; 0x07
    2a16:	98 85       	ldd	r25, Y+8	; 0x08
    2a18:	a9 85       	ldd	r26, Y+9	; 0x09
    2a1a:	ba 85       	ldd	r27, Y+10	; 0x0a
    2a1c:	01 96       	adiw	r24, 0x01	; 1
    2a1e:	a1 1d       	adc	r26, r1
    2a20:	b1 1d       	adc	r27, r1
    2a22:	8f 83       	std	Y+7, r24	; 0x07
    2a24:	98 87       	std	Y+8, r25	; 0x08
    2a26:	a9 87       	std	Y+9, r26	; 0x09
    2a28:	ba 87       	std	Y+10, r27	; 0x0a
		if(number==0)
    2a2a:	8d 89       	ldd	r24, Y+21	; 0x15
    2a2c:	9e 89       	ldd	r25, Y+22	; 0x16
    2a2e:	af 89       	ldd	r26, Y+23	; 0x17
    2a30:	b8 8d       	ldd	r27, Y+24	; 0x18
    2a32:	00 97       	sbiw	r24, 0x00	; 0
    2a34:	a1 05       	cpc	r26, r1
    2a36:	b1 05       	cpc	r27, r1
    2a38:	49 f0       	breq	.+18     	; 0x2a4c <LCD_VidDisp4Number+0xce>
	u32 digit=0;
	u16 i=0;
	u32 f=0;
	u8 number_holder[10];

	while(number>0)
    2a3a:	8d 89       	ldd	r24, Y+21	; 0x15
    2a3c:	9e 89       	ldd	r25, Y+22	; 0x16
    2a3e:	af 89       	ldd	r26, Y+23	; 0x17
    2a40:	b8 8d       	ldd	r27, Y+24	; 0x18
    2a42:	00 97       	sbiw	r24, 0x00	; 0
    2a44:	a1 05       	cpc	r26, r1
    2a46:	b1 05       	cpc	r27, r1
    2a48:	09 f0       	breq	.+2      	; 0x2a4c <LCD_VidDisp4Number+0xce>
    2a4a:	b2 cf       	rjmp	.-156    	; 0x29b0 <LCD_VidDisp4Number+0x32>
		i++;
		digit++;
		if(number==0)
		{break;}
	}
	for(i=digit;i>0;i--)
    2a4c:	8f 81       	ldd	r24, Y+7	; 0x07
    2a4e:	98 85       	ldd	r25, Y+8	; 0x08
    2a50:	9e 83       	std	Y+6, r25	; 0x06
    2a52:	8d 83       	std	Y+5, r24	; 0x05
    2a54:	13 c0       	rjmp	.+38     	; 0x2a7c <LCD_VidDisp4Number+0xfe>
	{
		LCD_VidWrite4Data(number_holder[i-1]+48);
    2a56:	8d 81       	ldd	r24, Y+5	; 0x05
    2a58:	9e 81       	ldd	r25, Y+6	; 0x06
    2a5a:	9c 01       	movw	r18, r24
    2a5c:	21 50       	subi	r18, 0x01	; 1
    2a5e:	30 40       	sbci	r19, 0x00	; 0
    2a60:	ce 01       	movw	r24, r28
    2a62:	0b 96       	adiw	r24, 0x0b	; 11
    2a64:	fc 01       	movw	r30, r24
    2a66:	e2 0f       	add	r30, r18
    2a68:	f3 1f       	adc	r31, r19
    2a6a:	80 81       	ld	r24, Z
    2a6c:	80 5d       	subi	r24, 0xD0	; 208
    2a6e:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <LCD_VidWrite4Data>
		i++;
		digit++;
		if(number==0)
		{break;}
	}
	for(i=digit;i>0;i--)
    2a72:	8d 81       	ldd	r24, Y+5	; 0x05
    2a74:	9e 81       	ldd	r25, Y+6	; 0x06
    2a76:	01 97       	sbiw	r24, 0x01	; 1
    2a78:	9e 83       	std	Y+6, r25	; 0x06
    2a7a:	8d 83       	std	Y+5, r24	; 0x05
    2a7c:	8d 81       	ldd	r24, Y+5	; 0x05
    2a7e:	9e 81       	ldd	r25, Y+6	; 0x06
    2a80:	00 97       	sbiw	r24, 0x00	; 0
    2a82:	49 f7       	brne	.-46     	; 0x2a56 <LCD_VidDisp4Number+0xd8>
	{
		LCD_VidWrite4Data(number_holder[i-1]+48);
	}

}
    2a84:	68 96       	adiw	r28, 0x18	; 24
    2a86:	0f b6       	in	r0, 0x3f	; 63
    2a88:	f8 94       	cli
    2a8a:	de bf       	out	0x3e, r29	; 62
    2a8c:	0f be       	out	0x3f, r0	; 63
    2a8e:	cd bf       	out	0x3d, r28	; 61
    2a90:	cf 91       	pop	r28
    2a92:	df 91       	pop	r29
    2a94:	08 95       	ret

00002a96 <LCD_VidGoto4CGRAM>:

void LCD_VidGoto4CGRAM()
{
    2a96:	df 93       	push	r29
    2a98:	cf 93       	push	r28
    2a9a:	cd b7       	in	r28, 0x3d	; 61
    2a9c:	de b7       	in	r29, 0x3e	; 62
	LCD_VidWrite4Cmd(SET_CGRAM_ADDRESS);
    2a9e:	80 e4       	ldi	r24, 0x40	; 64
    2aa0:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <LCD_VidWrite4Cmd>
}
    2aa4:	cf 91       	pop	r28
    2aa6:	df 91       	pop	r29
    2aa8:	08 95       	ret

00002aaa <LCD_StoreCustomChr>:

void LCD_StoreCustomChr(u8* LOC_pattern, u8 LOC_CGRAM_Index)
{
    2aaa:	df 93       	push	r29
    2aac:	cf 93       	push	r28
    2aae:	00 d0       	rcall	.+0      	; 0x2ab0 <LCD_StoreCustomChr+0x6>
    2ab0:	00 d0       	rcall	.+0      	; 0x2ab2 <LCD_StoreCustomChr+0x8>
    2ab2:	0f 92       	push	r0
    2ab4:	cd b7       	in	r28, 0x3d	; 61
    2ab6:	de b7       	in	r29, 0x3e	; 62
    2ab8:	9c 83       	std	Y+4, r25	; 0x04
    2aba:	8b 83       	std	Y+3, r24	; 0x03
    2abc:	6d 83       	std	Y+5, r22	; 0x05
	u8 LOC_Adress;
	u8 LOC_Adress_Index;
	if(LOC_CGRAM_Index < 8)
    2abe:	8d 81       	ldd	r24, Y+5	; 0x05
    2ac0:	88 30       	cpi	r24, 0x08	; 8
    2ac2:	18 f5       	brcc	.+70     	; 0x2b0a <LCD_StoreCustomChr+0x60>
	{
		LOC_Adress = LOC_CGRAM_Index *8;
    2ac4:	8d 81       	ldd	r24, Y+5	; 0x05
    2ac6:	88 2f       	mov	r24, r24
    2ac8:	90 e0       	ldi	r25, 0x00	; 0
    2aca:	88 0f       	add	r24, r24
    2acc:	99 1f       	adc	r25, r25
    2ace:	88 0f       	add	r24, r24
    2ad0:	99 1f       	adc	r25, r25
    2ad2:	88 0f       	add	r24, r24
    2ad4:	99 1f       	adc	r25, r25
    2ad6:	8a 83       	std	Y+2, r24	; 0x02
		LOC_Adress = SET_BIT(LOC_Adress,6);
    2ad8:	8a 81       	ldd	r24, Y+2	; 0x02
    2ada:	80 64       	ori	r24, 0x40	; 64
    2adc:	8a 83       	std	Y+2, r24	; 0x02
		LCD_VidWrite4Cmd(LOC_Adress);
    2ade:	8a 81       	ldd	r24, Y+2	; 0x02
    2ae0:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <LCD_VidWrite4Cmd>
		for(LOC_Adress_Index=0;LOC_Adress_Index<8;LOC_Adress_Index++)
    2ae4:	19 82       	std	Y+1, r1	; 0x01
    2ae6:	0e c0       	rjmp	.+28     	; 0x2b04 <LCD_StoreCustomChr+0x5a>
		{
			LCD_VidWrite4Data(LOC_pattern[LOC_Adress_Index]);
    2ae8:	89 81       	ldd	r24, Y+1	; 0x01
    2aea:	28 2f       	mov	r18, r24
    2aec:	30 e0       	ldi	r19, 0x00	; 0
    2aee:	8b 81       	ldd	r24, Y+3	; 0x03
    2af0:	9c 81       	ldd	r25, Y+4	; 0x04
    2af2:	fc 01       	movw	r30, r24
    2af4:	e2 0f       	add	r30, r18
    2af6:	f3 1f       	adc	r31, r19
    2af8:	80 81       	ld	r24, Z
    2afa:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <LCD_VidWrite4Data>
	if(LOC_CGRAM_Index < 8)
	{
		LOC_Adress = LOC_CGRAM_Index *8;
		LOC_Adress = SET_BIT(LOC_Adress,6);
		LCD_VidWrite4Cmd(LOC_Adress);
		for(LOC_Adress_Index=0;LOC_Adress_Index<8;LOC_Adress_Index++)
    2afe:	89 81       	ldd	r24, Y+1	; 0x01
    2b00:	8f 5f       	subi	r24, 0xFF	; 255
    2b02:	89 83       	std	Y+1, r24	; 0x01
    2b04:	89 81       	ldd	r24, Y+1	; 0x01
    2b06:	88 30       	cpi	r24, 0x08	; 8
    2b08:	78 f3       	brcs	.-34     	; 0x2ae8 <LCD_StoreCustomChr+0x3e>
		{
			LCD_VidWrite4Data(LOC_pattern[LOC_Adress_Index]);
		}
	}
	LCD_VidWrite4Cmd(RETURN_HOME);
    2b0a:	82 e0       	ldi	r24, 0x02	; 2
    2b0c:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <LCD_VidWrite4Cmd>
}
    2b10:	0f 90       	pop	r0
    2b12:	0f 90       	pop	r0
    2b14:	0f 90       	pop	r0
    2b16:	0f 90       	pop	r0
    2b18:	0f 90       	pop	r0
    2b1a:	cf 91       	pop	r28
    2b1c:	df 91       	pop	r29
    2b1e:	08 95       	ret

00002b20 <LCD_Disply>:

void LCD_Disply(u8 LOC_CGRAM_Index,u8 LOC_row,u8 LOC_col)
{
    2b20:	df 93       	push	r29
    2b22:	cf 93       	push	r28
    2b24:	00 d0       	rcall	.+0      	; 0x2b26 <LCD_Disply+0x6>
    2b26:	0f 92       	push	r0
    2b28:	cd b7       	in	r28, 0x3d	; 61
    2b2a:	de b7       	in	r29, 0x3e	; 62
    2b2c:	89 83       	std	Y+1, r24	; 0x01
    2b2e:	6a 83       	std	Y+2, r22	; 0x02
    2b30:	4b 83       	std	Y+3, r20	; 0x03
	LCD_GoToPosition(LOC_row,LOC_col);
    2b32:	8a 81       	ldd	r24, Y+2	; 0x02
    2b34:	6b 81       	ldd	r22, Y+3	; 0x03
    2b36:	0e 94 9b 14 	call	0x2936	; 0x2936 <LCD_GoToPosition>

	LCD_VidWrite4Data(LOC_CGRAM_Index);
    2b3a:	89 81       	ldd	r24, Y+1	; 0x01
    2b3c:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <LCD_VidWrite4Data>
}
    2b40:	0f 90       	pop	r0
    2b42:	0f 90       	pop	r0
    2b44:	0f 90       	pop	r0
    2b46:	cf 91       	pop	r28
    2b48:	df 91       	pop	r29
    2b4a:	08 95       	ret

00002b4c <LCD_clearpostion>:


void LCD_clearpostion(void)
{
    2b4c:	df 93       	push	r29
    2b4e:	cf 93       	push	r28
    2b50:	cd b7       	in	r28, 0x3d	; 61
    2b52:	de b7       	in	r29, 0x3e	; 62
	LCD_VidGoto4CGRAM();
    2b54:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <LCD_VidGoto4CGRAM>

	LCD_VidWrite4Data(0x00);
    2b58:	80 e0       	ldi	r24, 0x00	; 0
    2b5a:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <LCD_VidWrite4Data>
	LCD_VidWrite4Data(0x00);
    2b5e:	80 e0       	ldi	r24, 0x00	; 0
    2b60:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <LCD_VidWrite4Data>
	LCD_VidWrite4Data(0x00);
    2b64:	80 e0       	ldi	r24, 0x00	; 0
    2b66:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <LCD_VidWrite4Data>
	LCD_VidWrite4Data(0x00);
    2b6a:	80 e0       	ldi	r24, 0x00	; 0
    2b6c:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <LCD_VidWrite4Data>
	LCD_VidWrite4Data(0x00);
    2b70:	80 e0       	ldi	r24, 0x00	; 0
    2b72:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <LCD_VidWrite4Data>
	LCD_VidWrite4Data(0x00);
    2b76:	80 e0       	ldi	r24, 0x00	; 0
    2b78:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <LCD_VidWrite4Data>
	LCD_VidWrite4Data(0x00);
    2b7c:	80 e0       	ldi	r24, 0x00	; 0
    2b7e:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <LCD_VidWrite4Data>
	LCD_VidWrite4Data(0x00);
    2b82:	80 e0       	ldi	r24, 0x00	; 0
    2b84:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <LCD_VidWrite4Data>
}
    2b88:	cf 91       	pop	r28
    2b8a:	df 91       	pop	r29
    2b8c:	08 95       	ret

00002b8e <TIMER_VidSetCallBack>:
#include "DIO_Interface.h"

static void  (*CallBackFuncPtr)(void)= NULL;

void  TIMER_VidSetCallBack (void (*LOC_funcptr)(void) )
{
    2b8e:	df 93       	push	r29
    2b90:	cf 93       	push	r28
    2b92:	00 d0       	rcall	.+0      	; 0x2b94 <TIMER_VidSetCallBack+0x6>
    2b94:	cd b7       	in	r28, 0x3d	; 61
    2b96:	de b7       	in	r29, 0x3e	; 62
    2b98:	9a 83       	std	Y+2, r25	; 0x02
    2b9a:	89 83       	std	Y+1, r24	; 0x01
	if(LOC_funcptr  != NULL )
    2b9c:	89 81       	ldd	r24, Y+1	; 0x01
    2b9e:	9a 81       	ldd	r25, Y+2	; 0x02
    2ba0:	00 97       	sbiw	r24, 0x00	; 0
    2ba2:	31 f0       	breq	.+12     	; 0x2bb0 <TIMER_VidSetCallBack+0x22>
	{
		CallBackFuncPtr = LOC_funcptr ;
    2ba4:	89 81       	ldd	r24, Y+1	; 0x01
    2ba6:	9a 81       	ldd	r25, Y+2	; 0x02
    2ba8:	90 93 4c 01 	sts	0x014C, r25
    2bac:	80 93 4b 01 	sts	0x014B, r24
	}
}
    2bb0:	0f 90       	pop	r0
    2bb2:	0f 90       	pop	r0
    2bb4:	cf 91       	pop	r28
    2bb6:	df 91       	pop	r29
    2bb8:	08 95       	ret

00002bba <TIMER_VidEnable>:

void TIMER_VidEnable(void)
{
    2bba:	df 93       	push	r29
    2bbc:	cf 93       	push	r28
    2bbe:	cd b7       	in	r28, 0x3d	; 61
    2bc0:	de b7       	in	r29, 0x3e	; 62
	//SELECT MODE
#if	type_of__mode== Normal_mode
	CLR_BIT(TCCR0,WGM00);
    2bc2:	a3 e5       	ldi	r26, 0x53	; 83
    2bc4:	b0 e0       	ldi	r27, 0x00	; 0
    2bc6:	e3 e5       	ldi	r30, 0x53	; 83
    2bc8:	f0 e0       	ldi	r31, 0x00	; 0
    2bca:	80 81       	ld	r24, Z
    2bcc:	8f 7b       	andi	r24, 0xBF	; 191
    2bce:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,WGM01);
    2bd0:	a3 e5       	ldi	r26, 0x53	; 83
    2bd2:	b0 e0       	ldi	r27, 0x00	; 0
    2bd4:	e3 e5       	ldi	r30, 0x53	; 83
    2bd6:	f0 e0       	ldi	r31, 0x00	; 0
    2bd8:	80 81       	ld	r24, Z
    2bda:	87 7f       	andi	r24, 0xF7	; 247
    2bdc:	8c 93       	st	X, r24
#elif prescaler_mode== prescaler_64
		SET_BIT(TCCR0,CS00);
		SET_BIT(TCCR0,CS01);
		CLR_BIT(TCCR0,CS02);
#elif prescaler_mode== prescaler_256
	CLR_BIT(TCCR0,CS00);
    2bde:	a3 e5       	ldi	r26, 0x53	; 83
    2be0:	b0 e0       	ldi	r27, 0x00	; 0
    2be2:	e3 e5       	ldi	r30, 0x53	; 83
    2be4:	f0 e0       	ldi	r31, 0x00	; 0
    2be6:	80 81       	ld	r24, Z
    2be8:	8e 7f       	andi	r24, 0xFE	; 254
    2bea:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,CS01);
    2bec:	a3 e5       	ldi	r26, 0x53	; 83
    2bee:	b0 e0       	ldi	r27, 0x00	; 0
    2bf0:	e3 e5       	ldi	r30, 0x53	; 83
    2bf2:	f0 e0       	ldi	r31, 0x00	; 0
    2bf4:	80 81       	ld	r24, Z
    2bf6:	8d 7f       	andi	r24, 0xFD	; 253
    2bf8:	8c 93       	st	X, r24
	SET_BIT(TCCR0,CS02);
    2bfa:	a3 e5       	ldi	r26, 0x53	; 83
    2bfc:	b0 e0       	ldi	r27, 0x00	; 0
    2bfe:	e3 e5       	ldi	r30, 0x53	; 83
    2c00:	f0 e0       	ldi	r31, 0x00	; 0
    2c02:	80 81       	ld	r24, Z
    2c04:	84 60       	ori	r24, 0x04	; 4
    2c06:	8c 93       	st	X, r24
	#error  "wrong choice"
#endif

	//ENABLE INTRRUPT OVERFLOW
#if	interrupt_overflow_enabled== enable
		SET_BIT(TIMSK,TOIEO);
    2c08:	a9 e5       	ldi	r26, 0x59	; 89
    2c0a:	b0 e0       	ldi	r27, 0x00	; 0
    2c0c:	e9 e5       	ldi	r30, 0x59	; 89
    2c0e:	f0 e0       	ldi	r31, 0x00	; 0
    2c10:	80 81       	ld	r24, Z
    2c12:	81 60       	ori	r24, 0x01	; 1
    2c14:	8c 93       	st	X, r24
#endif

#if	interrupt_Compare_Match_enabled== enable
		SET_BIT(TIMSK,OCIE0);
#elif interrupt_Compare_Match_enabled== disable
		CLR_BIT(TIMSK,OCIE0);
    2c16:	a9 e5       	ldi	r26, 0x59	; 89
    2c18:	b0 e0       	ldi	r27, 0x00	; 0
    2c1a:	e9 e5       	ldi	r30, 0x59	; 89
    2c1c:	f0 e0       	ldi	r31, 0x00	; 0
    2c1e:	80 81       	ld	r24, Z
    2c20:	8d 7f       	andi	r24, 0xFD	; 253
    2c22:	8c 93       	st	X, r24
	#error  "wrong choice"
#endif



	TCNT0=238;
    2c24:	e2 e5       	ldi	r30, 0x52	; 82
    2c26:	f0 e0       	ldi	r31, 0x00	; 0
    2c28:	8e ee       	ldi	r24, 0xEE	; 238
    2c2a:	80 83       	st	Z, r24
}
    2c2c:	cf 91       	pop	r28
    2c2e:	df 91       	pop	r29
    2c30:	08 95       	ret

00002c32 <Tim_Count0_VidCounterReg>:
void Tim_Count0_VidCounterReg(u8 Loc_u8TCNTvalue)
{
    2c32:	df 93       	push	r29
    2c34:	cf 93       	push	r28
    2c36:	0f 92       	push	r0
    2c38:	cd b7       	in	r28, 0x3d	; 61
    2c3a:	de b7       	in	r29, 0x3e	; 62
    2c3c:	89 83       	std	Y+1, r24	; 0x01
	TCNT0=Loc_u8TCNTvalue;
    2c3e:	e2 e5       	ldi	r30, 0x52	; 82
    2c40:	f0 e0       	ldi	r31, 0x00	; 0
    2c42:	89 81       	ldd	r24, Y+1	; 0x01
    2c44:	80 83       	st	Z, r24
}
    2c46:	0f 90       	pop	r0
    2c48:	cf 91       	pop	r28
    2c4a:	df 91       	pop	r29
    2c4c:	08 95       	ret

00002c4e <Tim_Count0_VidCompareReg>:
void Tim_Count0_VidCompareReg(u8 Loc_u8OCRvalue)
{
    2c4e:	df 93       	push	r29
    2c50:	cf 93       	push	r28
    2c52:	0f 92       	push	r0
    2c54:	cd b7       	in	r28, 0x3d	; 61
    2c56:	de b7       	in	r29, 0x3e	; 62
    2c58:	89 83       	std	Y+1, r24	; 0x01
	OCR0=Loc_u8OCRvalue;
    2c5a:	ec e5       	ldi	r30, 0x5C	; 92
    2c5c:	f0 e0       	ldi	r31, 0x00	; 0
    2c5e:	89 81       	ldd	r24, Y+1	; 0x01
    2c60:	80 83       	st	Z, r24
}
    2c62:	0f 90       	pop	r0
    2c64:	cf 91       	pop	r28
    2c66:	df 91       	pop	r29
    2c68:	08 95       	ret

00002c6a <__vector_11>:

ISR(TIMER_VECT)
{
    2c6a:	1f 92       	push	r1
    2c6c:	0f 92       	push	r0
    2c6e:	0f b6       	in	r0, 0x3f	; 63
    2c70:	0f 92       	push	r0
    2c72:	11 24       	eor	r1, r1
    2c74:	2f 93       	push	r18
    2c76:	3f 93       	push	r19
    2c78:	4f 93       	push	r20
    2c7a:	5f 93       	push	r21
    2c7c:	6f 93       	push	r22
    2c7e:	7f 93       	push	r23
    2c80:	8f 93       	push	r24
    2c82:	9f 93       	push	r25
    2c84:	af 93       	push	r26
    2c86:	bf 93       	push	r27
    2c88:	ef 93       	push	r30
    2c8a:	ff 93       	push	r31
    2c8c:	df 93       	push	r29
    2c8e:	cf 93       	push	r28
    2c90:	cd b7       	in	r28, 0x3d	; 61
    2c92:	de b7       	in	r29, 0x3e	; 62
	if(CallBackFuncPtr != NULL )
    2c94:	80 91 4b 01 	lds	r24, 0x014B
    2c98:	90 91 4c 01 	lds	r25, 0x014C
    2c9c:	00 97       	sbiw	r24, 0x00	; 0
    2c9e:	29 f0       	breq	.+10     	; 0x2caa <__vector_11+0x40>
	{
		CallBackFuncPtr();
    2ca0:	e0 91 4b 01 	lds	r30, 0x014B
    2ca4:	f0 91 4c 01 	lds	r31, 0x014C
    2ca8:	09 95       	icall
	}
 }
    2caa:	cf 91       	pop	r28
    2cac:	df 91       	pop	r29
    2cae:	ff 91       	pop	r31
    2cb0:	ef 91       	pop	r30
    2cb2:	bf 91       	pop	r27
    2cb4:	af 91       	pop	r26
    2cb6:	9f 91       	pop	r25
    2cb8:	8f 91       	pop	r24
    2cba:	7f 91       	pop	r23
    2cbc:	6f 91       	pop	r22
    2cbe:	5f 91       	pop	r21
    2cc0:	4f 91       	pop	r20
    2cc2:	3f 91       	pop	r19
    2cc4:	2f 91       	pop	r18
    2cc6:	0f 90       	pop	r0
    2cc8:	0f be       	out	0x3f, r0	; 63
    2cca:	0f 90       	pop	r0
    2ccc:	1f 90       	pop	r1
    2cce:	18 95       	reti

00002cd0 <main>:
 */

#include "smart_home.h"

void main (void)
{
    2cd0:	df 93       	push	r29
    2cd2:	cf 93       	push	r28
    2cd4:	cd b7       	in	r28, 0x3d	; 61
    2cd6:	de b7       	in	r29, 0x3e	; 62
	smart_home();
    2cd8:	0e 94 71 16 	call	0x2ce2	; 0x2ce2 <smart_home>
}
    2cdc:	cf 91       	pop	r28
    2cde:	df 91       	pop	r29
    2ce0:	08 95       	ret

00002ce2 <smart_home>:

void func(void);
void func_1(void);
void func_2(void);
void smart_home (void)
{
    2ce2:	0f 93       	push	r16
    2ce4:	1f 93       	push	r17
    2ce6:	df 93       	push	r29
    2ce8:	cf 93       	push	r28
    2cea:	cd b7       	in	r28, 0x3d	; 61
    2cec:	de b7       	in	r29, 0x3e	; 62
    2cee:	c1 55       	subi	r28, 0x51	; 81
    2cf0:	d0 40       	sbci	r29, 0x00	; 0
    2cf2:	0f b6       	in	r0, 0x3f	; 63
    2cf4:	f8 94       	cli
    2cf6:	de bf       	out	0x3e, r29	; 62
    2cf8:	0f be       	out	0x3f, r0	; 63
    2cfa:	cd bf       	out	0x3d, r28	; 61
	u8 username[3];
	u8 arrindx=0;
    2cfc:	fe 01       	movw	r30, r28
    2cfe:	e5 5b       	subi	r30, 0xB5	; 181
    2d00:	ff 4f       	sbci	r31, 0xFF	; 255
    2d02:	10 82       	st	Z, r1
	u8 password[3];
	u8 arrindx_pass=0;
    2d04:	fe 01       	movw	r30, r28
    2d06:	e6 5b       	subi	r30, 0xB6	; 182
    2d08:	ff 4f       	sbci	r31, 0xFF	; 255
    2d0a:	10 82       	st	Z, r1
	u8 i=0;
    2d0c:	fe 01       	movw	r30, r28
    2d0e:	e7 5b       	subi	r30, 0xB7	; 183
    2d10:	ff 4f       	sbci	r31, 0xFF	; 255
    2d12:	10 82       	st	Z, r1
	u8 j=0;
    2d14:	fe 01       	movw	r30, r28
    2d16:	e8 5b       	subi	r30, 0xB8	; 184
    2d18:	ff 4f       	sbci	r31, 0xFF	; 255
    2d1a:	10 82       	st	Z, r1
	u8 key_pad_ret_value=0;
    2d1c:	fe 01       	movw	r30, r28
    2d1e:	e9 5b       	subi	r30, 0xB9	; 185
    2d20:	ff 4f       	sbci	r31, 0xFF	; 255
    2d22:	10 82       	st	Z, r1
	//key pad intialization
	KEY_PAD_VidInit();
    2d24:	0e 94 1f 0b 	call	0x163e	; 0x163e <KEY_PAD_VidInit>
	//lcd int
	LCD_Vid4Initialization();
    2d28:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <LCD_Vid4Initialization>
	//ADC ENABLE
//ADC_VidEnableInt();
	//ADC CHANNAL
//ADC_VidStartConvertion(0);
	//ADC_VidStartConvertion(1);
	LCD_VidWrite4Cmd(Clear_Display);
    2d2c:	81 e0       	ldi	r24, 0x01	; 1
    2d2e:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <LCD_VidWrite4Cmd>
	LCD_Write4String("user name=",0,0);
    2d32:	80 e6       	ldi	r24, 0x60	; 96
    2d34:	90 e0       	ldi	r25, 0x00	; 0
    2d36:	60 e0       	ldi	r22, 0x00	; 0
    2d38:	40 e0       	ldi	r20, 0x00	; 0
    2d3a:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <LCD_Write4String>
	while(1)
	{
		key_pad_ret_value= KEY_PAD_VidGitPresedcalc();
    2d3e:	0e 94 16 0c 	call	0x182c	; 0x182c <KEY_PAD_VidGitPresedcalc>
    2d42:	fe 01       	movw	r30, r28
    2d44:	e9 5b       	subi	r30, 0xB9	; 185
    2d46:	ff 4f       	sbci	r31, 0xFF	; 255
    2d48:	80 83       	st	Z, r24
		if(key_pad_ret_value)
    2d4a:	fe 01       	movw	r30, r28
    2d4c:	e9 5b       	subi	r30, 0xB9	; 185
    2d4e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d50:	80 81       	ld	r24, Z
    2d52:	88 23       	and	r24, r24
    2d54:	a1 f3       	breq	.-24     	; 0x2d3e <smart_home+0x5c>
		{
			LCD_VidDisp4Number(key_pad_ret_value);
    2d56:	fe 01       	movw	r30, r28
    2d58:	e9 5b       	subi	r30, 0xB9	; 185
    2d5a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d5c:	80 81       	ld	r24, Z
    2d5e:	88 2f       	mov	r24, r24
    2d60:	90 e0       	ldi	r25, 0x00	; 0
    2d62:	a0 e0       	ldi	r26, 0x00	; 0
    2d64:	b0 e0       	ldi	r27, 0x00	; 0
    2d66:	bc 01       	movw	r22, r24
    2d68:	cd 01       	movw	r24, r26
    2d6a:	0e 94 bf 14 	call	0x297e	; 0x297e <LCD_VidDisp4Number>
			username[arrindx]=key_pad_ret_value;
    2d6e:	fe 01       	movw	r30, r28
    2d70:	e5 5b       	subi	r30, 0xB5	; 181
    2d72:	ff 4f       	sbci	r31, 0xFF	; 255
    2d74:	80 81       	ld	r24, Z
    2d76:	28 2f       	mov	r18, r24
    2d78:	30 e0       	ldi	r19, 0x00	; 0
    2d7a:	ce 01       	movw	r24, r28
    2d7c:	84 5b       	subi	r24, 0xB4	; 180
    2d7e:	9f 4f       	sbci	r25, 0xFF	; 255
    2d80:	dc 01       	movw	r26, r24
    2d82:	a2 0f       	add	r26, r18
    2d84:	b3 1f       	adc	r27, r19
    2d86:	fe 01       	movw	r30, r28
    2d88:	e9 5b       	subi	r30, 0xB9	; 185
    2d8a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d8c:	80 81       	ld	r24, Z
    2d8e:	8c 93       	st	X, r24
			arrindx++;
    2d90:	de 01       	movw	r26, r28
    2d92:	a5 5b       	subi	r26, 0xB5	; 181
    2d94:	bf 4f       	sbci	r27, 0xFF	; 255
    2d96:	fe 01       	movw	r30, r28
    2d98:	e5 5b       	subi	r30, 0xB5	; 181
    2d9a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d9c:	80 81       	ld	r24, Z
    2d9e:	8f 5f       	subi	r24, 0xFF	; 255
    2da0:	8c 93       	st	X, r24
			if(arrindx==3)
    2da2:	fe 01       	movw	r30, r28
    2da4:	e5 5b       	subi	r30, 0xB5	; 181
    2da6:	ff 4f       	sbci	r31, 0xFF	; 255
    2da8:	80 81       	ld	r24, Z
    2daa:	83 30       	cpi	r24, 0x03	; 3
    2dac:	41 f6       	brne	.-112    	; 0x2d3e <smart_home+0x5c>
			{
				if((username[0]==1) && (username[1]==2)&& (username[2]==3))
    2dae:	fe 01       	movw	r30, r28
    2db0:	e4 5b       	subi	r30, 0xB4	; 180
    2db2:	ff 4f       	sbci	r31, 0xFF	; 255
    2db4:	80 81       	ld	r24, Z
    2db6:	81 30       	cpi	r24, 0x01	; 1
    2db8:	09 f0       	breq	.+2      	; 0x2dbc <smart_home+0xda>
    2dba:	ee c2       	rjmp	.+1500   	; 0x3398 <smart_home+0x6b6>
    2dbc:	fe 01       	movw	r30, r28
    2dbe:	e4 5b       	subi	r30, 0xB4	; 180
    2dc0:	ff 4f       	sbci	r31, 0xFF	; 255
    2dc2:	81 81       	ldd	r24, Z+1	; 0x01
    2dc4:	82 30       	cpi	r24, 0x02	; 2
    2dc6:	09 f0       	breq	.+2      	; 0x2dca <smart_home+0xe8>
    2dc8:	e7 c2       	rjmp	.+1486   	; 0x3398 <smart_home+0x6b6>
    2dca:	fe 01       	movw	r30, r28
    2dcc:	e4 5b       	subi	r30, 0xB4	; 180
    2dce:	ff 4f       	sbci	r31, 0xFF	; 255
    2dd0:	82 81       	ldd	r24, Z+2	; 0x02
    2dd2:	83 30       	cpi	r24, 0x03	; 3
    2dd4:	09 f0       	breq	.+2      	; 0x2dd8 <smart_home+0xf6>
    2dd6:	e0 c2       	rjmp	.+1472   	; 0x3398 <smart_home+0x6b6>
				{
					LCD_VidWrite4Cmd(Clear_Display);
    2dd8:	81 e0       	ldi	r24, 0x01	; 1
    2dda:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <LCD_VidWrite4Cmd>
					LCD_Write4String("user name is correct",0,0);
    2dde:	8b e6       	ldi	r24, 0x6B	; 107
    2de0:	90 e0       	ldi	r25, 0x00	; 0
    2de2:	60 e0       	ldi	r22, 0x00	; 0
    2de4:	40 e0       	ldi	r20, 0x00	; 0
    2de6:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <LCD_Write4String>
    2dea:	fe 01       	movw	r30, r28
    2dec:	ed 5b       	subi	r30, 0xBD	; 189
    2dee:	ff 4f       	sbci	r31, 0xFF	; 255
    2df0:	80 e0       	ldi	r24, 0x00	; 0
    2df2:	90 e0       	ldi	r25, 0x00	; 0
    2df4:	aa e7       	ldi	r26, 0x7A	; 122
    2df6:	b4 e4       	ldi	r27, 0x44	; 68
    2df8:	80 83       	st	Z, r24
    2dfa:	91 83       	std	Z+1, r25	; 0x01
    2dfc:	a2 83       	std	Z+2, r26	; 0x02
    2dfe:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e00:	8e 01       	movw	r16, r28
    2e02:	01 5c       	subi	r16, 0xC1	; 193
    2e04:	1f 4f       	sbci	r17, 0xFF	; 255
    2e06:	fe 01       	movw	r30, r28
    2e08:	ed 5b       	subi	r30, 0xBD	; 189
    2e0a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e0c:	60 81       	ld	r22, Z
    2e0e:	71 81       	ldd	r23, Z+1	; 0x01
    2e10:	82 81       	ldd	r24, Z+2	; 0x02
    2e12:	93 81       	ldd	r25, Z+3	; 0x03
    2e14:	20 e0       	ldi	r18, 0x00	; 0
    2e16:	30 e0       	ldi	r19, 0x00	; 0
    2e18:	4a ef       	ldi	r20, 0xFA	; 250
    2e1a:	54 e4       	ldi	r21, 0x44	; 68
    2e1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e20:	dc 01       	movw	r26, r24
    2e22:	cb 01       	movw	r24, r22
    2e24:	f8 01       	movw	r30, r16
    2e26:	80 83       	st	Z, r24
    2e28:	91 83       	std	Z+1, r25	; 0x01
    2e2a:	a2 83       	std	Z+2, r26	; 0x02
    2e2c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2e2e:	fe 01       	movw	r30, r28
    2e30:	ff 96       	adiw	r30, 0x3f	; 63
    2e32:	60 81       	ld	r22, Z
    2e34:	71 81       	ldd	r23, Z+1	; 0x01
    2e36:	82 81       	ldd	r24, Z+2	; 0x02
    2e38:	93 81       	ldd	r25, Z+3	; 0x03
    2e3a:	20 e0       	ldi	r18, 0x00	; 0
    2e3c:	30 e0       	ldi	r19, 0x00	; 0
    2e3e:	40 e8       	ldi	r20, 0x80	; 128
    2e40:	5f e3       	ldi	r21, 0x3F	; 63
    2e42:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e46:	88 23       	and	r24, r24
    2e48:	2c f4       	brge	.+10     	; 0x2e54 <smart_home+0x172>
		__ticks = 1;
    2e4a:	81 e0       	ldi	r24, 0x01	; 1
    2e4c:	90 e0       	ldi	r25, 0x00	; 0
    2e4e:	9e af       	std	Y+62, r25	; 0x3e
    2e50:	8d af       	std	Y+61, r24	; 0x3d
    2e52:	46 c0       	rjmp	.+140    	; 0x2ee0 <smart_home+0x1fe>
	else if (__tmp > 65535)
    2e54:	fe 01       	movw	r30, r28
    2e56:	ff 96       	adiw	r30, 0x3f	; 63
    2e58:	60 81       	ld	r22, Z
    2e5a:	71 81       	ldd	r23, Z+1	; 0x01
    2e5c:	82 81       	ldd	r24, Z+2	; 0x02
    2e5e:	93 81       	ldd	r25, Z+3	; 0x03
    2e60:	20 e0       	ldi	r18, 0x00	; 0
    2e62:	3f ef       	ldi	r19, 0xFF	; 255
    2e64:	4f e7       	ldi	r20, 0x7F	; 127
    2e66:	57 e4       	ldi	r21, 0x47	; 71
    2e68:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e6c:	18 16       	cp	r1, r24
    2e6e:	64 f5       	brge	.+88     	; 0x2ec8 <smart_home+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e70:	fe 01       	movw	r30, r28
    2e72:	ed 5b       	subi	r30, 0xBD	; 189
    2e74:	ff 4f       	sbci	r31, 0xFF	; 255
    2e76:	60 81       	ld	r22, Z
    2e78:	71 81       	ldd	r23, Z+1	; 0x01
    2e7a:	82 81       	ldd	r24, Z+2	; 0x02
    2e7c:	93 81       	ldd	r25, Z+3	; 0x03
    2e7e:	20 e0       	ldi	r18, 0x00	; 0
    2e80:	30 e0       	ldi	r19, 0x00	; 0
    2e82:	40 e2       	ldi	r20, 0x20	; 32
    2e84:	51 e4       	ldi	r21, 0x41	; 65
    2e86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e8a:	dc 01       	movw	r26, r24
    2e8c:	cb 01       	movw	r24, r22
    2e8e:	bc 01       	movw	r22, r24
    2e90:	cd 01       	movw	r24, r26
    2e92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e96:	dc 01       	movw	r26, r24
    2e98:	cb 01       	movw	r24, r22
    2e9a:	9e af       	std	Y+62, r25	; 0x3e
    2e9c:	8d af       	std	Y+61, r24	; 0x3d
    2e9e:	0f c0       	rjmp	.+30     	; 0x2ebe <smart_home+0x1dc>
    2ea0:	88 ec       	ldi	r24, 0xC8	; 200
    2ea2:	90 e0       	ldi	r25, 0x00	; 0
    2ea4:	9c af       	std	Y+60, r25	; 0x3c
    2ea6:	8b af       	std	Y+59, r24	; 0x3b
    2ea8:	8b ad       	ldd	r24, Y+59	; 0x3b
    2eaa:	9c ad       	ldd	r25, Y+60	; 0x3c
    2eac:	01 97       	sbiw	r24, 0x01	; 1
    2eae:	f1 f7       	brne	.-4      	; 0x2eac <smart_home+0x1ca>
    2eb0:	9c af       	std	Y+60, r25	; 0x3c
    2eb2:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2eb4:	8d ad       	ldd	r24, Y+61	; 0x3d
    2eb6:	9e ad       	ldd	r25, Y+62	; 0x3e
    2eb8:	01 97       	sbiw	r24, 0x01	; 1
    2eba:	9e af       	std	Y+62, r25	; 0x3e
    2ebc:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ebe:	8d ad       	ldd	r24, Y+61	; 0x3d
    2ec0:	9e ad       	ldd	r25, Y+62	; 0x3e
    2ec2:	00 97       	sbiw	r24, 0x00	; 0
    2ec4:	69 f7       	brne	.-38     	; 0x2ea0 <smart_home+0x1be>
    2ec6:	16 c0       	rjmp	.+44     	; 0x2ef4 <smart_home+0x212>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ec8:	fe 01       	movw	r30, r28
    2eca:	ff 96       	adiw	r30, 0x3f	; 63
    2ecc:	60 81       	ld	r22, Z
    2ece:	71 81       	ldd	r23, Z+1	; 0x01
    2ed0:	82 81       	ldd	r24, Z+2	; 0x02
    2ed2:	93 81       	ldd	r25, Z+3	; 0x03
    2ed4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ed8:	dc 01       	movw	r26, r24
    2eda:	cb 01       	movw	r24, r22
    2edc:	9e af       	std	Y+62, r25	; 0x3e
    2ede:	8d af       	std	Y+61, r24	; 0x3d
    2ee0:	8d ad       	ldd	r24, Y+61	; 0x3d
    2ee2:	9e ad       	ldd	r25, Y+62	; 0x3e
    2ee4:	9a af       	std	Y+58, r25	; 0x3a
    2ee6:	89 af       	std	Y+57, r24	; 0x39
    2ee8:	89 ad       	ldd	r24, Y+57	; 0x39
    2eea:	9a ad       	ldd	r25, Y+58	; 0x3a
    2eec:	01 97       	sbiw	r24, 0x01	; 1
    2eee:	f1 f7       	brne	.-4      	; 0x2eec <smart_home+0x20a>
    2ef0:	9a af       	std	Y+58, r25	; 0x3a
    2ef2:	89 af       	std	Y+57, r24	; 0x39
					_delay_ms(1000);
					LCD_VidWrite4Cmd(Clear_Display);
    2ef4:	81 e0       	ldi	r24, 0x01	; 1
    2ef6:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <LCD_VidWrite4Cmd>
					LCD_Write4String("password=",0,0);
    2efa:	80 e8       	ldi	r24, 0x80	; 128
    2efc:	90 e0       	ldi	r25, 0x00	; 0
    2efe:	60 e0       	ldi	r22, 0x00	; 0
    2f00:	40 e0       	ldi	r20, 0x00	; 0
    2f02:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <LCD_Write4String>
														while(1)
															{
																key_pad_ret_value= KEY_PAD_VidGitPresedcalc();
    2f06:	0e 94 16 0c 	call	0x182c	; 0x182c <KEY_PAD_VidGitPresedcalc>
    2f0a:	fe 01       	movw	r30, r28
    2f0c:	e9 5b       	subi	r30, 0xB9	; 185
    2f0e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f10:	80 83       	st	Z, r24
																if (key_pad_ret_value)
    2f12:	fe 01       	movw	r30, r28
    2f14:	e9 5b       	subi	r30, 0xB9	; 185
    2f16:	ff 4f       	sbci	r31, 0xFF	; 255
    2f18:	80 81       	ld	r24, Z
    2f1a:	88 23       	and	r24, r24
    2f1c:	a1 f3       	breq	.-24     	; 0x2f06 <smart_home+0x224>
																	{
															//	/*
																LCD_VidDisp4Number(key_pad_ret_value);
    2f1e:	fe 01       	movw	r30, r28
    2f20:	e9 5b       	subi	r30, 0xB9	; 185
    2f22:	ff 4f       	sbci	r31, 0xFF	; 255
    2f24:	80 81       	ld	r24, Z
    2f26:	88 2f       	mov	r24, r24
    2f28:	90 e0       	ldi	r25, 0x00	; 0
    2f2a:	a0 e0       	ldi	r26, 0x00	; 0
    2f2c:	b0 e0       	ldi	r27, 0x00	; 0
    2f2e:	bc 01       	movw	r22, r24
    2f30:	cd 01       	movw	r24, r26
    2f32:	0e 94 bf 14 	call	0x297e	; 0x297e <LCD_VidDisp4Number>
																	password[arrindx_pass]=key_pad_ret_value;
    2f36:	fe 01       	movw	r30, r28
    2f38:	e6 5b       	subi	r30, 0xB6	; 182
    2f3a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f3c:	80 81       	ld	r24, Z
    2f3e:	28 2f       	mov	r18, r24
    2f40:	30 e0       	ldi	r19, 0x00	; 0
    2f42:	ce 01       	movw	r24, r28
    2f44:	81 5b       	subi	r24, 0xB1	; 177
    2f46:	9f 4f       	sbci	r25, 0xFF	; 255
    2f48:	dc 01       	movw	r26, r24
    2f4a:	a2 0f       	add	r26, r18
    2f4c:	b3 1f       	adc	r27, r19
    2f4e:	fe 01       	movw	r30, r28
    2f50:	e9 5b       	subi	r30, 0xB9	; 185
    2f52:	ff 4f       	sbci	r31, 0xFF	; 255
    2f54:	80 81       	ld	r24, Z
    2f56:	8c 93       	st	X, r24
																	arrindx_pass++;
    2f58:	de 01       	movw	r26, r28
    2f5a:	a6 5b       	subi	r26, 0xB6	; 182
    2f5c:	bf 4f       	sbci	r27, 0xFF	; 255
    2f5e:	fe 01       	movw	r30, r28
    2f60:	e6 5b       	subi	r30, 0xB6	; 182
    2f62:	ff 4f       	sbci	r31, 0xFF	; 255
    2f64:	80 81       	ld	r24, Z
    2f66:	8f 5f       	subi	r24, 0xFF	; 255
    2f68:	8c 93       	st	X, r24
																	if(arrindx_pass==3)
    2f6a:	fe 01       	movw	r30, r28
    2f6c:	e6 5b       	subi	r30, 0xB6	; 182
    2f6e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f70:	80 81       	ld	r24, Z
    2f72:	83 30       	cpi	r24, 0x03	; 3
    2f74:	41 f6       	brne	.-112    	; 0x2f06 <smart_home+0x224>
																	{
																		if((password[0]==3) && (password[1]==2)&& (password[2]==1))
    2f76:	fe 01       	movw	r30, r28
    2f78:	e1 5b       	subi	r30, 0xB1	; 177
    2f7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f7c:	80 81       	ld	r24, Z
    2f7e:	83 30       	cpi	r24, 0x03	; 3
    2f80:	09 f0       	breq	.+2      	; 0x2f84 <smart_home+0x2a2>
    2f82:	47 c1       	rjmp	.+654    	; 0x3212 <smart_home+0x530>
    2f84:	fe 01       	movw	r30, r28
    2f86:	e1 5b       	subi	r30, 0xB1	; 177
    2f88:	ff 4f       	sbci	r31, 0xFF	; 255
    2f8a:	81 81       	ldd	r24, Z+1	; 0x01
    2f8c:	82 30       	cpi	r24, 0x02	; 2
    2f8e:	09 f0       	breq	.+2      	; 0x2f92 <smart_home+0x2b0>
    2f90:	40 c1       	rjmp	.+640    	; 0x3212 <smart_home+0x530>
    2f92:	fe 01       	movw	r30, r28
    2f94:	e1 5b       	subi	r30, 0xB1	; 177
    2f96:	ff 4f       	sbci	r31, 0xFF	; 255
    2f98:	82 81       	ldd	r24, Z+2	; 0x02
    2f9a:	81 30       	cpi	r24, 0x01	; 1
    2f9c:	09 f0       	breq	.+2      	; 0x2fa0 <smart_home+0x2be>
    2f9e:	39 c1       	rjmp	.+626    	; 0x3212 <smart_home+0x530>
																		{
																			LCD_VidWrite4Cmd(Clear_Display);
    2fa0:	81 e0       	ldi	r24, 0x01	; 1
    2fa2:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <LCD_VidWrite4Cmd>
																			LCD_Write4String("password is correct",0,0);
    2fa6:	8a e8       	ldi	r24, 0x8A	; 138
    2fa8:	90 e0       	ldi	r25, 0x00	; 0
    2faa:	60 e0       	ldi	r22, 0x00	; 0
    2fac:	40 e0       	ldi	r20, 0x00	; 0
    2fae:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <LCD_Write4String>
    2fb2:	80 e0       	ldi	r24, 0x00	; 0
    2fb4:	90 e0       	ldi	r25, 0x00	; 0
    2fb6:	aa e7       	ldi	r26, 0x7A	; 122
    2fb8:	b4 e4       	ldi	r27, 0x44	; 68
    2fba:	8d ab       	std	Y+53, r24	; 0x35
    2fbc:	9e ab       	std	Y+54, r25	; 0x36
    2fbe:	af ab       	std	Y+55, r26	; 0x37
    2fc0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fc2:	6d a9       	ldd	r22, Y+53	; 0x35
    2fc4:	7e a9       	ldd	r23, Y+54	; 0x36
    2fc6:	8f a9       	ldd	r24, Y+55	; 0x37
    2fc8:	98 ad       	ldd	r25, Y+56	; 0x38
    2fca:	20 e0       	ldi	r18, 0x00	; 0
    2fcc:	30 e0       	ldi	r19, 0x00	; 0
    2fce:	4a ef       	ldi	r20, 0xFA	; 250
    2fd0:	54 e4       	ldi	r21, 0x44	; 68
    2fd2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fd6:	dc 01       	movw	r26, r24
    2fd8:	cb 01       	movw	r24, r22
    2fda:	89 ab       	std	Y+49, r24	; 0x31
    2fdc:	9a ab       	std	Y+50, r25	; 0x32
    2fde:	ab ab       	std	Y+51, r26	; 0x33
    2fe0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2fe2:	69 a9       	ldd	r22, Y+49	; 0x31
    2fe4:	7a a9       	ldd	r23, Y+50	; 0x32
    2fe6:	8b a9       	ldd	r24, Y+51	; 0x33
    2fe8:	9c a9       	ldd	r25, Y+52	; 0x34
    2fea:	20 e0       	ldi	r18, 0x00	; 0
    2fec:	30 e0       	ldi	r19, 0x00	; 0
    2fee:	40 e8       	ldi	r20, 0x80	; 128
    2ff0:	5f e3       	ldi	r21, 0x3F	; 63
    2ff2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ff6:	88 23       	and	r24, r24
    2ff8:	2c f4       	brge	.+10     	; 0x3004 <smart_home+0x322>
		__ticks = 1;
    2ffa:	81 e0       	ldi	r24, 0x01	; 1
    2ffc:	90 e0       	ldi	r25, 0x00	; 0
    2ffe:	98 ab       	std	Y+48, r25	; 0x30
    3000:	8f a7       	std	Y+47, r24	; 0x2f
    3002:	3f c0       	rjmp	.+126    	; 0x3082 <smart_home+0x3a0>
	else if (__tmp > 65535)
    3004:	69 a9       	ldd	r22, Y+49	; 0x31
    3006:	7a a9       	ldd	r23, Y+50	; 0x32
    3008:	8b a9       	ldd	r24, Y+51	; 0x33
    300a:	9c a9       	ldd	r25, Y+52	; 0x34
    300c:	20 e0       	ldi	r18, 0x00	; 0
    300e:	3f ef       	ldi	r19, 0xFF	; 255
    3010:	4f e7       	ldi	r20, 0x7F	; 127
    3012:	57 e4       	ldi	r21, 0x47	; 71
    3014:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3018:	18 16       	cp	r1, r24
    301a:	4c f5       	brge	.+82     	; 0x306e <smart_home+0x38c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    301c:	6d a9       	ldd	r22, Y+53	; 0x35
    301e:	7e a9       	ldd	r23, Y+54	; 0x36
    3020:	8f a9       	ldd	r24, Y+55	; 0x37
    3022:	98 ad       	ldd	r25, Y+56	; 0x38
    3024:	20 e0       	ldi	r18, 0x00	; 0
    3026:	30 e0       	ldi	r19, 0x00	; 0
    3028:	40 e2       	ldi	r20, 0x20	; 32
    302a:	51 e4       	ldi	r21, 0x41	; 65
    302c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3030:	dc 01       	movw	r26, r24
    3032:	cb 01       	movw	r24, r22
    3034:	bc 01       	movw	r22, r24
    3036:	cd 01       	movw	r24, r26
    3038:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    303c:	dc 01       	movw	r26, r24
    303e:	cb 01       	movw	r24, r22
    3040:	98 ab       	std	Y+48, r25	; 0x30
    3042:	8f a7       	std	Y+47, r24	; 0x2f
    3044:	0f c0       	rjmp	.+30     	; 0x3064 <smart_home+0x382>
    3046:	88 ec       	ldi	r24, 0xC8	; 200
    3048:	90 e0       	ldi	r25, 0x00	; 0
    304a:	9e a7       	std	Y+46, r25	; 0x2e
    304c:	8d a7       	std	Y+45, r24	; 0x2d
    304e:	8d a5       	ldd	r24, Y+45	; 0x2d
    3050:	9e a5       	ldd	r25, Y+46	; 0x2e
    3052:	01 97       	sbiw	r24, 0x01	; 1
    3054:	f1 f7       	brne	.-4      	; 0x3052 <smart_home+0x370>
    3056:	9e a7       	std	Y+46, r25	; 0x2e
    3058:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    305a:	8f a5       	ldd	r24, Y+47	; 0x2f
    305c:	98 a9       	ldd	r25, Y+48	; 0x30
    305e:	01 97       	sbiw	r24, 0x01	; 1
    3060:	98 ab       	std	Y+48, r25	; 0x30
    3062:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3064:	8f a5       	ldd	r24, Y+47	; 0x2f
    3066:	98 a9       	ldd	r25, Y+48	; 0x30
    3068:	00 97       	sbiw	r24, 0x00	; 0
    306a:	69 f7       	brne	.-38     	; 0x3046 <smart_home+0x364>
    306c:	14 c0       	rjmp	.+40     	; 0x3096 <smart_home+0x3b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    306e:	69 a9       	ldd	r22, Y+49	; 0x31
    3070:	7a a9       	ldd	r23, Y+50	; 0x32
    3072:	8b a9       	ldd	r24, Y+51	; 0x33
    3074:	9c a9       	ldd	r25, Y+52	; 0x34
    3076:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    307a:	dc 01       	movw	r26, r24
    307c:	cb 01       	movw	r24, r22
    307e:	98 ab       	std	Y+48, r25	; 0x30
    3080:	8f a7       	std	Y+47, r24	; 0x2f
    3082:	8f a5       	ldd	r24, Y+47	; 0x2f
    3084:	98 a9       	ldd	r25, Y+48	; 0x30
    3086:	9c a7       	std	Y+44, r25	; 0x2c
    3088:	8b a7       	std	Y+43, r24	; 0x2b
    308a:	8b a5       	ldd	r24, Y+43	; 0x2b
    308c:	9c a5       	ldd	r25, Y+44	; 0x2c
    308e:	01 97       	sbiw	r24, 0x01	; 1
    3090:	f1 f7       	brne	.-4      	; 0x308e <smart_home+0x3ac>
    3092:	9c a7       	std	Y+44, r25	; 0x2c
    3094:	8b a7       	std	Y+43, r24	; 0x2b
																			_delay_ms(1000);
																				LCD_VidWrite4Cmd(Clear_Display);
    3096:	81 e0       	ldi	r24, 0x01	; 1
    3098:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <LCD_VidWrite4Cmd>
																							LCD_Write4String("1- Temputure ",0,0);
    309c:	8e e9       	ldi	r24, 0x9E	; 158
    309e:	90 e0       	ldi	r25, 0x00	; 0
    30a0:	60 e0       	ldi	r22, 0x00	; 0
    30a2:	40 e0       	ldi	r20, 0x00	; 0
    30a4:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <LCD_Write4String>
																								while(1)
																								{
																									key_pad_ret_value= KEY_PAD_VidGitPresedcalc();
    30a8:	0e 94 16 0c 	call	0x182c	; 0x182c <KEY_PAD_VidGitPresedcalc>
    30ac:	fe 01       	movw	r30, r28
    30ae:	e9 5b       	subi	r30, 0xB9	; 185
    30b0:	ff 4f       	sbci	r31, 0xFF	; 255
    30b2:	80 83       	st	Z, r24
																									if (key_pad_ret_value==1)
    30b4:	fe 01       	movw	r30, r28
    30b6:	e9 5b       	subi	r30, 0xB9	; 185
    30b8:	ff 4f       	sbci	r31, 0xFF	; 255
    30ba:	80 81       	ld	r24, Z
    30bc:	81 30       	cpi	r24, 0x01	; 1
    30be:	09 f0       	breq	.+2      	; 0x30c2 <smart_home+0x3e0>
    30c0:	82 c0       	rjmp	.+260    	; 0x31c6 <smart_home+0x4e4>
																										{
																											LCD_VidWrite4Cmd(Clear_Display);
    30c2:	81 e0       	ldi	r24, 0x01	; 1
    30c4:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <LCD_VidWrite4Cmd>
    30c8:	80 e0       	ldi	r24, 0x00	; 0
    30ca:	90 e0       	ldi	r25, 0x00	; 0
    30cc:	aa e7       	ldi	r26, 0x7A	; 122
    30ce:	b4 e4       	ldi	r27, 0x44	; 68
    30d0:	8f a3       	std	Y+39, r24	; 0x27
    30d2:	98 a7       	std	Y+40, r25	; 0x28
    30d4:	a9 a7       	std	Y+41, r26	; 0x29
    30d6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30d8:	6f a1       	ldd	r22, Y+39	; 0x27
    30da:	78 a5       	ldd	r23, Y+40	; 0x28
    30dc:	89 a5       	ldd	r24, Y+41	; 0x29
    30de:	9a a5       	ldd	r25, Y+42	; 0x2a
    30e0:	20 e0       	ldi	r18, 0x00	; 0
    30e2:	30 e0       	ldi	r19, 0x00	; 0
    30e4:	4a ef       	ldi	r20, 0xFA	; 250
    30e6:	54 e4       	ldi	r21, 0x44	; 68
    30e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30ec:	dc 01       	movw	r26, r24
    30ee:	cb 01       	movw	r24, r22
    30f0:	8b a3       	std	Y+35, r24	; 0x23
    30f2:	9c a3       	std	Y+36, r25	; 0x24
    30f4:	ad a3       	std	Y+37, r26	; 0x25
    30f6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    30f8:	6b a1       	ldd	r22, Y+35	; 0x23
    30fa:	7c a1       	ldd	r23, Y+36	; 0x24
    30fc:	8d a1       	ldd	r24, Y+37	; 0x25
    30fe:	9e a1       	ldd	r25, Y+38	; 0x26
    3100:	20 e0       	ldi	r18, 0x00	; 0
    3102:	30 e0       	ldi	r19, 0x00	; 0
    3104:	40 e8       	ldi	r20, 0x80	; 128
    3106:	5f e3       	ldi	r21, 0x3F	; 63
    3108:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    310c:	88 23       	and	r24, r24
    310e:	2c f4       	brge	.+10     	; 0x311a <smart_home+0x438>
		__ticks = 1;
    3110:	81 e0       	ldi	r24, 0x01	; 1
    3112:	90 e0       	ldi	r25, 0x00	; 0
    3114:	9a a3       	std	Y+34, r25	; 0x22
    3116:	89 a3       	std	Y+33, r24	; 0x21
    3118:	3f c0       	rjmp	.+126    	; 0x3198 <smart_home+0x4b6>
	else if (__tmp > 65535)
    311a:	6b a1       	ldd	r22, Y+35	; 0x23
    311c:	7c a1       	ldd	r23, Y+36	; 0x24
    311e:	8d a1       	ldd	r24, Y+37	; 0x25
    3120:	9e a1       	ldd	r25, Y+38	; 0x26
    3122:	20 e0       	ldi	r18, 0x00	; 0
    3124:	3f ef       	ldi	r19, 0xFF	; 255
    3126:	4f e7       	ldi	r20, 0x7F	; 127
    3128:	57 e4       	ldi	r21, 0x47	; 71
    312a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    312e:	18 16       	cp	r1, r24
    3130:	4c f5       	brge	.+82     	; 0x3184 <smart_home+0x4a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3132:	6f a1       	ldd	r22, Y+39	; 0x27
    3134:	78 a5       	ldd	r23, Y+40	; 0x28
    3136:	89 a5       	ldd	r24, Y+41	; 0x29
    3138:	9a a5       	ldd	r25, Y+42	; 0x2a
    313a:	20 e0       	ldi	r18, 0x00	; 0
    313c:	30 e0       	ldi	r19, 0x00	; 0
    313e:	40 e2       	ldi	r20, 0x20	; 32
    3140:	51 e4       	ldi	r21, 0x41	; 65
    3142:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3146:	dc 01       	movw	r26, r24
    3148:	cb 01       	movw	r24, r22
    314a:	bc 01       	movw	r22, r24
    314c:	cd 01       	movw	r24, r26
    314e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3152:	dc 01       	movw	r26, r24
    3154:	cb 01       	movw	r24, r22
    3156:	9a a3       	std	Y+34, r25	; 0x22
    3158:	89 a3       	std	Y+33, r24	; 0x21
    315a:	0f c0       	rjmp	.+30     	; 0x317a <smart_home+0x498>
    315c:	88 ec       	ldi	r24, 0xC8	; 200
    315e:	90 e0       	ldi	r25, 0x00	; 0
    3160:	98 a3       	std	Y+32, r25	; 0x20
    3162:	8f 8f       	std	Y+31, r24	; 0x1f
    3164:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3166:	98 a1       	ldd	r25, Y+32	; 0x20
    3168:	01 97       	sbiw	r24, 0x01	; 1
    316a:	f1 f7       	brne	.-4      	; 0x3168 <smart_home+0x486>
    316c:	98 a3       	std	Y+32, r25	; 0x20
    316e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3170:	89 a1       	ldd	r24, Y+33	; 0x21
    3172:	9a a1       	ldd	r25, Y+34	; 0x22
    3174:	01 97       	sbiw	r24, 0x01	; 1
    3176:	9a a3       	std	Y+34, r25	; 0x22
    3178:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    317a:	89 a1       	ldd	r24, Y+33	; 0x21
    317c:	9a a1       	ldd	r25, Y+34	; 0x22
    317e:	00 97       	sbiw	r24, 0x00	; 0
    3180:	69 f7       	brne	.-38     	; 0x315c <smart_home+0x47a>
    3182:	14 c0       	rjmp	.+40     	; 0x31ac <smart_home+0x4ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3184:	6b a1       	ldd	r22, Y+35	; 0x23
    3186:	7c a1       	ldd	r23, Y+36	; 0x24
    3188:	8d a1       	ldd	r24, Y+37	; 0x25
    318a:	9e a1       	ldd	r25, Y+38	; 0x26
    318c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3190:	dc 01       	movw	r26, r24
    3192:	cb 01       	movw	r24, r22
    3194:	9a a3       	std	Y+34, r25	; 0x22
    3196:	89 a3       	std	Y+33, r24	; 0x21
    3198:	89 a1       	ldd	r24, Y+33	; 0x21
    319a:	9a a1       	ldd	r25, Y+34	; 0x22
    319c:	9e 8f       	std	Y+30, r25	; 0x1e
    319e:	8d 8f       	std	Y+29, r24	; 0x1d
    31a0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    31a2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    31a4:	01 97       	sbiw	r24, 0x01	; 1
    31a6:	f1 f7       	brne	.-4      	; 0x31a4 <smart_home+0x4c2>
    31a8:	9e 8f       	std	Y+30, r25	; 0x1e
    31aa:	8d 8f       	std	Y+29, r24	; 0x1d
																											_delay_ms(1000);
																											ADC_VidInit();
    31ac:	0e 94 b9 05 	call	0xb72	; 0xb72 <ADC_VidInit>
																											GIE_Enable();
    31b0:	0e 94 03 0b 	call	0x1606	; 0x1606 <GIE_Enable>
																											ADC_VidSetCallBack(func_2);
    31b4:	8f eb       	ldi	r24, 0xBF	; 191
    31b6:	9a e1       	ldi	r25, 0x1A	; 26
    31b8:	0e 94 a3 05 	call	0xb46	; 0xb46 <ADC_VidSetCallBack>
																											ADC_VidEnableInt();
    31bc:	0e 94 63 06 	call	0xcc6	; 0xcc6 <ADC_VidEnableInt>
																											ADC_VidStartConvertion(0);
    31c0:	80 e0       	ldi	r24, 0x00	; 0
    31c2:	0e 94 43 06 	call	0xc86	; 0xc86 <ADC_VidStartConvertion>

																										}
																									if (key_pad_ret_value==2 &&key_pad_ret_value==3)
    31c6:	fe 01       	movw	r30, r28
    31c8:	e9 5b       	subi	r30, 0xB9	; 185
    31ca:	ff 4f       	sbci	r31, 0xFF	; 255
    31cc:	80 81       	ld	r24, Z
    31ce:	82 30       	cpi	r24, 0x02	; 2
    31d0:	79 f4       	brne	.+30     	; 0x31f0 <smart_home+0x50e>
    31d2:	fe 01       	movw	r30, r28
    31d4:	e9 5b       	subi	r30, 0xB9	; 185
    31d6:	ff 4f       	sbci	r31, 0xFF	; 255
    31d8:	80 81       	ld	r24, Z
    31da:	83 30       	cpi	r24, 0x03	; 3
    31dc:	49 f4       	brne	.+18     	; 0x31f0 <smart_home+0x50e>
																									{
																										LCD_VidWrite4Cmd(Clear_Display);
    31de:	81 e0       	ldi	r24, 0x01	; 1
    31e0:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <LCD_VidWrite4Cmd>
																										LCD_Write4String("plase enter the right number=",0,0);
    31e4:	8c ea       	ldi	r24, 0xAC	; 172
    31e6:	90 e0       	ldi	r25, 0x00	; 0
    31e8:	60 e0       	ldi	r22, 0x00	; 0
    31ea:	40 e0       	ldi	r20, 0x00	; 0
    31ec:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <LCD_Write4String>
																									}
																									if (key_pad_ret_value==99)
    31f0:	fe 01       	movw	r30, r28
    31f2:	e9 5b       	subi	r30, 0xB9	; 185
    31f4:	ff 4f       	sbci	r31, 0xFF	; 255
    31f6:	80 81       	ld	r24, Z
    31f8:	83 36       	cpi	r24, 0x63	; 99
    31fa:	09 f0       	breq	.+2      	; 0x31fe <smart_home+0x51c>
    31fc:	55 cf       	rjmp	.-342    	; 0x30a8 <smart_home+0x3c6>
																											{
																													LCD_VidWrite4Cmd(Clear_Display);
    31fe:	81 e0       	ldi	r24, 0x01	; 1
    3200:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <LCD_VidWrite4Cmd>
																													LCD_Write4String("1- Temputure sensor=",0,0);
    3204:	8a ec       	ldi	r24, 0xCA	; 202
    3206:	90 e0       	ldi	r25, 0x00	; 0
    3208:	60 e0       	ldi	r22, 0x00	; 0
    320a:	40 e0       	ldi	r20, 0x00	; 0
    320c:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <LCD_Write4String>
    3210:	7a ce       	rjmp	.-780    	; 0x2f06 <smart_home+0x224>

																								}
																		}
																		else
																		{
																			LCD_VidWrite4Cmd(Clear_Display);
    3212:	81 e0       	ldi	r24, 0x01	; 1
    3214:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <LCD_VidWrite4Cmd>
																			LCD_Write4String("password is wrong",0,0);
    3218:	8f ed       	ldi	r24, 0xDF	; 223
    321a:	90 e0       	ldi	r25, 0x00	; 0
    321c:	60 e0       	ldi	r22, 0x00	; 0
    321e:	40 e0       	ldi	r20, 0x00	; 0
    3220:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <LCD_Write4String>
    3224:	80 e0       	ldi	r24, 0x00	; 0
    3226:	90 e0       	ldi	r25, 0x00	; 0
    3228:	aa e7       	ldi	r26, 0x7A	; 122
    322a:	b4 e4       	ldi	r27, 0x44	; 68
    322c:	89 8f       	std	Y+25, r24	; 0x19
    322e:	9a 8f       	std	Y+26, r25	; 0x1a
    3230:	ab 8f       	std	Y+27, r26	; 0x1b
    3232:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3234:	69 8d       	ldd	r22, Y+25	; 0x19
    3236:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3238:	8b 8d       	ldd	r24, Y+27	; 0x1b
    323a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    323c:	20 e0       	ldi	r18, 0x00	; 0
    323e:	30 e0       	ldi	r19, 0x00	; 0
    3240:	4a ef       	ldi	r20, 0xFA	; 250
    3242:	54 e4       	ldi	r21, 0x44	; 68
    3244:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3248:	dc 01       	movw	r26, r24
    324a:	cb 01       	movw	r24, r22
    324c:	8d 8b       	std	Y+21, r24	; 0x15
    324e:	9e 8b       	std	Y+22, r25	; 0x16
    3250:	af 8b       	std	Y+23, r26	; 0x17
    3252:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3254:	6d 89       	ldd	r22, Y+21	; 0x15
    3256:	7e 89       	ldd	r23, Y+22	; 0x16
    3258:	8f 89       	ldd	r24, Y+23	; 0x17
    325a:	98 8d       	ldd	r25, Y+24	; 0x18
    325c:	20 e0       	ldi	r18, 0x00	; 0
    325e:	30 e0       	ldi	r19, 0x00	; 0
    3260:	40 e8       	ldi	r20, 0x80	; 128
    3262:	5f e3       	ldi	r21, 0x3F	; 63
    3264:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3268:	88 23       	and	r24, r24
    326a:	2c f4       	brge	.+10     	; 0x3276 <smart_home+0x594>
		__ticks = 1;
    326c:	81 e0       	ldi	r24, 0x01	; 1
    326e:	90 e0       	ldi	r25, 0x00	; 0
    3270:	9c 8b       	std	Y+20, r25	; 0x14
    3272:	8b 8b       	std	Y+19, r24	; 0x13
    3274:	3f c0       	rjmp	.+126    	; 0x32f4 <smart_home+0x612>
	else if (__tmp > 65535)
    3276:	6d 89       	ldd	r22, Y+21	; 0x15
    3278:	7e 89       	ldd	r23, Y+22	; 0x16
    327a:	8f 89       	ldd	r24, Y+23	; 0x17
    327c:	98 8d       	ldd	r25, Y+24	; 0x18
    327e:	20 e0       	ldi	r18, 0x00	; 0
    3280:	3f ef       	ldi	r19, 0xFF	; 255
    3282:	4f e7       	ldi	r20, 0x7F	; 127
    3284:	57 e4       	ldi	r21, 0x47	; 71
    3286:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    328a:	18 16       	cp	r1, r24
    328c:	4c f5       	brge	.+82     	; 0x32e0 <smart_home+0x5fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    328e:	69 8d       	ldd	r22, Y+25	; 0x19
    3290:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3292:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3294:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3296:	20 e0       	ldi	r18, 0x00	; 0
    3298:	30 e0       	ldi	r19, 0x00	; 0
    329a:	40 e2       	ldi	r20, 0x20	; 32
    329c:	51 e4       	ldi	r21, 0x41	; 65
    329e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32a2:	dc 01       	movw	r26, r24
    32a4:	cb 01       	movw	r24, r22
    32a6:	bc 01       	movw	r22, r24
    32a8:	cd 01       	movw	r24, r26
    32aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32ae:	dc 01       	movw	r26, r24
    32b0:	cb 01       	movw	r24, r22
    32b2:	9c 8b       	std	Y+20, r25	; 0x14
    32b4:	8b 8b       	std	Y+19, r24	; 0x13
    32b6:	0f c0       	rjmp	.+30     	; 0x32d6 <smart_home+0x5f4>
    32b8:	88 ec       	ldi	r24, 0xC8	; 200
    32ba:	90 e0       	ldi	r25, 0x00	; 0
    32bc:	9a 8b       	std	Y+18, r25	; 0x12
    32be:	89 8b       	std	Y+17, r24	; 0x11
    32c0:	89 89       	ldd	r24, Y+17	; 0x11
    32c2:	9a 89       	ldd	r25, Y+18	; 0x12
    32c4:	01 97       	sbiw	r24, 0x01	; 1
    32c6:	f1 f7       	brne	.-4      	; 0x32c4 <smart_home+0x5e2>
    32c8:	9a 8b       	std	Y+18, r25	; 0x12
    32ca:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32cc:	8b 89       	ldd	r24, Y+19	; 0x13
    32ce:	9c 89       	ldd	r25, Y+20	; 0x14
    32d0:	01 97       	sbiw	r24, 0x01	; 1
    32d2:	9c 8b       	std	Y+20, r25	; 0x14
    32d4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32d6:	8b 89       	ldd	r24, Y+19	; 0x13
    32d8:	9c 89       	ldd	r25, Y+20	; 0x14
    32da:	00 97       	sbiw	r24, 0x00	; 0
    32dc:	69 f7       	brne	.-38     	; 0x32b8 <smart_home+0x5d6>
    32de:	14 c0       	rjmp	.+40     	; 0x3308 <smart_home+0x626>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32e0:	6d 89       	ldd	r22, Y+21	; 0x15
    32e2:	7e 89       	ldd	r23, Y+22	; 0x16
    32e4:	8f 89       	ldd	r24, Y+23	; 0x17
    32e6:	98 8d       	ldd	r25, Y+24	; 0x18
    32e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32ec:	dc 01       	movw	r26, r24
    32ee:	cb 01       	movw	r24, r22
    32f0:	9c 8b       	std	Y+20, r25	; 0x14
    32f2:	8b 8b       	std	Y+19, r24	; 0x13
    32f4:	8b 89       	ldd	r24, Y+19	; 0x13
    32f6:	9c 89       	ldd	r25, Y+20	; 0x14
    32f8:	98 8b       	std	Y+16, r25	; 0x10
    32fa:	8f 87       	std	Y+15, r24	; 0x0f
    32fc:	8f 85       	ldd	r24, Y+15	; 0x0f
    32fe:	98 89       	ldd	r25, Y+16	; 0x10
    3300:	01 97       	sbiw	r24, 0x01	; 1
    3302:	f1 f7       	brne	.-4      	; 0x3300 <smart_home+0x61e>
    3304:	98 8b       	std	Y+16, r25	; 0x10
    3306:	8f 87       	std	Y+15, r24	; 0x0f
																			_delay_ms(1000);
																			arrindx_pass=0;
    3308:	fe 01       	movw	r30, r28
    330a:	e6 5b       	subi	r30, 0xB6	; 182
    330c:	ff 4f       	sbci	r31, 0xFF	; 255
    330e:	10 82       	st	Z, r1
																			j++;
    3310:	de 01       	movw	r26, r28
    3312:	a8 5b       	subi	r26, 0xB8	; 184
    3314:	bf 4f       	sbci	r27, 0xFF	; 255
    3316:	fe 01       	movw	r30, r28
    3318:	e8 5b       	subi	r30, 0xB8	; 184
    331a:	ff 4f       	sbci	r31, 0xFF	; 255
    331c:	80 81       	ld	r24, Z
    331e:	8f 5f       	subi	r24, 0xFF	; 255
    3320:	8c 93       	st	X, r24
																			LCD_VidWrite4Cmd(Clear_Display);
    3322:	81 e0       	ldi	r24, 0x01	; 1
    3324:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <LCD_VidWrite4Cmd>
																			if(j==3)
    3328:	fe 01       	movw	r30, r28
    332a:	e8 5b       	subi	r30, 0xB8	; 184
    332c:	ff 4f       	sbci	r31, 0xFF	; 255
    332e:	80 81       	ld	r24, Z
    3330:	83 30       	cpi	r24, 0x03	; 3
    3332:	21 f5       	brne	.+72     	; 0x337c <smart_home+0x69a>
																			{
																				LCD_Write4String("no more try",0,0);
    3334:	81 ef       	ldi	r24, 0xF1	; 241
    3336:	90 e0       	ldi	r25, 0x00	; 0
    3338:	60 e0       	ldi	r22, 0x00	; 0
    333a:	40 e0       	ldi	r20, 0x00	; 0
    333c:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <LCD_Write4String>
																				while(1)
																				{
																					key_pad_ret_value= KEY_PAD_VidGitPresedcalc();
    3340:	0e 94 16 0c 	call	0x182c	; 0x182c <KEY_PAD_VidGitPresedcalc>
    3344:	fe 01       	movw	r30, r28
    3346:	e9 5b       	subi	r30, 0xB9	; 185
    3348:	ff 4f       	sbci	r31, 0xFF	; 255
    334a:	80 83       	st	Z, r24
																					if (key_pad_ret_value==99)
    334c:	fe 01       	movw	r30, r28
    334e:	e9 5b       	subi	r30, 0xB9	; 185
    3350:	ff 4f       	sbci	r31, 0xFF	; 255
    3352:	80 81       	ld	r24, Z
    3354:	83 36       	cpi	r24, 0x63	; 99
    3356:	a1 f7       	brne	.-24     	; 0x3340 <smart_home+0x65e>
																					{
																						LCD_VidWrite4Cmd(Clear_Display);
    3358:	81 e0       	ldi	r24, 0x01	; 1
    335a:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <LCD_VidWrite4Cmd>
																						j=0;
    335e:	fe 01       	movw	r30, r28
    3360:	e8 5b       	subi	r30, 0xB8	; 184
    3362:	ff 4f       	sbci	r31, 0xFF	; 255
    3364:	10 82       	st	Z, r1
																						arrindx_pass=0;
    3366:	fe 01       	movw	r30, r28
    3368:	e6 5b       	subi	r30, 0xB6	; 182
    336a:	ff 4f       	sbci	r31, 0xFF	; 255
    336c:	10 82       	st	Z, r1
																						LCD_Write4String("password=",0,0);
    336e:	80 e8       	ldi	r24, 0x80	; 128
    3370:	90 e0       	ldi	r25, 0x00	; 0
    3372:	60 e0       	ldi	r22, 0x00	; 0
    3374:	40 e0       	ldi	r20, 0x00	; 0
    3376:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <LCD_Write4String>
    337a:	c5 cd       	rjmp	.-1142   	; 0x2f06 <smart_home+0x224>
																						break;
																					}
																				}
																			}
																			else if(j<3)
    337c:	fe 01       	movw	r30, r28
    337e:	e8 5b       	subi	r30, 0xB8	; 184
    3380:	ff 4f       	sbci	r31, 0xFF	; 255
    3382:	80 81       	ld	r24, Z
    3384:	83 30       	cpi	r24, 0x03	; 3
    3386:	08 f0       	brcs	.+2      	; 0x338a <smart_home+0x6a8>
    3388:	be cd       	rjmp	.-1156   	; 0x2f06 <smart_home+0x224>
																			{
																			LCD_Write4String("password=",0,0);}
    338a:	80 e8       	ldi	r24, 0x80	; 128
    338c:	90 e0       	ldi	r25, 0x00	; 0
    338e:	60 e0       	ldi	r22, 0x00	; 0
    3390:	40 e0       	ldi	r20, 0x00	; 0
    3392:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <LCD_Write4String>
    3396:	b7 cd       	rjmp	.-1170   	; 0x2f06 <smart_home+0x224>
												}
											}
				}
				else
				{
					LCD_VidWrite4Cmd(Clear_Display);
    3398:	81 e0       	ldi	r24, 0x01	; 1
    339a:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <LCD_VidWrite4Cmd>
					LCD_Write4String("user name is wrong",0,0);
    339e:	8d ef       	ldi	r24, 0xFD	; 253
    33a0:	90 e0       	ldi	r25, 0x00	; 0
    33a2:	60 e0       	ldi	r22, 0x00	; 0
    33a4:	40 e0       	ldi	r20, 0x00	; 0
    33a6:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <LCD_Write4String>
    33aa:	80 e0       	ldi	r24, 0x00	; 0
    33ac:	90 e0       	ldi	r25, 0x00	; 0
    33ae:	aa e7       	ldi	r26, 0x7A	; 122
    33b0:	b4 e4       	ldi	r27, 0x44	; 68
    33b2:	8b 87       	std	Y+11, r24	; 0x0b
    33b4:	9c 87       	std	Y+12, r25	; 0x0c
    33b6:	ad 87       	std	Y+13, r26	; 0x0d
    33b8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    33bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    33be:	8d 85       	ldd	r24, Y+13	; 0x0d
    33c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    33c2:	20 e0       	ldi	r18, 0x00	; 0
    33c4:	30 e0       	ldi	r19, 0x00	; 0
    33c6:	4a ef       	ldi	r20, 0xFA	; 250
    33c8:	54 e4       	ldi	r21, 0x44	; 68
    33ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33ce:	dc 01       	movw	r26, r24
    33d0:	cb 01       	movw	r24, r22
    33d2:	8f 83       	std	Y+7, r24	; 0x07
    33d4:	98 87       	std	Y+8, r25	; 0x08
    33d6:	a9 87       	std	Y+9, r26	; 0x09
    33d8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    33da:	6f 81       	ldd	r22, Y+7	; 0x07
    33dc:	78 85       	ldd	r23, Y+8	; 0x08
    33de:	89 85       	ldd	r24, Y+9	; 0x09
    33e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    33e2:	20 e0       	ldi	r18, 0x00	; 0
    33e4:	30 e0       	ldi	r19, 0x00	; 0
    33e6:	40 e8       	ldi	r20, 0x80	; 128
    33e8:	5f e3       	ldi	r21, 0x3F	; 63
    33ea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    33ee:	88 23       	and	r24, r24
    33f0:	2c f4       	brge	.+10     	; 0x33fc <smart_home+0x71a>
		__ticks = 1;
    33f2:	81 e0       	ldi	r24, 0x01	; 1
    33f4:	90 e0       	ldi	r25, 0x00	; 0
    33f6:	9e 83       	std	Y+6, r25	; 0x06
    33f8:	8d 83       	std	Y+5, r24	; 0x05
    33fa:	3f c0       	rjmp	.+126    	; 0x347a <smart_home+0x798>
	else if (__tmp > 65535)
    33fc:	6f 81       	ldd	r22, Y+7	; 0x07
    33fe:	78 85       	ldd	r23, Y+8	; 0x08
    3400:	89 85       	ldd	r24, Y+9	; 0x09
    3402:	9a 85       	ldd	r25, Y+10	; 0x0a
    3404:	20 e0       	ldi	r18, 0x00	; 0
    3406:	3f ef       	ldi	r19, 0xFF	; 255
    3408:	4f e7       	ldi	r20, 0x7F	; 127
    340a:	57 e4       	ldi	r21, 0x47	; 71
    340c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3410:	18 16       	cp	r1, r24
    3412:	4c f5       	brge	.+82     	; 0x3466 <smart_home+0x784>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3414:	6b 85       	ldd	r22, Y+11	; 0x0b
    3416:	7c 85       	ldd	r23, Y+12	; 0x0c
    3418:	8d 85       	ldd	r24, Y+13	; 0x0d
    341a:	9e 85       	ldd	r25, Y+14	; 0x0e
    341c:	20 e0       	ldi	r18, 0x00	; 0
    341e:	30 e0       	ldi	r19, 0x00	; 0
    3420:	40 e2       	ldi	r20, 0x20	; 32
    3422:	51 e4       	ldi	r21, 0x41	; 65
    3424:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3428:	dc 01       	movw	r26, r24
    342a:	cb 01       	movw	r24, r22
    342c:	bc 01       	movw	r22, r24
    342e:	cd 01       	movw	r24, r26
    3430:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3434:	dc 01       	movw	r26, r24
    3436:	cb 01       	movw	r24, r22
    3438:	9e 83       	std	Y+6, r25	; 0x06
    343a:	8d 83       	std	Y+5, r24	; 0x05
    343c:	0f c0       	rjmp	.+30     	; 0x345c <smart_home+0x77a>
    343e:	88 ec       	ldi	r24, 0xC8	; 200
    3440:	90 e0       	ldi	r25, 0x00	; 0
    3442:	9c 83       	std	Y+4, r25	; 0x04
    3444:	8b 83       	std	Y+3, r24	; 0x03
    3446:	8b 81       	ldd	r24, Y+3	; 0x03
    3448:	9c 81       	ldd	r25, Y+4	; 0x04
    344a:	01 97       	sbiw	r24, 0x01	; 1
    344c:	f1 f7       	brne	.-4      	; 0x344a <smart_home+0x768>
    344e:	9c 83       	std	Y+4, r25	; 0x04
    3450:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3452:	8d 81       	ldd	r24, Y+5	; 0x05
    3454:	9e 81       	ldd	r25, Y+6	; 0x06
    3456:	01 97       	sbiw	r24, 0x01	; 1
    3458:	9e 83       	std	Y+6, r25	; 0x06
    345a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    345c:	8d 81       	ldd	r24, Y+5	; 0x05
    345e:	9e 81       	ldd	r25, Y+6	; 0x06
    3460:	00 97       	sbiw	r24, 0x00	; 0
    3462:	69 f7       	brne	.-38     	; 0x343e <smart_home+0x75c>
    3464:	14 c0       	rjmp	.+40     	; 0x348e <smart_home+0x7ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3466:	6f 81       	ldd	r22, Y+7	; 0x07
    3468:	78 85       	ldd	r23, Y+8	; 0x08
    346a:	89 85       	ldd	r24, Y+9	; 0x09
    346c:	9a 85       	ldd	r25, Y+10	; 0x0a
    346e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3472:	dc 01       	movw	r26, r24
    3474:	cb 01       	movw	r24, r22
    3476:	9e 83       	std	Y+6, r25	; 0x06
    3478:	8d 83       	std	Y+5, r24	; 0x05
    347a:	8d 81       	ldd	r24, Y+5	; 0x05
    347c:	9e 81       	ldd	r25, Y+6	; 0x06
    347e:	9a 83       	std	Y+2, r25	; 0x02
    3480:	89 83       	std	Y+1, r24	; 0x01
    3482:	89 81       	ldd	r24, Y+1	; 0x01
    3484:	9a 81       	ldd	r25, Y+2	; 0x02
    3486:	01 97       	sbiw	r24, 0x01	; 1
    3488:	f1 f7       	brne	.-4      	; 0x3486 <smart_home+0x7a4>
    348a:	9a 83       	std	Y+2, r25	; 0x02
    348c:	89 83       	std	Y+1, r24	; 0x01
					_delay_ms(1000);
					arrindx=0;
    348e:	fe 01       	movw	r30, r28
    3490:	e5 5b       	subi	r30, 0xB5	; 181
    3492:	ff 4f       	sbci	r31, 0xFF	; 255
    3494:	10 82       	st	Z, r1
					i++;
    3496:	de 01       	movw	r26, r28
    3498:	a7 5b       	subi	r26, 0xB7	; 183
    349a:	bf 4f       	sbci	r27, 0xFF	; 255
    349c:	fe 01       	movw	r30, r28
    349e:	e7 5b       	subi	r30, 0xB7	; 183
    34a0:	ff 4f       	sbci	r31, 0xFF	; 255
    34a2:	80 81       	ld	r24, Z
    34a4:	8f 5f       	subi	r24, 0xFF	; 255
    34a6:	8c 93       	st	X, r24
					LCD_VidWrite4Cmd(Clear_Display);
    34a8:	81 e0       	ldi	r24, 0x01	; 1
    34aa:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <LCD_VidWrite4Cmd>
					if(i==3)
    34ae:	fe 01       	movw	r30, r28
    34b0:	e7 5b       	subi	r30, 0xB7	; 183
    34b2:	ff 4f       	sbci	r31, 0xFF	; 255
    34b4:	80 81       	ld	r24, Z
    34b6:	83 30       	cpi	r24, 0x03	; 3
    34b8:	21 f5       	brne	.+72     	; 0x3502 <smart_home+0x820>
					{
						LCD_Write4String("no more try",0,0);
    34ba:	81 ef       	ldi	r24, 0xF1	; 241
    34bc:	90 e0       	ldi	r25, 0x00	; 0
    34be:	60 e0       	ldi	r22, 0x00	; 0
    34c0:	40 e0       	ldi	r20, 0x00	; 0
    34c2:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <LCD_Write4String>
						while(1)
						{
							key_pad_ret_value= KEY_PAD_VidGitPresedcalc();
    34c6:	0e 94 16 0c 	call	0x182c	; 0x182c <KEY_PAD_VidGitPresedcalc>
    34ca:	fe 01       	movw	r30, r28
    34cc:	e9 5b       	subi	r30, 0xB9	; 185
    34ce:	ff 4f       	sbci	r31, 0xFF	; 255
    34d0:	80 83       	st	Z, r24
							if (key_pad_ret_value==99)
    34d2:	fe 01       	movw	r30, r28
    34d4:	e9 5b       	subi	r30, 0xB9	; 185
    34d6:	ff 4f       	sbci	r31, 0xFF	; 255
    34d8:	80 81       	ld	r24, Z
    34da:	83 36       	cpi	r24, 0x63	; 99
    34dc:	a1 f7       	brne	.-24     	; 0x34c6 <smart_home+0x7e4>
							{
								LCD_VidWrite4Cmd(Clear_Display);
    34de:	81 e0       	ldi	r24, 0x01	; 1
    34e0:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <LCD_VidWrite4Cmd>
								i=0;
    34e4:	fe 01       	movw	r30, r28
    34e6:	e7 5b       	subi	r30, 0xB7	; 183
    34e8:	ff 4f       	sbci	r31, 0xFF	; 255
    34ea:	10 82       	st	Z, r1
								arrindx=0;
    34ec:	fe 01       	movw	r30, r28
    34ee:	e5 5b       	subi	r30, 0xB5	; 181
    34f0:	ff 4f       	sbci	r31, 0xFF	; 255
    34f2:	10 82       	st	Z, r1
								LCD_Write4String("user name=",0,0);
    34f4:	80 e6       	ldi	r24, 0x60	; 96
    34f6:	90 e0       	ldi	r25, 0x00	; 0
    34f8:	60 e0       	ldi	r22, 0x00	; 0
    34fa:	40 e0       	ldi	r20, 0x00	; 0
    34fc:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <LCD_Write4String>
    3500:	1e cc       	rjmp	.-1988   	; 0x2d3e <smart_home+0x5c>
								break;
							}
						}
					}
					else if(i<3)
    3502:	fe 01       	movw	r30, r28
    3504:	e7 5b       	subi	r30, 0xB7	; 183
    3506:	ff 4f       	sbci	r31, 0xFF	; 255
    3508:	80 81       	ld	r24, Z
    350a:	83 30       	cpi	r24, 0x03	; 3
    350c:	08 f0       	brcs	.+2      	; 0x3510 <smart_home+0x82e>
    350e:	17 cc       	rjmp	.-2002   	; 0x2d3e <smart_home+0x5c>
					{
					LCD_Write4String("user name=",0,0);}
    3510:	80 e6       	ldi	r24, 0x60	; 96
    3512:	90 e0       	ldi	r25, 0x00	; 0
    3514:	60 e0       	ldi	r22, 0x00	; 0
    3516:	40 e0       	ldi	r20, 0x00	; 0
    3518:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <LCD_Write4String>
    351c:	10 cc       	rjmp	.-2016   	; 0x2d3e <smart_home+0x5c>

0000351e <func>:
	}
}

//TIMER 0 FUNCTION TOGGAL LED
void func(void)
{
    351e:	df 93       	push	r29
    3520:	cf 93       	push	r28
    3522:	cd b7       	in	r28, 0x3d	; 61
    3524:	de b7       	in	r29, 0x3e	; 62
	u8 static counter =0;
	counter++;
    3526:	80 91 4d 01 	lds	r24, 0x014D
    352a:	8f 5f       	subi	r24, 0xFF	; 255
    352c:	80 93 4d 01 	sts	0x014D, r24
	if(counter==123)
    3530:	80 91 4d 01 	lds	r24, 0x014D
    3534:	8b 37       	cpi	r24, 0x7B	; 123
    3536:	01 f5       	brne	.+64     	; 0x3578 <func+0x5a>
	{
		DIO_VidSetPinDirection(PORTC,PIN0,OUTPUT);
    3538:	82 e0       	ldi	r24, 0x02	; 2
    353a:	60 e0       	ldi	r22, 0x00	; 0
    353c:	41 e0       	ldi	r20, 0x01	; 1
    353e:	0e 94 a4 06 	call	0xd48	; 0xd48 <DIO_VidSetPinDirection>
		DIO_VidSetPinDirection(PORTC,PIN1,OUTPUT);
    3542:	82 e0       	ldi	r24, 0x02	; 2
    3544:	61 e0       	ldi	r22, 0x01	; 1
    3546:	41 e0       	ldi	r20, 0x01	; 1
    3548:	0e 94 a4 06 	call	0xd48	; 0xd48 <DIO_VidSetPinDirection>
		DIO_VidSetPinDirection(PORTC,PIN7,OUTPUT);
    354c:	82 e0       	ldi	r24, 0x02	; 2
    354e:	67 e0       	ldi	r22, 0x07	; 7
    3550:	41 e0       	ldi	r20, 0x01	; 1
    3552:	0e 94 a4 06 	call	0xd48	; 0xd48 <DIO_VidSetPinDirection>
		DIO_VidToggPinValue(PORTC,PIN7,1);
    3556:	82 e0       	ldi	r24, 0x02	; 2
    3558:	67 e0       	ldi	r22, 0x07	; 7
    355a:	41 e0       	ldi	r20, 0x01	; 1
    355c:	0e 94 9f 09 	call	0x133e	; 0x133e <DIO_VidToggPinValue>
		DIO_VidToggPinValue(PORTC,PIN0,1);
    3560:	82 e0       	ldi	r24, 0x02	; 2
    3562:	60 e0       	ldi	r22, 0x00	; 0
    3564:	41 e0       	ldi	r20, 0x01	; 1
    3566:	0e 94 9f 09 	call	0x133e	; 0x133e <DIO_VidToggPinValue>
		DIO_VidToggPinValue(PORTC,PIN1,1);
    356a:	82 e0       	ldi	r24, 0x02	; 2
    356c:	61 e0       	ldi	r22, 0x01	; 1
    356e:	41 e0       	ldi	r20, 0x01	; 1
    3570:	0e 94 9f 09 	call	0x133e	; 0x133e <DIO_VidToggPinValue>
		counter=0;
    3574:	10 92 4d 01 	sts	0x014D, r1
 }
}
    3578:	cf 91       	pop	r28
    357a:	df 91       	pop	r29
    357c:	08 95       	ret

0000357e <func_2>:
//lm35 temprature sensor
void func_2(void)
{
    357e:	df 93       	push	r29
    3580:	cf 93       	push	r28
    3582:	00 d0       	rcall	.+0      	; 0x3584 <func_2+0x6>
    3584:	cd b7       	in	r28, 0x3d	; 61
    3586:	de b7       	in	r29, 0x3e	; 62
		DIO_VidSetPinDirection(PORTC,PIN0,OUTPUT);
    3588:	82 e0       	ldi	r24, 0x02	; 2
    358a:	60 e0       	ldi	r22, 0x00	; 0
    358c:	41 e0       	ldi	r20, 0x01	; 1
    358e:	0e 94 a4 06 	call	0xd48	; 0xd48 <DIO_VidSetPinDirection>
		DIO_VidSetPinDirection(PORTC,PIN7,OUTPUT);
    3592:	82 e0       	ldi	r24, 0x02	; 2
    3594:	67 e0       	ldi	r22, 0x07	; 7
    3596:	41 e0       	ldi	r20, 0x01	; 1
    3598:	0e 94 a4 06 	call	0xd48	; 0xd48 <DIO_VidSetPinDirection>
		u16 Analog_value=0;
    359c:	1a 82       	std	Y+2, r1	; 0x02
    359e:	19 82       	std	Y+1, r1	; 0x01
		Analog_value=(((ADC*5000UL)/1024)/10);
    35a0:	e4 e2       	ldi	r30, 0x24	; 36
    35a2:	f0 e0       	ldi	r31, 0x00	; 0
    35a4:	80 81       	ld	r24, Z
    35a6:	91 81       	ldd	r25, Z+1	; 0x01
    35a8:	cc 01       	movw	r24, r24
    35aa:	a0 e0       	ldi	r26, 0x00	; 0
    35ac:	b0 e0       	ldi	r27, 0x00	; 0
    35ae:	28 e8       	ldi	r18, 0x88	; 136
    35b0:	33 e1       	ldi	r19, 0x13	; 19
    35b2:	40 e0       	ldi	r20, 0x00	; 0
    35b4:	50 e0       	ldi	r21, 0x00	; 0
    35b6:	bc 01       	movw	r22, r24
    35b8:	cd 01       	movw	r24, r26
    35ba:	0e 94 55 1c 	call	0x38aa	; 0x38aa <__mulsi3>
    35be:	dc 01       	movw	r26, r24
    35c0:	cb 01       	movw	r24, r22
    35c2:	20 e0       	ldi	r18, 0x00	; 0
    35c4:	38 e2       	ldi	r19, 0x28	; 40
    35c6:	40 e0       	ldi	r20, 0x00	; 0
    35c8:	50 e0       	ldi	r21, 0x00	; 0
    35ca:	bc 01       	movw	r22, r24
    35cc:	cd 01       	movw	r24, r26
    35ce:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <__udivmodsi4>
    35d2:	da 01       	movw	r26, r20
    35d4:	c9 01       	movw	r24, r18
    35d6:	9a 83       	std	Y+2, r25	; 0x02
    35d8:	89 83       	std	Y+1, r24	; 0x01
		LCD_GoToPosition(1,0);
    35da:	81 e0       	ldi	r24, 0x01	; 1
    35dc:	60 e0       	ldi	r22, 0x00	; 0
    35de:	0e 94 9b 14 	call	0x2936	; 0x2936 <LCD_GoToPosition>
		LCD_Write4String("tempruture= ",0,0);
    35e2:	80 e1       	ldi	r24, 0x10	; 16
    35e4:	91 e0       	ldi	r25, 0x01	; 1
    35e6:	60 e0       	ldi	r22, 0x00	; 0
    35e8:	40 e0       	ldi	r20, 0x00	; 0
    35ea:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <LCD_Write4String>
		LCD_VidDisp4Number(Analog_value);
    35ee:	89 81       	ldd	r24, Y+1	; 0x01
    35f0:	9a 81       	ldd	r25, Y+2	; 0x02
    35f2:	cc 01       	movw	r24, r24
    35f4:	a0 e0       	ldi	r26, 0x00	; 0
    35f6:	b0 e0       	ldi	r27, 0x00	; 0
    35f8:	bc 01       	movw	r22, r24
    35fa:	cd 01       	movw	r24, r26
    35fc:	0e 94 bf 14 	call	0x297e	; 0x297e <LCD_VidDisp4Number>
		DIO_VidToggPinValue(PORTC,PIN7,0);
    3600:	82 e0       	ldi	r24, 0x02	; 2
    3602:	67 e0       	ldi	r22, 0x07	; 7
    3604:	40 e0       	ldi	r20, 0x00	; 0
    3606:	0e 94 9f 09 	call	0x133e	; 0x133e <DIO_VidToggPinValue>
		DIO_VidToggPinValue(PORTC,PIN0,0);
    360a:	82 e0       	ldi	r24, 0x02	; 2
    360c:	60 e0       	ldi	r22, 0x00	; 0
    360e:	40 e0       	ldi	r20, 0x00	; 0
    3610:	0e 94 9f 09 	call	0x133e	; 0x133e <DIO_VidToggPinValue>
		//_delay_ms(1000);
		if(Analog_value>33)
    3614:	89 81       	ldd	r24, Y+1	; 0x01
    3616:	9a 81       	ldd	r25, Y+2	; 0x02
    3618:	82 32       	cpi	r24, 0x22	; 34
    361a:	91 05       	cpc	r25, r1
    361c:	50 f0       	brcs	.+20     	; 0x3632 <func_2+0xb4>
		{

			DIO_VidToggPinValue(PORTC,PIN7,1);
    361e:	82 e0       	ldi	r24, 0x02	; 2
    3620:	67 e0       	ldi	r22, 0x07	; 7
    3622:	41 e0       	ldi	r20, 0x01	; 1
    3624:	0e 94 9f 09 	call	0x133e	; 0x133e <DIO_VidToggPinValue>
			DIO_VidToggPinValue(PORTC,PIN0,1);
    3628:	82 e0       	ldi	r24, 0x02	; 2
    362a:	60 e0       	ldi	r22, 0x00	; 0
    362c:	41 e0       	ldi	r20, 0x01	; 1
    362e:	0e 94 9f 09 	call	0x133e	; 0x133e <DIO_VidToggPinValue>
		}
}
    3632:	0f 90       	pop	r0
    3634:	0f 90       	pop	r0
    3636:	cf 91       	pop	r28
    3638:	df 91       	pop	r29
    363a:	08 95       	ret

0000363c <func_1>:
//ldr sensor
void func_1(void)
{
    363c:	df 93       	push	r29
    363e:	cf 93       	push	r28
    3640:	cd b7       	in	r28, 0x3d	; 61
    3642:	de b7       	in	r29, 0x3e	; 62
		u16 static Analog_value=0;
		LCD_clearpostion();
    3644:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <LCD_clearpostion>
		LCD_GoToPosition(1,0);
    3648:	81 e0       	ldi	r24, 0x01	; 1
    364a:	60 e0       	ldi	r22, 0x00	; 0
    364c:	0e 94 9b 14 	call	0x2936	; 0x2936 <LCD_GoToPosition>
		LCD_VidWrite4Data(0);
    3650:	80 e0       	ldi	r24, 0x00	; 0
    3652:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <LCD_VidWrite4Data>
		LCD_clearpostion();
    3656:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <LCD_clearpostion>
		LCD_GoToPosition(1,1);
    365a:	81 e0       	ldi	r24, 0x01	; 1
    365c:	61 e0       	ldi	r22, 0x01	; 1
    365e:	0e 94 9b 14 	call	0x2936	; 0x2936 <LCD_GoToPosition>
		LCD_VidWrite4Data(0);
    3662:	80 e0       	ldi	r24, 0x00	; 0
    3664:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <LCD_VidWrite4Data>
		LCD_clearpostion();
    3668:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <LCD_clearpostion>
		LCD_GoToPosition(1,2);
    366c:	81 e0       	ldi	r24, 0x01	; 1
    366e:	62 e0       	ldi	r22, 0x02	; 2
    3670:	0e 94 9b 14 	call	0x2936	; 0x2936 <LCD_GoToPosition>
		LCD_VidWrite4Data(0);
    3674:	80 e0       	ldi	r24, 0x00	; 0
    3676:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <LCD_VidWrite4Data>
		LCD_clearpostion();
    367a:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <LCD_clearpostion>
		LCD_GoToPosition(1,3);
    367e:	81 e0       	ldi	r24, 0x01	; 1
    3680:	63 e0       	ldi	r22, 0x03	; 3
    3682:	0e 94 9b 14 	call	0x2936	; 0x2936 <LCD_GoToPosition>
		LCD_VidWrite4Data(0);
    3686:	80 e0       	ldi	r24, 0x00	; 0
    3688:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <LCD_VidWrite4Data>
		LCD_clearpostion();
    368c:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <LCD_clearpostion>
		LCD_GoToPosition(1,4);
    3690:	81 e0       	ldi	r24, 0x01	; 1
    3692:	64 e0       	ldi	r22, 0x04	; 4
    3694:	0e 94 9b 14 	call	0x2936	; 0x2936 <LCD_GoToPosition>
		LCD_VidWrite4Data(0);
    3698:	80 e0       	ldi	r24, 0x00	; 0
    369a:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <LCD_VidWrite4Data>
		Analog_value=(((ADC*5000UL)/1024));
    369e:	e4 e2       	ldi	r30, 0x24	; 36
    36a0:	f0 e0       	ldi	r31, 0x00	; 0
    36a2:	80 81       	ld	r24, Z
    36a4:	91 81       	ldd	r25, Z+1	; 0x01
    36a6:	cc 01       	movw	r24, r24
    36a8:	a0 e0       	ldi	r26, 0x00	; 0
    36aa:	b0 e0       	ldi	r27, 0x00	; 0
    36ac:	28 e8       	ldi	r18, 0x88	; 136
    36ae:	33 e1       	ldi	r19, 0x13	; 19
    36b0:	40 e0       	ldi	r20, 0x00	; 0
    36b2:	50 e0       	ldi	r21, 0x00	; 0
    36b4:	bc 01       	movw	r22, r24
    36b6:	cd 01       	movw	r24, r26
    36b8:	0e 94 55 1c 	call	0x38aa	; 0x38aa <__mulsi3>
    36bc:	dc 01       	movw	r26, r24
    36be:	cb 01       	movw	r24, r22
    36c0:	07 2e       	mov	r0, r23
    36c2:	7a e0       	ldi	r23, 0x0A	; 10
    36c4:	b6 95       	lsr	r27
    36c6:	a7 95       	ror	r26
    36c8:	97 95       	ror	r25
    36ca:	87 95       	ror	r24
    36cc:	7a 95       	dec	r23
    36ce:	d1 f7       	brne	.-12     	; 0x36c4 <func_1+0x88>
    36d0:	70 2d       	mov	r23, r0
    36d2:	90 93 4f 01 	sts	0x014F, r25
    36d6:	80 93 4e 01 	sts	0x014E, r24

		if(Analog_value<=1500)
    36da:	80 91 4e 01 	lds	r24, 0x014E
    36de:	90 91 4f 01 	lds	r25, 0x014F
    36e2:	25 e0       	ldi	r18, 0x05	; 5
    36e4:	8d 3d       	cpi	r24, 0xDD	; 221
    36e6:	92 07       	cpc	r25, r18
    36e8:	18 f5       	brcc	.+70     	; 0x3730 <func_1+0xf4>
		{
			LCD_clearpostion();
    36ea:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <LCD_clearpostion>
			LCD_GoToPosition(1,3);
    36ee:	81 e0       	ldi	r24, 0x01	; 1
    36f0:	63 e0       	ldi	r22, 0x03	; 3
    36f2:	0e 94 9b 14 	call	0x2936	; 0x2936 <LCD_GoToPosition>
			LCD_VidWrite4Data(0);
    36f6:	80 e0       	ldi	r24, 0x00	; 0
    36f8:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <LCD_VidWrite4Data>
			LCD_clearpostion();
    36fc:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <LCD_clearpostion>
			LCD_GoToPosition(1,2);
    3700:	81 e0       	ldi	r24, 0x01	; 1
    3702:	62 e0       	ldi	r22, 0x02	; 2
    3704:	0e 94 9b 14 	call	0x2936	; 0x2936 <LCD_GoToPosition>
			LCD_VidWrite4Data(0);
    3708:	80 e0       	ldi	r24, 0x00	; 0
    370a:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <LCD_VidWrite4Data>
			LCD_GoToPosition(1,0);
    370e:	81 e0       	ldi	r24, 0x01	; 1
    3710:	60 e0       	ldi	r22, 0x00	; 0
    3712:	0e 94 9b 14 	call	0x2936	; 0x2936 <LCD_GoToPosition>
			LCD_VidDisp4Number(0);
    3716:	60 e0       	ldi	r22, 0x00	; 0
    3718:	70 e0       	ldi	r23, 0x00	; 0
    371a:	80 e0       	ldi	r24, 0x00	; 0
    371c:	90 e0       	ldi	r25, 0x00	; 0
    371e:	0e 94 bf 14 	call	0x297e	; 0x297e <LCD_VidDisp4Number>
			LCD_Write4String("%:",1,1);
    3722:	8d e1       	ldi	r24, 0x1D	; 29
    3724:	91 e0       	ldi	r25, 0x01	; 1
    3726:	61 e0       	ldi	r22, 0x01	; 1
    3728:	41 e0       	ldi	r20, 0x01	; 1
    372a:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <LCD_Write4String>
    372e:	ba c0       	rjmp	.+372    	; 0x38a4 <func_1+0x268>
		}
		else if(Analog_value>1200 && Analog_value<=2200 )
    3730:	80 91 4e 01 	lds	r24, 0x014E
    3734:	90 91 4f 01 	lds	r25, 0x014F
    3738:	24 e0       	ldi	r18, 0x04	; 4
    373a:	81 3b       	cpi	r24, 0xB1	; 177
    373c:	92 07       	cpc	r25, r18
    373e:	68 f1       	brcs	.+90     	; 0x379a <func_1+0x15e>
    3740:	80 91 4e 01 	lds	r24, 0x014E
    3744:	90 91 4f 01 	lds	r25, 0x014F
    3748:	28 e0       	ldi	r18, 0x08	; 8
    374a:	89 39       	cpi	r24, 0x99	; 153
    374c:	92 07       	cpc	r25, r18
    374e:	28 f5       	brcc	.+74     	; 0x379a <func_1+0x15e>
		{
			LCD_clearpostion();
    3750:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <LCD_clearpostion>
			LCD_GoToPosition(1,3);
    3754:	81 e0       	ldi	r24, 0x01	; 1
    3756:	63 e0       	ldi	r22, 0x03	; 3
    3758:	0e 94 9b 14 	call	0x2936	; 0x2936 <LCD_GoToPosition>
			LCD_VidWrite4Data(0);
    375c:	80 e0       	ldi	r24, 0x00	; 0
    375e:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <LCD_VidWrite4Data>
			Analog_value=25;
    3762:	89 e1       	ldi	r24, 0x19	; 25
    3764:	90 e0       	ldi	r25, 0x00	; 0
    3766:	90 93 4f 01 	sts	0x014F, r25
    376a:	80 93 4e 01 	sts	0x014E, r24
			LCD_GoToPosition(1,0);
    376e:	81 e0       	ldi	r24, 0x01	; 1
    3770:	60 e0       	ldi	r22, 0x00	; 0
    3772:	0e 94 9b 14 	call	0x2936	; 0x2936 <LCD_GoToPosition>
			LCD_VidDisp4Number(Analog_value);
    3776:	80 91 4e 01 	lds	r24, 0x014E
    377a:	90 91 4f 01 	lds	r25, 0x014F
    377e:	cc 01       	movw	r24, r24
    3780:	a0 e0       	ldi	r26, 0x00	; 0
    3782:	b0 e0       	ldi	r27, 0x00	; 0
    3784:	bc 01       	movw	r22, r24
    3786:	cd 01       	movw	r24, r26
    3788:	0e 94 bf 14 	call	0x297e	; 0x297e <LCD_VidDisp4Number>
			LCD_Write4String("%:",1,2);
    378c:	8d e1       	ldi	r24, 0x1D	; 29
    378e:	91 e0       	ldi	r25, 0x01	; 1
    3790:	61 e0       	ldi	r22, 0x01	; 1
    3792:	42 e0       	ldi	r20, 0x02	; 2
    3794:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <LCD_Write4String>
    3798:	85 c0       	rjmp	.+266    	; 0x38a4 <func_1+0x268>
		}

		else if(Analog_value>2200 && Analog_value<=2700 )
    379a:	80 91 4e 01 	lds	r24, 0x014E
    379e:	90 91 4f 01 	lds	r25, 0x014F
    37a2:	28 e0       	ldi	r18, 0x08	; 8
    37a4:	89 39       	cpi	r24, 0x99	; 153
    37a6:	92 07       	cpc	r25, r18
    37a8:	68 f1       	brcs	.+90     	; 0x3804 <func_1+0x1c8>
    37aa:	80 91 4e 01 	lds	r24, 0x014E
    37ae:	90 91 4f 01 	lds	r25, 0x014F
    37b2:	2a e0       	ldi	r18, 0x0A	; 10
    37b4:	8d 38       	cpi	r24, 0x8D	; 141
    37b6:	92 07       	cpc	r25, r18
    37b8:	28 f5       	brcc	.+74     	; 0x3804 <func_1+0x1c8>
		{
			LCD_clearpostion();
    37ba:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <LCD_clearpostion>
			LCD_GoToPosition(1,3);
    37be:	81 e0       	ldi	r24, 0x01	; 1
    37c0:	63 e0       	ldi	r22, 0x03	; 3
    37c2:	0e 94 9b 14 	call	0x2936	; 0x2936 <LCD_GoToPosition>
			LCD_VidWrite4Data(0);
    37c6:	80 e0       	ldi	r24, 0x00	; 0
    37c8:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <LCD_VidWrite4Data>
			Analog_value=50;
    37cc:	82 e3       	ldi	r24, 0x32	; 50
    37ce:	90 e0       	ldi	r25, 0x00	; 0
    37d0:	90 93 4f 01 	sts	0x014F, r25
    37d4:	80 93 4e 01 	sts	0x014E, r24
			LCD_GoToPosition(1,0);
    37d8:	81 e0       	ldi	r24, 0x01	; 1
    37da:	60 e0       	ldi	r22, 0x00	; 0
    37dc:	0e 94 9b 14 	call	0x2936	; 0x2936 <LCD_GoToPosition>
			LCD_VidDisp4Number(Analog_value);
    37e0:	80 91 4e 01 	lds	r24, 0x014E
    37e4:	90 91 4f 01 	lds	r25, 0x014F
    37e8:	cc 01       	movw	r24, r24
    37ea:	a0 e0       	ldi	r26, 0x00	; 0
    37ec:	b0 e0       	ldi	r27, 0x00	; 0
    37ee:	bc 01       	movw	r22, r24
    37f0:	cd 01       	movw	r24, r26
    37f2:	0e 94 bf 14 	call	0x297e	; 0x297e <LCD_VidDisp4Number>
			LCD_Write4String("%:",1,2);
    37f6:	8d e1       	ldi	r24, 0x1D	; 29
    37f8:	91 e0       	ldi	r25, 0x01	; 1
    37fa:	61 e0       	ldi	r22, 0x01	; 1
    37fc:	42 e0       	ldi	r20, 0x02	; 2
    37fe:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <LCD_Write4String>
    3802:	50 c0       	rjmp	.+160    	; 0x38a4 <func_1+0x268>
		}
		else if(Analog_value>2700 && Analog_value<=3500 )
    3804:	80 91 4e 01 	lds	r24, 0x014E
    3808:	90 91 4f 01 	lds	r25, 0x014F
    380c:	2a e0       	ldi	r18, 0x0A	; 10
    380e:	8d 38       	cpi	r24, 0x8D	; 141
    3810:	92 07       	cpc	r25, r18
    3812:	68 f1       	brcs	.+90     	; 0x386e <func_1+0x232>
    3814:	80 91 4e 01 	lds	r24, 0x014E
    3818:	90 91 4f 01 	lds	r25, 0x014F
    381c:	2d e0       	ldi	r18, 0x0D	; 13
    381e:	8d 3a       	cpi	r24, 0xAD	; 173
    3820:	92 07       	cpc	r25, r18
    3822:	28 f5       	brcc	.+74     	; 0x386e <func_1+0x232>
			{
			LCD_clearpostion();
    3824:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <LCD_clearpostion>
			LCD_GoToPosition(1,3);
    3828:	81 e0       	ldi	r24, 0x01	; 1
    382a:	63 e0       	ldi	r22, 0x03	; 3
    382c:	0e 94 9b 14 	call	0x2936	; 0x2936 <LCD_GoToPosition>
			LCD_VidWrite4Data(0);
    3830:	80 e0       	ldi	r24, 0x00	; 0
    3832:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <LCD_VidWrite4Data>
				Analog_value=75;
    3836:	8b e4       	ldi	r24, 0x4B	; 75
    3838:	90 e0       	ldi	r25, 0x00	; 0
    383a:	90 93 4f 01 	sts	0x014F, r25
    383e:	80 93 4e 01 	sts	0x014E, r24
				LCD_GoToPosition(1,0);
    3842:	81 e0       	ldi	r24, 0x01	; 1
    3844:	60 e0       	ldi	r22, 0x00	; 0
    3846:	0e 94 9b 14 	call	0x2936	; 0x2936 <LCD_GoToPosition>
				LCD_VidDisp4Number(Analog_value);
    384a:	80 91 4e 01 	lds	r24, 0x014E
    384e:	90 91 4f 01 	lds	r25, 0x014F
    3852:	cc 01       	movw	r24, r24
    3854:	a0 e0       	ldi	r26, 0x00	; 0
    3856:	b0 e0       	ldi	r27, 0x00	; 0
    3858:	bc 01       	movw	r22, r24
    385a:	cd 01       	movw	r24, r26
    385c:	0e 94 bf 14 	call	0x297e	; 0x297e <LCD_VidDisp4Number>
				LCD_Write4String("%:",1,2);
    3860:	8d e1       	ldi	r24, 0x1D	; 29
    3862:	91 e0       	ldi	r25, 0x01	; 1
    3864:	61 e0       	ldi	r22, 0x01	; 1
    3866:	42 e0       	ldi	r20, 0x02	; 2
    3868:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <LCD_Write4String>
    386c:	1b c0       	rjmp	.+54     	; 0x38a4 <func_1+0x268>
			}
		else
		{
			Analog_value=100;
    386e:	84 e6       	ldi	r24, 0x64	; 100
    3870:	90 e0       	ldi	r25, 0x00	; 0
    3872:	90 93 4f 01 	sts	0x014F, r25
    3876:	80 93 4e 01 	sts	0x014E, r24
			LCD_GoToPosition(1,0);
    387a:	81 e0       	ldi	r24, 0x01	; 1
    387c:	60 e0       	ldi	r22, 0x00	; 0
    387e:	0e 94 9b 14 	call	0x2936	; 0x2936 <LCD_GoToPosition>
			LCD_VidDisp4Number(Analog_value);
    3882:	80 91 4e 01 	lds	r24, 0x014E
    3886:	90 91 4f 01 	lds	r25, 0x014F
    388a:	cc 01       	movw	r24, r24
    388c:	a0 e0       	ldi	r26, 0x00	; 0
    388e:	b0 e0       	ldi	r27, 0x00	; 0
    3890:	bc 01       	movw	r22, r24
    3892:	cd 01       	movw	r24, r26
    3894:	0e 94 bf 14 	call	0x297e	; 0x297e <LCD_VidDisp4Number>
			LCD_Write4String("%:",1,3);
    3898:	8d e1       	ldi	r24, 0x1D	; 29
    389a:	91 e0       	ldi	r25, 0x01	; 1
    389c:	61 e0       	ldi	r22, 0x01	; 1
    389e:	43 e0       	ldi	r20, 0x03	; 3
    38a0:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <LCD_Write4String>
		}
}
    38a4:	cf 91       	pop	r28
    38a6:	df 91       	pop	r29
    38a8:	08 95       	ret

000038aa <__mulsi3>:
    38aa:	62 9f       	mul	r22, r18
    38ac:	d0 01       	movw	r26, r0
    38ae:	73 9f       	mul	r23, r19
    38b0:	f0 01       	movw	r30, r0
    38b2:	82 9f       	mul	r24, r18
    38b4:	e0 0d       	add	r30, r0
    38b6:	f1 1d       	adc	r31, r1
    38b8:	64 9f       	mul	r22, r20
    38ba:	e0 0d       	add	r30, r0
    38bc:	f1 1d       	adc	r31, r1
    38be:	92 9f       	mul	r25, r18
    38c0:	f0 0d       	add	r31, r0
    38c2:	83 9f       	mul	r24, r19
    38c4:	f0 0d       	add	r31, r0
    38c6:	74 9f       	mul	r23, r20
    38c8:	f0 0d       	add	r31, r0
    38ca:	65 9f       	mul	r22, r21
    38cc:	f0 0d       	add	r31, r0
    38ce:	99 27       	eor	r25, r25
    38d0:	72 9f       	mul	r23, r18
    38d2:	b0 0d       	add	r27, r0
    38d4:	e1 1d       	adc	r30, r1
    38d6:	f9 1f       	adc	r31, r25
    38d8:	63 9f       	mul	r22, r19
    38da:	b0 0d       	add	r27, r0
    38dc:	e1 1d       	adc	r30, r1
    38de:	f9 1f       	adc	r31, r25
    38e0:	bd 01       	movw	r22, r26
    38e2:	cf 01       	movw	r24, r30
    38e4:	11 24       	eor	r1, r1
    38e6:	08 95       	ret

000038e8 <__udivmodsi4>:
    38e8:	a1 e2       	ldi	r26, 0x21	; 33
    38ea:	1a 2e       	mov	r1, r26
    38ec:	aa 1b       	sub	r26, r26
    38ee:	bb 1b       	sub	r27, r27
    38f0:	fd 01       	movw	r30, r26
    38f2:	0d c0       	rjmp	.+26     	; 0x390e <__udivmodsi4_ep>

000038f4 <__udivmodsi4_loop>:
    38f4:	aa 1f       	adc	r26, r26
    38f6:	bb 1f       	adc	r27, r27
    38f8:	ee 1f       	adc	r30, r30
    38fa:	ff 1f       	adc	r31, r31
    38fc:	a2 17       	cp	r26, r18
    38fe:	b3 07       	cpc	r27, r19
    3900:	e4 07       	cpc	r30, r20
    3902:	f5 07       	cpc	r31, r21
    3904:	20 f0       	brcs	.+8      	; 0x390e <__udivmodsi4_ep>
    3906:	a2 1b       	sub	r26, r18
    3908:	b3 0b       	sbc	r27, r19
    390a:	e4 0b       	sbc	r30, r20
    390c:	f5 0b       	sbc	r31, r21

0000390e <__udivmodsi4_ep>:
    390e:	66 1f       	adc	r22, r22
    3910:	77 1f       	adc	r23, r23
    3912:	88 1f       	adc	r24, r24
    3914:	99 1f       	adc	r25, r25
    3916:	1a 94       	dec	r1
    3918:	69 f7       	brne	.-38     	; 0x38f4 <__udivmodsi4_loop>
    391a:	60 95       	com	r22
    391c:	70 95       	com	r23
    391e:	80 95       	com	r24
    3920:	90 95       	com	r25
    3922:	9b 01       	movw	r18, r22
    3924:	ac 01       	movw	r20, r24
    3926:	bd 01       	movw	r22, r26
    3928:	cf 01       	movw	r24, r30
    392a:	08 95       	ret

0000392c <__prologue_saves__>:
    392c:	2f 92       	push	r2
    392e:	3f 92       	push	r3
    3930:	4f 92       	push	r4
    3932:	5f 92       	push	r5
    3934:	6f 92       	push	r6
    3936:	7f 92       	push	r7
    3938:	8f 92       	push	r8
    393a:	9f 92       	push	r9
    393c:	af 92       	push	r10
    393e:	bf 92       	push	r11
    3940:	cf 92       	push	r12
    3942:	df 92       	push	r13
    3944:	ef 92       	push	r14
    3946:	ff 92       	push	r15
    3948:	0f 93       	push	r16
    394a:	1f 93       	push	r17
    394c:	cf 93       	push	r28
    394e:	df 93       	push	r29
    3950:	cd b7       	in	r28, 0x3d	; 61
    3952:	de b7       	in	r29, 0x3e	; 62
    3954:	ca 1b       	sub	r28, r26
    3956:	db 0b       	sbc	r29, r27
    3958:	0f b6       	in	r0, 0x3f	; 63
    395a:	f8 94       	cli
    395c:	de bf       	out	0x3e, r29	; 62
    395e:	0f be       	out	0x3f, r0	; 63
    3960:	cd bf       	out	0x3d, r28	; 61
    3962:	09 94       	ijmp

00003964 <__epilogue_restores__>:
    3964:	2a 88       	ldd	r2, Y+18	; 0x12
    3966:	39 88       	ldd	r3, Y+17	; 0x11
    3968:	48 88       	ldd	r4, Y+16	; 0x10
    396a:	5f 84       	ldd	r5, Y+15	; 0x0f
    396c:	6e 84       	ldd	r6, Y+14	; 0x0e
    396e:	7d 84       	ldd	r7, Y+13	; 0x0d
    3970:	8c 84       	ldd	r8, Y+12	; 0x0c
    3972:	9b 84       	ldd	r9, Y+11	; 0x0b
    3974:	aa 84       	ldd	r10, Y+10	; 0x0a
    3976:	b9 84       	ldd	r11, Y+9	; 0x09
    3978:	c8 84       	ldd	r12, Y+8	; 0x08
    397a:	df 80       	ldd	r13, Y+7	; 0x07
    397c:	ee 80       	ldd	r14, Y+6	; 0x06
    397e:	fd 80       	ldd	r15, Y+5	; 0x05
    3980:	0c 81       	ldd	r16, Y+4	; 0x04
    3982:	1b 81       	ldd	r17, Y+3	; 0x03
    3984:	aa 81       	ldd	r26, Y+2	; 0x02
    3986:	b9 81       	ldd	r27, Y+1	; 0x01
    3988:	ce 0f       	add	r28, r30
    398a:	d1 1d       	adc	r29, r1
    398c:	0f b6       	in	r0, 0x3f	; 63
    398e:	f8 94       	cli
    3990:	de bf       	out	0x3e, r29	; 62
    3992:	0f be       	out	0x3f, r0	; 63
    3994:	cd bf       	out	0x3d, r28	; 61
    3996:	ed 01       	movw	r28, r26
    3998:	08 95       	ret

0000399a <_exit>:
    399a:	f8 94       	cli

0000399c <__stop_program>:
    399c:	ff cf       	rjmp	.-2      	; 0x399c <__stop_program>
