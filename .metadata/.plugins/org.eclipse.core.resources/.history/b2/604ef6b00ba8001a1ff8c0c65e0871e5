#include "STD_TYPES.h"
#include "DIO_Register.h"
#include "BIT_Math.h"
#include "avr/delay.h"
#include "DIO_Interface.h"
#include "LCD_Interface.h"

void LCD_VidInit(void)
{
	_delay_ms(50); // wait for LCD to initialize
	DIO_VidSetPortDirection(PORTD, 0xff );
	DIO_VidSetPortDirection(PORTB, 0b00111000 ); //RS RW E

	LCD_VidWriteCommand(function_set_8_bit_lcd); 	//function set
	_delay_ms(1); // wait for LCD to Function set
	LCD_VidWriteCommand(Display_On_Cursor_OFF);	//Display On
	_delay_ms(1); // wait for LCD to Display On
	LCD_VidWriteCommand(Clear_Display);	//Clear Display
	_delay_ms(2); // wait for LCD to Clear Display

}

void LCD_VidWriteCommand(u8 LOC_u8Command)
{
	DIO_VidSetPinValue(PORTB, PIN3, OUT_LOW);  //RS = 0   register selection
	DIO_VidSetPinValue(PORTB, PIN4, OUT_LOW);  //RW = 0
	DIO_VidSetPortValue(PORTD, LOC_u8Command);  // Write Command
	DIO_VidSetPinValue(PORTB, PIN5, OUT_HIGH);  //Enable = 1 high rise edge
	_delay_ms(1);	// required by LCD Datasheet
	DIO_VidSetPinValue(PORTB, PIN5, OUT_LOW);  //Enable = 0  Falling edge
	_delay_ms(1); // give the LCD time to wite / display



}

void LCD_VidWriteData(u8 LOC_u8Data)
{
	DIO_VidSetPinValue(PORTB, PIN3, OUT_HIGH);  //RS = 0
	DIO_VidSetPinValue(PORTB, PIN4, OUT_LOW);  //RW = 0
	DIO_VidSetPortValue(PORTD, LOC_u8Data);  // Write data
	DIO_VidSetPinValue(PORTB, PIN5, OUT_HIGH);  //Enable = 1 high rise edge
	_delay_ms(1);	// required by LCD Datasheet
	DIO_VidSetPinValue(PORTB, PIN5, OUT_LOW);  //Enable = 0  Falling edge
	_delay_ms(1); // give the LCD time to wite / display

}

void LCD_VidString(u8* LOC_USER)
{
	u8 i=0;
	while(LOC_USER[i] !='\0')
	{
		LCD_VidWriteData(LOC_USER[i]);
		_delay_ms(2);
		i++;
	}
}

void LCD_VidDispNumber(u32 x)
{
	u32 revesed=0;
	u32 digit;
	while (x>0)
	{
		revesed=(revesed*10)+x%10;
		x=x/10;
		/*if(x%10==0)
		{
			revesed=
		}*/
	}
	while (revesed>0)
	{
		digit=revesed%10;
		LCD_VidWriteData(digit+48);
		revesed=revesed/10;
	}

}
void LCD_VidPostion(u8 row,u8 colm)
{
	if(row==0)
	{
		LCD_VidWriteCommand(DDRAM_address_row_one_lcd+colm);  //DDRAM address row one lcd
		_delay_ms(1);
	}
	else if(row==1)
		{
			LCD_VidWriteCommand(DDRAM_address_row_two_lcd+colm); //DDRAM address row two lcd
			_delay_ms(1);
		}

}
void LCD_VidGotoCGRAM()
{
	LCD_VidWriteCommand(SET_CGRAM_ADDRESS);
}
