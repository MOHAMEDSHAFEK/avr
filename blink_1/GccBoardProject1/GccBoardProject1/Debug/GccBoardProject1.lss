
GccBoardProject1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000116  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000116  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000148  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000184  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000069e  00000000  00000000  000001a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000573  00000000  00000000  00000842  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000457  00000000  00000000  00000db5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  0000120c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00006023  00000000  00000000  00001230  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000120  00000000  00000000  00007253  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00007373  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00000225  00000000  00000000  00007383  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	29 c0       	rjmp	.+82     	; 0x54 <__ctors_end>
   2:	00 00       	nop
   4:	2f c0       	rjmp	.+94     	; 0x64 <__bad_interrupt>
   6:	00 00       	nop
   8:	2d c0       	rjmp	.+90     	; 0x64 <__bad_interrupt>
   a:	00 00       	nop
   c:	2b c0       	rjmp	.+86     	; 0x64 <__bad_interrupt>
   e:	00 00       	nop
  10:	29 c0       	rjmp	.+82     	; 0x64 <__bad_interrupt>
  12:	00 00       	nop
  14:	27 c0       	rjmp	.+78     	; 0x64 <__bad_interrupt>
  16:	00 00       	nop
  18:	25 c0       	rjmp	.+74     	; 0x64 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	23 c0       	rjmp	.+70     	; 0x64 <__bad_interrupt>
  1e:	00 00       	nop
  20:	21 c0       	rjmp	.+66     	; 0x64 <__bad_interrupt>
  22:	00 00       	nop
  24:	1f c0       	rjmp	.+62     	; 0x64 <__bad_interrupt>
  26:	00 00       	nop
  28:	1d c0       	rjmp	.+58     	; 0x64 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	1b c0       	rjmp	.+54     	; 0x64 <__bad_interrupt>
  2e:	00 00       	nop
  30:	19 c0       	rjmp	.+50     	; 0x64 <__bad_interrupt>
  32:	00 00       	nop
  34:	17 c0       	rjmp	.+46     	; 0x64 <__bad_interrupt>
  36:	00 00       	nop
  38:	15 c0       	rjmp	.+42     	; 0x64 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	13 c0       	rjmp	.+38     	; 0x64 <__bad_interrupt>
  3e:	00 00       	nop
  40:	11 c0       	rjmp	.+34     	; 0x64 <__bad_interrupt>
  42:	00 00       	nop
  44:	0f c0       	rjmp	.+30     	; 0x64 <__bad_interrupt>
  46:	00 00       	nop
  48:	0d c0       	rjmp	.+26     	; 0x64 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	0b c0       	rjmp	.+22     	; 0x64 <__bad_interrupt>
  4e:	00 00       	nop
  50:	09 c0       	rjmp	.+18     	; 0x64 <__bad_interrupt>
	...

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	02 d0       	rcall	.+4      	; 0x66 <main>
  62:	2d c0       	rjmp	.+90     	; 0xbe <_exit>

00000064 <__bad_interrupt>:
  64:	cd cf       	rjmp	.-102    	; 0x0 <__vectors>

00000066 <main>:



int main(void)
{
	DDRB |= (1<<DDB1) ;
  66:	b9 9a       	sbi	0x17, 1	; 23
	DDRB |= (1<<DDB2) ;
  68:	ba 9a       	sbi	0x17, 2	; 23
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  6a:	2f e3       	ldi	r18, 0x3F	; 63
  6c:	8d e0       	ldi	r24, 0x0D	; 13
  6e:	93 e0       	ldi	r25, 0x03	; 3
  70:	21 50       	subi	r18, 0x01	; 1
  72:	80 40       	sbci	r24, 0x00	; 0
  74:	90 40       	sbci	r25, 0x00	; 0
  76:	e1 f7       	brne	.-8      	; 0x70 <main+0xa>
  78:	00 c0       	rjmp	.+0      	; 0x7a <main+0x14>
  7a:	00 00       	nop

    while (1)
    {
		_delay_ms(1000);
		PORTB |= (1<<PORTB1) ;
  7c:	c1 9a       	sbi	0x18, 1	; 24
		PORTB |= (1<<PORTB2) ;
  7e:	c2 9a       	sbi	0x18, 2	; 24
  80:	2f e7       	ldi	r18, 0x7F	; 127
  82:	8a e1       	ldi	r24, 0x1A	; 26
  84:	96 e0       	ldi	r25, 0x06	; 6
  86:	21 50       	subi	r18, 0x01	; 1
  88:	80 40       	sbci	r24, 0x00	; 0
  8a:	90 40       	sbci	r25, 0x00	; 0
  8c:	e1 f7       	brne	.-8      	; 0x86 <main+0x20>
  8e:	00 c0       	rjmp	.+0      	; 0x90 <main+0x2a>
  90:	00 00       	nop
		_delay_ms(2000);
		PORTB &= ~(1<<PORTB1) ;
  92:	c1 98       	cbi	0x18, 1	; 24
		PORTB &= ~(1<<PORTB2) ;
  94:	c2 98       	cbi	0x18, 2	; 24
  96:	87 ea       	ldi	r24, 0xA7	; 167
  98:	91 e6       	ldi	r25, 0x61	; 97
  9a:	01 97       	sbiw	r24, 0x01	; 1
  9c:	f1 f7       	brne	.-4      	; 0x9a <main+0x34>
  9e:	00 c0       	rjmp	.+0      	; 0xa0 <main+0x3a>
  a0:	00 00       	nop
		_delay_ms(100);
		PORTB |= (1<<PORTB1) ;
  a2:	c1 9a       	sbi	0x18, 1	; 24
		PORTB |= (1<<PORTB2) ;
  a4:	c2 9a       	sbi	0x18, 2	; 24
  a6:	9f e9       	ldi	r25, 0x9F	; 159
  a8:	26 e8       	ldi	r18, 0x86	; 134
  aa:	81 e0       	ldi	r24, 0x01	; 1
  ac:	91 50       	subi	r25, 0x01	; 1
  ae:	20 40       	sbci	r18, 0x00	; 0
  b0:	80 40       	sbci	r24, 0x00	; 0
  b2:	e1 f7       	brne	.-8      	; 0xac <main+0x46>
  b4:	00 c0       	rjmp	.+0      	; 0xb6 <main+0x50>
  b6:	00 00       	nop
		_delay_ms(500);
		PORTB &= ~(1<<PORTB1) ;
  b8:	c1 98       	cbi	0x18, 1	; 24
		PORTB &= ~(1<<PORTB2) ;
  ba:	c2 98       	cbi	0x18, 2	; 24
  bc:	d6 cf       	rjmp	.-84     	; 0x6a <main+0x4>

000000be <_exit>:
  be:	f8 94       	cli

000000c0 <__stop_program>:
  c0:	ff cf       	rjmp	.-2      	; 0xc0 <__stop_program>
