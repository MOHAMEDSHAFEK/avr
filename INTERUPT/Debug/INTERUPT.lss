
INTERUPT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000025da  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000028  00800060  000025da  0000264e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001fa4  00000000  00000000  00002678  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000d99  00000000  00000000  0000461c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  000053b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  000054f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  00005665  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  000072ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  00008199  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00008f48  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  000090a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  00009335  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00009b03  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 09 	jmp	0x127e	; 0x127e <__vector_2>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea ed       	ldi	r30, 0xDA	; 218
      68:	f5 e2       	ldi	r31, 0x25	; 37
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 38       	cpi	r26, 0x88	; 136
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 2a 12 	call	0x2454	; 0x2454 <main>
      7a:	0c 94 eb 12 	jmp	0x25d6	; 0x25d6 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 b4 12 	jmp	0x2568	; 0x2568 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 d0 12 	jmp	0x25a0	; 0x25a0 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 c0 12 	jmp	0x2580	; 0x2580 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 dc 12 	jmp	0x25b8	; 0x25b8 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 c0 12 	jmp	0x2580	; 0x2580 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 dc 12 	jmp	0x25b8	; 0x25b8 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 b4 12 	jmp	0x2568	; 0x2568 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 d0 12 	jmp	0x25a0	; 0x25a0 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 c0 12 	jmp	0x2580	; 0x2580 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 dc 12 	jmp	0x25b8	; 0x25b8 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 c0 12 	jmp	0x2580	; 0x2580 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 dc 12 	jmp	0x25b8	; 0x25b8 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 c0 12 	jmp	0x2580	; 0x2580 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 dc 12 	jmp	0x25b8	; 0x25b8 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 c4 12 	jmp	0x2588	; 0x2588 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 e0 12 	jmp	0x25c0	; 0x25c0 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <ADC_VidInit>:
#define  ADTS0 0
 *
 */
void ADC_VidInit(void)

{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADMUX,REFS0);
     b3e:	a7 e2       	ldi	r26, 0x27	; 39
     b40:	b0 e0       	ldi	r27, 0x00	; 0
     b42:	e7 e2       	ldi	r30, 0x27	; 39
     b44:	f0 e0       	ldi	r31, 0x00	; 0
     b46:	80 81       	ld	r24, Z
     b48:	80 64       	ori	r24, 0x40	; 64
     b4a:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,REFS1);              //V reference
     b4c:	a7 e2       	ldi	r26, 0x27	; 39
     b4e:	b0 e0       	ldi	r27, 0x00	; 0
     b50:	e7 e2       	ldi	r30, 0x27	; 39
     b52:	f0 e0       	ldi	r31, 0x00	; 0
     b54:	80 81       	ld	r24, Z
     b56:	8f 77       	andi	r24, 0x7F	; 127
     b58:	8c 93       	st	X, r24
	
	CLR_BIT(ADMUX,ADLAR);             //right adjast
     b5a:	a7 e2       	ldi	r26, 0x27	; 39
     b5c:	b0 e0       	ldi	r27, 0x00	; 0
     b5e:	e7 e2       	ldi	r30, 0x27	; 39
     b60:	f0 e0       	ldi	r31, 0x00	; 0
     b62:	80 81       	ld	r24, Z
     b64:	8f 7d       	andi	r24, 0xDF	; 223
     b66:	8c 93       	st	X, r24
	
	SET_BIT(ADCSRA,ADTS2);
     b68:	a6 e2       	ldi	r26, 0x26	; 38
     b6a:	b0 e0       	ldi	r27, 0x00	; 0
     b6c:	e6 e2       	ldi	r30, 0x26	; 38
     b6e:	f0 e0       	ldi	r31, 0x00	; 0
     b70:	80 81       	ld	r24, Z
     b72:	84 60       	ori	r24, 0x04	; 4
     b74:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADTS1);
     b76:	a6 e2       	ldi	r26, 0x26	; 38
     b78:	b0 e0       	ldi	r27, 0x00	; 0
     b7a:	e6 e2       	ldi	r30, 0x26	; 38
     b7c:	f0 e0       	ldi	r31, 0x00	; 0
     b7e:	80 81       	ld	r24, Z
     b80:	82 60       	ori	r24, 0x02	; 2
     b82:	8c 93       	st	X, r24
	CLR_BIT(ADCSRA,ADTS0);	         //Prescaler
     b84:	a6 e2       	ldi	r26, 0x26	; 38
     b86:	b0 e0       	ldi	r27, 0x00	; 0
     b88:	e6 e2       	ldi	r30, 0x26	; 38
     b8a:	f0 e0       	ldi	r31, 0x00	; 0
     b8c:	80 81       	ld	r24, Z
     b8e:	8e 7f       	andi	r24, 0xFE	; 254
     b90:	8c 93       	st	X, r24
	
	
	SET_BIT(ADCSRA,ADEN);            //enable ADC when it's running in the initialization it's will running in sleep mode
     b92:	a6 e2       	ldi	r26, 0x26	; 38
     b94:	b0 e0       	ldi	r27, 0x00	; 0
     b96:	e6 e2       	ldi	r30, 0x26	; 38
     b98:	f0 e0       	ldi	r31, 0x00	; 0
     b9a:	80 81       	ld	r24, Z
     b9c:	80 68       	ori	r24, 0x80	; 128
     b9e:	8c 93       	st	X, r24

	
}
     ba0:	cf 91       	pop	r28
     ba2:	df 91       	pop	r29
     ba4:	08 95       	ret

00000ba6 <ADC_U16GitDigital>:

u16 ADC_U16GitDigital(u8 LOC_Channel)
{
     ba6:	df 93       	push	r29
     ba8:	cf 93       	push	r28
     baa:	0f 92       	push	r0
     bac:	cd b7       	in	r28, 0x3d	; 61
     bae:	de b7       	in	r29, 0x3e	; 62
     bb0:	89 83       	std	Y+1, r24	; 0x01
	ADMUX&=0b11100000;               //singel ended
     bb2:	a7 e2       	ldi	r26, 0x27	; 39
     bb4:	b0 e0       	ldi	r27, 0x00	; 0
     bb6:	e7 e2       	ldi	r30, 0x27	; 39
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	80 81       	ld	r24, Z
     bbc:	80 7e       	andi	r24, 0xE0	; 224
     bbe:	8c 93       	st	X, r24
	ADMUX|=LOC_Channel;              //number of channel by user
     bc0:	a7 e2       	ldi	r26, 0x27	; 39
     bc2:	b0 e0       	ldi	r27, 0x00	; 0
     bc4:	e7 e2       	ldi	r30, 0x27	; 39
     bc6:	f0 e0       	ldi	r31, 0x00	; 0
     bc8:	90 81       	ld	r25, Z
     bca:	89 81       	ldd	r24, Y+1	; 0x01
     bcc:	89 2b       	or	r24, r25
     bce:	8c 93       	st	X, r24

	SET_BIT(ADCSRA,ADSC);           //Start Conversion
     bd0:	a6 e2       	ldi	r26, 0x26	; 38
     bd2:	b0 e0       	ldi	r27, 0x00	; 0
     bd4:	e6 e2       	ldi	r30, 0x26	; 38
     bd6:	f0 e0       	ldi	r31, 0x00	; 0
     bd8:	80 81       	ld	r24, Z
     bda:	80 64       	ori	r24, 0x40	; 64
     bdc:	8c 93       	st	X, r24
	while(0==GET_BIT(ADCSRA,ADIF))  //if ADC interrupt flag=0 waite until be one
     bde:	e6 e2       	ldi	r30, 0x26	; 38
     be0:	f0 e0       	ldi	r31, 0x00	; 0
     be2:	80 81       	ld	r24, Z
     be4:	82 95       	swap	r24
     be6:	8f 70       	andi	r24, 0x0F	; 15
     be8:	88 2f       	mov	r24, r24
     bea:	90 e0       	ldi	r25, 0x00	; 0
     bec:	81 70       	andi	r24, 0x01	; 1
     bee:	90 70       	andi	r25, 0x00	; 0
     bf0:	00 97       	sbiw	r24, 0x00	; 0
     bf2:	a9 f3       	breq	.-22     	; 0xbde <ADC_U16GitDigital+0x38>
	{
	}
	SET_BIT(ADCSRA,ADIF);           //reset the interrupt flag over write one to be zero
     bf4:	a6 e2       	ldi	r26, 0x26	; 38
     bf6:	b0 e0       	ldi	r27, 0x00	; 0
     bf8:	e6 e2       	ldi	r30, 0x26	; 38
     bfa:	f0 e0       	ldi	r31, 0x00	; 0
     bfc:	80 81       	ld	r24, Z
     bfe:	80 61       	ori	r24, 0x10	; 16
     c00:	8c 93       	st	X, r24
    return ADC;
     c02:	e4 e2       	ldi	r30, 0x24	; 36
     c04:	f0 e0       	ldi	r31, 0x00	; 0
     c06:	80 81       	ld	r24, Z
     c08:	91 81       	ldd	r25, Z+1	; 0x01

}
     c0a:	0f 90       	pop	r0
     c0c:	cf 91       	pop	r28
     c0e:	df 91       	pop	r29
     c10:	08 95       	ret

00000c12 <DIO_VidSetPinDirection>:
#include "STD_TYPES.h"
#include "DIO_Register.h"
#include "BIT_Math.h"

void DIO_VidSetPinDirection	( u8 LOC_u8Port, u8 LOC_u8Pin, u8 LOC_u8State)
{
     c12:	df 93       	push	r29
     c14:	cf 93       	push	r28
     c16:	cd b7       	in	r28, 0x3d	; 61
     c18:	de b7       	in	r29, 0x3e	; 62
     c1a:	27 97       	sbiw	r28, 0x07	; 7
     c1c:	0f b6       	in	r0, 0x3f	; 63
     c1e:	f8 94       	cli
     c20:	de bf       	out	0x3e, r29	; 62
     c22:	0f be       	out	0x3f, r0	; 63
     c24:	cd bf       	out	0x3d, r28	; 61
     c26:	89 83       	std	Y+1, r24	; 0x01
     c28:	6a 83       	std	Y+2, r22	; 0x02
     c2a:	4b 83       	std	Y+3, r20	; 0x03
	if ( OUTPUT==LOC_u8State)
     c2c:	8b 81       	ldd	r24, Y+3	; 0x03
     c2e:	81 30       	cpi	r24, 0x01	; 1
     c30:	09 f0       	breq	.+2      	; 0xc34 <DIO_VidSetPinDirection+0x22>
     c32:	6f c0       	rjmp	.+222    	; 0xd12 <DIO_VidSetPinDirection+0x100>
	{
		switch (LOC_u8Port)
     c34:	89 81       	ldd	r24, Y+1	; 0x01
     c36:	28 2f       	mov	r18, r24
     c38:	30 e0       	ldi	r19, 0x00	; 0
     c3a:	3f 83       	std	Y+7, r19	; 0x07
     c3c:	2e 83       	std	Y+6, r18	; 0x06
     c3e:	8e 81       	ldd	r24, Y+6	; 0x06
     c40:	9f 81       	ldd	r25, Y+7	; 0x07
     c42:	81 30       	cpi	r24, 0x01	; 1
     c44:	91 05       	cpc	r25, r1
     c46:	49 f1       	breq	.+82     	; 0xc9a <DIO_VidSetPinDirection+0x88>
     c48:	2e 81       	ldd	r18, Y+6	; 0x06
     c4a:	3f 81       	ldd	r19, Y+7	; 0x07
     c4c:	22 30       	cpi	r18, 0x02	; 2
     c4e:	31 05       	cpc	r19, r1
     c50:	2c f4       	brge	.+10     	; 0xc5c <DIO_VidSetPinDirection+0x4a>
     c52:	8e 81       	ldd	r24, Y+6	; 0x06
     c54:	9f 81       	ldd	r25, Y+7	; 0x07
     c56:	00 97       	sbiw	r24, 0x00	; 0
     c58:	61 f0       	breq	.+24     	; 0xc72 <DIO_VidSetPinDirection+0x60>
     c5a:	d2 c0       	rjmp	.+420    	; 0xe00 <DIO_VidSetPinDirection+0x1ee>
     c5c:	2e 81       	ldd	r18, Y+6	; 0x06
     c5e:	3f 81       	ldd	r19, Y+7	; 0x07
     c60:	22 30       	cpi	r18, 0x02	; 2
     c62:	31 05       	cpc	r19, r1
     c64:	71 f1       	breq	.+92     	; 0xcc2 <DIO_VidSetPinDirection+0xb0>
     c66:	8e 81       	ldd	r24, Y+6	; 0x06
     c68:	9f 81       	ldd	r25, Y+7	; 0x07
     c6a:	83 30       	cpi	r24, 0x03	; 3
     c6c:	91 05       	cpc	r25, r1
     c6e:	e9 f1       	breq	.+122    	; 0xcea <DIO_VidSetPinDirection+0xd8>
     c70:	c7 c0       	rjmp	.+398    	; 0xe00 <DIO_VidSetPinDirection+0x1ee>
		{
		case 0: SET_BIT(DDRA, LOC_u8Pin); break;
     c72:	aa e3       	ldi	r26, 0x3A	; 58
     c74:	b0 e0       	ldi	r27, 0x00	; 0
     c76:	ea e3       	ldi	r30, 0x3A	; 58
     c78:	f0 e0       	ldi	r31, 0x00	; 0
     c7a:	80 81       	ld	r24, Z
     c7c:	48 2f       	mov	r20, r24
     c7e:	8a 81       	ldd	r24, Y+2	; 0x02
     c80:	28 2f       	mov	r18, r24
     c82:	30 e0       	ldi	r19, 0x00	; 0
     c84:	81 e0       	ldi	r24, 0x01	; 1
     c86:	90 e0       	ldi	r25, 0x00	; 0
     c88:	02 2e       	mov	r0, r18
     c8a:	02 c0       	rjmp	.+4      	; 0xc90 <DIO_VidSetPinDirection+0x7e>
     c8c:	88 0f       	add	r24, r24
     c8e:	99 1f       	adc	r25, r25
     c90:	0a 94       	dec	r0
     c92:	e2 f7       	brpl	.-8      	; 0xc8c <DIO_VidSetPinDirection+0x7a>
     c94:	84 2b       	or	r24, r20
     c96:	8c 93       	st	X, r24
     c98:	b3 c0       	rjmp	.+358    	; 0xe00 <DIO_VidSetPinDirection+0x1ee>
		case 1: SET_BIT(DDRB, LOC_u8Pin); break;
     c9a:	a7 e3       	ldi	r26, 0x37	; 55
     c9c:	b0 e0       	ldi	r27, 0x00	; 0
     c9e:	e7 e3       	ldi	r30, 0x37	; 55
     ca0:	f0 e0       	ldi	r31, 0x00	; 0
     ca2:	80 81       	ld	r24, Z
     ca4:	48 2f       	mov	r20, r24
     ca6:	8a 81       	ldd	r24, Y+2	; 0x02
     ca8:	28 2f       	mov	r18, r24
     caa:	30 e0       	ldi	r19, 0x00	; 0
     cac:	81 e0       	ldi	r24, 0x01	; 1
     cae:	90 e0       	ldi	r25, 0x00	; 0
     cb0:	02 2e       	mov	r0, r18
     cb2:	02 c0       	rjmp	.+4      	; 0xcb8 <DIO_VidSetPinDirection+0xa6>
     cb4:	88 0f       	add	r24, r24
     cb6:	99 1f       	adc	r25, r25
     cb8:	0a 94       	dec	r0
     cba:	e2 f7       	brpl	.-8      	; 0xcb4 <DIO_VidSetPinDirection+0xa2>
     cbc:	84 2b       	or	r24, r20
     cbe:	8c 93       	st	X, r24
     cc0:	9f c0       	rjmp	.+318    	; 0xe00 <DIO_VidSetPinDirection+0x1ee>
		case 2: SET_BIT(DDRC, LOC_u8Pin); break;
     cc2:	a4 e3       	ldi	r26, 0x34	; 52
     cc4:	b0 e0       	ldi	r27, 0x00	; 0
     cc6:	e4 e3       	ldi	r30, 0x34	; 52
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	80 81       	ld	r24, Z
     ccc:	48 2f       	mov	r20, r24
     cce:	8a 81       	ldd	r24, Y+2	; 0x02
     cd0:	28 2f       	mov	r18, r24
     cd2:	30 e0       	ldi	r19, 0x00	; 0
     cd4:	81 e0       	ldi	r24, 0x01	; 1
     cd6:	90 e0       	ldi	r25, 0x00	; 0
     cd8:	02 2e       	mov	r0, r18
     cda:	02 c0       	rjmp	.+4      	; 0xce0 <DIO_VidSetPinDirection+0xce>
     cdc:	88 0f       	add	r24, r24
     cde:	99 1f       	adc	r25, r25
     ce0:	0a 94       	dec	r0
     ce2:	e2 f7       	brpl	.-8      	; 0xcdc <DIO_VidSetPinDirection+0xca>
     ce4:	84 2b       	or	r24, r20
     ce6:	8c 93       	st	X, r24
     ce8:	8b c0       	rjmp	.+278    	; 0xe00 <DIO_VidSetPinDirection+0x1ee>
		case 3: SET_BIT(DDRD, LOC_u8Pin); break;
     cea:	a1 e3       	ldi	r26, 0x31	; 49
     cec:	b0 e0       	ldi	r27, 0x00	; 0
     cee:	e1 e3       	ldi	r30, 0x31	; 49
     cf0:	f0 e0       	ldi	r31, 0x00	; 0
     cf2:	80 81       	ld	r24, Z
     cf4:	48 2f       	mov	r20, r24
     cf6:	8a 81       	ldd	r24, Y+2	; 0x02
     cf8:	28 2f       	mov	r18, r24
     cfa:	30 e0       	ldi	r19, 0x00	; 0
     cfc:	81 e0       	ldi	r24, 0x01	; 1
     cfe:	90 e0       	ldi	r25, 0x00	; 0
     d00:	02 2e       	mov	r0, r18
     d02:	02 c0       	rjmp	.+4      	; 0xd08 <DIO_VidSetPinDirection+0xf6>
     d04:	88 0f       	add	r24, r24
     d06:	99 1f       	adc	r25, r25
     d08:	0a 94       	dec	r0
     d0a:	e2 f7       	brpl	.-8      	; 0xd04 <DIO_VidSetPinDirection+0xf2>
     d0c:	84 2b       	or	r24, r20
     d0e:	8c 93       	st	X, r24
     d10:	77 c0       	rjmp	.+238    	; 0xe00 <DIO_VidSetPinDirection+0x1ee>
		}
	}
	else if (INPUT==LOC_u8State)
     d12:	8b 81       	ldd	r24, Y+3	; 0x03
     d14:	88 23       	and	r24, r24
     d16:	09 f0       	breq	.+2      	; 0xd1a <DIO_VidSetPinDirection+0x108>
     d18:	73 c0       	rjmp	.+230    	; 0xe00 <DIO_VidSetPinDirection+0x1ee>
	{
		switch (LOC_u8Port)
     d1a:	89 81       	ldd	r24, Y+1	; 0x01
     d1c:	28 2f       	mov	r18, r24
     d1e:	30 e0       	ldi	r19, 0x00	; 0
     d20:	3d 83       	std	Y+5, r19	; 0x05
     d22:	2c 83       	std	Y+4, r18	; 0x04
     d24:	8c 81       	ldd	r24, Y+4	; 0x04
     d26:	9d 81       	ldd	r25, Y+5	; 0x05
     d28:	81 30       	cpi	r24, 0x01	; 1
     d2a:	91 05       	cpc	r25, r1
     d2c:	59 f1       	breq	.+86     	; 0xd84 <DIO_VidSetPinDirection+0x172>
     d2e:	2c 81       	ldd	r18, Y+4	; 0x04
     d30:	3d 81       	ldd	r19, Y+5	; 0x05
     d32:	22 30       	cpi	r18, 0x02	; 2
     d34:	31 05       	cpc	r19, r1
     d36:	2c f4       	brge	.+10     	; 0xd42 <DIO_VidSetPinDirection+0x130>
     d38:	8c 81       	ldd	r24, Y+4	; 0x04
     d3a:	9d 81       	ldd	r25, Y+5	; 0x05
     d3c:	00 97       	sbiw	r24, 0x00	; 0
     d3e:	69 f0       	breq	.+26     	; 0xd5a <DIO_VidSetPinDirection+0x148>
     d40:	5f c0       	rjmp	.+190    	; 0xe00 <DIO_VidSetPinDirection+0x1ee>
     d42:	2c 81       	ldd	r18, Y+4	; 0x04
     d44:	3d 81       	ldd	r19, Y+5	; 0x05
     d46:	22 30       	cpi	r18, 0x02	; 2
     d48:	31 05       	cpc	r19, r1
     d4a:	89 f1       	breq	.+98     	; 0xdae <DIO_VidSetPinDirection+0x19c>
     d4c:	8c 81       	ldd	r24, Y+4	; 0x04
     d4e:	9d 81       	ldd	r25, Y+5	; 0x05
     d50:	83 30       	cpi	r24, 0x03	; 3
     d52:	91 05       	cpc	r25, r1
     d54:	09 f4       	brne	.+2      	; 0xd58 <DIO_VidSetPinDirection+0x146>
     d56:	40 c0       	rjmp	.+128    	; 0xdd8 <DIO_VidSetPinDirection+0x1c6>
     d58:	53 c0       	rjmp	.+166    	; 0xe00 <DIO_VidSetPinDirection+0x1ee>
		{
		case 0: CLR_BIT(DDRA, LOC_u8Pin); break;
     d5a:	aa e3       	ldi	r26, 0x3A	; 58
     d5c:	b0 e0       	ldi	r27, 0x00	; 0
     d5e:	ea e3       	ldi	r30, 0x3A	; 58
     d60:	f0 e0       	ldi	r31, 0x00	; 0
     d62:	80 81       	ld	r24, Z
     d64:	48 2f       	mov	r20, r24
     d66:	8a 81       	ldd	r24, Y+2	; 0x02
     d68:	28 2f       	mov	r18, r24
     d6a:	30 e0       	ldi	r19, 0x00	; 0
     d6c:	81 e0       	ldi	r24, 0x01	; 1
     d6e:	90 e0       	ldi	r25, 0x00	; 0
     d70:	02 2e       	mov	r0, r18
     d72:	02 c0       	rjmp	.+4      	; 0xd78 <DIO_VidSetPinDirection+0x166>
     d74:	88 0f       	add	r24, r24
     d76:	99 1f       	adc	r25, r25
     d78:	0a 94       	dec	r0
     d7a:	e2 f7       	brpl	.-8      	; 0xd74 <DIO_VidSetPinDirection+0x162>
     d7c:	80 95       	com	r24
     d7e:	84 23       	and	r24, r20
     d80:	8c 93       	st	X, r24
     d82:	3e c0       	rjmp	.+124    	; 0xe00 <DIO_VidSetPinDirection+0x1ee>
		case 1: CLR_BIT(DDRB, LOC_u8Pin); break;
     d84:	a7 e3       	ldi	r26, 0x37	; 55
     d86:	b0 e0       	ldi	r27, 0x00	; 0
     d88:	e7 e3       	ldi	r30, 0x37	; 55
     d8a:	f0 e0       	ldi	r31, 0x00	; 0
     d8c:	80 81       	ld	r24, Z
     d8e:	48 2f       	mov	r20, r24
     d90:	8a 81       	ldd	r24, Y+2	; 0x02
     d92:	28 2f       	mov	r18, r24
     d94:	30 e0       	ldi	r19, 0x00	; 0
     d96:	81 e0       	ldi	r24, 0x01	; 1
     d98:	90 e0       	ldi	r25, 0x00	; 0
     d9a:	02 2e       	mov	r0, r18
     d9c:	02 c0       	rjmp	.+4      	; 0xda2 <DIO_VidSetPinDirection+0x190>
     d9e:	88 0f       	add	r24, r24
     da0:	99 1f       	adc	r25, r25
     da2:	0a 94       	dec	r0
     da4:	e2 f7       	brpl	.-8      	; 0xd9e <DIO_VidSetPinDirection+0x18c>
     da6:	80 95       	com	r24
     da8:	84 23       	and	r24, r20
     daa:	8c 93       	st	X, r24
     dac:	29 c0       	rjmp	.+82     	; 0xe00 <DIO_VidSetPinDirection+0x1ee>
		case 2: CLR_BIT(DDRC, LOC_u8Pin); break;
     dae:	a4 e3       	ldi	r26, 0x34	; 52
     db0:	b0 e0       	ldi	r27, 0x00	; 0
     db2:	e4 e3       	ldi	r30, 0x34	; 52
     db4:	f0 e0       	ldi	r31, 0x00	; 0
     db6:	80 81       	ld	r24, Z
     db8:	48 2f       	mov	r20, r24
     dba:	8a 81       	ldd	r24, Y+2	; 0x02
     dbc:	28 2f       	mov	r18, r24
     dbe:	30 e0       	ldi	r19, 0x00	; 0
     dc0:	81 e0       	ldi	r24, 0x01	; 1
     dc2:	90 e0       	ldi	r25, 0x00	; 0
     dc4:	02 2e       	mov	r0, r18
     dc6:	02 c0       	rjmp	.+4      	; 0xdcc <DIO_VidSetPinDirection+0x1ba>
     dc8:	88 0f       	add	r24, r24
     dca:	99 1f       	adc	r25, r25
     dcc:	0a 94       	dec	r0
     dce:	e2 f7       	brpl	.-8      	; 0xdc8 <DIO_VidSetPinDirection+0x1b6>
     dd0:	80 95       	com	r24
     dd2:	84 23       	and	r24, r20
     dd4:	8c 93       	st	X, r24
     dd6:	14 c0       	rjmp	.+40     	; 0xe00 <DIO_VidSetPinDirection+0x1ee>
		case 3: CLR_BIT(DDRD, LOC_u8Pin); break;
     dd8:	a1 e3       	ldi	r26, 0x31	; 49
     dda:	b0 e0       	ldi	r27, 0x00	; 0
     ddc:	e1 e3       	ldi	r30, 0x31	; 49
     dde:	f0 e0       	ldi	r31, 0x00	; 0
     de0:	80 81       	ld	r24, Z
     de2:	48 2f       	mov	r20, r24
     de4:	8a 81       	ldd	r24, Y+2	; 0x02
     de6:	28 2f       	mov	r18, r24
     de8:	30 e0       	ldi	r19, 0x00	; 0
     dea:	81 e0       	ldi	r24, 0x01	; 1
     dec:	90 e0       	ldi	r25, 0x00	; 0
     dee:	02 2e       	mov	r0, r18
     df0:	02 c0       	rjmp	.+4      	; 0xdf6 <DIO_VidSetPinDirection+0x1e4>
     df2:	88 0f       	add	r24, r24
     df4:	99 1f       	adc	r25, r25
     df6:	0a 94       	dec	r0
     df8:	e2 f7       	brpl	.-8      	; 0xdf2 <DIO_VidSetPinDirection+0x1e0>
     dfa:	80 95       	com	r24
     dfc:	84 23       	and	r24, r20
     dfe:	8c 93       	st	X, r24
		}
	}
}
     e00:	27 96       	adiw	r28, 0x07	; 7
     e02:	0f b6       	in	r0, 0x3f	; 63
     e04:	f8 94       	cli
     e06:	de bf       	out	0x3e, r29	; 62
     e08:	0f be       	out	0x3f, r0	; 63
     e0a:	cd bf       	out	0x3d, r28	; 61
     e0c:	cf 91       	pop	r28
     e0e:	df 91       	pop	r29
     e10:	08 95       	ret

00000e12 <DIO_VidSetPinValue>:

void DIO_VidSetPinValue	( u8 LOC_u8Port, u8 LOC_u8Pin, u8 LOC_u8Value)
{
     e12:	df 93       	push	r29
     e14:	cf 93       	push	r28
     e16:	cd b7       	in	r28, 0x3d	; 61
     e18:	de b7       	in	r29, 0x3e	; 62
     e1a:	27 97       	sbiw	r28, 0x07	; 7
     e1c:	0f b6       	in	r0, 0x3f	; 63
     e1e:	f8 94       	cli
     e20:	de bf       	out	0x3e, r29	; 62
     e22:	0f be       	out	0x3f, r0	; 63
     e24:	cd bf       	out	0x3d, r28	; 61
     e26:	89 83       	std	Y+1, r24	; 0x01
     e28:	6a 83       	std	Y+2, r22	; 0x02
     e2a:	4b 83       	std	Y+3, r20	; 0x03
	if ( 1==LOC_u8Value)
     e2c:	8b 81       	ldd	r24, Y+3	; 0x03
     e2e:	81 30       	cpi	r24, 0x01	; 1
     e30:	09 f0       	breq	.+2      	; 0xe34 <DIO_VidSetPinValue+0x22>
     e32:	6f c0       	rjmp	.+222    	; 0xf12 <DIO_VidSetPinValue+0x100>
	{
		switch (LOC_u8Port)
     e34:	89 81       	ldd	r24, Y+1	; 0x01
     e36:	28 2f       	mov	r18, r24
     e38:	30 e0       	ldi	r19, 0x00	; 0
     e3a:	3f 83       	std	Y+7, r19	; 0x07
     e3c:	2e 83       	std	Y+6, r18	; 0x06
     e3e:	8e 81       	ldd	r24, Y+6	; 0x06
     e40:	9f 81       	ldd	r25, Y+7	; 0x07
     e42:	81 30       	cpi	r24, 0x01	; 1
     e44:	91 05       	cpc	r25, r1
     e46:	49 f1       	breq	.+82     	; 0xe9a <DIO_VidSetPinValue+0x88>
     e48:	2e 81       	ldd	r18, Y+6	; 0x06
     e4a:	3f 81       	ldd	r19, Y+7	; 0x07
     e4c:	22 30       	cpi	r18, 0x02	; 2
     e4e:	31 05       	cpc	r19, r1
     e50:	2c f4       	brge	.+10     	; 0xe5c <DIO_VidSetPinValue+0x4a>
     e52:	8e 81       	ldd	r24, Y+6	; 0x06
     e54:	9f 81       	ldd	r25, Y+7	; 0x07
     e56:	00 97       	sbiw	r24, 0x00	; 0
     e58:	61 f0       	breq	.+24     	; 0xe72 <DIO_VidSetPinValue+0x60>
     e5a:	d2 c0       	rjmp	.+420    	; 0x1000 <DIO_VidSetPinValue+0x1ee>
     e5c:	2e 81       	ldd	r18, Y+6	; 0x06
     e5e:	3f 81       	ldd	r19, Y+7	; 0x07
     e60:	22 30       	cpi	r18, 0x02	; 2
     e62:	31 05       	cpc	r19, r1
     e64:	71 f1       	breq	.+92     	; 0xec2 <DIO_VidSetPinValue+0xb0>
     e66:	8e 81       	ldd	r24, Y+6	; 0x06
     e68:	9f 81       	ldd	r25, Y+7	; 0x07
     e6a:	83 30       	cpi	r24, 0x03	; 3
     e6c:	91 05       	cpc	r25, r1
     e6e:	e9 f1       	breq	.+122    	; 0xeea <DIO_VidSetPinValue+0xd8>
     e70:	c7 c0       	rjmp	.+398    	; 0x1000 <DIO_VidSetPinValue+0x1ee>
		{
		case 0: SET_BIT(PORTA, LOC_u8Pin); break;
     e72:	ab e3       	ldi	r26, 0x3B	; 59
     e74:	b0 e0       	ldi	r27, 0x00	; 0
     e76:	eb e3       	ldi	r30, 0x3B	; 59
     e78:	f0 e0       	ldi	r31, 0x00	; 0
     e7a:	80 81       	ld	r24, Z
     e7c:	48 2f       	mov	r20, r24
     e7e:	8a 81       	ldd	r24, Y+2	; 0x02
     e80:	28 2f       	mov	r18, r24
     e82:	30 e0       	ldi	r19, 0x00	; 0
     e84:	81 e0       	ldi	r24, 0x01	; 1
     e86:	90 e0       	ldi	r25, 0x00	; 0
     e88:	02 2e       	mov	r0, r18
     e8a:	02 c0       	rjmp	.+4      	; 0xe90 <DIO_VidSetPinValue+0x7e>
     e8c:	88 0f       	add	r24, r24
     e8e:	99 1f       	adc	r25, r25
     e90:	0a 94       	dec	r0
     e92:	e2 f7       	brpl	.-8      	; 0xe8c <DIO_VidSetPinValue+0x7a>
     e94:	84 2b       	or	r24, r20
     e96:	8c 93       	st	X, r24
     e98:	b3 c0       	rjmp	.+358    	; 0x1000 <DIO_VidSetPinValue+0x1ee>
		case 1: SET_BIT(PORTB, LOC_u8Pin); break;
     e9a:	a8 e3       	ldi	r26, 0x38	; 56
     e9c:	b0 e0       	ldi	r27, 0x00	; 0
     e9e:	e8 e3       	ldi	r30, 0x38	; 56
     ea0:	f0 e0       	ldi	r31, 0x00	; 0
     ea2:	80 81       	ld	r24, Z
     ea4:	48 2f       	mov	r20, r24
     ea6:	8a 81       	ldd	r24, Y+2	; 0x02
     ea8:	28 2f       	mov	r18, r24
     eaa:	30 e0       	ldi	r19, 0x00	; 0
     eac:	81 e0       	ldi	r24, 0x01	; 1
     eae:	90 e0       	ldi	r25, 0x00	; 0
     eb0:	02 2e       	mov	r0, r18
     eb2:	02 c0       	rjmp	.+4      	; 0xeb8 <DIO_VidSetPinValue+0xa6>
     eb4:	88 0f       	add	r24, r24
     eb6:	99 1f       	adc	r25, r25
     eb8:	0a 94       	dec	r0
     eba:	e2 f7       	brpl	.-8      	; 0xeb4 <DIO_VidSetPinValue+0xa2>
     ebc:	84 2b       	or	r24, r20
     ebe:	8c 93       	st	X, r24
     ec0:	9f c0       	rjmp	.+318    	; 0x1000 <DIO_VidSetPinValue+0x1ee>
		case 2: SET_BIT(PORTC, LOC_u8Pin); break;
     ec2:	a5 e3       	ldi	r26, 0x35	; 53
     ec4:	b0 e0       	ldi	r27, 0x00	; 0
     ec6:	e5 e3       	ldi	r30, 0x35	; 53
     ec8:	f0 e0       	ldi	r31, 0x00	; 0
     eca:	80 81       	ld	r24, Z
     ecc:	48 2f       	mov	r20, r24
     ece:	8a 81       	ldd	r24, Y+2	; 0x02
     ed0:	28 2f       	mov	r18, r24
     ed2:	30 e0       	ldi	r19, 0x00	; 0
     ed4:	81 e0       	ldi	r24, 0x01	; 1
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	02 2e       	mov	r0, r18
     eda:	02 c0       	rjmp	.+4      	; 0xee0 <DIO_VidSetPinValue+0xce>
     edc:	88 0f       	add	r24, r24
     ede:	99 1f       	adc	r25, r25
     ee0:	0a 94       	dec	r0
     ee2:	e2 f7       	brpl	.-8      	; 0xedc <DIO_VidSetPinValue+0xca>
     ee4:	84 2b       	or	r24, r20
     ee6:	8c 93       	st	X, r24
     ee8:	8b c0       	rjmp	.+278    	; 0x1000 <DIO_VidSetPinValue+0x1ee>
		case 3: SET_BIT(PORTD, LOC_u8Pin); break;
     eea:	a2 e3       	ldi	r26, 0x32	; 50
     eec:	b0 e0       	ldi	r27, 0x00	; 0
     eee:	e2 e3       	ldi	r30, 0x32	; 50
     ef0:	f0 e0       	ldi	r31, 0x00	; 0
     ef2:	80 81       	ld	r24, Z
     ef4:	48 2f       	mov	r20, r24
     ef6:	8a 81       	ldd	r24, Y+2	; 0x02
     ef8:	28 2f       	mov	r18, r24
     efa:	30 e0       	ldi	r19, 0x00	; 0
     efc:	81 e0       	ldi	r24, 0x01	; 1
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	02 2e       	mov	r0, r18
     f02:	02 c0       	rjmp	.+4      	; 0xf08 <DIO_VidSetPinValue+0xf6>
     f04:	88 0f       	add	r24, r24
     f06:	99 1f       	adc	r25, r25
     f08:	0a 94       	dec	r0
     f0a:	e2 f7       	brpl	.-8      	; 0xf04 <DIO_VidSetPinValue+0xf2>
     f0c:	84 2b       	or	r24, r20
     f0e:	8c 93       	st	X, r24
     f10:	77 c0       	rjmp	.+238    	; 0x1000 <DIO_VidSetPinValue+0x1ee>
		}
	}
	else if (0==LOC_u8Value)
     f12:	8b 81       	ldd	r24, Y+3	; 0x03
     f14:	88 23       	and	r24, r24
     f16:	09 f0       	breq	.+2      	; 0xf1a <DIO_VidSetPinValue+0x108>
     f18:	73 c0       	rjmp	.+230    	; 0x1000 <DIO_VidSetPinValue+0x1ee>
	{
		switch (LOC_u8Port)
     f1a:	89 81       	ldd	r24, Y+1	; 0x01
     f1c:	28 2f       	mov	r18, r24
     f1e:	30 e0       	ldi	r19, 0x00	; 0
     f20:	3d 83       	std	Y+5, r19	; 0x05
     f22:	2c 83       	std	Y+4, r18	; 0x04
     f24:	8c 81       	ldd	r24, Y+4	; 0x04
     f26:	9d 81       	ldd	r25, Y+5	; 0x05
     f28:	81 30       	cpi	r24, 0x01	; 1
     f2a:	91 05       	cpc	r25, r1
     f2c:	59 f1       	breq	.+86     	; 0xf84 <DIO_VidSetPinValue+0x172>
     f2e:	2c 81       	ldd	r18, Y+4	; 0x04
     f30:	3d 81       	ldd	r19, Y+5	; 0x05
     f32:	22 30       	cpi	r18, 0x02	; 2
     f34:	31 05       	cpc	r19, r1
     f36:	2c f4       	brge	.+10     	; 0xf42 <DIO_VidSetPinValue+0x130>
     f38:	8c 81       	ldd	r24, Y+4	; 0x04
     f3a:	9d 81       	ldd	r25, Y+5	; 0x05
     f3c:	00 97       	sbiw	r24, 0x00	; 0
     f3e:	69 f0       	breq	.+26     	; 0xf5a <DIO_VidSetPinValue+0x148>
     f40:	5f c0       	rjmp	.+190    	; 0x1000 <DIO_VidSetPinValue+0x1ee>
     f42:	2c 81       	ldd	r18, Y+4	; 0x04
     f44:	3d 81       	ldd	r19, Y+5	; 0x05
     f46:	22 30       	cpi	r18, 0x02	; 2
     f48:	31 05       	cpc	r19, r1
     f4a:	89 f1       	breq	.+98     	; 0xfae <DIO_VidSetPinValue+0x19c>
     f4c:	8c 81       	ldd	r24, Y+4	; 0x04
     f4e:	9d 81       	ldd	r25, Y+5	; 0x05
     f50:	83 30       	cpi	r24, 0x03	; 3
     f52:	91 05       	cpc	r25, r1
     f54:	09 f4       	brne	.+2      	; 0xf58 <DIO_VidSetPinValue+0x146>
     f56:	40 c0       	rjmp	.+128    	; 0xfd8 <DIO_VidSetPinValue+0x1c6>
     f58:	53 c0       	rjmp	.+166    	; 0x1000 <DIO_VidSetPinValue+0x1ee>
		{
		case 0: CLR_BIT(PORTA, LOC_u8Pin); break;
     f5a:	ab e3       	ldi	r26, 0x3B	; 59
     f5c:	b0 e0       	ldi	r27, 0x00	; 0
     f5e:	eb e3       	ldi	r30, 0x3B	; 59
     f60:	f0 e0       	ldi	r31, 0x00	; 0
     f62:	80 81       	ld	r24, Z
     f64:	48 2f       	mov	r20, r24
     f66:	8a 81       	ldd	r24, Y+2	; 0x02
     f68:	28 2f       	mov	r18, r24
     f6a:	30 e0       	ldi	r19, 0x00	; 0
     f6c:	81 e0       	ldi	r24, 0x01	; 1
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	02 2e       	mov	r0, r18
     f72:	02 c0       	rjmp	.+4      	; 0xf78 <DIO_VidSetPinValue+0x166>
     f74:	88 0f       	add	r24, r24
     f76:	99 1f       	adc	r25, r25
     f78:	0a 94       	dec	r0
     f7a:	e2 f7       	brpl	.-8      	; 0xf74 <DIO_VidSetPinValue+0x162>
     f7c:	80 95       	com	r24
     f7e:	84 23       	and	r24, r20
     f80:	8c 93       	st	X, r24
     f82:	3e c0       	rjmp	.+124    	; 0x1000 <DIO_VidSetPinValue+0x1ee>
		case 1: CLR_BIT(PORTB, LOC_u8Pin); break;
     f84:	a8 e3       	ldi	r26, 0x38	; 56
     f86:	b0 e0       	ldi	r27, 0x00	; 0
     f88:	e8 e3       	ldi	r30, 0x38	; 56
     f8a:	f0 e0       	ldi	r31, 0x00	; 0
     f8c:	80 81       	ld	r24, Z
     f8e:	48 2f       	mov	r20, r24
     f90:	8a 81       	ldd	r24, Y+2	; 0x02
     f92:	28 2f       	mov	r18, r24
     f94:	30 e0       	ldi	r19, 0x00	; 0
     f96:	81 e0       	ldi	r24, 0x01	; 1
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	02 2e       	mov	r0, r18
     f9c:	02 c0       	rjmp	.+4      	; 0xfa2 <DIO_VidSetPinValue+0x190>
     f9e:	88 0f       	add	r24, r24
     fa0:	99 1f       	adc	r25, r25
     fa2:	0a 94       	dec	r0
     fa4:	e2 f7       	brpl	.-8      	; 0xf9e <DIO_VidSetPinValue+0x18c>
     fa6:	80 95       	com	r24
     fa8:	84 23       	and	r24, r20
     faa:	8c 93       	st	X, r24
     fac:	29 c0       	rjmp	.+82     	; 0x1000 <DIO_VidSetPinValue+0x1ee>
		case 2: CLR_BIT(PORTC, LOC_u8Pin); break;
     fae:	a5 e3       	ldi	r26, 0x35	; 53
     fb0:	b0 e0       	ldi	r27, 0x00	; 0
     fb2:	e5 e3       	ldi	r30, 0x35	; 53
     fb4:	f0 e0       	ldi	r31, 0x00	; 0
     fb6:	80 81       	ld	r24, Z
     fb8:	48 2f       	mov	r20, r24
     fba:	8a 81       	ldd	r24, Y+2	; 0x02
     fbc:	28 2f       	mov	r18, r24
     fbe:	30 e0       	ldi	r19, 0x00	; 0
     fc0:	81 e0       	ldi	r24, 0x01	; 1
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	02 2e       	mov	r0, r18
     fc6:	02 c0       	rjmp	.+4      	; 0xfcc <DIO_VidSetPinValue+0x1ba>
     fc8:	88 0f       	add	r24, r24
     fca:	99 1f       	adc	r25, r25
     fcc:	0a 94       	dec	r0
     fce:	e2 f7       	brpl	.-8      	; 0xfc8 <DIO_VidSetPinValue+0x1b6>
     fd0:	80 95       	com	r24
     fd2:	84 23       	and	r24, r20
     fd4:	8c 93       	st	X, r24
     fd6:	14 c0       	rjmp	.+40     	; 0x1000 <DIO_VidSetPinValue+0x1ee>
		case 3: CLR_BIT(PORTD, LOC_u8Pin); break;
     fd8:	a2 e3       	ldi	r26, 0x32	; 50
     fda:	b0 e0       	ldi	r27, 0x00	; 0
     fdc:	e2 e3       	ldi	r30, 0x32	; 50
     fde:	f0 e0       	ldi	r31, 0x00	; 0
     fe0:	80 81       	ld	r24, Z
     fe2:	48 2f       	mov	r20, r24
     fe4:	8a 81       	ldd	r24, Y+2	; 0x02
     fe6:	28 2f       	mov	r18, r24
     fe8:	30 e0       	ldi	r19, 0x00	; 0
     fea:	81 e0       	ldi	r24, 0x01	; 1
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	02 2e       	mov	r0, r18
     ff0:	02 c0       	rjmp	.+4      	; 0xff6 <DIO_VidSetPinValue+0x1e4>
     ff2:	88 0f       	add	r24, r24
     ff4:	99 1f       	adc	r25, r25
     ff6:	0a 94       	dec	r0
     ff8:	e2 f7       	brpl	.-8      	; 0xff2 <DIO_VidSetPinValue+0x1e0>
     ffa:	80 95       	com	r24
     ffc:	84 23       	and	r24, r20
     ffe:	8c 93       	st	X, r24
		}
	}
}
    1000:	27 96       	adiw	r28, 0x07	; 7
    1002:	0f b6       	in	r0, 0x3f	; 63
    1004:	f8 94       	cli
    1006:	de bf       	out	0x3e, r29	; 62
    1008:	0f be       	out	0x3f, r0	; 63
    100a:	cd bf       	out	0x3d, r28	; 61
    100c:	cf 91       	pop	r28
    100e:	df 91       	pop	r29
    1010:	08 95       	ret

00001012 <DIO_VidSetPortDirection>:

void DIO_VidSetPortDirection	( u8 LOC_u8Port, u8 LOC_u8Value)
{
    1012:	df 93       	push	r29
    1014:	cf 93       	push	r28
    1016:	00 d0       	rcall	.+0      	; 0x1018 <DIO_VidSetPortDirection+0x6>
    1018:	00 d0       	rcall	.+0      	; 0x101a <DIO_VidSetPortDirection+0x8>
    101a:	cd b7       	in	r28, 0x3d	; 61
    101c:	de b7       	in	r29, 0x3e	; 62
    101e:	89 83       	std	Y+1, r24	; 0x01
    1020:	6a 83       	std	Y+2, r22	; 0x02
	switch (LOC_u8Port)
    1022:	89 81       	ldd	r24, Y+1	; 0x01
    1024:	28 2f       	mov	r18, r24
    1026:	30 e0       	ldi	r19, 0x00	; 0
    1028:	3c 83       	std	Y+4, r19	; 0x04
    102a:	2b 83       	std	Y+3, r18	; 0x03
    102c:	8b 81       	ldd	r24, Y+3	; 0x03
    102e:	9c 81       	ldd	r25, Y+4	; 0x04
    1030:	81 30       	cpi	r24, 0x01	; 1
    1032:	91 05       	cpc	r25, r1
    1034:	d1 f0       	breq	.+52     	; 0x106a <DIO_VidSetPortDirection+0x58>
    1036:	2b 81       	ldd	r18, Y+3	; 0x03
    1038:	3c 81       	ldd	r19, Y+4	; 0x04
    103a:	22 30       	cpi	r18, 0x02	; 2
    103c:	31 05       	cpc	r19, r1
    103e:	2c f4       	brge	.+10     	; 0x104a <DIO_VidSetPortDirection+0x38>
    1040:	8b 81       	ldd	r24, Y+3	; 0x03
    1042:	9c 81       	ldd	r25, Y+4	; 0x04
    1044:	00 97       	sbiw	r24, 0x00	; 0
    1046:	61 f0       	breq	.+24     	; 0x1060 <DIO_VidSetPortDirection+0x4e>
    1048:	1e c0       	rjmp	.+60     	; 0x1086 <DIO_VidSetPortDirection+0x74>
    104a:	2b 81       	ldd	r18, Y+3	; 0x03
    104c:	3c 81       	ldd	r19, Y+4	; 0x04
    104e:	22 30       	cpi	r18, 0x02	; 2
    1050:	31 05       	cpc	r19, r1
    1052:	81 f0       	breq	.+32     	; 0x1074 <DIO_VidSetPortDirection+0x62>
    1054:	8b 81       	ldd	r24, Y+3	; 0x03
    1056:	9c 81       	ldd	r25, Y+4	; 0x04
    1058:	83 30       	cpi	r24, 0x03	; 3
    105a:	91 05       	cpc	r25, r1
    105c:	81 f0       	breq	.+32     	; 0x107e <DIO_VidSetPortDirection+0x6c>
    105e:	13 c0       	rjmp	.+38     	; 0x1086 <DIO_VidSetPortDirection+0x74>
	{
	case 0: DDRA = LOC_u8Value; break;
    1060:	ea e3       	ldi	r30, 0x3A	; 58
    1062:	f0 e0       	ldi	r31, 0x00	; 0
    1064:	8a 81       	ldd	r24, Y+2	; 0x02
    1066:	80 83       	st	Z, r24
    1068:	0e c0       	rjmp	.+28     	; 0x1086 <DIO_VidSetPortDirection+0x74>
	case 1: DDRB = LOC_u8Value; break;
    106a:	e7 e3       	ldi	r30, 0x37	; 55
    106c:	f0 e0       	ldi	r31, 0x00	; 0
    106e:	8a 81       	ldd	r24, Y+2	; 0x02
    1070:	80 83       	st	Z, r24
    1072:	09 c0       	rjmp	.+18     	; 0x1086 <DIO_VidSetPortDirection+0x74>
	case 2: DDRC = LOC_u8Value; break;
    1074:	e4 e3       	ldi	r30, 0x34	; 52
    1076:	f0 e0       	ldi	r31, 0x00	; 0
    1078:	8a 81       	ldd	r24, Y+2	; 0x02
    107a:	80 83       	st	Z, r24
    107c:	04 c0       	rjmp	.+8      	; 0x1086 <DIO_VidSetPortDirection+0x74>
	case 3: DDRD = LOC_u8Value; break;
    107e:	e1 e3       	ldi	r30, 0x31	; 49
    1080:	f0 e0       	ldi	r31, 0x00	; 0
    1082:	8a 81       	ldd	r24, Y+2	; 0x02
    1084:	80 83       	st	Z, r24
	}
}
    1086:	0f 90       	pop	r0
    1088:	0f 90       	pop	r0
    108a:	0f 90       	pop	r0
    108c:	0f 90       	pop	r0
    108e:	cf 91       	pop	r28
    1090:	df 91       	pop	r29
    1092:	08 95       	ret

00001094 <DIO_VidSetPortValue>:

void DIO_VidSetPortValue	( u8 LOC_u8Port, u8 LOC_u8Value)
{
    1094:	df 93       	push	r29
    1096:	cf 93       	push	r28
    1098:	00 d0       	rcall	.+0      	; 0x109a <DIO_VidSetPortValue+0x6>
    109a:	00 d0       	rcall	.+0      	; 0x109c <DIO_VidSetPortValue+0x8>
    109c:	cd b7       	in	r28, 0x3d	; 61
    109e:	de b7       	in	r29, 0x3e	; 62
    10a0:	89 83       	std	Y+1, r24	; 0x01
    10a2:	6a 83       	std	Y+2, r22	; 0x02
	switch (LOC_u8Port)
    10a4:	89 81       	ldd	r24, Y+1	; 0x01
    10a6:	28 2f       	mov	r18, r24
    10a8:	30 e0       	ldi	r19, 0x00	; 0
    10aa:	3c 83       	std	Y+4, r19	; 0x04
    10ac:	2b 83       	std	Y+3, r18	; 0x03
    10ae:	8b 81       	ldd	r24, Y+3	; 0x03
    10b0:	9c 81       	ldd	r25, Y+4	; 0x04
    10b2:	81 30       	cpi	r24, 0x01	; 1
    10b4:	91 05       	cpc	r25, r1
    10b6:	d1 f0       	breq	.+52     	; 0x10ec <DIO_VidSetPortValue+0x58>
    10b8:	2b 81       	ldd	r18, Y+3	; 0x03
    10ba:	3c 81       	ldd	r19, Y+4	; 0x04
    10bc:	22 30       	cpi	r18, 0x02	; 2
    10be:	31 05       	cpc	r19, r1
    10c0:	2c f4       	brge	.+10     	; 0x10cc <DIO_VidSetPortValue+0x38>
    10c2:	8b 81       	ldd	r24, Y+3	; 0x03
    10c4:	9c 81       	ldd	r25, Y+4	; 0x04
    10c6:	00 97       	sbiw	r24, 0x00	; 0
    10c8:	61 f0       	breq	.+24     	; 0x10e2 <DIO_VidSetPortValue+0x4e>
    10ca:	1e c0       	rjmp	.+60     	; 0x1108 <DIO_VidSetPortValue+0x74>
    10cc:	2b 81       	ldd	r18, Y+3	; 0x03
    10ce:	3c 81       	ldd	r19, Y+4	; 0x04
    10d0:	22 30       	cpi	r18, 0x02	; 2
    10d2:	31 05       	cpc	r19, r1
    10d4:	81 f0       	breq	.+32     	; 0x10f6 <DIO_VidSetPortValue+0x62>
    10d6:	8b 81       	ldd	r24, Y+3	; 0x03
    10d8:	9c 81       	ldd	r25, Y+4	; 0x04
    10da:	83 30       	cpi	r24, 0x03	; 3
    10dc:	91 05       	cpc	r25, r1
    10de:	81 f0       	breq	.+32     	; 0x1100 <DIO_VidSetPortValue+0x6c>
    10e0:	13 c0       	rjmp	.+38     	; 0x1108 <DIO_VidSetPortValue+0x74>
	{
	case 0: PORTA = LOC_u8Value; break;
    10e2:	eb e3       	ldi	r30, 0x3B	; 59
    10e4:	f0 e0       	ldi	r31, 0x00	; 0
    10e6:	8a 81       	ldd	r24, Y+2	; 0x02
    10e8:	80 83       	st	Z, r24
    10ea:	0e c0       	rjmp	.+28     	; 0x1108 <DIO_VidSetPortValue+0x74>
	case 1: PORTB = LOC_u8Value; break;
    10ec:	e8 e3       	ldi	r30, 0x38	; 56
    10ee:	f0 e0       	ldi	r31, 0x00	; 0
    10f0:	8a 81       	ldd	r24, Y+2	; 0x02
    10f2:	80 83       	st	Z, r24
    10f4:	09 c0       	rjmp	.+18     	; 0x1108 <DIO_VidSetPortValue+0x74>
	case 2: PORTC = LOC_u8Value; break;
    10f6:	e5 e3       	ldi	r30, 0x35	; 53
    10f8:	f0 e0       	ldi	r31, 0x00	; 0
    10fa:	8a 81       	ldd	r24, Y+2	; 0x02
    10fc:	80 83       	st	Z, r24
    10fe:	04 c0       	rjmp	.+8      	; 0x1108 <DIO_VidSetPortValue+0x74>
	case 3: PORTD = LOC_u8Value; break;
    1100:	e2 e3       	ldi	r30, 0x32	; 50
    1102:	f0 e0       	ldi	r31, 0x00	; 0
    1104:	8a 81       	ldd	r24, Y+2	; 0x02
    1106:	80 83       	st	Z, r24
	}
}
    1108:	0f 90       	pop	r0
    110a:	0f 90       	pop	r0
    110c:	0f 90       	pop	r0
    110e:	0f 90       	pop	r0
    1110:	cf 91       	pop	r28
    1112:	df 91       	pop	r29
    1114:	08 95       	ret

00001116 <DIO_u8GetPinValue>:

u8 	 DIO_u8GetPinValue	( u8 LOC_u8Port, u8 LOC_u8Pin)
{
    1116:	df 93       	push	r29
    1118:	cf 93       	push	r28
    111a:	00 d0       	rcall	.+0      	; 0x111c <DIO_u8GetPinValue+0x6>
    111c:	00 d0       	rcall	.+0      	; 0x111e <DIO_u8GetPinValue+0x8>
    111e:	0f 92       	push	r0
    1120:	cd b7       	in	r28, 0x3d	; 61
    1122:	de b7       	in	r29, 0x3e	; 62
    1124:	8a 83       	std	Y+2, r24	; 0x02
    1126:	6b 83       	std	Y+3, r22	; 0x03
	u8 value;
	switch (LOC_u8Port)
    1128:	8a 81       	ldd	r24, Y+2	; 0x02
    112a:	28 2f       	mov	r18, r24
    112c:	30 e0       	ldi	r19, 0x00	; 0
    112e:	3d 83       	std	Y+5, r19	; 0x05
    1130:	2c 83       	std	Y+4, r18	; 0x04
    1132:	4c 81       	ldd	r20, Y+4	; 0x04
    1134:	5d 81       	ldd	r21, Y+5	; 0x05
    1136:	41 30       	cpi	r20, 0x01	; 1
    1138:	51 05       	cpc	r21, r1
    113a:	41 f1       	breq	.+80     	; 0x118c <DIO_u8GetPinValue+0x76>
    113c:	8c 81       	ldd	r24, Y+4	; 0x04
    113e:	9d 81       	ldd	r25, Y+5	; 0x05
    1140:	82 30       	cpi	r24, 0x02	; 2
    1142:	91 05       	cpc	r25, r1
    1144:	34 f4       	brge	.+12     	; 0x1152 <DIO_u8GetPinValue+0x3c>
    1146:	2c 81       	ldd	r18, Y+4	; 0x04
    1148:	3d 81       	ldd	r19, Y+5	; 0x05
    114a:	21 15       	cp	r18, r1
    114c:	31 05       	cpc	r19, r1
    114e:	61 f0       	breq	.+24     	; 0x1168 <DIO_u8GetPinValue+0x52>
    1150:	52 c0       	rjmp	.+164    	; 0x11f6 <DIO_u8GetPinValue+0xe0>
    1152:	4c 81       	ldd	r20, Y+4	; 0x04
    1154:	5d 81       	ldd	r21, Y+5	; 0x05
    1156:	42 30       	cpi	r20, 0x02	; 2
    1158:	51 05       	cpc	r21, r1
    115a:	51 f1       	breq	.+84     	; 0x11b0 <DIO_u8GetPinValue+0x9a>
    115c:	8c 81       	ldd	r24, Y+4	; 0x04
    115e:	9d 81       	ldd	r25, Y+5	; 0x05
    1160:	83 30       	cpi	r24, 0x03	; 3
    1162:	91 05       	cpc	r25, r1
    1164:	b9 f1       	breq	.+110    	; 0x11d4 <DIO_u8GetPinValue+0xbe>
    1166:	47 c0       	rjmp	.+142    	; 0x11f6 <DIO_u8GetPinValue+0xe0>
	{
	case 0: value = GET_BIT(PINA, LOC_u8Pin); break;
    1168:	e9 e3       	ldi	r30, 0x39	; 57
    116a:	f0 e0       	ldi	r31, 0x00	; 0
    116c:	80 81       	ld	r24, Z
    116e:	28 2f       	mov	r18, r24
    1170:	30 e0       	ldi	r19, 0x00	; 0
    1172:	8b 81       	ldd	r24, Y+3	; 0x03
    1174:	88 2f       	mov	r24, r24
    1176:	90 e0       	ldi	r25, 0x00	; 0
    1178:	a9 01       	movw	r20, r18
    117a:	02 c0       	rjmp	.+4      	; 0x1180 <DIO_u8GetPinValue+0x6a>
    117c:	55 95       	asr	r21
    117e:	47 95       	ror	r20
    1180:	8a 95       	dec	r24
    1182:	e2 f7       	brpl	.-8      	; 0x117c <DIO_u8GetPinValue+0x66>
    1184:	ca 01       	movw	r24, r20
    1186:	81 70       	andi	r24, 0x01	; 1
    1188:	89 83       	std	Y+1, r24	; 0x01
    118a:	35 c0       	rjmp	.+106    	; 0x11f6 <DIO_u8GetPinValue+0xe0>
	case 1: value = GET_BIT(PINB, LOC_u8Pin); break;
    118c:	e6 e3       	ldi	r30, 0x36	; 54
    118e:	f0 e0       	ldi	r31, 0x00	; 0
    1190:	80 81       	ld	r24, Z
    1192:	28 2f       	mov	r18, r24
    1194:	30 e0       	ldi	r19, 0x00	; 0
    1196:	8b 81       	ldd	r24, Y+3	; 0x03
    1198:	88 2f       	mov	r24, r24
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	a9 01       	movw	r20, r18
    119e:	02 c0       	rjmp	.+4      	; 0x11a4 <DIO_u8GetPinValue+0x8e>
    11a0:	55 95       	asr	r21
    11a2:	47 95       	ror	r20
    11a4:	8a 95       	dec	r24
    11a6:	e2 f7       	brpl	.-8      	; 0x11a0 <DIO_u8GetPinValue+0x8a>
    11a8:	ca 01       	movw	r24, r20
    11aa:	81 70       	andi	r24, 0x01	; 1
    11ac:	89 83       	std	Y+1, r24	; 0x01
    11ae:	23 c0       	rjmp	.+70     	; 0x11f6 <DIO_u8GetPinValue+0xe0>
	case 2: value = GET_BIT(PINC, LOC_u8Pin); break;
    11b0:	e3 e3       	ldi	r30, 0x33	; 51
    11b2:	f0 e0       	ldi	r31, 0x00	; 0
    11b4:	80 81       	ld	r24, Z
    11b6:	28 2f       	mov	r18, r24
    11b8:	30 e0       	ldi	r19, 0x00	; 0
    11ba:	8b 81       	ldd	r24, Y+3	; 0x03
    11bc:	88 2f       	mov	r24, r24
    11be:	90 e0       	ldi	r25, 0x00	; 0
    11c0:	a9 01       	movw	r20, r18
    11c2:	02 c0       	rjmp	.+4      	; 0x11c8 <DIO_u8GetPinValue+0xb2>
    11c4:	55 95       	asr	r21
    11c6:	47 95       	ror	r20
    11c8:	8a 95       	dec	r24
    11ca:	e2 f7       	brpl	.-8      	; 0x11c4 <DIO_u8GetPinValue+0xae>
    11cc:	ca 01       	movw	r24, r20
    11ce:	81 70       	andi	r24, 0x01	; 1
    11d0:	89 83       	std	Y+1, r24	; 0x01
    11d2:	11 c0       	rjmp	.+34     	; 0x11f6 <DIO_u8GetPinValue+0xe0>
	case 3: value = GET_BIT(PIND, LOC_u8Pin); break;
    11d4:	e0 e3       	ldi	r30, 0x30	; 48
    11d6:	f0 e0       	ldi	r31, 0x00	; 0
    11d8:	80 81       	ld	r24, Z
    11da:	28 2f       	mov	r18, r24
    11dc:	30 e0       	ldi	r19, 0x00	; 0
    11de:	8b 81       	ldd	r24, Y+3	; 0x03
    11e0:	88 2f       	mov	r24, r24
    11e2:	90 e0       	ldi	r25, 0x00	; 0
    11e4:	a9 01       	movw	r20, r18
    11e6:	02 c0       	rjmp	.+4      	; 0x11ec <DIO_u8GetPinValue+0xd6>
    11e8:	55 95       	asr	r21
    11ea:	47 95       	ror	r20
    11ec:	8a 95       	dec	r24
    11ee:	e2 f7       	brpl	.-8      	; 0x11e8 <DIO_u8GetPinValue+0xd2>
    11f0:	ca 01       	movw	r24, r20
    11f2:	81 70       	andi	r24, 0x01	; 1
    11f4:	89 83       	std	Y+1, r24	; 0x01
	}
	return value;
    11f6:	89 81       	ldd	r24, Y+1	; 0x01
}
    11f8:	0f 90       	pop	r0
    11fa:	0f 90       	pop	r0
    11fc:	0f 90       	pop	r0
    11fe:	0f 90       	pop	r0
    1200:	0f 90       	pop	r0
    1202:	cf 91       	pop	r28
    1204:	df 91       	pop	r29
    1206:	08 95       	ret

00001208 <EXI_Enable>:
#include "DIO_Register.h"
#include "DIO_Interface.h"
#include <avr/delay.h>
void EXI_Enable(void)

{
    1208:	df 93       	push	r29
    120a:	cf 93       	push	r28
    120c:	cd b7       	in	r28, 0x3d	; 61
    120e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GICR,INT1);
    1210:	ab e5       	ldi	r26, 0x5B	; 91
    1212:	b0 e0       	ldi	r27, 0x00	; 0
    1214:	eb e5       	ldi	r30, 0x5B	; 91
    1216:	f0 e0       	ldi	r31, 0x00	; 0
    1218:	80 81       	ld	r24, Z
    121a:	80 68       	ori	r24, 0x80	; 128
    121c:	8c 93       	st	X, r24
}
    121e:	cf 91       	pop	r28
    1220:	df 91       	pop	r29
    1222:	08 95       	ret

00001224 <EXI_Disable>:
void EXI_Disable(void)
{
    1224:	df 93       	push	r29
    1226:	cf 93       	push	r28
    1228:	cd b7       	in	r28, 0x3d	; 61
    122a:	de b7       	in	r29, 0x3e	; 62
    CLR_BIT(GICR,INT1);
    122c:	ab e5       	ldi	r26, 0x5B	; 91
    122e:	b0 e0       	ldi	r27, 0x00	; 0
    1230:	eb e5       	ldi	r30, 0x5B	; 91
    1232:	f0 e0       	ldi	r31, 0x00	; 0
    1234:	80 81       	ld	r24, Z
    1236:	8f 77       	andi	r24, 0x7F	; 127
    1238:	8c 93       	st	X, r24
}
    123a:	cf 91       	pop	r28
    123c:	df 91       	pop	r29
    123e:	08 95       	ret

00001240 <EXI_VidInt>:
void EXI_VidInt(void)
{
    1240:	df 93       	push	r29
    1242:	cf 93       	push	r28
    1244:	cd b7       	in	r28, 0x3d	; 61
    1246:	de b7       	in	r29, 0x3e	; 62
	DIO_VidSetPinDirection(PORTD,PIN3, INPUT);
    1248:	83 e0       	ldi	r24, 0x03	; 3
    124a:	63 e0       	ldi	r22, 0x03	; 3
    124c:	40 e0       	ldi	r20, 0x00	; 0
    124e:	0e 94 09 06 	call	0xc12	; 0xc12 <DIO_VidSetPinDirection>
	DIO_VidSetPinValue(PORTD,PIN3, 1);
    1252:	83 e0       	ldi	r24, 0x03	; 3
    1254:	63 e0       	ldi	r22, 0x03	; 3
    1256:	41 e0       	ldi	r20, 0x01	; 1
    1258:	0e 94 09 07 	call	0xe12	; 0xe12 <DIO_VidSetPinValue>
	#if control_sens==falling
			CLR_BIT(MCUCR,ISC00);
			SET_BIT(MCUCR,ISC01);
	#elif control_sens==rising
			SET_BIT(MCUCR,ISC00);
    125c:	a5 e5       	ldi	r26, 0x55	; 85
    125e:	b0 e0       	ldi	r27, 0x00	; 0
    1260:	e5 e5       	ldi	r30, 0x55	; 85
    1262:	f0 e0       	ldi	r31, 0x00	; 0
    1264:	80 81       	ld	r24, Z
    1266:	81 60       	ori	r24, 0x01	; 1
    1268:	8c 93       	st	X, r24
			SET_BIT(MCUCR,ISC01);
    126a:	a5 e5       	ldi	r26, 0x55	; 85
    126c:	b0 e0       	ldi	r27, 0x00	; 0
    126e:	e5 e5       	ldi	r30, 0x55	; 85
    1270:	f0 e0       	ldi	r31, 0x00	; 0
    1272:	80 81       	ld	r24, Z
    1274:	82 60       	ori	r24, 0x02	; 2
    1276:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,ISC01);
	#else
		#error  "wrong choice"
	#endif

}
    1278:	cf 91       	pop	r28
    127a:	df 91       	pop	r29
    127c:	08 95       	ret

0000127e <__vector_2>:


void __vector_2 (void)
{
    127e:	1f 92       	push	r1
    1280:	0f 92       	push	r0
    1282:	0f b6       	in	r0, 0x3f	; 63
    1284:	0f 92       	push	r0
    1286:	11 24       	eor	r1, r1
    1288:	2f 93       	push	r18
    128a:	3f 93       	push	r19
    128c:	4f 93       	push	r20
    128e:	5f 93       	push	r21
    1290:	6f 93       	push	r22
    1292:	7f 93       	push	r23
    1294:	8f 93       	push	r24
    1296:	9f 93       	push	r25
    1298:	af 93       	push	r26
    129a:	bf 93       	push	r27
    129c:	ef 93       	push	r30
    129e:	ff 93       	push	r31
    12a0:	df 93       	push	r29
    12a2:	cf 93       	push	r28
    12a4:	cd b7       	in	r28, 0x3d	; 61
    12a6:	de b7       	in	r29, 0x3e	; 62
    12a8:	2e 97       	sbiw	r28, 0x0e	; 14
    12aa:	de bf       	out	0x3e, r29	; 62
    12ac:	cd bf       	out	0x3d, r28	; 61

		DIO_VidSetPinValue(PORTA,PIN0,1);
    12ae:	80 e0       	ldi	r24, 0x00	; 0
    12b0:	60 e0       	ldi	r22, 0x00	; 0
    12b2:	41 e0       	ldi	r20, 0x01	; 1
    12b4:	0e 94 09 07 	call	0xe12	; 0xe12 <DIO_VidSetPinValue>
    12b8:	80 e0       	ldi	r24, 0x00	; 0
    12ba:	90 e0       	ldi	r25, 0x00	; 0
    12bc:	aa e7       	ldi	r26, 0x7A	; 122
    12be:	b5 e4       	ldi	r27, 0x45	; 69
    12c0:	8b 87       	std	Y+11, r24	; 0x0b
    12c2:	9c 87       	std	Y+12, r25	; 0x0c
    12c4:	ad 87       	std	Y+13, r26	; 0x0d
    12c6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    12ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    12cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    12ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    12d0:	20 e0       	ldi	r18, 0x00	; 0
    12d2:	30 e0       	ldi	r19, 0x00	; 0
    12d4:	4a ef       	ldi	r20, 0xFA	; 250
    12d6:	54 e4       	ldi	r21, 0x44	; 68
    12d8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    12dc:	dc 01       	movw	r26, r24
    12de:	cb 01       	movw	r24, r22
    12e0:	8f 83       	std	Y+7, r24	; 0x07
    12e2:	98 87       	std	Y+8, r25	; 0x08
    12e4:	a9 87       	std	Y+9, r26	; 0x09
    12e6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    12e8:	6f 81       	ldd	r22, Y+7	; 0x07
    12ea:	78 85       	ldd	r23, Y+8	; 0x08
    12ec:	89 85       	ldd	r24, Y+9	; 0x09
    12ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    12f0:	20 e0       	ldi	r18, 0x00	; 0
    12f2:	30 e0       	ldi	r19, 0x00	; 0
    12f4:	40 e8       	ldi	r20, 0x80	; 128
    12f6:	5f e3       	ldi	r21, 0x3F	; 63
    12f8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    12fc:	88 23       	and	r24, r24
    12fe:	2c f4       	brge	.+10     	; 0x130a <__vector_2+0x8c>
		__ticks = 1;
    1300:	81 e0       	ldi	r24, 0x01	; 1
    1302:	90 e0       	ldi	r25, 0x00	; 0
    1304:	9e 83       	std	Y+6, r25	; 0x06
    1306:	8d 83       	std	Y+5, r24	; 0x05
    1308:	3f c0       	rjmp	.+126    	; 0x1388 <__vector_2+0x10a>
	else if (__tmp > 65535)
    130a:	6f 81       	ldd	r22, Y+7	; 0x07
    130c:	78 85       	ldd	r23, Y+8	; 0x08
    130e:	89 85       	ldd	r24, Y+9	; 0x09
    1310:	9a 85       	ldd	r25, Y+10	; 0x0a
    1312:	20 e0       	ldi	r18, 0x00	; 0
    1314:	3f ef       	ldi	r19, 0xFF	; 255
    1316:	4f e7       	ldi	r20, 0x7F	; 127
    1318:	57 e4       	ldi	r21, 0x47	; 71
    131a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    131e:	18 16       	cp	r1, r24
    1320:	4c f5       	brge	.+82     	; 0x1374 <__vector_2+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1322:	6b 85       	ldd	r22, Y+11	; 0x0b
    1324:	7c 85       	ldd	r23, Y+12	; 0x0c
    1326:	8d 85       	ldd	r24, Y+13	; 0x0d
    1328:	9e 85       	ldd	r25, Y+14	; 0x0e
    132a:	20 e0       	ldi	r18, 0x00	; 0
    132c:	30 e0       	ldi	r19, 0x00	; 0
    132e:	40 e2       	ldi	r20, 0x20	; 32
    1330:	51 e4       	ldi	r21, 0x41	; 65
    1332:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1336:	dc 01       	movw	r26, r24
    1338:	cb 01       	movw	r24, r22
    133a:	bc 01       	movw	r22, r24
    133c:	cd 01       	movw	r24, r26
    133e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1342:	dc 01       	movw	r26, r24
    1344:	cb 01       	movw	r24, r22
    1346:	9e 83       	std	Y+6, r25	; 0x06
    1348:	8d 83       	std	Y+5, r24	; 0x05
    134a:	0f c0       	rjmp	.+30     	; 0x136a <__vector_2+0xec>
    134c:	88 ec       	ldi	r24, 0xC8	; 200
    134e:	90 e0       	ldi	r25, 0x00	; 0
    1350:	9c 83       	std	Y+4, r25	; 0x04
    1352:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1354:	8b 81       	ldd	r24, Y+3	; 0x03
    1356:	9c 81       	ldd	r25, Y+4	; 0x04
    1358:	01 97       	sbiw	r24, 0x01	; 1
    135a:	f1 f7       	brne	.-4      	; 0x1358 <__vector_2+0xda>
    135c:	9c 83       	std	Y+4, r25	; 0x04
    135e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1360:	8d 81       	ldd	r24, Y+5	; 0x05
    1362:	9e 81       	ldd	r25, Y+6	; 0x06
    1364:	01 97       	sbiw	r24, 0x01	; 1
    1366:	9e 83       	std	Y+6, r25	; 0x06
    1368:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    136a:	8d 81       	ldd	r24, Y+5	; 0x05
    136c:	9e 81       	ldd	r25, Y+6	; 0x06
    136e:	00 97       	sbiw	r24, 0x00	; 0
    1370:	69 f7       	brne	.-38     	; 0x134c <__vector_2+0xce>
    1372:	14 c0       	rjmp	.+40     	; 0x139c <__vector_2+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1374:	6f 81       	ldd	r22, Y+7	; 0x07
    1376:	78 85       	ldd	r23, Y+8	; 0x08
    1378:	89 85       	ldd	r24, Y+9	; 0x09
    137a:	9a 85       	ldd	r25, Y+10	; 0x0a
    137c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1380:	dc 01       	movw	r26, r24
    1382:	cb 01       	movw	r24, r22
    1384:	9e 83       	std	Y+6, r25	; 0x06
    1386:	8d 83       	std	Y+5, r24	; 0x05
    1388:	8d 81       	ldd	r24, Y+5	; 0x05
    138a:	9e 81       	ldd	r25, Y+6	; 0x06
    138c:	9a 83       	std	Y+2, r25	; 0x02
    138e:	89 83       	std	Y+1, r24	; 0x01
    1390:	89 81       	ldd	r24, Y+1	; 0x01
    1392:	9a 81       	ldd	r25, Y+2	; 0x02
    1394:	01 97       	sbiw	r24, 0x01	; 1
    1396:	f1 f7       	brne	.-4      	; 0x1394 <__vector_2+0x116>
    1398:	9a 83       	std	Y+2, r25	; 0x02
    139a:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(4000);


}
    139c:	2e 96       	adiw	r28, 0x0e	; 14
    139e:	de bf       	out	0x3e, r29	; 62
    13a0:	cd bf       	out	0x3d, r28	; 61
    13a2:	cf 91       	pop	r28
    13a4:	df 91       	pop	r29
    13a6:	ff 91       	pop	r31
    13a8:	ef 91       	pop	r30
    13aa:	bf 91       	pop	r27
    13ac:	af 91       	pop	r26
    13ae:	9f 91       	pop	r25
    13b0:	8f 91       	pop	r24
    13b2:	7f 91       	pop	r23
    13b4:	6f 91       	pop	r22
    13b6:	5f 91       	pop	r21
    13b8:	4f 91       	pop	r20
    13ba:	3f 91       	pop	r19
    13bc:	2f 91       	pop	r18
    13be:	0f 90       	pop	r0
    13c0:	0f be       	out	0x3f, r0	; 63
    13c2:	0f 90       	pop	r0
    13c4:	1f 90       	pop	r1
    13c6:	18 95       	reti

000013c8 <GIE_Enable>:
#include "GIE_Regster.h"
#include "BIT_MATH.h"

void GIE_Enable(void)

{
    13c8:	df 93       	push	r29
    13ca:	cf 93       	push	r28
    13cc:	cd b7       	in	r28, 0x3d	; 61
    13ce:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,7);
    13d0:	af e5       	ldi	r26, 0x5F	; 95
    13d2:	b0 e0       	ldi	r27, 0x00	; 0
    13d4:	ef e5       	ldi	r30, 0x5F	; 95
    13d6:	f0 e0       	ldi	r31, 0x00	; 0
    13d8:	80 81       	ld	r24, Z
    13da:	80 68       	ori	r24, 0x80	; 128
    13dc:	8c 93       	st	X, r24
}
    13de:	cf 91       	pop	r28
    13e0:	df 91       	pop	r29
    13e2:	08 95       	ret

000013e4 <GIE_Disable>:

void GIE_Disable(void)
{
    13e4:	df 93       	push	r29
    13e6:	cf 93       	push	r28
    13e8:	cd b7       	in	r28, 0x3d	; 61
    13ea:	de b7       	in	r29, 0x3e	; 62
    CLR_BIT(SREG,INT0);
    13ec:	af e5       	ldi	r26, 0x5F	; 95
    13ee:	b0 e0       	ldi	r27, 0x00	; 0
    13f0:	ef e5       	ldi	r30, 0x5F	; 95
    13f2:	f0 e0       	ldi	r31, 0x00	; 0
    13f4:	80 81       	ld	r24, Z
    13f6:	8f 7b       	andi	r24, 0xBF	; 191
    13f8:	8c 93       	st	X, r24
}
    13fa:	cf 91       	pop	r28
    13fc:	df 91       	pop	r29
    13fe:	08 95       	ret

00001400 <KEY_PAD_VidInit>:
#include "avr/delay.h"
#include "DIO_Interface.h"


void KEY_PAD_VidInit(void)
{
    1400:	df 93       	push	r29
    1402:	cf 93       	push	r28
    1404:	cd b7       	in	r28, 0x3d	; 61
    1406:	de b7       	in	r29, 0x3e	; 62
	DIO_VidSetPortDirection(KEY_pad_port,KEY_pad_dirction_init);
    1408:	80 e0       	ldi	r24, 0x00	; 0
    140a:	6f e0       	ldi	r22, 0x0F	; 15
    140c:	0e 94 09 08 	call	0x1012	; 0x1012 <DIO_VidSetPortDirection>
	DIO_VidSetPortValue(KEY_pad_port,KEY_pad_value_init);
    1410:	80 e0       	ldi	r24, 0x00	; 0
    1412:	6f ef       	ldi	r22, 0xFF	; 255
    1414:	0e 94 4a 08 	call	0x1094	; 0x1094 <DIO_VidSetPortValue>
}
    1418:	cf 91       	pop	r28
    141a:	df 91       	pop	r29
    141c:	08 95       	ret

0000141e <KEY_PAD_VidGitPresed>:
u8 KEY_PAD_VidGitPresed(void)
{
    141e:	df 93       	push	r29
    1420:	cf 93       	push	r28
    1422:	cd b7       	in	r28, 0x3d	; 61
    1424:	de b7       	in	r29, 0x3e	; 62
    1426:	e6 97       	sbiw	r28, 0x36	; 54
    1428:	0f b6       	in	r0, 0x3f	; 63
    142a:	f8 94       	cli
    142c:	de bf       	out	0x3e, r29	; 62
    142e:	0f be       	out	0x3f, r0	; 63
    1430:	cd bf       	out	0x3d, r28	; 61
	u8 colum, row;
	u8 keypad_OUT=0;
    1432:	1f 86       	std	Y+15, r1	; 0x0f
	u16 KEYPAmap[4][4]={{1,2,3,4},
							{5,6,7,8},
							{9,10,11,12},
							{13,14,15,16}};
    1434:	ce 01       	movw	r24, r28
    1436:	42 96       	adiw	r24, 0x12	; 18
    1438:	9b ab       	std	Y+51, r25	; 0x33
    143a:	8a ab       	std	Y+50, r24	; 0x32
    143c:	e8 e6       	ldi	r30, 0x68	; 104
    143e:	f0 e0       	ldi	r31, 0x00	; 0
    1440:	fd ab       	std	Y+53, r31	; 0x35
    1442:	ec ab       	std	Y+52, r30	; 0x34
    1444:	f0 e2       	ldi	r31, 0x20	; 32
    1446:	fe ab       	std	Y+54, r31	; 0x36
    1448:	ec a9       	ldd	r30, Y+52	; 0x34
    144a:	fd a9       	ldd	r31, Y+53	; 0x35
    144c:	00 80       	ld	r0, Z
    144e:	8c a9       	ldd	r24, Y+52	; 0x34
    1450:	9d a9       	ldd	r25, Y+53	; 0x35
    1452:	01 96       	adiw	r24, 0x01	; 1
    1454:	9d ab       	std	Y+53, r25	; 0x35
    1456:	8c ab       	std	Y+52, r24	; 0x34
    1458:	ea a9       	ldd	r30, Y+50	; 0x32
    145a:	fb a9       	ldd	r31, Y+51	; 0x33
    145c:	00 82       	st	Z, r0
    145e:	8a a9       	ldd	r24, Y+50	; 0x32
    1460:	9b a9       	ldd	r25, Y+51	; 0x33
    1462:	01 96       	adiw	r24, 0x01	; 1
    1464:	9b ab       	std	Y+51, r25	; 0x33
    1466:	8a ab       	std	Y+50, r24	; 0x32
    1468:	9e a9       	ldd	r25, Y+54	; 0x36
    146a:	91 50       	subi	r25, 0x01	; 1
    146c:	9e ab       	std	Y+54, r25	; 0x36
    146e:	ee a9       	ldd	r30, Y+54	; 0x36
    1470:	ee 23       	and	r30, r30
    1472:	51 f7       	brne	.-44     	; 0x1448 <KEY_PAD_VidGitPresed+0x2a>
	for(colum=0;colum<4;colum++)
    1474:	19 8a       	std	Y+17, r1	; 0x11
    1476:	b2 c0       	rjmp	.+356    	; 0x15dc <KEY_PAD_VidGitPresed+0x1be>
	{
		DIO_VidSetPinValue(KEY_pad_port,colum,0);
    1478:	80 e0       	ldi	r24, 0x00	; 0
    147a:	69 89       	ldd	r22, Y+17	; 0x11
    147c:	40 e0       	ldi	r20, 0x00	; 0
    147e:	0e 94 09 07 	call	0xe12	; 0xe12 <DIO_VidSetPinValue>
		for(row=4;row<8;row++)
    1482:	84 e0       	ldi	r24, 0x04	; 4
    1484:	88 8b       	std	Y+16, r24	; 0x10
    1486:	9e c0       	rjmp	.+316    	; 0x15c4 <KEY_PAD_VidGitPresed+0x1a6>
		{
			if(puuton_pressed==DIO_u8GetPinValue(KEY_pad_port,row))
    1488:	80 e0       	ldi	r24, 0x00	; 0
    148a:	68 89       	ldd	r22, Y+16	; 0x10
    148c:	0e 94 8b 08 	call	0x1116	; 0x1116 <DIO_u8GetPinValue>
    1490:	88 23       	and	r24, r24
    1492:	09 f0       	breq	.+2      	; 0x1496 <KEY_PAD_VidGitPresed+0x78>
    1494:	94 c0       	rjmp	.+296    	; 0x15be <KEY_PAD_VidGitPresed+0x1a0>
			{
				keypad_OUT=KEYPAmap[row-4][colum];
    1496:	88 89       	ldd	r24, Y+16	; 0x10
    1498:	88 2f       	mov	r24, r24
    149a:	90 e0       	ldi	r25, 0x00	; 0
    149c:	ac 01       	movw	r20, r24
    149e:	44 50       	subi	r20, 0x04	; 4
    14a0:	50 40       	sbci	r21, 0x00	; 0
    14a2:	89 89       	ldd	r24, Y+17	; 0x11
    14a4:	28 2f       	mov	r18, r24
    14a6:	30 e0       	ldi	r19, 0x00	; 0
    14a8:	ca 01       	movw	r24, r20
    14aa:	88 0f       	add	r24, r24
    14ac:	99 1f       	adc	r25, r25
    14ae:	88 0f       	add	r24, r24
    14b0:	99 1f       	adc	r25, r25
    14b2:	82 0f       	add	r24, r18
    14b4:	93 1f       	adc	r25, r19
    14b6:	9c 01       	movw	r18, r24
    14b8:	22 0f       	add	r18, r18
    14ba:	33 1f       	adc	r19, r19
    14bc:	ce 01       	movw	r24, r28
    14be:	01 96       	adiw	r24, 0x01	; 1
    14c0:	82 0f       	add	r24, r18
    14c2:	93 1f       	adc	r25, r19
    14c4:	fc 01       	movw	r30, r24
    14c6:	71 96       	adiw	r30, 0x11	; 17
    14c8:	80 81       	ld	r24, Z
    14ca:	91 81       	ldd	r25, Z+1	; 0x01
    14cc:	8f 87       	std	Y+15, r24	; 0x0f

				while(puuton_pressed==DIO_u8GetPinValue(KEY_pad_port,row))
    14ce:	80 e0       	ldi	r24, 0x00	; 0
    14d0:	68 89       	ldd	r22, Y+16	; 0x10
    14d2:	0e 94 8b 08 	call	0x1116	; 0x1116 <DIO_u8GetPinValue>
    14d6:	88 23       	and	r24, r24
    14d8:	d1 f3       	breq	.-12     	; 0x14ce <KEY_PAD_VidGitPresed+0xb0>
    14da:	80 e0       	ldi	r24, 0x00	; 0
    14dc:	90 e0       	ldi	r25, 0x00	; 0
    14de:	a0 ea       	ldi	r26, 0xA0	; 160
    14e0:	b1 e4       	ldi	r27, 0x41	; 65
    14e2:	8b 87       	std	Y+11, r24	; 0x0b
    14e4:	9c 87       	std	Y+12, r25	; 0x0c
    14e6:	ad 87       	std	Y+13, r26	; 0x0d
    14e8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    14ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    14ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    14f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    14f2:	20 e0       	ldi	r18, 0x00	; 0
    14f4:	30 e0       	ldi	r19, 0x00	; 0
    14f6:	4a ef       	ldi	r20, 0xFA	; 250
    14f8:	54 e4       	ldi	r21, 0x44	; 68
    14fa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    14fe:	dc 01       	movw	r26, r24
    1500:	cb 01       	movw	r24, r22
    1502:	8f 83       	std	Y+7, r24	; 0x07
    1504:	98 87       	std	Y+8, r25	; 0x08
    1506:	a9 87       	std	Y+9, r26	; 0x09
    1508:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    150a:	6f 81       	ldd	r22, Y+7	; 0x07
    150c:	78 85       	ldd	r23, Y+8	; 0x08
    150e:	89 85       	ldd	r24, Y+9	; 0x09
    1510:	9a 85       	ldd	r25, Y+10	; 0x0a
    1512:	20 e0       	ldi	r18, 0x00	; 0
    1514:	30 e0       	ldi	r19, 0x00	; 0
    1516:	40 e8       	ldi	r20, 0x80	; 128
    1518:	5f e3       	ldi	r21, 0x3F	; 63
    151a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    151e:	88 23       	and	r24, r24
    1520:	2c f4       	brge	.+10     	; 0x152c <KEY_PAD_VidGitPresed+0x10e>
		__ticks = 1;
    1522:	81 e0       	ldi	r24, 0x01	; 1
    1524:	90 e0       	ldi	r25, 0x00	; 0
    1526:	9e 83       	std	Y+6, r25	; 0x06
    1528:	8d 83       	std	Y+5, r24	; 0x05
    152a:	3f c0       	rjmp	.+126    	; 0x15aa <KEY_PAD_VidGitPresed+0x18c>
	else if (__tmp > 65535)
    152c:	6f 81       	ldd	r22, Y+7	; 0x07
    152e:	78 85       	ldd	r23, Y+8	; 0x08
    1530:	89 85       	ldd	r24, Y+9	; 0x09
    1532:	9a 85       	ldd	r25, Y+10	; 0x0a
    1534:	20 e0       	ldi	r18, 0x00	; 0
    1536:	3f ef       	ldi	r19, 0xFF	; 255
    1538:	4f e7       	ldi	r20, 0x7F	; 127
    153a:	57 e4       	ldi	r21, 0x47	; 71
    153c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1540:	18 16       	cp	r1, r24
    1542:	4c f5       	brge	.+82     	; 0x1596 <KEY_PAD_VidGitPresed+0x178>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1544:	6b 85       	ldd	r22, Y+11	; 0x0b
    1546:	7c 85       	ldd	r23, Y+12	; 0x0c
    1548:	8d 85       	ldd	r24, Y+13	; 0x0d
    154a:	9e 85       	ldd	r25, Y+14	; 0x0e
    154c:	20 e0       	ldi	r18, 0x00	; 0
    154e:	30 e0       	ldi	r19, 0x00	; 0
    1550:	40 e2       	ldi	r20, 0x20	; 32
    1552:	51 e4       	ldi	r21, 0x41	; 65
    1554:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1558:	dc 01       	movw	r26, r24
    155a:	cb 01       	movw	r24, r22
    155c:	bc 01       	movw	r22, r24
    155e:	cd 01       	movw	r24, r26
    1560:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1564:	dc 01       	movw	r26, r24
    1566:	cb 01       	movw	r24, r22
    1568:	9e 83       	std	Y+6, r25	; 0x06
    156a:	8d 83       	std	Y+5, r24	; 0x05
    156c:	0f c0       	rjmp	.+30     	; 0x158c <KEY_PAD_VidGitPresed+0x16e>
    156e:	88 ec       	ldi	r24, 0xC8	; 200
    1570:	90 e0       	ldi	r25, 0x00	; 0
    1572:	9c 83       	std	Y+4, r25	; 0x04
    1574:	8b 83       	std	Y+3, r24	; 0x03
    1576:	8b 81       	ldd	r24, Y+3	; 0x03
    1578:	9c 81       	ldd	r25, Y+4	; 0x04
    157a:	01 97       	sbiw	r24, 0x01	; 1
    157c:	f1 f7       	brne	.-4      	; 0x157a <KEY_PAD_VidGitPresed+0x15c>
    157e:	9c 83       	std	Y+4, r25	; 0x04
    1580:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1582:	8d 81       	ldd	r24, Y+5	; 0x05
    1584:	9e 81       	ldd	r25, Y+6	; 0x06
    1586:	01 97       	sbiw	r24, 0x01	; 1
    1588:	9e 83       	std	Y+6, r25	; 0x06
    158a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    158c:	8d 81       	ldd	r24, Y+5	; 0x05
    158e:	9e 81       	ldd	r25, Y+6	; 0x06
    1590:	00 97       	sbiw	r24, 0x00	; 0
    1592:	69 f7       	brne	.-38     	; 0x156e <KEY_PAD_VidGitPresed+0x150>
    1594:	14 c0       	rjmp	.+40     	; 0x15be <KEY_PAD_VidGitPresed+0x1a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1596:	6f 81       	ldd	r22, Y+7	; 0x07
    1598:	78 85       	ldd	r23, Y+8	; 0x08
    159a:	89 85       	ldd	r24, Y+9	; 0x09
    159c:	9a 85       	ldd	r25, Y+10	; 0x0a
    159e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    15a2:	dc 01       	movw	r26, r24
    15a4:	cb 01       	movw	r24, r22
    15a6:	9e 83       	std	Y+6, r25	; 0x06
    15a8:	8d 83       	std	Y+5, r24	; 0x05
    15aa:	8d 81       	ldd	r24, Y+5	; 0x05
    15ac:	9e 81       	ldd	r25, Y+6	; 0x06
    15ae:	9a 83       	std	Y+2, r25	; 0x02
    15b0:	89 83       	std	Y+1, r24	; 0x01
    15b2:	89 81       	ldd	r24, Y+1	; 0x01
    15b4:	9a 81       	ldd	r25, Y+2	; 0x02
    15b6:	01 97       	sbiw	r24, 0x01	; 1
    15b8:	f1 f7       	brne	.-4      	; 0x15b6 <KEY_PAD_VidGitPresed+0x198>
    15ba:	9a 83       	std	Y+2, r25	; 0x02
    15bc:	89 83       	std	Y+1, r24	; 0x01
							{9,10,11,12},
							{13,14,15,16}};
	for(colum=0;colum<4;colum++)
	{
		DIO_VidSetPinValue(KEY_pad_port,colum,0);
		for(row=4;row<8;row++)
    15be:	88 89       	ldd	r24, Y+16	; 0x10
    15c0:	8f 5f       	subi	r24, 0xFF	; 255
    15c2:	88 8b       	std	Y+16, r24	; 0x10
    15c4:	88 89       	ldd	r24, Y+16	; 0x10
    15c6:	88 30       	cpi	r24, 0x08	; 8
    15c8:	08 f4       	brcc	.+2      	; 0x15cc <KEY_PAD_VidGitPresed+0x1ae>
    15ca:	5e cf       	rjmp	.-324    	; 0x1488 <KEY_PAD_VidGitPresed+0x6a>
				{
				}
				_delay_ms(20);
			}
		}
		DIO_VidSetPinValue(KEY_pad_port,colum,1);
    15cc:	80 e0       	ldi	r24, 0x00	; 0
    15ce:	69 89       	ldd	r22, Y+17	; 0x11
    15d0:	41 e0       	ldi	r20, 0x01	; 1
    15d2:	0e 94 09 07 	call	0xe12	; 0xe12 <DIO_VidSetPinValue>
	u8 keypad_OUT=0;
	u16 KEYPAmap[4][4]={{1,2,3,4},
							{5,6,7,8},
							{9,10,11,12},
							{13,14,15,16}};
	for(colum=0;colum<4;colum++)
    15d6:	89 89       	ldd	r24, Y+17	; 0x11
    15d8:	8f 5f       	subi	r24, 0xFF	; 255
    15da:	89 8b       	std	Y+17, r24	; 0x11
    15dc:	89 89       	ldd	r24, Y+17	; 0x11
    15de:	84 30       	cpi	r24, 0x04	; 4
    15e0:	08 f4       	brcc	.+2      	; 0x15e4 <KEY_PAD_VidGitPresed+0x1c6>
    15e2:	4a cf       	rjmp	.-364    	; 0x1478 <KEY_PAD_VidGitPresed+0x5a>
				_delay_ms(20);
			}
		}
		DIO_VidSetPinValue(KEY_pad_port,colum,1);
	}
	return keypad_OUT;
    15e4:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    15e6:	e6 96       	adiw	r28, 0x36	; 54
    15e8:	0f b6       	in	r0, 0x3f	; 63
    15ea:	f8 94       	cli
    15ec:	de bf       	out	0x3e, r29	; 62
    15ee:	0f be       	out	0x3f, r0	; 63
    15f0:	cd bf       	out	0x3d, r28	; 61
    15f2:	cf 91       	pop	r28
    15f4:	df 91       	pop	r29
    15f6:	08 95       	ret

000015f8 <LCD_VidInit>:
#include "avr/delay.h"
#include "DIO_Interface.h"
#include "LCD_Interface.h"

void LCD_VidInit(void)
{
    15f8:	df 93       	push	r29
    15fa:	cf 93       	push	r28
    15fc:	cd b7       	in	r28, 0x3d	; 61
    15fe:	de b7       	in	r29, 0x3e	; 62
    1600:	e8 97       	sbiw	r28, 0x38	; 56
    1602:	0f b6       	in	r0, 0x3f	; 63
    1604:	f8 94       	cli
    1606:	de bf       	out	0x3e, r29	; 62
    1608:	0f be       	out	0x3f, r0	; 63
    160a:	cd bf       	out	0x3d, r28	; 61
    160c:	80 e0       	ldi	r24, 0x00	; 0
    160e:	90 e0       	ldi	r25, 0x00	; 0
    1610:	a8 e4       	ldi	r26, 0x48	; 72
    1612:	b2 e4       	ldi	r27, 0x42	; 66
    1614:	8d ab       	std	Y+53, r24	; 0x35
    1616:	9e ab       	std	Y+54, r25	; 0x36
    1618:	af ab       	std	Y+55, r26	; 0x37
    161a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    161c:	6d a9       	ldd	r22, Y+53	; 0x35
    161e:	7e a9       	ldd	r23, Y+54	; 0x36
    1620:	8f a9       	ldd	r24, Y+55	; 0x37
    1622:	98 ad       	ldd	r25, Y+56	; 0x38
    1624:	20 e0       	ldi	r18, 0x00	; 0
    1626:	30 e0       	ldi	r19, 0x00	; 0
    1628:	4a ef       	ldi	r20, 0xFA	; 250
    162a:	54 e4       	ldi	r21, 0x44	; 68
    162c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1630:	dc 01       	movw	r26, r24
    1632:	cb 01       	movw	r24, r22
    1634:	89 ab       	std	Y+49, r24	; 0x31
    1636:	9a ab       	std	Y+50, r25	; 0x32
    1638:	ab ab       	std	Y+51, r26	; 0x33
    163a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    163c:	69 a9       	ldd	r22, Y+49	; 0x31
    163e:	7a a9       	ldd	r23, Y+50	; 0x32
    1640:	8b a9       	ldd	r24, Y+51	; 0x33
    1642:	9c a9       	ldd	r25, Y+52	; 0x34
    1644:	20 e0       	ldi	r18, 0x00	; 0
    1646:	30 e0       	ldi	r19, 0x00	; 0
    1648:	40 e8       	ldi	r20, 0x80	; 128
    164a:	5f e3       	ldi	r21, 0x3F	; 63
    164c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1650:	88 23       	and	r24, r24
    1652:	2c f4       	brge	.+10     	; 0x165e <LCD_VidInit+0x66>
		__ticks = 1;
    1654:	81 e0       	ldi	r24, 0x01	; 1
    1656:	90 e0       	ldi	r25, 0x00	; 0
    1658:	98 ab       	std	Y+48, r25	; 0x30
    165a:	8f a7       	std	Y+47, r24	; 0x2f
    165c:	3f c0       	rjmp	.+126    	; 0x16dc <LCD_VidInit+0xe4>
	else if (__tmp > 65535)
    165e:	69 a9       	ldd	r22, Y+49	; 0x31
    1660:	7a a9       	ldd	r23, Y+50	; 0x32
    1662:	8b a9       	ldd	r24, Y+51	; 0x33
    1664:	9c a9       	ldd	r25, Y+52	; 0x34
    1666:	20 e0       	ldi	r18, 0x00	; 0
    1668:	3f ef       	ldi	r19, 0xFF	; 255
    166a:	4f e7       	ldi	r20, 0x7F	; 127
    166c:	57 e4       	ldi	r21, 0x47	; 71
    166e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1672:	18 16       	cp	r1, r24
    1674:	4c f5       	brge	.+82     	; 0x16c8 <LCD_VidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1676:	6d a9       	ldd	r22, Y+53	; 0x35
    1678:	7e a9       	ldd	r23, Y+54	; 0x36
    167a:	8f a9       	ldd	r24, Y+55	; 0x37
    167c:	98 ad       	ldd	r25, Y+56	; 0x38
    167e:	20 e0       	ldi	r18, 0x00	; 0
    1680:	30 e0       	ldi	r19, 0x00	; 0
    1682:	40 e2       	ldi	r20, 0x20	; 32
    1684:	51 e4       	ldi	r21, 0x41	; 65
    1686:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    168a:	dc 01       	movw	r26, r24
    168c:	cb 01       	movw	r24, r22
    168e:	bc 01       	movw	r22, r24
    1690:	cd 01       	movw	r24, r26
    1692:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1696:	dc 01       	movw	r26, r24
    1698:	cb 01       	movw	r24, r22
    169a:	98 ab       	std	Y+48, r25	; 0x30
    169c:	8f a7       	std	Y+47, r24	; 0x2f
    169e:	0f c0       	rjmp	.+30     	; 0x16be <LCD_VidInit+0xc6>
    16a0:	88 ec       	ldi	r24, 0xC8	; 200
    16a2:	90 e0       	ldi	r25, 0x00	; 0
    16a4:	9e a7       	std	Y+46, r25	; 0x2e
    16a6:	8d a7       	std	Y+45, r24	; 0x2d
    16a8:	8d a5       	ldd	r24, Y+45	; 0x2d
    16aa:	9e a5       	ldd	r25, Y+46	; 0x2e
    16ac:	01 97       	sbiw	r24, 0x01	; 1
    16ae:	f1 f7       	brne	.-4      	; 0x16ac <LCD_VidInit+0xb4>
    16b0:	9e a7       	std	Y+46, r25	; 0x2e
    16b2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16b4:	8f a5       	ldd	r24, Y+47	; 0x2f
    16b6:	98 a9       	ldd	r25, Y+48	; 0x30
    16b8:	01 97       	sbiw	r24, 0x01	; 1
    16ba:	98 ab       	std	Y+48, r25	; 0x30
    16bc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16be:	8f a5       	ldd	r24, Y+47	; 0x2f
    16c0:	98 a9       	ldd	r25, Y+48	; 0x30
    16c2:	00 97       	sbiw	r24, 0x00	; 0
    16c4:	69 f7       	brne	.-38     	; 0x16a0 <LCD_VidInit+0xa8>
    16c6:	14 c0       	rjmp	.+40     	; 0x16f0 <LCD_VidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16c8:	69 a9       	ldd	r22, Y+49	; 0x31
    16ca:	7a a9       	ldd	r23, Y+50	; 0x32
    16cc:	8b a9       	ldd	r24, Y+51	; 0x33
    16ce:	9c a9       	ldd	r25, Y+52	; 0x34
    16d0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16d4:	dc 01       	movw	r26, r24
    16d6:	cb 01       	movw	r24, r22
    16d8:	98 ab       	std	Y+48, r25	; 0x30
    16da:	8f a7       	std	Y+47, r24	; 0x2f
    16dc:	8f a5       	ldd	r24, Y+47	; 0x2f
    16de:	98 a9       	ldd	r25, Y+48	; 0x30
    16e0:	9c a7       	std	Y+44, r25	; 0x2c
    16e2:	8b a7       	std	Y+43, r24	; 0x2b
    16e4:	8b a5       	ldd	r24, Y+43	; 0x2b
    16e6:	9c a5       	ldd	r25, Y+44	; 0x2c
    16e8:	01 97       	sbiw	r24, 0x01	; 1
    16ea:	f1 f7       	brne	.-4      	; 0x16e8 <LCD_VidInit+0xf0>
    16ec:	9c a7       	std	Y+44, r25	; 0x2c
    16ee:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(50); // wait for LCD to initialize
	DIO_VidSetPortDirection(LCD_PORT, 0xff );
    16f0:	83 e0       	ldi	r24, 0x03	; 3
    16f2:	6f ef       	ldi	r22, 0xFF	; 255
    16f4:	0e 94 09 08 	call	0x1012	; 0x1012 <DIO_VidSetPortDirection>
	//DIO_VidSetPortDirection(PORTB, 0b00111000 ); //RS RW E
	DIO_VidSetPinDirection(LCD_INIT,LCD_RS,1);   //RS
    16f8:	81 e0       	ldi	r24, 0x01	; 1
    16fa:	63 e0       	ldi	r22, 0x03	; 3
    16fc:	41 e0       	ldi	r20, 0x01	; 1
    16fe:	0e 94 09 06 	call	0xc12	; 0xc12 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(LCD_INIT,LCD_RW,1);   //RW
    1702:	81 e0       	ldi	r24, 0x01	; 1
    1704:	64 e0       	ldi	r22, 0x04	; 4
    1706:	41 e0       	ldi	r20, 0x01	; 1
    1708:	0e 94 09 06 	call	0xc12	; 0xc12 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(LCD_INIT,LCD_EN,1);   //EN
    170c:	81 e0       	ldi	r24, 0x01	; 1
    170e:	65 e0       	ldi	r22, 0x05	; 5
    1710:	41 e0       	ldi	r20, 0x01	; 1
    1712:	0e 94 09 06 	call	0xc12	; 0xc12 <DIO_VidSetPinDirection>



	LCD_VidWriteCommand(function_set_8_bit_lcd); 	//function set
    1716:	88 e3       	ldi	r24, 0x38	; 56
    1718:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <LCD_VidWriteCommand>
    171c:	80 e0       	ldi	r24, 0x00	; 0
    171e:	90 e0       	ldi	r25, 0x00	; 0
    1720:	a0 e8       	ldi	r26, 0x80	; 128
    1722:	bf e3       	ldi	r27, 0x3F	; 63
    1724:	8f a3       	std	Y+39, r24	; 0x27
    1726:	98 a7       	std	Y+40, r25	; 0x28
    1728:	a9 a7       	std	Y+41, r26	; 0x29
    172a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    172c:	6f a1       	ldd	r22, Y+39	; 0x27
    172e:	78 a5       	ldd	r23, Y+40	; 0x28
    1730:	89 a5       	ldd	r24, Y+41	; 0x29
    1732:	9a a5       	ldd	r25, Y+42	; 0x2a
    1734:	20 e0       	ldi	r18, 0x00	; 0
    1736:	30 e0       	ldi	r19, 0x00	; 0
    1738:	4a ef       	ldi	r20, 0xFA	; 250
    173a:	54 e4       	ldi	r21, 0x44	; 68
    173c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1740:	dc 01       	movw	r26, r24
    1742:	cb 01       	movw	r24, r22
    1744:	8b a3       	std	Y+35, r24	; 0x23
    1746:	9c a3       	std	Y+36, r25	; 0x24
    1748:	ad a3       	std	Y+37, r26	; 0x25
    174a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    174c:	6b a1       	ldd	r22, Y+35	; 0x23
    174e:	7c a1       	ldd	r23, Y+36	; 0x24
    1750:	8d a1       	ldd	r24, Y+37	; 0x25
    1752:	9e a1       	ldd	r25, Y+38	; 0x26
    1754:	20 e0       	ldi	r18, 0x00	; 0
    1756:	30 e0       	ldi	r19, 0x00	; 0
    1758:	40 e8       	ldi	r20, 0x80	; 128
    175a:	5f e3       	ldi	r21, 0x3F	; 63
    175c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1760:	88 23       	and	r24, r24
    1762:	2c f4       	brge	.+10     	; 0x176e <LCD_VidInit+0x176>
		__ticks = 1;
    1764:	81 e0       	ldi	r24, 0x01	; 1
    1766:	90 e0       	ldi	r25, 0x00	; 0
    1768:	9a a3       	std	Y+34, r25	; 0x22
    176a:	89 a3       	std	Y+33, r24	; 0x21
    176c:	3f c0       	rjmp	.+126    	; 0x17ec <LCD_VidInit+0x1f4>
	else if (__tmp > 65535)
    176e:	6b a1       	ldd	r22, Y+35	; 0x23
    1770:	7c a1       	ldd	r23, Y+36	; 0x24
    1772:	8d a1       	ldd	r24, Y+37	; 0x25
    1774:	9e a1       	ldd	r25, Y+38	; 0x26
    1776:	20 e0       	ldi	r18, 0x00	; 0
    1778:	3f ef       	ldi	r19, 0xFF	; 255
    177a:	4f e7       	ldi	r20, 0x7F	; 127
    177c:	57 e4       	ldi	r21, 0x47	; 71
    177e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1782:	18 16       	cp	r1, r24
    1784:	4c f5       	brge	.+82     	; 0x17d8 <LCD_VidInit+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1786:	6f a1       	ldd	r22, Y+39	; 0x27
    1788:	78 a5       	ldd	r23, Y+40	; 0x28
    178a:	89 a5       	ldd	r24, Y+41	; 0x29
    178c:	9a a5       	ldd	r25, Y+42	; 0x2a
    178e:	20 e0       	ldi	r18, 0x00	; 0
    1790:	30 e0       	ldi	r19, 0x00	; 0
    1792:	40 e2       	ldi	r20, 0x20	; 32
    1794:	51 e4       	ldi	r21, 0x41	; 65
    1796:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    179a:	dc 01       	movw	r26, r24
    179c:	cb 01       	movw	r24, r22
    179e:	bc 01       	movw	r22, r24
    17a0:	cd 01       	movw	r24, r26
    17a2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17a6:	dc 01       	movw	r26, r24
    17a8:	cb 01       	movw	r24, r22
    17aa:	9a a3       	std	Y+34, r25	; 0x22
    17ac:	89 a3       	std	Y+33, r24	; 0x21
    17ae:	0f c0       	rjmp	.+30     	; 0x17ce <LCD_VidInit+0x1d6>
    17b0:	88 ec       	ldi	r24, 0xC8	; 200
    17b2:	90 e0       	ldi	r25, 0x00	; 0
    17b4:	98 a3       	std	Y+32, r25	; 0x20
    17b6:	8f 8f       	std	Y+31, r24	; 0x1f
    17b8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    17ba:	98 a1       	ldd	r25, Y+32	; 0x20
    17bc:	01 97       	sbiw	r24, 0x01	; 1
    17be:	f1 f7       	brne	.-4      	; 0x17bc <LCD_VidInit+0x1c4>
    17c0:	98 a3       	std	Y+32, r25	; 0x20
    17c2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17c4:	89 a1       	ldd	r24, Y+33	; 0x21
    17c6:	9a a1       	ldd	r25, Y+34	; 0x22
    17c8:	01 97       	sbiw	r24, 0x01	; 1
    17ca:	9a a3       	std	Y+34, r25	; 0x22
    17cc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17ce:	89 a1       	ldd	r24, Y+33	; 0x21
    17d0:	9a a1       	ldd	r25, Y+34	; 0x22
    17d2:	00 97       	sbiw	r24, 0x00	; 0
    17d4:	69 f7       	brne	.-38     	; 0x17b0 <LCD_VidInit+0x1b8>
    17d6:	14 c0       	rjmp	.+40     	; 0x1800 <LCD_VidInit+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17d8:	6b a1       	ldd	r22, Y+35	; 0x23
    17da:	7c a1       	ldd	r23, Y+36	; 0x24
    17dc:	8d a1       	ldd	r24, Y+37	; 0x25
    17de:	9e a1       	ldd	r25, Y+38	; 0x26
    17e0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17e4:	dc 01       	movw	r26, r24
    17e6:	cb 01       	movw	r24, r22
    17e8:	9a a3       	std	Y+34, r25	; 0x22
    17ea:	89 a3       	std	Y+33, r24	; 0x21
    17ec:	89 a1       	ldd	r24, Y+33	; 0x21
    17ee:	9a a1       	ldd	r25, Y+34	; 0x22
    17f0:	9e 8f       	std	Y+30, r25	; 0x1e
    17f2:	8d 8f       	std	Y+29, r24	; 0x1d
    17f4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    17f6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    17f8:	01 97       	sbiw	r24, 0x01	; 1
    17fa:	f1 f7       	brne	.-4      	; 0x17f8 <LCD_VidInit+0x200>
    17fc:	9e 8f       	std	Y+30, r25	; 0x1e
    17fe:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); // wait for LCD to Function set
	LCD_VidWriteCommand(Display_On_Cursor_OFF);	//Display On
    1800:	8c e0       	ldi	r24, 0x0C	; 12
    1802:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <LCD_VidWriteCommand>
    1806:	80 e0       	ldi	r24, 0x00	; 0
    1808:	90 e0       	ldi	r25, 0x00	; 0
    180a:	a0 e8       	ldi	r26, 0x80	; 128
    180c:	bf e3       	ldi	r27, 0x3F	; 63
    180e:	89 8f       	std	Y+25, r24	; 0x19
    1810:	9a 8f       	std	Y+26, r25	; 0x1a
    1812:	ab 8f       	std	Y+27, r26	; 0x1b
    1814:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1816:	69 8d       	ldd	r22, Y+25	; 0x19
    1818:	7a 8d       	ldd	r23, Y+26	; 0x1a
    181a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    181c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    181e:	20 e0       	ldi	r18, 0x00	; 0
    1820:	30 e0       	ldi	r19, 0x00	; 0
    1822:	4a ef       	ldi	r20, 0xFA	; 250
    1824:	54 e4       	ldi	r21, 0x44	; 68
    1826:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    182a:	dc 01       	movw	r26, r24
    182c:	cb 01       	movw	r24, r22
    182e:	8d 8b       	std	Y+21, r24	; 0x15
    1830:	9e 8b       	std	Y+22, r25	; 0x16
    1832:	af 8b       	std	Y+23, r26	; 0x17
    1834:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1836:	6d 89       	ldd	r22, Y+21	; 0x15
    1838:	7e 89       	ldd	r23, Y+22	; 0x16
    183a:	8f 89       	ldd	r24, Y+23	; 0x17
    183c:	98 8d       	ldd	r25, Y+24	; 0x18
    183e:	20 e0       	ldi	r18, 0x00	; 0
    1840:	30 e0       	ldi	r19, 0x00	; 0
    1842:	40 e8       	ldi	r20, 0x80	; 128
    1844:	5f e3       	ldi	r21, 0x3F	; 63
    1846:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    184a:	88 23       	and	r24, r24
    184c:	2c f4       	brge	.+10     	; 0x1858 <LCD_VidInit+0x260>
		__ticks = 1;
    184e:	81 e0       	ldi	r24, 0x01	; 1
    1850:	90 e0       	ldi	r25, 0x00	; 0
    1852:	9c 8b       	std	Y+20, r25	; 0x14
    1854:	8b 8b       	std	Y+19, r24	; 0x13
    1856:	3f c0       	rjmp	.+126    	; 0x18d6 <LCD_VidInit+0x2de>
	else if (__tmp > 65535)
    1858:	6d 89       	ldd	r22, Y+21	; 0x15
    185a:	7e 89       	ldd	r23, Y+22	; 0x16
    185c:	8f 89       	ldd	r24, Y+23	; 0x17
    185e:	98 8d       	ldd	r25, Y+24	; 0x18
    1860:	20 e0       	ldi	r18, 0x00	; 0
    1862:	3f ef       	ldi	r19, 0xFF	; 255
    1864:	4f e7       	ldi	r20, 0x7F	; 127
    1866:	57 e4       	ldi	r21, 0x47	; 71
    1868:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    186c:	18 16       	cp	r1, r24
    186e:	4c f5       	brge	.+82     	; 0x18c2 <LCD_VidInit+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1870:	69 8d       	ldd	r22, Y+25	; 0x19
    1872:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1874:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1876:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1878:	20 e0       	ldi	r18, 0x00	; 0
    187a:	30 e0       	ldi	r19, 0x00	; 0
    187c:	40 e2       	ldi	r20, 0x20	; 32
    187e:	51 e4       	ldi	r21, 0x41	; 65
    1880:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1884:	dc 01       	movw	r26, r24
    1886:	cb 01       	movw	r24, r22
    1888:	bc 01       	movw	r22, r24
    188a:	cd 01       	movw	r24, r26
    188c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1890:	dc 01       	movw	r26, r24
    1892:	cb 01       	movw	r24, r22
    1894:	9c 8b       	std	Y+20, r25	; 0x14
    1896:	8b 8b       	std	Y+19, r24	; 0x13
    1898:	0f c0       	rjmp	.+30     	; 0x18b8 <LCD_VidInit+0x2c0>
    189a:	88 ec       	ldi	r24, 0xC8	; 200
    189c:	90 e0       	ldi	r25, 0x00	; 0
    189e:	9a 8b       	std	Y+18, r25	; 0x12
    18a0:	89 8b       	std	Y+17, r24	; 0x11
    18a2:	89 89       	ldd	r24, Y+17	; 0x11
    18a4:	9a 89       	ldd	r25, Y+18	; 0x12
    18a6:	01 97       	sbiw	r24, 0x01	; 1
    18a8:	f1 f7       	brne	.-4      	; 0x18a6 <LCD_VidInit+0x2ae>
    18aa:	9a 8b       	std	Y+18, r25	; 0x12
    18ac:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18ae:	8b 89       	ldd	r24, Y+19	; 0x13
    18b0:	9c 89       	ldd	r25, Y+20	; 0x14
    18b2:	01 97       	sbiw	r24, 0x01	; 1
    18b4:	9c 8b       	std	Y+20, r25	; 0x14
    18b6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18b8:	8b 89       	ldd	r24, Y+19	; 0x13
    18ba:	9c 89       	ldd	r25, Y+20	; 0x14
    18bc:	00 97       	sbiw	r24, 0x00	; 0
    18be:	69 f7       	brne	.-38     	; 0x189a <LCD_VidInit+0x2a2>
    18c0:	14 c0       	rjmp	.+40     	; 0x18ea <LCD_VidInit+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18c2:	6d 89       	ldd	r22, Y+21	; 0x15
    18c4:	7e 89       	ldd	r23, Y+22	; 0x16
    18c6:	8f 89       	ldd	r24, Y+23	; 0x17
    18c8:	98 8d       	ldd	r25, Y+24	; 0x18
    18ca:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18ce:	dc 01       	movw	r26, r24
    18d0:	cb 01       	movw	r24, r22
    18d2:	9c 8b       	std	Y+20, r25	; 0x14
    18d4:	8b 8b       	std	Y+19, r24	; 0x13
    18d6:	8b 89       	ldd	r24, Y+19	; 0x13
    18d8:	9c 89       	ldd	r25, Y+20	; 0x14
    18da:	98 8b       	std	Y+16, r25	; 0x10
    18dc:	8f 87       	std	Y+15, r24	; 0x0f
    18de:	8f 85       	ldd	r24, Y+15	; 0x0f
    18e0:	98 89       	ldd	r25, Y+16	; 0x10
    18e2:	01 97       	sbiw	r24, 0x01	; 1
    18e4:	f1 f7       	brne	.-4      	; 0x18e2 <LCD_VidInit+0x2ea>
    18e6:	98 8b       	std	Y+16, r25	; 0x10
    18e8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); // wait for LCD to Display On
	LCD_VidWriteCommand(Clear_Display);	//Clear Display
    18ea:	81 e0       	ldi	r24, 0x01	; 1
    18ec:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <LCD_VidWriteCommand>
    18f0:	80 e0       	ldi	r24, 0x00	; 0
    18f2:	90 e0       	ldi	r25, 0x00	; 0
    18f4:	a0 e0       	ldi	r26, 0x00	; 0
    18f6:	b0 e4       	ldi	r27, 0x40	; 64
    18f8:	8b 87       	std	Y+11, r24	; 0x0b
    18fa:	9c 87       	std	Y+12, r25	; 0x0c
    18fc:	ad 87       	std	Y+13, r26	; 0x0d
    18fe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1900:	6b 85       	ldd	r22, Y+11	; 0x0b
    1902:	7c 85       	ldd	r23, Y+12	; 0x0c
    1904:	8d 85       	ldd	r24, Y+13	; 0x0d
    1906:	9e 85       	ldd	r25, Y+14	; 0x0e
    1908:	20 e0       	ldi	r18, 0x00	; 0
    190a:	30 e0       	ldi	r19, 0x00	; 0
    190c:	4a ef       	ldi	r20, 0xFA	; 250
    190e:	54 e4       	ldi	r21, 0x44	; 68
    1910:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1914:	dc 01       	movw	r26, r24
    1916:	cb 01       	movw	r24, r22
    1918:	8f 83       	std	Y+7, r24	; 0x07
    191a:	98 87       	std	Y+8, r25	; 0x08
    191c:	a9 87       	std	Y+9, r26	; 0x09
    191e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1920:	6f 81       	ldd	r22, Y+7	; 0x07
    1922:	78 85       	ldd	r23, Y+8	; 0x08
    1924:	89 85       	ldd	r24, Y+9	; 0x09
    1926:	9a 85       	ldd	r25, Y+10	; 0x0a
    1928:	20 e0       	ldi	r18, 0x00	; 0
    192a:	30 e0       	ldi	r19, 0x00	; 0
    192c:	40 e8       	ldi	r20, 0x80	; 128
    192e:	5f e3       	ldi	r21, 0x3F	; 63
    1930:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1934:	88 23       	and	r24, r24
    1936:	2c f4       	brge	.+10     	; 0x1942 <LCD_VidInit+0x34a>
		__ticks = 1;
    1938:	81 e0       	ldi	r24, 0x01	; 1
    193a:	90 e0       	ldi	r25, 0x00	; 0
    193c:	9e 83       	std	Y+6, r25	; 0x06
    193e:	8d 83       	std	Y+5, r24	; 0x05
    1940:	3f c0       	rjmp	.+126    	; 0x19c0 <LCD_VidInit+0x3c8>
	else if (__tmp > 65535)
    1942:	6f 81       	ldd	r22, Y+7	; 0x07
    1944:	78 85       	ldd	r23, Y+8	; 0x08
    1946:	89 85       	ldd	r24, Y+9	; 0x09
    1948:	9a 85       	ldd	r25, Y+10	; 0x0a
    194a:	20 e0       	ldi	r18, 0x00	; 0
    194c:	3f ef       	ldi	r19, 0xFF	; 255
    194e:	4f e7       	ldi	r20, 0x7F	; 127
    1950:	57 e4       	ldi	r21, 0x47	; 71
    1952:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1956:	18 16       	cp	r1, r24
    1958:	4c f5       	brge	.+82     	; 0x19ac <LCD_VidInit+0x3b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    195a:	6b 85       	ldd	r22, Y+11	; 0x0b
    195c:	7c 85       	ldd	r23, Y+12	; 0x0c
    195e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1960:	9e 85       	ldd	r25, Y+14	; 0x0e
    1962:	20 e0       	ldi	r18, 0x00	; 0
    1964:	30 e0       	ldi	r19, 0x00	; 0
    1966:	40 e2       	ldi	r20, 0x20	; 32
    1968:	51 e4       	ldi	r21, 0x41	; 65
    196a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    196e:	dc 01       	movw	r26, r24
    1970:	cb 01       	movw	r24, r22
    1972:	bc 01       	movw	r22, r24
    1974:	cd 01       	movw	r24, r26
    1976:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    197a:	dc 01       	movw	r26, r24
    197c:	cb 01       	movw	r24, r22
    197e:	9e 83       	std	Y+6, r25	; 0x06
    1980:	8d 83       	std	Y+5, r24	; 0x05
    1982:	0f c0       	rjmp	.+30     	; 0x19a2 <LCD_VidInit+0x3aa>
    1984:	88 ec       	ldi	r24, 0xC8	; 200
    1986:	90 e0       	ldi	r25, 0x00	; 0
    1988:	9c 83       	std	Y+4, r25	; 0x04
    198a:	8b 83       	std	Y+3, r24	; 0x03
    198c:	8b 81       	ldd	r24, Y+3	; 0x03
    198e:	9c 81       	ldd	r25, Y+4	; 0x04
    1990:	01 97       	sbiw	r24, 0x01	; 1
    1992:	f1 f7       	brne	.-4      	; 0x1990 <LCD_VidInit+0x398>
    1994:	9c 83       	std	Y+4, r25	; 0x04
    1996:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1998:	8d 81       	ldd	r24, Y+5	; 0x05
    199a:	9e 81       	ldd	r25, Y+6	; 0x06
    199c:	01 97       	sbiw	r24, 0x01	; 1
    199e:	9e 83       	std	Y+6, r25	; 0x06
    19a0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19a2:	8d 81       	ldd	r24, Y+5	; 0x05
    19a4:	9e 81       	ldd	r25, Y+6	; 0x06
    19a6:	00 97       	sbiw	r24, 0x00	; 0
    19a8:	69 f7       	brne	.-38     	; 0x1984 <LCD_VidInit+0x38c>
    19aa:	14 c0       	rjmp	.+40     	; 0x19d4 <LCD_VidInit+0x3dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19ac:	6f 81       	ldd	r22, Y+7	; 0x07
    19ae:	78 85       	ldd	r23, Y+8	; 0x08
    19b0:	89 85       	ldd	r24, Y+9	; 0x09
    19b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    19b4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19b8:	dc 01       	movw	r26, r24
    19ba:	cb 01       	movw	r24, r22
    19bc:	9e 83       	std	Y+6, r25	; 0x06
    19be:	8d 83       	std	Y+5, r24	; 0x05
    19c0:	8d 81       	ldd	r24, Y+5	; 0x05
    19c2:	9e 81       	ldd	r25, Y+6	; 0x06
    19c4:	9a 83       	std	Y+2, r25	; 0x02
    19c6:	89 83       	std	Y+1, r24	; 0x01
    19c8:	89 81       	ldd	r24, Y+1	; 0x01
    19ca:	9a 81       	ldd	r25, Y+2	; 0x02
    19cc:	01 97       	sbiw	r24, 0x01	; 1
    19ce:	f1 f7       	brne	.-4      	; 0x19cc <LCD_VidInit+0x3d4>
    19d0:	9a 83       	std	Y+2, r25	; 0x02
    19d2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2); // wait for LCD to Clear Display

}
    19d4:	e8 96       	adiw	r28, 0x38	; 56
    19d6:	0f b6       	in	r0, 0x3f	; 63
    19d8:	f8 94       	cli
    19da:	de bf       	out	0x3e, r29	; 62
    19dc:	0f be       	out	0x3f, r0	; 63
    19de:	cd bf       	out	0x3d, r28	; 61
    19e0:	cf 91       	pop	r28
    19e2:	df 91       	pop	r29
    19e4:	08 95       	ret

000019e6 <LCD_VidWriteCommand>:

void LCD_VidWriteCommand(u8 LOC_u8Command)
{
    19e6:	df 93       	push	r29
    19e8:	cf 93       	push	r28
    19ea:	cd b7       	in	r28, 0x3d	; 61
    19ec:	de b7       	in	r29, 0x3e	; 62
    19ee:	6d 97       	sbiw	r28, 0x1d	; 29
    19f0:	0f b6       	in	r0, 0x3f	; 63
    19f2:	f8 94       	cli
    19f4:	de bf       	out	0x3e, r29	; 62
    19f6:	0f be       	out	0x3f, r0	; 63
    19f8:	cd bf       	out	0x3d, r28	; 61
    19fa:	8d 8f       	std	Y+29, r24	; 0x1d
	DIO_VidSetPinValue(LCD_INIT, LCD_RS, OUT_LOW);  //RS = 0   register selection
    19fc:	81 e0       	ldi	r24, 0x01	; 1
    19fe:	63 e0       	ldi	r22, 0x03	; 3
    1a00:	40 e0       	ldi	r20, 0x00	; 0
    1a02:	0e 94 09 07 	call	0xe12	; 0xe12 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(LCD_INIT, LCD_RW, OUT_LOW);  //RW = 0
    1a06:	81 e0       	ldi	r24, 0x01	; 1
    1a08:	64 e0       	ldi	r22, 0x04	; 4
    1a0a:	40 e0       	ldi	r20, 0x00	; 0
    1a0c:	0e 94 09 07 	call	0xe12	; 0xe12 <DIO_VidSetPinValue>
	DIO_VidSetPortValue(LCD_PORT, LOC_u8Command);  // Write Command
    1a10:	83 e0       	ldi	r24, 0x03	; 3
    1a12:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1a14:	0e 94 4a 08 	call	0x1094	; 0x1094 <DIO_VidSetPortValue>
	DIO_VidSetPinValue(LCD_INIT, LCD_EN, OUT_HIGH);  //Enable = 1 high rise edge
    1a18:	81 e0       	ldi	r24, 0x01	; 1
    1a1a:	65 e0       	ldi	r22, 0x05	; 5
    1a1c:	41 e0       	ldi	r20, 0x01	; 1
    1a1e:	0e 94 09 07 	call	0xe12	; 0xe12 <DIO_VidSetPinValue>
    1a22:	80 e0       	ldi	r24, 0x00	; 0
    1a24:	90 e0       	ldi	r25, 0x00	; 0
    1a26:	a0 e8       	ldi	r26, 0x80	; 128
    1a28:	bf e3       	ldi	r27, 0x3F	; 63
    1a2a:	89 8f       	std	Y+25, r24	; 0x19
    1a2c:	9a 8f       	std	Y+26, r25	; 0x1a
    1a2e:	ab 8f       	std	Y+27, r26	; 0x1b
    1a30:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a32:	69 8d       	ldd	r22, Y+25	; 0x19
    1a34:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a36:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a38:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a3a:	20 e0       	ldi	r18, 0x00	; 0
    1a3c:	30 e0       	ldi	r19, 0x00	; 0
    1a3e:	4a ef       	ldi	r20, 0xFA	; 250
    1a40:	54 e4       	ldi	r21, 0x44	; 68
    1a42:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a46:	dc 01       	movw	r26, r24
    1a48:	cb 01       	movw	r24, r22
    1a4a:	8d 8b       	std	Y+21, r24	; 0x15
    1a4c:	9e 8b       	std	Y+22, r25	; 0x16
    1a4e:	af 8b       	std	Y+23, r26	; 0x17
    1a50:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1a52:	6d 89       	ldd	r22, Y+21	; 0x15
    1a54:	7e 89       	ldd	r23, Y+22	; 0x16
    1a56:	8f 89       	ldd	r24, Y+23	; 0x17
    1a58:	98 8d       	ldd	r25, Y+24	; 0x18
    1a5a:	20 e0       	ldi	r18, 0x00	; 0
    1a5c:	30 e0       	ldi	r19, 0x00	; 0
    1a5e:	40 e8       	ldi	r20, 0x80	; 128
    1a60:	5f e3       	ldi	r21, 0x3F	; 63
    1a62:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1a66:	88 23       	and	r24, r24
    1a68:	2c f4       	brge	.+10     	; 0x1a74 <LCD_VidWriteCommand+0x8e>
		__ticks = 1;
    1a6a:	81 e0       	ldi	r24, 0x01	; 1
    1a6c:	90 e0       	ldi	r25, 0x00	; 0
    1a6e:	9c 8b       	std	Y+20, r25	; 0x14
    1a70:	8b 8b       	std	Y+19, r24	; 0x13
    1a72:	3f c0       	rjmp	.+126    	; 0x1af2 <LCD_VidWriteCommand+0x10c>
	else if (__tmp > 65535)
    1a74:	6d 89       	ldd	r22, Y+21	; 0x15
    1a76:	7e 89       	ldd	r23, Y+22	; 0x16
    1a78:	8f 89       	ldd	r24, Y+23	; 0x17
    1a7a:	98 8d       	ldd	r25, Y+24	; 0x18
    1a7c:	20 e0       	ldi	r18, 0x00	; 0
    1a7e:	3f ef       	ldi	r19, 0xFF	; 255
    1a80:	4f e7       	ldi	r20, 0x7F	; 127
    1a82:	57 e4       	ldi	r21, 0x47	; 71
    1a84:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1a88:	18 16       	cp	r1, r24
    1a8a:	4c f5       	brge	.+82     	; 0x1ade <LCD_VidWriteCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a8c:	69 8d       	ldd	r22, Y+25	; 0x19
    1a8e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a90:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a92:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a94:	20 e0       	ldi	r18, 0x00	; 0
    1a96:	30 e0       	ldi	r19, 0x00	; 0
    1a98:	40 e2       	ldi	r20, 0x20	; 32
    1a9a:	51 e4       	ldi	r21, 0x41	; 65
    1a9c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1aa0:	dc 01       	movw	r26, r24
    1aa2:	cb 01       	movw	r24, r22
    1aa4:	bc 01       	movw	r22, r24
    1aa6:	cd 01       	movw	r24, r26
    1aa8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1aac:	dc 01       	movw	r26, r24
    1aae:	cb 01       	movw	r24, r22
    1ab0:	9c 8b       	std	Y+20, r25	; 0x14
    1ab2:	8b 8b       	std	Y+19, r24	; 0x13
    1ab4:	0f c0       	rjmp	.+30     	; 0x1ad4 <LCD_VidWriteCommand+0xee>
    1ab6:	88 ec       	ldi	r24, 0xC8	; 200
    1ab8:	90 e0       	ldi	r25, 0x00	; 0
    1aba:	9a 8b       	std	Y+18, r25	; 0x12
    1abc:	89 8b       	std	Y+17, r24	; 0x11
    1abe:	89 89       	ldd	r24, Y+17	; 0x11
    1ac0:	9a 89       	ldd	r25, Y+18	; 0x12
    1ac2:	01 97       	sbiw	r24, 0x01	; 1
    1ac4:	f1 f7       	brne	.-4      	; 0x1ac2 <LCD_VidWriteCommand+0xdc>
    1ac6:	9a 8b       	std	Y+18, r25	; 0x12
    1ac8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1aca:	8b 89       	ldd	r24, Y+19	; 0x13
    1acc:	9c 89       	ldd	r25, Y+20	; 0x14
    1ace:	01 97       	sbiw	r24, 0x01	; 1
    1ad0:	9c 8b       	std	Y+20, r25	; 0x14
    1ad2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ad4:	8b 89       	ldd	r24, Y+19	; 0x13
    1ad6:	9c 89       	ldd	r25, Y+20	; 0x14
    1ad8:	00 97       	sbiw	r24, 0x00	; 0
    1ada:	69 f7       	brne	.-38     	; 0x1ab6 <LCD_VidWriteCommand+0xd0>
    1adc:	14 c0       	rjmp	.+40     	; 0x1b06 <LCD_VidWriteCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ade:	6d 89       	ldd	r22, Y+21	; 0x15
    1ae0:	7e 89       	ldd	r23, Y+22	; 0x16
    1ae2:	8f 89       	ldd	r24, Y+23	; 0x17
    1ae4:	98 8d       	ldd	r25, Y+24	; 0x18
    1ae6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1aea:	dc 01       	movw	r26, r24
    1aec:	cb 01       	movw	r24, r22
    1aee:	9c 8b       	std	Y+20, r25	; 0x14
    1af0:	8b 8b       	std	Y+19, r24	; 0x13
    1af2:	8b 89       	ldd	r24, Y+19	; 0x13
    1af4:	9c 89       	ldd	r25, Y+20	; 0x14
    1af6:	98 8b       	std	Y+16, r25	; 0x10
    1af8:	8f 87       	std	Y+15, r24	; 0x0f
    1afa:	8f 85       	ldd	r24, Y+15	; 0x0f
    1afc:	98 89       	ldd	r25, Y+16	; 0x10
    1afe:	01 97       	sbiw	r24, 0x01	; 1
    1b00:	f1 f7       	brne	.-4      	; 0x1afe <LCD_VidWriteCommand+0x118>
    1b02:	98 8b       	std	Y+16, r25	; 0x10
    1b04:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);	// required by LCD Datasheet
	DIO_VidSetPinValue(LCD_INIT, LCD_EN, OUT_LOW);  //Enable = 0  Falling edge
    1b06:	81 e0       	ldi	r24, 0x01	; 1
    1b08:	65 e0       	ldi	r22, 0x05	; 5
    1b0a:	40 e0       	ldi	r20, 0x00	; 0
    1b0c:	0e 94 09 07 	call	0xe12	; 0xe12 <DIO_VidSetPinValue>
    1b10:	80 e0       	ldi	r24, 0x00	; 0
    1b12:	90 e0       	ldi	r25, 0x00	; 0
    1b14:	a0 e8       	ldi	r26, 0x80	; 128
    1b16:	bf e3       	ldi	r27, 0x3F	; 63
    1b18:	8b 87       	std	Y+11, r24	; 0x0b
    1b1a:	9c 87       	std	Y+12, r25	; 0x0c
    1b1c:	ad 87       	std	Y+13, r26	; 0x0d
    1b1e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b20:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b22:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b24:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b26:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b28:	20 e0       	ldi	r18, 0x00	; 0
    1b2a:	30 e0       	ldi	r19, 0x00	; 0
    1b2c:	4a ef       	ldi	r20, 0xFA	; 250
    1b2e:	54 e4       	ldi	r21, 0x44	; 68
    1b30:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b34:	dc 01       	movw	r26, r24
    1b36:	cb 01       	movw	r24, r22
    1b38:	8f 83       	std	Y+7, r24	; 0x07
    1b3a:	98 87       	std	Y+8, r25	; 0x08
    1b3c:	a9 87       	std	Y+9, r26	; 0x09
    1b3e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b40:	6f 81       	ldd	r22, Y+7	; 0x07
    1b42:	78 85       	ldd	r23, Y+8	; 0x08
    1b44:	89 85       	ldd	r24, Y+9	; 0x09
    1b46:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b48:	20 e0       	ldi	r18, 0x00	; 0
    1b4a:	30 e0       	ldi	r19, 0x00	; 0
    1b4c:	40 e8       	ldi	r20, 0x80	; 128
    1b4e:	5f e3       	ldi	r21, 0x3F	; 63
    1b50:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1b54:	88 23       	and	r24, r24
    1b56:	2c f4       	brge	.+10     	; 0x1b62 <LCD_VidWriteCommand+0x17c>
		__ticks = 1;
    1b58:	81 e0       	ldi	r24, 0x01	; 1
    1b5a:	90 e0       	ldi	r25, 0x00	; 0
    1b5c:	9e 83       	std	Y+6, r25	; 0x06
    1b5e:	8d 83       	std	Y+5, r24	; 0x05
    1b60:	3f c0       	rjmp	.+126    	; 0x1be0 <LCD_VidWriteCommand+0x1fa>
	else if (__tmp > 65535)
    1b62:	6f 81       	ldd	r22, Y+7	; 0x07
    1b64:	78 85       	ldd	r23, Y+8	; 0x08
    1b66:	89 85       	ldd	r24, Y+9	; 0x09
    1b68:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b6a:	20 e0       	ldi	r18, 0x00	; 0
    1b6c:	3f ef       	ldi	r19, 0xFF	; 255
    1b6e:	4f e7       	ldi	r20, 0x7F	; 127
    1b70:	57 e4       	ldi	r21, 0x47	; 71
    1b72:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1b76:	18 16       	cp	r1, r24
    1b78:	4c f5       	brge	.+82     	; 0x1bcc <LCD_VidWriteCommand+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b7a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b7c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b7e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b80:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b82:	20 e0       	ldi	r18, 0x00	; 0
    1b84:	30 e0       	ldi	r19, 0x00	; 0
    1b86:	40 e2       	ldi	r20, 0x20	; 32
    1b88:	51 e4       	ldi	r21, 0x41	; 65
    1b8a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b8e:	dc 01       	movw	r26, r24
    1b90:	cb 01       	movw	r24, r22
    1b92:	bc 01       	movw	r22, r24
    1b94:	cd 01       	movw	r24, r26
    1b96:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b9a:	dc 01       	movw	r26, r24
    1b9c:	cb 01       	movw	r24, r22
    1b9e:	9e 83       	std	Y+6, r25	; 0x06
    1ba0:	8d 83       	std	Y+5, r24	; 0x05
    1ba2:	0f c0       	rjmp	.+30     	; 0x1bc2 <LCD_VidWriteCommand+0x1dc>
    1ba4:	88 ec       	ldi	r24, 0xC8	; 200
    1ba6:	90 e0       	ldi	r25, 0x00	; 0
    1ba8:	9c 83       	std	Y+4, r25	; 0x04
    1baa:	8b 83       	std	Y+3, r24	; 0x03
    1bac:	8b 81       	ldd	r24, Y+3	; 0x03
    1bae:	9c 81       	ldd	r25, Y+4	; 0x04
    1bb0:	01 97       	sbiw	r24, 0x01	; 1
    1bb2:	f1 f7       	brne	.-4      	; 0x1bb0 <LCD_VidWriteCommand+0x1ca>
    1bb4:	9c 83       	std	Y+4, r25	; 0x04
    1bb6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bb8:	8d 81       	ldd	r24, Y+5	; 0x05
    1bba:	9e 81       	ldd	r25, Y+6	; 0x06
    1bbc:	01 97       	sbiw	r24, 0x01	; 1
    1bbe:	9e 83       	std	Y+6, r25	; 0x06
    1bc0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bc2:	8d 81       	ldd	r24, Y+5	; 0x05
    1bc4:	9e 81       	ldd	r25, Y+6	; 0x06
    1bc6:	00 97       	sbiw	r24, 0x00	; 0
    1bc8:	69 f7       	brne	.-38     	; 0x1ba4 <LCD_VidWriteCommand+0x1be>
    1bca:	14 c0       	rjmp	.+40     	; 0x1bf4 <LCD_VidWriteCommand+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bcc:	6f 81       	ldd	r22, Y+7	; 0x07
    1bce:	78 85       	ldd	r23, Y+8	; 0x08
    1bd0:	89 85       	ldd	r24, Y+9	; 0x09
    1bd2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bd4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bd8:	dc 01       	movw	r26, r24
    1bda:	cb 01       	movw	r24, r22
    1bdc:	9e 83       	std	Y+6, r25	; 0x06
    1bde:	8d 83       	std	Y+5, r24	; 0x05
    1be0:	8d 81       	ldd	r24, Y+5	; 0x05
    1be2:	9e 81       	ldd	r25, Y+6	; 0x06
    1be4:	9a 83       	std	Y+2, r25	; 0x02
    1be6:	89 83       	std	Y+1, r24	; 0x01
    1be8:	89 81       	ldd	r24, Y+1	; 0x01
    1bea:	9a 81       	ldd	r25, Y+2	; 0x02
    1bec:	01 97       	sbiw	r24, 0x01	; 1
    1bee:	f1 f7       	brne	.-4      	; 0x1bec <LCD_VidWriteCommand+0x206>
    1bf0:	9a 83       	std	Y+2, r25	; 0x02
    1bf2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); // give the LCD time to wite / display



}
    1bf4:	6d 96       	adiw	r28, 0x1d	; 29
    1bf6:	0f b6       	in	r0, 0x3f	; 63
    1bf8:	f8 94       	cli
    1bfa:	de bf       	out	0x3e, r29	; 62
    1bfc:	0f be       	out	0x3f, r0	; 63
    1bfe:	cd bf       	out	0x3d, r28	; 61
    1c00:	cf 91       	pop	r28
    1c02:	df 91       	pop	r29
    1c04:	08 95       	ret

00001c06 <LCD_VidWriteData>:

void LCD_VidWriteData(u8 LOC_u8Data)
{
    1c06:	df 93       	push	r29
    1c08:	cf 93       	push	r28
    1c0a:	cd b7       	in	r28, 0x3d	; 61
    1c0c:	de b7       	in	r29, 0x3e	; 62
    1c0e:	6d 97       	sbiw	r28, 0x1d	; 29
    1c10:	0f b6       	in	r0, 0x3f	; 63
    1c12:	f8 94       	cli
    1c14:	de bf       	out	0x3e, r29	; 62
    1c16:	0f be       	out	0x3f, r0	; 63
    1c18:	cd bf       	out	0x3d, r28	; 61
    1c1a:	8d 8f       	std	Y+29, r24	; 0x1d
	DIO_VidSetPinValue(LCD_INIT, LCD_RS, OUT_HIGH);  //RS = 0
    1c1c:	81 e0       	ldi	r24, 0x01	; 1
    1c1e:	63 e0       	ldi	r22, 0x03	; 3
    1c20:	41 e0       	ldi	r20, 0x01	; 1
    1c22:	0e 94 09 07 	call	0xe12	; 0xe12 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(LCD_INIT, LCD_RW, OUT_LOW);  //RW = 0
    1c26:	81 e0       	ldi	r24, 0x01	; 1
    1c28:	64 e0       	ldi	r22, 0x04	; 4
    1c2a:	40 e0       	ldi	r20, 0x00	; 0
    1c2c:	0e 94 09 07 	call	0xe12	; 0xe12 <DIO_VidSetPinValue>
	DIO_VidSetPortValue(LCD_PORT, LOC_u8Data);  // Write data
    1c30:	83 e0       	ldi	r24, 0x03	; 3
    1c32:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1c34:	0e 94 4a 08 	call	0x1094	; 0x1094 <DIO_VidSetPortValue>
	DIO_VidSetPinValue(LCD_INIT, LCD_EN, OUT_HIGH);  //Enable = 1 high rise edge
    1c38:	81 e0       	ldi	r24, 0x01	; 1
    1c3a:	65 e0       	ldi	r22, 0x05	; 5
    1c3c:	41 e0       	ldi	r20, 0x01	; 1
    1c3e:	0e 94 09 07 	call	0xe12	; 0xe12 <DIO_VidSetPinValue>
    1c42:	80 e0       	ldi	r24, 0x00	; 0
    1c44:	90 e0       	ldi	r25, 0x00	; 0
    1c46:	a0 e8       	ldi	r26, 0x80	; 128
    1c48:	bf e3       	ldi	r27, 0x3F	; 63
    1c4a:	89 8f       	std	Y+25, r24	; 0x19
    1c4c:	9a 8f       	std	Y+26, r25	; 0x1a
    1c4e:	ab 8f       	std	Y+27, r26	; 0x1b
    1c50:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c52:	69 8d       	ldd	r22, Y+25	; 0x19
    1c54:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c56:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c58:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c5a:	20 e0       	ldi	r18, 0x00	; 0
    1c5c:	30 e0       	ldi	r19, 0x00	; 0
    1c5e:	4a ef       	ldi	r20, 0xFA	; 250
    1c60:	54 e4       	ldi	r21, 0x44	; 68
    1c62:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c66:	dc 01       	movw	r26, r24
    1c68:	cb 01       	movw	r24, r22
    1c6a:	8d 8b       	std	Y+21, r24	; 0x15
    1c6c:	9e 8b       	std	Y+22, r25	; 0x16
    1c6e:	af 8b       	std	Y+23, r26	; 0x17
    1c70:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1c72:	6d 89       	ldd	r22, Y+21	; 0x15
    1c74:	7e 89       	ldd	r23, Y+22	; 0x16
    1c76:	8f 89       	ldd	r24, Y+23	; 0x17
    1c78:	98 8d       	ldd	r25, Y+24	; 0x18
    1c7a:	20 e0       	ldi	r18, 0x00	; 0
    1c7c:	30 e0       	ldi	r19, 0x00	; 0
    1c7e:	40 e8       	ldi	r20, 0x80	; 128
    1c80:	5f e3       	ldi	r21, 0x3F	; 63
    1c82:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1c86:	88 23       	and	r24, r24
    1c88:	2c f4       	brge	.+10     	; 0x1c94 <LCD_VidWriteData+0x8e>
		__ticks = 1;
    1c8a:	81 e0       	ldi	r24, 0x01	; 1
    1c8c:	90 e0       	ldi	r25, 0x00	; 0
    1c8e:	9c 8b       	std	Y+20, r25	; 0x14
    1c90:	8b 8b       	std	Y+19, r24	; 0x13
    1c92:	3f c0       	rjmp	.+126    	; 0x1d12 <LCD_VidWriteData+0x10c>
	else if (__tmp > 65535)
    1c94:	6d 89       	ldd	r22, Y+21	; 0x15
    1c96:	7e 89       	ldd	r23, Y+22	; 0x16
    1c98:	8f 89       	ldd	r24, Y+23	; 0x17
    1c9a:	98 8d       	ldd	r25, Y+24	; 0x18
    1c9c:	20 e0       	ldi	r18, 0x00	; 0
    1c9e:	3f ef       	ldi	r19, 0xFF	; 255
    1ca0:	4f e7       	ldi	r20, 0x7F	; 127
    1ca2:	57 e4       	ldi	r21, 0x47	; 71
    1ca4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1ca8:	18 16       	cp	r1, r24
    1caa:	4c f5       	brge	.+82     	; 0x1cfe <LCD_VidWriteData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cac:	69 8d       	ldd	r22, Y+25	; 0x19
    1cae:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1cb0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1cb2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cb4:	20 e0       	ldi	r18, 0x00	; 0
    1cb6:	30 e0       	ldi	r19, 0x00	; 0
    1cb8:	40 e2       	ldi	r20, 0x20	; 32
    1cba:	51 e4       	ldi	r21, 0x41	; 65
    1cbc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1cc0:	dc 01       	movw	r26, r24
    1cc2:	cb 01       	movw	r24, r22
    1cc4:	bc 01       	movw	r22, r24
    1cc6:	cd 01       	movw	r24, r26
    1cc8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ccc:	dc 01       	movw	r26, r24
    1cce:	cb 01       	movw	r24, r22
    1cd0:	9c 8b       	std	Y+20, r25	; 0x14
    1cd2:	8b 8b       	std	Y+19, r24	; 0x13
    1cd4:	0f c0       	rjmp	.+30     	; 0x1cf4 <LCD_VidWriteData+0xee>
    1cd6:	88 ec       	ldi	r24, 0xC8	; 200
    1cd8:	90 e0       	ldi	r25, 0x00	; 0
    1cda:	9a 8b       	std	Y+18, r25	; 0x12
    1cdc:	89 8b       	std	Y+17, r24	; 0x11
    1cde:	89 89       	ldd	r24, Y+17	; 0x11
    1ce0:	9a 89       	ldd	r25, Y+18	; 0x12
    1ce2:	01 97       	sbiw	r24, 0x01	; 1
    1ce4:	f1 f7       	brne	.-4      	; 0x1ce2 <LCD_VidWriteData+0xdc>
    1ce6:	9a 8b       	std	Y+18, r25	; 0x12
    1ce8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cea:	8b 89       	ldd	r24, Y+19	; 0x13
    1cec:	9c 89       	ldd	r25, Y+20	; 0x14
    1cee:	01 97       	sbiw	r24, 0x01	; 1
    1cf0:	9c 8b       	std	Y+20, r25	; 0x14
    1cf2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cf4:	8b 89       	ldd	r24, Y+19	; 0x13
    1cf6:	9c 89       	ldd	r25, Y+20	; 0x14
    1cf8:	00 97       	sbiw	r24, 0x00	; 0
    1cfa:	69 f7       	brne	.-38     	; 0x1cd6 <LCD_VidWriteData+0xd0>
    1cfc:	14 c0       	rjmp	.+40     	; 0x1d26 <LCD_VidWriteData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cfe:	6d 89       	ldd	r22, Y+21	; 0x15
    1d00:	7e 89       	ldd	r23, Y+22	; 0x16
    1d02:	8f 89       	ldd	r24, Y+23	; 0x17
    1d04:	98 8d       	ldd	r25, Y+24	; 0x18
    1d06:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d0a:	dc 01       	movw	r26, r24
    1d0c:	cb 01       	movw	r24, r22
    1d0e:	9c 8b       	std	Y+20, r25	; 0x14
    1d10:	8b 8b       	std	Y+19, r24	; 0x13
    1d12:	8b 89       	ldd	r24, Y+19	; 0x13
    1d14:	9c 89       	ldd	r25, Y+20	; 0x14
    1d16:	98 8b       	std	Y+16, r25	; 0x10
    1d18:	8f 87       	std	Y+15, r24	; 0x0f
    1d1a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d1c:	98 89       	ldd	r25, Y+16	; 0x10
    1d1e:	01 97       	sbiw	r24, 0x01	; 1
    1d20:	f1 f7       	brne	.-4      	; 0x1d1e <LCD_VidWriteData+0x118>
    1d22:	98 8b       	std	Y+16, r25	; 0x10
    1d24:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);	// required by LCD Datasheet
	DIO_VidSetPinValue(LCD_INIT, LCD_EN, OUT_LOW);  //Enable = 0  Falling edge
    1d26:	81 e0       	ldi	r24, 0x01	; 1
    1d28:	65 e0       	ldi	r22, 0x05	; 5
    1d2a:	40 e0       	ldi	r20, 0x00	; 0
    1d2c:	0e 94 09 07 	call	0xe12	; 0xe12 <DIO_VidSetPinValue>
    1d30:	80 e0       	ldi	r24, 0x00	; 0
    1d32:	90 e0       	ldi	r25, 0x00	; 0
    1d34:	a0 e8       	ldi	r26, 0x80	; 128
    1d36:	bf e3       	ldi	r27, 0x3F	; 63
    1d38:	8b 87       	std	Y+11, r24	; 0x0b
    1d3a:	9c 87       	std	Y+12, r25	; 0x0c
    1d3c:	ad 87       	std	Y+13, r26	; 0x0d
    1d3e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d40:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d42:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d44:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d46:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d48:	20 e0       	ldi	r18, 0x00	; 0
    1d4a:	30 e0       	ldi	r19, 0x00	; 0
    1d4c:	4a ef       	ldi	r20, 0xFA	; 250
    1d4e:	54 e4       	ldi	r21, 0x44	; 68
    1d50:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d54:	dc 01       	movw	r26, r24
    1d56:	cb 01       	movw	r24, r22
    1d58:	8f 83       	std	Y+7, r24	; 0x07
    1d5a:	98 87       	std	Y+8, r25	; 0x08
    1d5c:	a9 87       	std	Y+9, r26	; 0x09
    1d5e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d60:	6f 81       	ldd	r22, Y+7	; 0x07
    1d62:	78 85       	ldd	r23, Y+8	; 0x08
    1d64:	89 85       	ldd	r24, Y+9	; 0x09
    1d66:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d68:	20 e0       	ldi	r18, 0x00	; 0
    1d6a:	30 e0       	ldi	r19, 0x00	; 0
    1d6c:	40 e8       	ldi	r20, 0x80	; 128
    1d6e:	5f e3       	ldi	r21, 0x3F	; 63
    1d70:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1d74:	88 23       	and	r24, r24
    1d76:	2c f4       	brge	.+10     	; 0x1d82 <LCD_VidWriteData+0x17c>
		__ticks = 1;
    1d78:	81 e0       	ldi	r24, 0x01	; 1
    1d7a:	90 e0       	ldi	r25, 0x00	; 0
    1d7c:	9e 83       	std	Y+6, r25	; 0x06
    1d7e:	8d 83       	std	Y+5, r24	; 0x05
    1d80:	3f c0       	rjmp	.+126    	; 0x1e00 <LCD_VidWriteData+0x1fa>
	else if (__tmp > 65535)
    1d82:	6f 81       	ldd	r22, Y+7	; 0x07
    1d84:	78 85       	ldd	r23, Y+8	; 0x08
    1d86:	89 85       	ldd	r24, Y+9	; 0x09
    1d88:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d8a:	20 e0       	ldi	r18, 0x00	; 0
    1d8c:	3f ef       	ldi	r19, 0xFF	; 255
    1d8e:	4f e7       	ldi	r20, 0x7F	; 127
    1d90:	57 e4       	ldi	r21, 0x47	; 71
    1d92:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1d96:	18 16       	cp	r1, r24
    1d98:	4c f5       	brge	.+82     	; 0x1dec <LCD_VidWriteData+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d9a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d9c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d9e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1da0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1da2:	20 e0       	ldi	r18, 0x00	; 0
    1da4:	30 e0       	ldi	r19, 0x00	; 0
    1da6:	40 e2       	ldi	r20, 0x20	; 32
    1da8:	51 e4       	ldi	r21, 0x41	; 65
    1daa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1dae:	dc 01       	movw	r26, r24
    1db0:	cb 01       	movw	r24, r22
    1db2:	bc 01       	movw	r22, r24
    1db4:	cd 01       	movw	r24, r26
    1db6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1dba:	dc 01       	movw	r26, r24
    1dbc:	cb 01       	movw	r24, r22
    1dbe:	9e 83       	std	Y+6, r25	; 0x06
    1dc0:	8d 83       	std	Y+5, r24	; 0x05
    1dc2:	0f c0       	rjmp	.+30     	; 0x1de2 <LCD_VidWriteData+0x1dc>
    1dc4:	88 ec       	ldi	r24, 0xC8	; 200
    1dc6:	90 e0       	ldi	r25, 0x00	; 0
    1dc8:	9c 83       	std	Y+4, r25	; 0x04
    1dca:	8b 83       	std	Y+3, r24	; 0x03
    1dcc:	8b 81       	ldd	r24, Y+3	; 0x03
    1dce:	9c 81       	ldd	r25, Y+4	; 0x04
    1dd0:	01 97       	sbiw	r24, 0x01	; 1
    1dd2:	f1 f7       	brne	.-4      	; 0x1dd0 <LCD_VidWriteData+0x1ca>
    1dd4:	9c 83       	std	Y+4, r25	; 0x04
    1dd6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dd8:	8d 81       	ldd	r24, Y+5	; 0x05
    1dda:	9e 81       	ldd	r25, Y+6	; 0x06
    1ddc:	01 97       	sbiw	r24, 0x01	; 1
    1dde:	9e 83       	std	Y+6, r25	; 0x06
    1de0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1de2:	8d 81       	ldd	r24, Y+5	; 0x05
    1de4:	9e 81       	ldd	r25, Y+6	; 0x06
    1de6:	00 97       	sbiw	r24, 0x00	; 0
    1de8:	69 f7       	brne	.-38     	; 0x1dc4 <LCD_VidWriteData+0x1be>
    1dea:	14 c0       	rjmp	.+40     	; 0x1e14 <LCD_VidWriteData+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dec:	6f 81       	ldd	r22, Y+7	; 0x07
    1dee:	78 85       	ldd	r23, Y+8	; 0x08
    1df0:	89 85       	ldd	r24, Y+9	; 0x09
    1df2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1df4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1df8:	dc 01       	movw	r26, r24
    1dfa:	cb 01       	movw	r24, r22
    1dfc:	9e 83       	std	Y+6, r25	; 0x06
    1dfe:	8d 83       	std	Y+5, r24	; 0x05
    1e00:	8d 81       	ldd	r24, Y+5	; 0x05
    1e02:	9e 81       	ldd	r25, Y+6	; 0x06
    1e04:	9a 83       	std	Y+2, r25	; 0x02
    1e06:	89 83       	std	Y+1, r24	; 0x01
    1e08:	89 81       	ldd	r24, Y+1	; 0x01
    1e0a:	9a 81       	ldd	r25, Y+2	; 0x02
    1e0c:	01 97       	sbiw	r24, 0x01	; 1
    1e0e:	f1 f7       	brne	.-4      	; 0x1e0c <LCD_VidWriteData+0x206>
    1e10:	9a 83       	std	Y+2, r25	; 0x02
    1e12:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); // give the LCD time to wite / display

}
    1e14:	6d 96       	adiw	r28, 0x1d	; 29
    1e16:	0f b6       	in	r0, 0x3f	; 63
    1e18:	f8 94       	cli
    1e1a:	de bf       	out	0x3e, r29	; 62
    1e1c:	0f be       	out	0x3f, r0	; 63
    1e1e:	cd bf       	out	0x3d, r28	; 61
    1e20:	cf 91       	pop	r28
    1e22:	df 91       	pop	r29
    1e24:	08 95       	ret

00001e26 <LCD_VidString>:

void LCD_VidString(u8* LOC_USER)
{
    1e26:	df 93       	push	r29
    1e28:	cf 93       	push	r28
    1e2a:	cd b7       	in	r28, 0x3d	; 61
    1e2c:	de b7       	in	r29, 0x3e	; 62
    1e2e:	61 97       	sbiw	r28, 0x11	; 17
    1e30:	0f b6       	in	r0, 0x3f	; 63
    1e32:	f8 94       	cli
    1e34:	de bf       	out	0x3e, r29	; 62
    1e36:	0f be       	out	0x3f, r0	; 63
    1e38:	cd bf       	out	0x3d, r28	; 61
    1e3a:	99 8b       	std	Y+17, r25	; 0x11
    1e3c:	88 8b       	std	Y+16, r24	; 0x10
	u8 i=0;
    1e3e:	1f 86       	std	Y+15, r1	; 0x0f
    1e40:	80 c0       	rjmp	.+256    	; 0x1f42 <LCD_VidString+0x11c>
	while(LOC_USER[i] !='\0')
	{
		LCD_VidWriteData(LOC_USER[i]);
    1e42:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e44:	28 2f       	mov	r18, r24
    1e46:	30 e0       	ldi	r19, 0x00	; 0
    1e48:	88 89       	ldd	r24, Y+16	; 0x10
    1e4a:	99 89       	ldd	r25, Y+17	; 0x11
    1e4c:	fc 01       	movw	r30, r24
    1e4e:	e2 0f       	add	r30, r18
    1e50:	f3 1f       	adc	r31, r19
    1e52:	80 81       	ld	r24, Z
    1e54:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <LCD_VidWriteData>
    1e58:	80 e0       	ldi	r24, 0x00	; 0
    1e5a:	90 e0       	ldi	r25, 0x00	; 0
    1e5c:	a0 e0       	ldi	r26, 0x00	; 0
    1e5e:	b0 e4       	ldi	r27, 0x40	; 64
    1e60:	8b 87       	std	Y+11, r24	; 0x0b
    1e62:	9c 87       	std	Y+12, r25	; 0x0c
    1e64:	ad 87       	std	Y+13, r26	; 0x0d
    1e66:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e68:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e6a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e6c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e6e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e70:	20 e0       	ldi	r18, 0x00	; 0
    1e72:	30 e0       	ldi	r19, 0x00	; 0
    1e74:	4a ef       	ldi	r20, 0xFA	; 250
    1e76:	54 e4       	ldi	r21, 0x44	; 68
    1e78:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e7c:	dc 01       	movw	r26, r24
    1e7e:	cb 01       	movw	r24, r22
    1e80:	8f 83       	std	Y+7, r24	; 0x07
    1e82:	98 87       	std	Y+8, r25	; 0x08
    1e84:	a9 87       	std	Y+9, r26	; 0x09
    1e86:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e88:	6f 81       	ldd	r22, Y+7	; 0x07
    1e8a:	78 85       	ldd	r23, Y+8	; 0x08
    1e8c:	89 85       	ldd	r24, Y+9	; 0x09
    1e8e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e90:	20 e0       	ldi	r18, 0x00	; 0
    1e92:	30 e0       	ldi	r19, 0x00	; 0
    1e94:	40 e8       	ldi	r20, 0x80	; 128
    1e96:	5f e3       	ldi	r21, 0x3F	; 63
    1e98:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1e9c:	88 23       	and	r24, r24
    1e9e:	2c f4       	brge	.+10     	; 0x1eaa <LCD_VidString+0x84>
		__ticks = 1;
    1ea0:	81 e0       	ldi	r24, 0x01	; 1
    1ea2:	90 e0       	ldi	r25, 0x00	; 0
    1ea4:	9e 83       	std	Y+6, r25	; 0x06
    1ea6:	8d 83       	std	Y+5, r24	; 0x05
    1ea8:	3f c0       	rjmp	.+126    	; 0x1f28 <LCD_VidString+0x102>
	else if (__tmp > 65535)
    1eaa:	6f 81       	ldd	r22, Y+7	; 0x07
    1eac:	78 85       	ldd	r23, Y+8	; 0x08
    1eae:	89 85       	ldd	r24, Y+9	; 0x09
    1eb0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eb2:	20 e0       	ldi	r18, 0x00	; 0
    1eb4:	3f ef       	ldi	r19, 0xFF	; 255
    1eb6:	4f e7       	ldi	r20, 0x7F	; 127
    1eb8:	57 e4       	ldi	r21, 0x47	; 71
    1eba:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1ebe:	18 16       	cp	r1, r24
    1ec0:	4c f5       	brge	.+82     	; 0x1f14 <LCD_VidString+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ec2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ec4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ec6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ec8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1eca:	20 e0       	ldi	r18, 0x00	; 0
    1ecc:	30 e0       	ldi	r19, 0x00	; 0
    1ece:	40 e2       	ldi	r20, 0x20	; 32
    1ed0:	51 e4       	ldi	r21, 0x41	; 65
    1ed2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ed6:	dc 01       	movw	r26, r24
    1ed8:	cb 01       	movw	r24, r22
    1eda:	bc 01       	movw	r22, r24
    1edc:	cd 01       	movw	r24, r26
    1ede:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ee2:	dc 01       	movw	r26, r24
    1ee4:	cb 01       	movw	r24, r22
    1ee6:	9e 83       	std	Y+6, r25	; 0x06
    1ee8:	8d 83       	std	Y+5, r24	; 0x05
    1eea:	0f c0       	rjmp	.+30     	; 0x1f0a <LCD_VidString+0xe4>
    1eec:	88 ec       	ldi	r24, 0xC8	; 200
    1eee:	90 e0       	ldi	r25, 0x00	; 0
    1ef0:	9c 83       	std	Y+4, r25	; 0x04
    1ef2:	8b 83       	std	Y+3, r24	; 0x03
    1ef4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ef6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ef8:	01 97       	sbiw	r24, 0x01	; 1
    1efa:	f1 f7       	brne	.-4      	; 0x1ef8 <LCD_VidString+0xd2>
    1efc:	9c 83       	std	Y+4, r25	; 0x04
    1efe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f00:	8d 81       	ldd	r24, Y+5	; 0x05
    1f02:	9e 81       	ldd	r25, Y+6	; 0x06
    1f04:	01 97       	sbiw	r24, 0x01	; 1
    1f06:	9e 83       	std	Y+6, r25	; 0x06
    1f08:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f0a:	8d 81       	ldd	r24, Y+5	; 0x05
    1f0c:	9e 81       	ldd	r25, Y+6	; 0x06
    1f0e:	00 97       	sbiw	r24, 0x00	; 0
    1f10:	69 f7       	brne	.-38     	; 0x1eec <LCD_VidString+0xc6>
    1f12:	14 c0       	rjmp	.+40     	; 0x1f3c <LCD_VidString+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f14:	6f 81       	ldd	r22, Y+7	; 0x07
    1f16:	78 85       	ldd	r23, Y+8	; 0x08
    1f18:	89 85       	ldd	r24, Y+9	; 0x09
    1f1a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f1c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f20:	dc 01       	movw	r26, r24
    1f22:	cb 01       	movw	r24, r22
    1f24:	9e 83       	std	Y+6, r25	; 0x06
    1f26:	8d 83       	std	Y+5, r24	; 0x05
    1f28:	8d 81       	ldd	r24, Y+5	; 0x05
    1f2a:	9e 81       	ldd	r25, Y+6	; 0x06
    1f2c:	9a 83       	std	Y+2, r25	; 0x02
    1f2e:	89 83       	std	Y+1, r24	; 0x01
    1f30:	89 81       	ldd	r24, Y+1	; 0x01
    1f32:	9a 81       	ldd	r25, Y+2	; 0x02
    1f34:	01 97       	sbiw	r24, 0x01	; 1
    1f36:	f1 f7       	brne	.-4      	; 0x1f34 <LCD_VidString+0x10e>
    1f38:	9a 83       	std	Y+2, r25	; 0x02
    1f3a:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2);
		i++;
    1f3c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f3e:	8f 5f       	subi	r24, 0xFF	; 255
    1f40:	8f 87       	std	Y+15, r24	; 0x0f
}

void LCD_VidString(u8* LOC_USER)
{
	u8 i=0;
	while(LOC_USER[i] !='\0')
    1f42:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f44:	28 2f       	mov	r18, r24
    1f46:	30 e0       	ldi	r19, 0x00	; 0
    1f48:	88 89       	ldd	r24, Y+16	; 0x10
    1f4a:	99 89       	ldd	r25, Y+17	; 0x11
    1f4c:	fc 01       	movw	r30, r24
    1f4e:	e2 0f       	add	r30, r18
    1f50:	f3 1f       	adc	r31, r19
    1f52:	80 81       	ld	r24, Z
    1f54:	88 23       	and	r24, r24
    1f56:	09 f0       	breq	.+2      	; 0x1f5a <LCD_VidString+0x134>
    1f58:	74 cf       	rjmp	.-280    	; 0x1e42 <LCD_VidString+0x1c>
	{
		LCD_VidWriteData(LOC_USER[i]);
		_delay_ms(2);
		i++;
	}
}
    1f5a:	61 96       	adiw	r28, 0x11	; 17
    1f5c:	0f b6       	in	r0, 0x3f	; 63
    1f5e:	f8 94       	cli
    1f60:	de bf       	out	0x3e, r29	; 62
    1f62:	0f be       	out	0x3f, r0	; 63
    1f64:	cd bf       	out	0x3d, r28	; 61
    1f66:	cf 91       	pop	r28
    1f68:	df 91       	pop	r29
    1f6a:	08 95       	ret

00001f6c <LCD_VidDispNumber>:

void LCD_VidDispNumber(u32 x)
{
    1f6c:	ef 92       	push	r14
    1f6e:	ff 92       	push	r15
    1f70:	0f 93       	push	r16
    1f72:	1f 93       	push	r17
    1f74:	df 93       	push	r29
    1f76:	cf 93       	push	r28
    1f78:	cd b7       	in	r28, 0x3d	; 61
    1f7a:	de b7       	in	r29, 0x3e	; 62
    1f7c:	2c 97       	sbiw	r28, 0x0c	; 12
    1f7e:	0f b6       	in	r0, 0x3f	; 63
    1f80:	f8 94       	cli
    1f82:	de bf       	out	0x3e, r29	; 62
    1f84:	0f be       	out	0x3f, r0	; 63
    1f86:	cd bf       	out	0x3d, r28	; 61
    1f88:	69 87       	std	Y+9, r22	; 0x09
    1f8a:	7a 87       	std	Y+10, r23	; 0x0a
    1f8c:	8b 87       	std	Y+11, r24	; 0x0b
    1f8e:	9c 87       	std	Y+12, r25	; 0x0c
	u32 revesed=0;
    1f90:	1d 82       	std	Y+5, r1	; 0x05
    1f92:	1e 82       	std	Y+6, r1	; 0x06
    1f94:	1f 82       	std	Y+7, r1	; 0x07
    1f96:	18 86       	std	Y+8, r1	; 0x08
    1f98:	7a c0       	rjmp	.+244    	; 0x208e <LCD_VidDispNumber+0x122>
	u32 digit;
	while (x>0)
	{
		if(x%10==0)
    1f9a:	89 85       	ldd	r24, Y+9	; 0x09
    1f9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f9e:	ab 85       	ldd	r26, Y+11	; 0x0b
    1fa0:	bc 85       	ldd	r27, Y+12	; 0x0c
    1fa2:	2a e0       	ldi	r18, 0x0A	; 10
    1fa4:	30 e0       	ldi	r19, 0x00	; 0
    1fa6:	40 e0       	ldi	r20, 0x00	; 0
    1fa8:	50 e0       	ldi	r21, 0x00	; 0
    1faa:	bc 01       	movw	r22, r24
    1fac:	cd 01       	movw	r24, r26
    1fae:	0e 94 92 12 	call	0x2524	; 0x2524 <__udivmodsi4>
    1fb2:	dc 01       	movw	r26, r24
    1fb4:	cb 01       	movw	r24, r22
    1fb6:	00 97       	sbiw	r24, 0x00	; 0
    1fb8:	a1 05       	cpc	r26, r1
    1fba:	b1 05       	cpc	r27, r1
    1fbc:	91 f5       	brne	.+100    	; 0x2022 <LCD_VidDispNumber+0xb6>
		{
			revesed=revesed+10+(x%10);
    1fbe:	89 85       	ldd	r24, Y+9	; 0x09
    1fc0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fc2:	ab 85       	ldd	r26, Y+11	; 0x0b
    1fc4:	bc 85       	ldd	r27, Y+12	; 0x0c
    1fc6:	2a e0       	ldi	r18, 0x0A	; 10
    1fc8:	30 e0       	ldi	r19, 0x00	; 0
    1fca:	40 e0       	ldi	r20, 0x00	; 0
    1fcc:	50 e0       	ldi	r21, 0x00	; 0
    1fce:	bc 01       	movw	r22, r24
    1fd0:	cd 01       	movw	r24, r26
    1fd2:	0e 94 92 12 	call	0x2524	; 0x2524 <__udivmodsi4>
    1fd6:	dc 01       	movw	r26, r24
    1fd8:	cb 01       	movw	r24, r22
    1fda:	9c 01       	movw	r18, r24
    1fdc:	ad 01       	movw	r20, r26
    1fde:	8d 81       	ldd	r24, Y+5	; 0x05
    1fe0:	9e 81       	ldd	r25, Y+6	; 0x06
    1fe2:	af 81       	ldd	r26, Y+7	; 0x07
    1fe4:	b8 85       	ldd	r27, Y+8	; 0x08
    1fe6:	82 0f       	add	r24, r18
    1fe8:	93 1f       	adc	r25, r19
    1fea:	a4 1f       	adc	r26, r20
    1fec:	b5 1f       	adc	r27, r21
    1fee:	0a 96       	adiw	r24, 0x0a	; 10
    1ff0:	a1 1d       	adc	r26, r1
    1ff2:	b1 1d       	adc	r27, r1
    1ff4:	8d 83       	std	Y+5, r24	; 0x05
    1ff6:	9e 83       	std	Y+6, r25	; 0x06
    1ff8:	af 83       	std	Y+7, r26	; 0x07
    1ffa:	b8 87       	std	Y+8, r27	; 0x08
			x=x/10;
    1ffc:	89 85       	ldd	r24, Y+9	; 0x09
    1ffe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2000:	ab 85       	ldd	r26, Y+11	; 0x0b
    2002:	bc 85       	ldd	r27, Y+12	; 0x0c
    2004:	2a e0       	ldi	r18, 0x0A	; 10
    2006:	30 e0       	ldi	r19, 0x00	; 0
    2008:	40 e0       	ldi	r20, 0x00	; 0
    200a:	50 e0       	ldi	r21, 0x00	; 0
    200c:	bc 01       	movw	r22, r24
    200e:	cd 01       	movw	r24, r26
    2010:	0e 94 92 12 	call	0x2524	; 0x2524 <__udivmodsi4>
    2014:	da 01       	movw	r26, r20
    2016:	c9 01       	movw	r24, r18
    2018:	89 87       	std	Y+9, r24	; 0x09
    201a:	9a 87       	std	Y+10, r25	; 0x0a
    201c:	ab 87       	std	Y+11, r26	; 0x0b
    201e:	bc 87       	std	Y+12, r27	; 0x0c
    2020:	36 c0       	rjmp	.+108    	; 0x208e <LCD_VidDispNumber+0x122>
			continue;
		}
		else
		{
			revesed=(revesed*10)+x%10;
    2022:	8d 81       	ldd	r24, Y+5	; 0x05
    2024:	9e 81       	ldd	r25, Y+6	; 0x06
    2026:	af 81       	ldd	r26, Y+7	; 0x07
    2028:	b8 85       	ldd	r27, Y+8	; 0x08
    202a:	2a e0       	ldi	r18, 0x0A	; 10
    202c:	30 e0       	ldi	r19, 0x00	; 0
    202e:	40 e0       	ldi	r20, 0x00	; 0
    2030:	50 e0       	ldi	r21, 0x00	; 0
    2032:	bc 01       	movw	r22, r24
    2034:	cd 01       	movw	r24, r26
    2036:	0e 94 73 12 	call	0x24e6	; 0x24e6 <__mulsi3>
    203a:	7b 01       	movw	r14, r22
    203c:	8c 01       	movw	r16, r24
    203e:	89 85       	ldd	r24, Y+9	; 0x09
    2040:	9a 85       	ldd	r25, Y+10	; 0x0a
    2042:	ab 85       	ldd	r26, Y+11	; 0x0b
    2044:	bc 85       	ldd	r27, Y+12	; 0x0c
    2046:	2a e0       	ldi	r18, 0x0A	; 10
    2048:	30 e0       	ldi	r19, 0x00	; 0
    204a:	40 e0       	ldi	r20, 0x00	; 0
    204c:	50 e0       	ldi	r21, 0x00	; 0
    204e:	bc 01       	movw	r22, r24
    2050:	cd 01       	movw	r24, r26
    2052:	0e 94 92 12 	call	0x2524	; 0x2524 <__udivmodsi4>
    2056:	dc 01       	movw	r26, r24
    2058:	cb 01       	movw	r24, r22
    205a:	8e 0d       	add	r24, r14
    205c:	9f 1d       	adc	r25, r15
    205e:	a0 1f       	adc	r26, r16
    2060:	b1 1f       	adc	r27, r17
    2062:	8d 83       	std	Y+5, r24	; 0x05
    2064:	9e 83       	std	Y+6, r25	; 0x06
    2066:	af 83       	std	Y+7, r26	; 0x07
    2068:	b8 87       	std	Y+8, r27	; 0x08
		}
		x=x/10;
    206a:	89 85       	ldd	r24, Y+9	; 0x09
    206c:	9a 85       	ldd	r25, Y+10	; 0x0a
    206e:	ab 85       	ldd	r26, Y+11	; 0x0b
    2070:	bc 85       	ldd	r27, Y+12	; 0x0c
    2072:	2a e0       	ldi	r18, 0x0A	; 10
    2074:	30 e0       	ldi	r19, 0x00	; 0
    2076:	40 e0       	ldi	r20, 0x00	; 0
    2078:	50 e0       	ldi	r21, 0x00	; 0
    207a:	bc 01       	movw	r22, r24
    207c:	cd 01       	movw	r24, r26
    207e:	0e 94 92 12 	call	0x2524	; 0x2524 <__udivmodsi4>
    2082:	da 01       	movw	r26, r20
    2084:	c9 01       	movw	r24, r18
    2086:	89 87       	std	Y+9, r24	; 0x09
    2088:	9a 87       	std	Y+10, r25	; 0x0a
    208a:	ab 87       	std	Y+11, r26	; 0x0b
    208c:	bc 87       	std	Y+12, r27	; 0x0c

void LCD_VidDispNumber(u32 x)
{
	u32 revesed=0;
	u32 digit;
	while (x>0)
    208e:	89 85       	ldd	r24, Y+9	; 0x09
    2090:	9a 85       	ldd	r25, Y+10	; 0x0a
    2092:	ab 85       	ldd	r26, Y+11	; 0x0b
    2094:	bc 85       	ldd	r27, Y+12	; 0x0c
    2096:	00 97       	sbiw	r24, 0x00	; 0
    2098:	a1 05       	cpc	r26, r1
    209a:	b1 05       	cpc	r27, r1
    209c:	09 f0       	breq	.+2      	; 0x20a0 <LCD_VidDispNumber+0x134>
    209e:	7d cf       	rjmp	.-262    	; 0x1f9a <LCD_VidDispNumber+0x2e>
    20a0:	46 c0       	rjmp	.+140    	; 0x212e <LCD_VidDispNumber+0x1c2>
		x=x/10;

	}
	while (revesed>0)
	{
		digit=revesed%10;
    20a2:	8d 81       	ldd	r24, Y+5	; 0x05
    20a4:	9e 81       	ldd	r25, Y+6	; 0x06
    20a6:	af 81       	ldd	r26, Y+7	; 0x07
    20a8:	b8 85       	ldd	r27, Y+8	; 0x08
    20aa:	2a e0       	ldi	r18, 0x0A	; 10
    20ac:	30 e0       	ldi	r19, 0x00	; 0
    20ae:	40 e0       	ldi	r20, 0x00	; 0
    20b0:	50 e0       	ldi	r21, 0x00	; 0
    20b2:	bc 01       	movw	r22, r24
    20b4:	cd 01       	movw	r24, r26
    20b6:	0e 94 92 12 	call	0x2524	; 0x2524 <__udivmodsi4>
    20ba:	dc 01       	movw	r26, r24
    20bc:	cb 01       	movw	r24, r22
    20be:	89 83       	std	Y+1, r24	; 0x01
    20c0:	9a 83       	std	Y+2, r25	; 0x02
    20c2:	ab 83       	std	Y+3, r26	; 0x03
    20c4:	bc 83       	std	Y+4, r27	; 0x04
		if(digit==0)
    20c6:	89 81       	ldd	r24, Y+1	; 0x01
    20c8:	9a 81       	ldd	r25, Y+2	; 0x02
    20ca:	ab 81       	ldd	r26, Y+3	; 0x03
    20cc:	bc 81       	ldd	r27, Y+4	; 0x04
    20ce:	00 97       	sbiw	r24, 0x00	; 0
    20d0:	a1 05       	cpc	r26, r1
    20d2:	b1 05       	cpc	r27, r1
    20d4:	b1 f4       	brne	.+44     	; 0x2102 <LCD_VidDispNumber+0x196>
		{
			LCD_VidWriteData(48);
    20d6:	80 e3       	ldi	r24, 0x30	; 48
    20d8:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <LCD_VidWriteData>
			revesed=revesed/10;
    20dc:	8d 81       	ldd	r24, Y+5	; 0x05
    20de:	9e 81       	ldd	r25, Y+6	; 0x06
    20e0:	af 81       	ldd	r26, Y+7	; 0x07
    20e2:	b8 85       	ldd	r27, Y+8	; 0x08
    20e4:	2a e0       	ldi	r18, 0x0A	; 10
    20e6:	30 e0       	ldi	r19, 0x00	; 0
    20e8:	40 e0       	ldi	r20, 0x00	; 0
    20ea:	50 e0       	ldi	r21, 0x00	; 0
    20ec:	bc 01       	movw	r22, r24
    20ee:	cd 01       	movw	r24, r26
    20f0:	0e 94 92 12 	call	0x2524	; 0x2524 <__udivmodsi4>
    20f4:	da 01       	movw	r26, r20
    20f6:	c9 01       	movw	r24, r18
    20f8:	8d 83       	std	Y+5, r24	; 0x05
    20fa:	9e 83       	std	Y+6, r25	; 0x06
    20fc:	af 83       	std	Y+7, r26	; 0x07
    20fe:	b8 87       	std	Y+8, r27	; 0x08
    2100:	16 c0       	rjmp	.+44     	; 0x212e <LCD_VidDispNumber+0x1c2>
			continue;

		}
		LCD_VidWriteData(digit+48);
    2102:	89 81       	ldd	r24, Y+1	; 0x01
    2104:	80 5d       	subi	r24, 0xD0	; 208
    2106:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <LCD_VidWriteData>
		revesed=revesed/10;
    210a:	8d 81       	ldd	r24, Y+5	; 0x05
    210c:	9e 81       	ldd	r25, Y+6	; 0x06
    210e:	af 81       	ldd	r26, Y+7	; 0x07
    2110:	b8 85       	ldd	r27, Y+8	; 0x08
    2112:	2a e0       	ldi	r18, 0x0A	; 10
    2114:	30 e0       	ldi	r19, 0x00	; 0
    2116:	40 e0       	ldi	r20, 0x00	; 0
    2118:	50 e0       	ldi	r21, 0x00	; 0
    211a:	bc 01       	movw	r22, r24
    211c:	cd 01       	movw	r24, r26
    211e:	0e 94 92 12 	call	0x2524	; 0x2524 <__udivmodsi4>
    2122:	da 01       	movw	r26, r20
    2124:	c9 01       	movw	r24, r18
    2126:	8d 83       	std	Y+5, r24	; 0x05
    2128:	9e 83       	std	Y+6, r25	; 0x06
    212a:	af 83       	std	Y+7, r26	; 0x07
    212c:	b8 87       	std	Y+8, r27	; 0x08
			revesed=(revesed*10)+x%10;
		}
		x=x/10;

	}
	while (revesed>0)
    212e:	8d 81       	ldd	r24, Y+5	; 0x05
    2130:	9e 81       	ldd	r25, Y+6	; 0x06
    2132:	af 81       	ldd	r26, Y+7	; 0x07
    2134:	b8 85       	ldd	r27, Y+8	; 0x08
    2136:	00 97       	sbiw	r24, 0x00	; 0
    2138:	a1 05       	cpc	r26, r1
    213a:	b1 05       	cpc	r27, r1
    213c:	09 f0       	breq	.+2      	; 0x2140 <LCD_VidDispNumber+0x1d4>
    213e:	b1 cf       	rjmp	.-158    	; 0x20a2 <LCD_VidDispNumber+0x136>
		}
		LCD_VidWriteData(digit+48);
		revesed=revesed/10;
	}

}
    2140:	2c 96       	adiw	r28, 0x0c	; 12
    2142:	0f b6       	in	r0, 0x3f	; 63
    2144:	f8 94       	cli
    2146:	de bf       	out	0x3e, r29	; 62
    2148:	0f be       	out	0x3f, r0	; 63
    214a:	cd bf       	out	0x3d, r28	; 61
    214c:	cf 91       	pop	r28
    214e:	df 91       	pop	r29
    2150:	1f 91       	pop	r17
    2152:	0f 91       	pop	r16
    2154:	ff 90       	pop	r15
    2156:	ef 90       	pop	r14
    2158:	08 95       	ret

0000215a <LCD_VidPostion>:
void LCD_VidPostion(u8 row,u8 colm)
{
    215a:	df 93       	push	r29
    215c:	cf 93       	push	r28
    215e:	cd b7       	in	r28, 0x3d	; 61
    2160:	de b7       	in	r29, 0x3e	; 62
    2162:	6e 97       	sbiw	r28, 0x1e	; 30
    2164:	0f b6       	in	r0, 0x3f	; 63
    2166:	f8 94       	cli
    2168:	de bf       	out	0x3e, r29	; 62
    216a:	0f be       	out	0x3f, r0	; 63
    216c:	cd bf       	out	0x3d, r28	; 61
    216e:	8d 8f       	std	Y+29, r24	; 0x1d
    2170:	6e 8f       	std	Y+30, r22	; 0x1e
	if(row==0)
    2172:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2174:	88 23       	and	r24, r24
    2176:	09 f0       	breq	.+2      	; 0x217a <LCD_VidPostion+0x20>
    2178:	77 c0       	rjmp	.+238    	; 0x2268 <LCD_VidPostion+0x10e>
	{
		LCD_VidWriteCommand(DDRAM_address_row_one_lcd+colm);  //DDRAM address row one lcd
    217a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    217c:	80 58       	subi	r24, 0x80	; 128
    217e:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <LCD_VidWriteCommand>
    2182:	80 e0       	ldi	r24, 0x00	; 0
    2184:	90 e0       	ldi	r25, 0x00	; 0
    2186:	a0 e8       	ldi	r26, 0x80	; 128
    2188:	bf e3       	ldi	r27, 0x3F	; 63
    218a:	89 8f       	std	Y+25, r24	; 0x19
    218c:	9a 8f       	std	Y+26, r25	; 0x1a
    218e:	ab 8f       	std	Y+27, r26	; 0x1b
    2190:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2192:	69 8d       	ldd	r22, Y+25	; 0x19
    2194:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2196:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2198:	9c 8d       	ldd	r25, Y+28	; 0x1c
    219a:	20 e0       	ldi	r18, 0x00	; 0
    219c:	30 e0       	ldi	r19, 0x00	; 0
    219e:	4a ef       	ldi	r20, 0xFA	; 250
    21a0:	54 e4       	ldi	r21, 0x44	; 68
    21a2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21a6:	dc 01       	movw	r26, r24
    21a8:	cb 01       	movw	r24, r22
    21aa:	8d 8b       	std	Y+21, r24	; 0x15
    21ac:	9e 8b       	std	Y+22, r25	; 0x16
    21ae:	af 8b       	std	Y+23, r26	; 0x17
    21b0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    21b2:	6d 89       	ldd	r22, Y+21	; 0x15
    21b4:	7e 89       	ldd	r23, Y+22	; 0x16
    21b6:	8f 89       	ldd	r24, Y+23	; 0x17
    21b8:	98 8d       	ldd	r25, Y+24	; 0x18
    21ba:	20 e0       	ldi	r18, 0x00	; 0
    21bc:	30 e0       	ldi	r19, 0x00	; 0
    21be:	40 e8       	ldi	r20, 0x80	; 128
    21c0:	5f e3       	ldi	r21, 0x3F	; 63
    21c2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    21c6:	88 23       	and	r24, r24
    21c8:	2c f4       	brge	.+10     	; 0x21d4 <LCD_VidPostion+0x7a>
		__ticks = 1;
    21ca:	81 e0       	ldi	r24, 0x01	; 1
    21cc:	90 e0       	ldi	r25, 0x00	; 0
    21ce:	9c 8b       	std	Y+20, r25	; 0x14
    21d0:	8b 8b       	std	Y+19, r24	; 0x13
    21d2:	3f c0       	rjmp	.+126    	; 0x2252 <LCD_VidPostion+0xf8>
	else if (__tmp > 65535)
    21d4:	6d 89       	ldd	r22, Y+21	; 0x15
    21d6:	7e 89       	ldd	r23, Y+22	; 0x16
    21d8:	8f 89       	ldd	r24, Y+23	; 0x17
    21da:	98 8d       	ldd	r25, Y+24	; 0x18
    21dc:	20 e0       	ldi	r18, 0x00	; 0
    21de:	3f ef       	ldi	r19, 0xFF	; 255
    21e0:	4f e7       	ldi	r20, 0x7F	; 127
    21e2:	57 e4       	ldi	r21, 0x47	; 71
    21e4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    21e8:	18 16       	cp	r1, r24
    21ea:	4c f5       	brge	.+82     	; 0x223e <LCD_VidPostion+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21ec:	69 8d       	ldd	r22, Y+25	; 0x19
    21ee:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21f0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21f2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21f4:	20 e0       	ldi	r18, 0x00	; 0
    21f6:	30 e0       	ldi	r19, 0x00	; 0
    21f8:	40 e2       	ldi	r20, 0x20	; 32
    21fa:	51 e4       	ldi	r21, 0x41	; 65
    21fc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2200:	dc 01       	movw	r26, r24
    2202:	cb 01       	movw	r24, r22
    2204:	bc 01       	movw	r22, r24
    2206:	cd 01       	movw	r24, r26
    2208:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    220c:	dc 01       	movw	r26, r24
    220e:	cb 01       	movw	r24, r22
    2210:	9c 8b       	std	Y+20, r25	; 0x14
    2212:	8b 8b       	std	Y+19, r24	; 0x13
    2214:	0f c0       	rjmp	.+30     	; 0x2234 <LCD_VidPostion+0xda>
    2216:	88 ec       	ldi	r24, 0xC8	; 200
    2218:	90 e0       	ldi	r25, 0x00	; 0
    221a:	9a 8b       	std	Y+18, r25	; 0x12
    221c:	89 8b       	std	Y+17, r24	; 0x11
    221e:	89 89       	ldd	r24, Y+17	; 0x11
    2220:	9a 89       	ldd	r25, Y+18	; 0x12
    2222:	01 97       	sbiw	r24, 0x01	; 1
    2224:	f1 f7       	brne	.-4      	; 0x2222 <LCD_VidPostion+0xc8>
    2226:	9a 8b       	std	Y+18, r25	; 0x12
    2228:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    222a:	8b 89       	ldd	r24, Y+19	; 0x13
    222c:	9c 89       	ldd	r25, Y+20	; 0x14
    222e:	01 97       	sbiw	r24, 0x01	; 1
    2230:	9c 8b       	std	Y+20, r25	; 0x14
    2232:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2234:	8b 89       	ldd	r24, Y+19	; 0x13
    2236:	9c 89       	ldd	r25, Y+20	; 0x14
    2238:	00 97       	sbiw	r24, 0x00	; 0
    223a:	69 f7       	brne	.-38     	; 0x2216 <LCD_VidPostion+0xbc>
    223c:	8f c0       	rjmp	.+286    	; 0x235c <LCD_VidPostion+0x202>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    223e:	6d 89       	ldd	r22, Y+21	; 0x15
    2240:	7e 89       	ldd	r23, Y+22	; 0x16
    2242:	8f 89       	ldd	r24, Y+23	; 0x17
    2244:	98 8d       	ldd	r25, Y+24	; 0x18
    2246:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    224a:	dc 01       	movw	r26, r24
    224c:	cb 01       	movw	r24, r22
    224e:	9c 8b       	std	Y+20, r25	; 0x14
    2250:	8b 8b       	std	Y+19, r24	; 0x13
    2252:	8b 89       	ldd	r24, Y+19	; 0x13
    2254:	9c 89       	ldd	r25, Y+20	; 0x14
    2256:	98 8b       	std	Y+16, r25	; 0x10
    2258:	8f 87       	std	Y+15, r24	; 0x0f
    225a:	8f 85       	ldd	r24, Y+15	; 0x0f
    225c:	98 89       	ldd	r25, Y+16	; 0x10
    225e:	01 97       	sbiw	r24, 0x01	; 1
    2260:	f1 f7       	brne	.-4      	; 0x225e <LCD_VidPostion+0x104>
    2262:	98 8b       	std	Y+16, r25	; 0x10
    2264:	8f 87       	std	Y+15, r24	; 0x0f
    2266:	7a c0       	rjmp	.+244    	; 0x235c <LCD_VidPostion+0x202>
		_delay_ms(1);
	}
	else if(row==1)
    2268:	8d 8d       	ldd	r24, Y+29	; 0x1d
    226a:	81 30       	cpi	r24, 0x01	; 1
    226c:	09 f0       	breq	.+2      	; 0x2270 <LCD_VidPostion+0x116>
    226e:	76 c0       	rjmp	.+236    	; 0x235c <LCD_VidPostion+0x202>
		{
			LCD_VidWriteCommand(DDRAM_address_row_two_lcd+colm); //DDRAM address row two lcd
    2270:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2272:	80 54       	subi	r24, 0x40	; 64
    2274:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <LCD_VidWriteCommand>
    2278:	80 e0       	ldi	r24, 0x00	; 0
    227a:	90 e0       	ldi	r25, 0x00	; 0
    227c:	a0 e8       	ldi	r26, 0x80	; 128
    227e:	bf e3       	ldi	r27, 0x3F	; 63
    2280:	8b 87       	std	Y+11, r24	; 0x0b
    2282:	9c 87       	std	Y+12, r25	; 0x0c
    2284:	ad 87       	std	Y+13, r26	; 0x0d
    2286:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2288:	6b 85       	ldd	r22, Y+11	; 0x0b
    228a:	7c 85       	ldd	r23, Y+12	; 0x0c
    228c:	8d 85       	ldd	r24, Y+13	; 0x0d
    228e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2290:	20 e0       	ldi	r18, 0x00	; 0
    2292:	30 e0       	ldi	r19, 0x00	; 0
    2294:	4a ef       	ldi	r20, 0xFA	; 250
    2296:	54 e4       	ldi	r21, 0x44	; 68
    2298:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    229c:	dc 01       	movw	r26, r24
    229e:	cb 01       	movw	r24, r22
    22a0:	8f 83       	std	Y+7, r24	; 0x07
    22a2:	98 87       	std	Y+8, r25	; 0x08
    22a4:	a9 87       	std	Y+9, r26	; 0x09
    22a6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22a8:	6f 81       	ldd	r22, Y+7	; 0x07
    22aa:	78 85       	ldd	r23, Y+8	; 0x08
    22ac:	89 85       	ldd	r24, Y+9	; 0x09
    22ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    22b0:	20 e0       	ldi	r18, 0x00	; 0
    22b2:	30 e0       	ldi	r19, 0x00	; 0
    22b4:	40 e8       	ldi	r20, 0x80	; 128
    22b6:	5f e3       	ldi	r21, 0x3F	; 63
    22b8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    22bc:	88 23       	and	r24, r24
    22be:	2c f4       	brge	.+10     	; 0x22ca <LCD_VidPostion+0x170>
		__ticks = 1;
    22c0:	81 e0       	ldi	r24, 0x01	; 1
    22c2:	90 e0       	ldi	r25, 0x00	; 0
    22c4:	9e 83       	std	Y+6, r25	; 0x06
    22c6:	8d 83       	std	Y+5, r24	; 0x05
    22c8:	3f c0       	rjmp	.+126    	; 0x2348 <LCD_VidPostion+0x1ee>
	else if (__tmp > 65535)
    22ca:	6f 81       	ldd	r22, Y+7	; 0x07
    22cc:	78 85       	ldd	r23, Y+8	; 0x08
    22ce:	89 85       	ldd	r24, Y+9	; 0x09
    22d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    22d2:	20 e0       	ldi	r18, 0x00	; 0
    22d4:	3f ef       	ldi	r19, 0xFF	; 255
    22d6:	4f e7       	ldi	r20, 0x7F	; 127
    22d8:	57 e4       	ldi	r21, 0x47	; 71
    22da:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    22de:	18 16       	cp	r1, r24
    22e0:	4c f5       	brge	.+82     	; 0x2334 <LCD_VidPostion+0x1da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22e2:	6b 85       	ldd	r22, Y+11	; 0x0b
    22e4:	7c 85       	ldd	r23, Y+12	; 0x0c
    22e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    22e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    22ea:	20 e0       	ldi	r18, 0x00	; 0
    22ec:	30 e0       	ldi	r19, 0x00	; 0
    22ee:	40 e2       	ldi	r20, 0x20	; 32
    22f0:	51 e4       	ldi	r21, 0x41	; 65
    22f2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22f6:	dc 01       	movw	r26, r24
    22f8:	cb 01       	movw	r24, r22
    22fa:	bc 01       	movw	r22, r24
    22fc:	cd 01       	movw	r24, r26
    22fe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2302:	dc 01       	movw	r26, r24
    2304:	cb 01       	movw	r24, r22
    2306:	9e 83       	std	Y+6, r25	; 0x06
    2308:	8d 83       	std	Y+5, r24	; 0x05
    230a:	0f c0       	rjmp	.+30     	; 0x232a <LCD_VidPostion+0x1d0>
    230c:	88 ec       	ldi	r24, 0xC8	; 200
    230e:	90 e0       	ldi	r25, 0x00	; 0
    2310:	9c 83       	std	Y+4, r25	; 0x04
    2312:	8b 83       	std	Y+3, r24	; 0x03
    2314:	8b 81       	ldd	r24, Y+3	; 0x03
    2316:	9c 81       	ldd	r25, Y+4	; 0x04
    2318:	01 97       	sbiw	r24, 0x01	; 1
    231a:	f1 f7       	brne	.-4      	; 0x2318 <LCD_VidPostion+0x1be>
    231c:	9c 83       	std	Y+4, r25	; 0x04
    231e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2320:	8d 81       	ldd	r24, Y+5	; 0x05
    2322:	9e 81       	ldd	r25, Y+6	; 0x06
    2324:	01 97       	sbiw	r24, 0x01	; 1
    2326:	9e 83       	std	Y+6, r25	; 0x06
    2328:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    232a:	8d 81       	ldd	r24, Y+5	; 0x05
    232c:	9e 81       	ldd	r25, Y+6	; 0x06
    232e:	00 97       	sbiw	r24, 0x00	; 0
    2330:	69 f7       	brne	.-38     	; 0x230c <LCD_VidPostion+0x1b2>
    2332:	14 c0       	rjmp	.+40     	; 0x235c <LCD_VidPostion+0x202>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2334:	6f 81       	ldd	r22, Y+7	; 0x07
    2336:	78 85       	ldd	r23, Y+8	; 0x08
    2338:	89 85       	ldd	r24, Y+9	; 0x09
    233a:	9a 85       	ldd	r25, Y+10	; 0x0a
    233c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2340:	dc 01       	movw	r26, r24
    2342:	cb 01       	movw	r24, r22
    2344:	9e 83       	std	Y+6, r25	; 0x06
    2346:	8d 83       	std	Y+5, r24	; 0x05
    2348:	8d 81       	ldd	r24, Y+5	; 0x05
    234a:	9e 81       	ldd	r25, Y+6	; 0x06
    234c:	9a 83       	std	Y+2, r25	; 0x02
    234e:	89 83       	std	Y+1, r24	; 0x01
    2350:	89 81       	ldd	r24, Y+1	; 0x01
    2352:	9a 81       	ldd	r25, Y+2	; 0x02
    2354:	01 97       	sbiw	r24, 0x01	; 1
    2356:	f1 f7       	brne	.-4      	; 0x2354 <LCD_VidPostion+0x1fa>
    2358:	9a 83       	std	Y+2, r25	; 0x02
    235a:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(1);
		}

}
    235c:	6e 96       	adiw	r28, 0x1e	; 30
    235e:	0f b6       	in	r0, 0x3f	; 63
    2360:	f8 94       	cli
    2362:	de bf       	out	0x3e, r29	; 62
    2364:	0f be       	out	0x3f, r0	; 63
    2366:	cd bf       	out	0x3d, r28	; 61
    2368:	cf 91       	pop	r28
    236a:	df 91       	pop	r29
    236c:	08 95       	ret

0000236e <LCD_VidGotoCGRAM>:
void LCD_VidGotoCGRAM()
{
    236e:	df 93       	push	r29
    2370:	cf 93       	push	r28
    2372:	cd b7       	in	r28, 0x3d	; 61
    2374:	de b7       	in	r29, 0x3e	; 62
	LCD_VidWriteCommand(SET_CGRAM_ADDRESS);
    2376:	80 e4       	ldi	r24, 0x40	; 64
    2378:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <LCD_VidWriteCommand>
}
    237c:	cf 91       	pop	r28
    237e:	df 91       	pop	r29
    2380:	08 95       	ret

00002382 <LCD_VidArabicNume>:
void LCD_VidArabicNume(void)
{
    2382:	df 93       	push	r29
    2384:	cf 93       	push	r28
    2386:	cd b7       	in	r28, 0x3d	; 61
    2388:	de b7       	in	r29, 0x3e	; 62
	LCD_VidGotoCGRAM();
    238a:	0e 94 b7 11 	call	0x236e	; 0x236e <LCD_VidGotoCGRAM>
	LCD_VidWriteData(0b00000000);
	LCD_VidWriteData(0b00000100);
	LCD_VidWriteData(0b00000100);
	LCD_VidWriteData(0b00000100);
	LCD_VidWriteData(0b00000100);*/
	LCD_VidWriteData(0b00000000);
    238e:	80 e0       	ldi	r24, 0x00	; 0
    2390:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <LCD_VidWriteData>
	LCD_VidWriteData(0b00000000);
    2394:	80 e0       	ldi	r24, 0x00	; 0
    2396:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <LCD_VidWriteData>
	LCD_VidWriteData(0b00000100);
    239a:	84 e0       	ldi	r24, 0x04	; 4
    239c:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <LCD_VidWriteData>
	LCD_VidWriteData(0b00001010);
    23a0:	8a e0       	ldi	r24, 0x0A	; 10
    23a2:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <LCD_VidWriteData>
	LCD_VidWriteData(0b00011010);
    23a6:	8a e1       	ldi	r24, 0x1A	; 26
    23a8:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <LCD_VidWriteData>
	LCD_VidWriteData(0b00001010);
    23ac:	8a e0       	ldi	r24, 0x0A	; 10
    23ae:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <LCD_VidWriteData>
	LCD_VidWriteData(0b00000100);
    23b2:	84 e0       	ldi	r24, 0x04	; 4
    23b4:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <LCD_VidWriteData>
	LCD_VidWriteData(0b00000000);
    23b8:	80 e0       	ldi	r24, 0x00	; 0
    23ba:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <LCD_VidWriteData>
	//ح
	LCD_VidWriteData(0b00000000);
    23be:	80 e0       	ldi	r24, 0x00	; 0
    23c0:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <LCD_VidWriteData>
	LCD_VidWriteData(0b00000000);
    23c4:	80 e0       	ldi	r24, 0x00	; 0
    23c6:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <LCD_VidWriteData>
	LCD_VidWriteData(0b00001100);
    23ca:	8c e0       	ldi	r24, 0x0C	; 12
    23cc:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <LCD_VidWriteData>
	LCD_VidWriteData(0b00000010);
    23d0:	82 e0       	ldi	r24, 0x02	; 2
    23d2:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <LCD_VidWriteData>
	LCD_VidWriteData(0b00011111);
    23d6:	8f e1       	ldi	r24, 0x1F	; 31
    23d8:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <LCD_VidWriteData>
	LCD_VidWriteData(0b00000000);
    23dc:	80 e0       	ldi	r24, 0x00	; 0
    23de:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <LCD_VidWriteData>
	LCD_VidWriteData(0b00000000);
    23e2:	80 e0       	ldi	r24, 0x00	; 0
    23e4:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <LCD_VidWriteData>
	LCD_VidWriteData(0b00000000);
    23e8:	80 e0       	ldi	r24, 0x00	; 0
    23ea:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <LCD_VidWriteData>
	//م
	LCD_VidWriteData(0b00000000);
    23ee:	80 e0       	ldi	r24, 0x00	; 0
    23f0:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <LCD_VidWriteData>
	LCD_VidWriteData(0b00000000);
    23f4:	80 e0       	ldi	r24, 0x00	; 0
    23f6:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <LCD_VidWriteData>
	LCD_VidWriteData(0b00000100);
    23fa:	84 e0       	ldi	r24, 0x04	; 4
    23fc:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <LCD_VidWriteData>
	LCD_VidWriteData(0b00001010);
    2400:	8a e0       	ldi	r24, 0x0A	; 10
    2402:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <LCD_VidWriteData>
	LCD_VidWriteData(0b00011011);
    2406:	8b e1       	ldi	r24, 0x1B	; 27
    2408:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <LCD_VidWriteData>
	LCD_VidWriteData(0b00001010);
    240c:	8a e0       	ldi	r24, 0x0A	; 10
    240e:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <LCD_VidWriteData>
	LCD_VidWriteData(0b00000100);
    2412:	84 e0       	ldi	r24, 0x04	; 4
    2414:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <LCD_VidWriteData>
	LCD_VidWriteData(0b00000000);
    2418:	80 e0       	ldi	r24, 0x00	; 0
    241a:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <LCD_VidWriteData>
	//د
	LCD_VidWriteData(0b00000000);
    241e:	80 e0       	ldi	r24, 0x00	; 0
    2420:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <LCD_VidWriteData>
	LCD_VidWriteData(0b00000000);
    2424:	80 e0       	ldi	r24, 0x00	; 0
    2426:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <LCD_VidWriteData>
	LCD_VidWriteData(0b00000100);
    242a:	84 e0       	ldi	r24, 0x04	; 4
    242c:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <LCD_VidWriteData>
	LCD_VidWriteData(0b00000100);
    2430:	84 e0       	ldi	r24, 0x04	; 4
    2432:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <LCD_VidWriteData>
	LCD_VidWriteData(0b00011111);
    2436:	8f e1       	ldi	r24, 0x1F	; 31
    2438:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <LCD_VidWriteData>
	LCD_VidWriteData(0b00000000);
    243c:	80 e0       	ldi	r24, 0x00	; 0
    243e:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <LCD_VidWriteData>
	LCD_VidWriteData(0b00000000);
    2442:	80 e0       	ldi	r24, 0x00	; 0
    2444:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <LCD_VidWriteData>
	LCD_VidWriteData(0b00000000);
    2448:	80 e0       	ldi	r24, 0x00	; 0
    244a:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <LCD_VidWriteData>
}
    244e:	cf 91       	pop	r28
    2450:	df 91       	pop	r29
    2452:	08 95       	ret

00002454 <main>:
#include "ADC_Interface.h"
#include "EXI_Interface.h"
#include <avr/delay.h>

void main (void)
{
    2454:	df 93       	push	r29
    2456:	cf 93       	push	r28
    2458:	00 d0       	rcall	.+0      	; 0x245a <main+0x6>
    245a:	00 d0       	rcall	.+0      	; 0x245c <main+0x8>
    245c:	cd b7       	in	r28, 0x3d	; 61
    245e:	de b7       	in	r29, 0x3e	; 62

	while(1)
	{
		DIO_VidSetPinValue(PORTA,PIN0,0);
	}*/
	ADC_VidInit();
    2460:	0e 94 9b 05 	call	0xb36	; 0xb36 <ADC_VidInit>
	u16 Digital_value;
	u16 Analog_value;
	DIO_VidSetPinDirection(PORTB,PIN0,OUTPUT);
    2464:	81 e0       	ldi	r24, 0x01	; 1
    2466:	60 e0       	ldi	r22, 0x00	; 0
    2468:	41 e0       	ldi	r20, 0x01	; 1
    246a:	0e 94 09 06 	call	0xc12	; 0xc12 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(PORTB,PIN0,INPUT);
    246e:	81 e0       	ldi	r24, 0x01	; 1
    2470:	60 e0       	ldi	r22, 0x00	; 0
    2472:	40 e0       	ldi	r20, 0x00	; 0
    2474:	0e 94 09 06 	call	0xc12	; 0xc12 <DIO_VidSetPinDirection>

	while(1)
	{
		Digital_value= ADC_U16GitDigital(0);
    2478:	80 e0       	ldi	r24, 0x00	; 0
    247a:	0e 94 d3 05 	call	0xba6	; 0xba6 <ADC_U16GitDigital>
    247e:	9c 83       	std	Y+4, r25	; 0x04
    2480:	8b 83       	std	Y+3, r24	; 0x03
		Analog_value=((Digital_value*5000UL)/1024);
    2482:	8b 81       	ldd	r24, Y+3	; 0x03
    2484:	9c 81       	ldd	r25, Y+4	; 0x04
    2486:	cc 01       	movw	r24, r24
    2488:	a0 e0       	ldi	r26, 0x00	; 0
    248a:	b0 e0       	ldi	r27, 0x00	; 0
    248c:	28 e8       	ldi	r18, 0x88	; 136
    248e:	33 e1       	ldi	r19, 0x13	; 19
    2490:	40 e0       	ldi	r20, 0x00	; 0
    2492:	50 e0       	ldi	r21, 0x00	; 0
    2494:	bc 01       	movw	r22, r24
    2496:	cd 01       	movw	r24, r26
    2498:	0e 94 73 12 	call	0x24e6	; 0x24e6 <__mulsi3>
    249c:	dc 01       	movw	r26, r24
    249e:	cb 01       	movw	r24, r22
    24a0:	07 2e       	mov	r0, r23
    24a2:	7a e0       	ldi	r23, 0x0A	; 10
    24a4:	b6 95       	lsr	r27
    24a6:	a7 95       	ror	r26
    24a8:	97 95       	ror	r25
    24aa:	87 95       	ror	r24
    24ac:	7a 95       	dec	r23
    24ae:	d1 f7       	brne	.-12     	; 0x24a4 <main+0x50>
    24b0:	70 2d       	mov	r23, r0
    24b2:	9a 83       	std	Y+2, r25	; 0x02
    24b4:	89 83       	std	Y+1, r24	; 0x01
		if ((Analog_value >= 1500) && (Analog_value <5000))
    24b6:	89 81       	ldd	r24, Y+1	; 0x01
    24b8:	9a 81       	ldd	r25, Y+2	; 0x02
    24ba:	25 e0       	ldi	r18, 0x05	; 5
    24bc:	8c 3d       	cpi	r24, 0xDC	; 220
    24be:	92 07       	cpc	r25, r18
    24c0:	60 f0       	brcs	.+24     	; 0x24da <main+0x86>
    24c2:	89 81       	ldd	r24, Y+1	; 0x01
    24c4:	9a 81       	ldd	r25, Y+2	; 0x02
    24c6:	23 e1       	ldi	r18, 0x13	; 19
    24c8:	88 38       	cpi	r24, 0x88	; 136
    24ca:	92 07       	cpc	r25, r18
    24cc:	30 f4       	brcc	.+12     	; 0x24da <main+0x86>
		{
			DIO_VidSetPinValue(PORTB,PIN0,1);
    24ce:	81 e0       	ldi	r24, 0x01	; 1
    24d0:	60 e0       	ldi	r22, 0x00	; 0
    24d2:	41 e0       	ldi	r20, 0x01	; 1
    24d4:	0e 94 09 07 	call	0xe12	; 0xe12 <DIO_VidSetPinValue>
    24d8:	cf cf       	rjmp	.-98     	; 0x2478 <main+0x24>
		}
		else
			DIO_VidSetPinValue(PORTB,PIN0,0);
    24da:	81 e0       	ldi	r24, 0x01	; 1
    24dc:	60 e0       	ldi	r22, 0x00	; 0
    24de:	40 e0       	ldi	r20, 0x00	; 0
    24e0:	0e 94 09 07 	call	0xe12	; 0xe12 <DIO_VidSetPinValue>
    24e4:	c9 cf       	rjmp	.-110    	; 0x2478 <main+0x24>

000024e6 <__mulsi3>:
    24e6:	62 9f       	mul	r22, r18
    24e8:	d0 01       	movw	r26, r0
    24ea:	73 9f       	mul	r23, r19
    24ec:	f0 01       	movw	r30, r0
    24ee:	82 9f       	mul	r24, r18
    24f0:	e0 0d       	add	r30, r0
    24f2:	f1 1d       	adc	r31, r1
    24f4:	64 9f       	mul	r22, r20
    24f6:	e0 0d       	add	r30, r0
    24f8:	f1 1d       	adc	r31, r1
    24fa:	92 9f       	mul	r25, r18
    24fc:	f0 0d       	add	r31, r0
    24fe:	83 9f       	mul	r24, r19
    2500:	f0 0d       	add	r31, r0
    2502:	74 9f       	mul	r23, r20
    2504:	f0 0d       	add	r31, r0
    2506:	65 9f       	mul	r22, r21
    2508:	f0 0d       	add	r31, r0
    250a:	99 27       	eor	r25, r25
    250c:	72 9f       	mul	r23, r18
    250e:	b0 0d       	add	r27, r0
    2510:	e1 1d       	adc	r30, r1
    2512:	f9 1f       	adc	r31, r25
    2514:	63 9f       	mul	r22, r19
    2516:	b0 0d       	add	r27, r0
    2518:	e1 1d       	adc	r30, r1
    251a:	f9 1f       	adc	r31, r25
    251c:	bd 01       	movw	r22, r26
    251e:	cf 01       	movw	r24, r30
    2520:	11 24       	eor	r1, r1
    2522:	08 95       	ret

00002524 <__udivmodsi4>:
    2524:	a1 e2       	ldi	r26, 0x21	; 33
    2526:	1a 2e       	mov	r1, r26
    2528:	aa 1b       	sub	r26, r26
    252a:	bb 1b       	sub	r27, r27
    252c:	fd 01       	movw	r30, r26
    252e:	0d c0       	rjmp	.+26     	; 0x254a <__udivmodsi4_ep>

00002530 <__udivmodsi4_loop>:
    2530:	aa 1f       	adc	r26, r26
    2532:	bb 1f       	adc	r27, r27
    2534:	ee 1f       	adc	r30, r30
    2536:	ff 1f       	adc	r31, r31
    2538:	a2 17       	cp	r26, r18
    253a:	b3 07       	cpc	r27, r19
    253c:	e4 07       	cpc	r30, r20
    253e:	f5 07       	cpc	r31, r21
    2540:	20 f0       	brcs	.+8      	; 0x254a <__udivmodsi4_ep>
    2542:	a2 1b       	sub	r26, r18
    2544:	b3 0b       	sbc	r27, r19
    2546:	e4 0b       	sbc	r30, r20
    2548:	f5 0b       	sbc	r31, r21

0000254a <__udivmodsi4_ep>:
    254a:	66 1f       	adc	r22, r22
    254c:	77 1f       	adc	r23, r23
    254e:	88 1f       	adc	r24, r24
    2550:	99 1f       	adc	r25, r25
    2552:	1a 94       	dec	r1
    2554:	69 f7       	brne	.-38     	; 0x2530 <__udivmodsi4_loop>
    2556:	60 95       	com	r22
    2558:	70 95       	com	r23
    255a:	80 95       	com	r24
    255c:	90 95       	com	r25
    255e:	9b 01       	movw	r18, r22
    2560:	ac 01       	movw	r20, r24
    2562:	bd 01       	movw	r22, r26
    2564:	cf 01       	movw	r24, r30
    2566:	08 95       	ret

00002568 <__prologue_saves__>:
    2568:	2f 92       	push	r2
    256a:	3f 92       	push	r3
    256c:	4f 92       	push	r4
    256e:	5f 92       	push	r5
    2570:	6f 92       	push	r6
    2572:	7f 92       	push	r7
    2574:	8f 92       	push	r8
    2576:	9f 92       	push	r9
    2578:	af 92       	push	r10
    257a:	bf 92       	push	r11
    257c:	cf 92       	push	r12
    257e:	df 92       	push	r13
    2580:	ef 92       	push	r14
    2582:	ff 92       	push	r15
    2584:	0f 93       	push	r16
    2586:	1f 93       	push	r17
    2588:	cf 93       	push	r28
    258a:	df 93       	push	r29
    258c:	cd b7       	in	r28, 0x3d	; 61
    258e:	de b7       	in	r29, 0x3e	; 62
    2590:	ca 1b       	sub	r28, r26
    2592:	db 0b       	sbc	r29, r27
    2594:	0f b6       	in	r0, 0x3f	; 63
    2596:	f8 94       	cli
    2598:	de bf       	out	0x3e, r29	; 62
    259a:	0f be       	out	0x3f, r0	; 63
    259c:	cd bf       	out	0x3d, r28	; 61
    259e:	09 94       	ijmp

000025a0 <__epilogue_restores__>:
    25a0:	2a 88       	ldd	r2, Y+18	; 0x12
    25a2:	39 88       	ldd	r3, Y+17	; 0x11
    25a4:	48 88       	ldd	r4, Y+16	; 0x10
    25a6:	5f 84       	ldd	r5, Y+15	; 0x0f
    25a8:	6e 84       	ldd	r6, Y+14	; 0x0e
    25aa:	7d 84       	ldd	r7, Y+13	; 0x0d
    25ac:	8c 84       	ldd	r8, Y+12	; 0x0c
    25ae:	9b 84       	ldd	r9, Y+11	; 0x0b
    25b0:	aa 84       	ldd	r10, Y+10	; 0x0a
    25b2:	b9 84       	ldd	r11, Y+9	; 0x09
    25b4:	c8 84       	ldd	r12, Y+8	; 0x08
    25b6:	df 80       	ldd	r13, Y+7	; 0x07
    25b8:	ee 80       	ldd	r14, Y+6	; 0x06
    25ba:	fd 80       	ldd	r15, Y+5	; 0x05
    25bc:	0c 81       	ldd	r16, Y+4	; 0x04
    25be:	1b 81       	ldd	r17, Y+3	; 0x03
    25c0:	aa 81       	ldd	r26, Y+2	; 0x02
    25c2:	b9 81       	ldd	r27, Y+1	; 0x01
    25c4:	ce 0f       	add	r28, r30
    25c6:	d1 1d       	adc	r29, r1
    25c8:	0f b6       	in	r0, 0x3f	; 63
    25ca:	f8 94       	cli
    25cc:	de bf       	out	0x3e, r29	; 62
    25ce:	0f be       	out	0x3f, r0	; 63
    25d0:	cd bf       	out	0x3d, r28	; 61
    25d2:	ed 01       	movw	r28, r26
    25d4:	08 95       	ret

000025d6 <_exit>:
    25d6:	f8 94       	cli

000025d8 <__stop_program>:
    25d8:	ff cf       	rjmp	.-2      	; 0x25d8 <__stop_program>
