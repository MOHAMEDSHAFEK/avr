
read_PWM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002f66  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  00002f66  00002ffa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000013  00800076  00800076  00003010  2**0
                  ALLOC
  3 .stab         0000276c  00000000  00000000  00003010  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000010d3  00000000  00000000  0000577c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000684f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000698f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006aff  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008748  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009633  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a3e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a540  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a7cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000af9b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 5e 0a 	jmp	0x14bc	; 0x14bc <__vector_2>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 63 15 	jmp	0x2ac6	; 0x2ac6 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 17 16 	jmp	0x2c2e	; 0x2c2e <__vector_9>
      28:	0c 94 0e 15 	jmp	0x2a1c	; 0x2a1c <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 71 06 	jmp	0xce2	; 0xce2 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e6       	ldi	r30, 0x66	; 102
      68:	ff e2       	ldi	r31, 0x2F	; 47
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 37       	cpi	r26, 0x76	; 118
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a6 e7       	ldi	r26, 0x76	; 118
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 38       	cpi	r26, 0x89	; 137
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 41 15 	call	0x2a82	; 0x2a82 <main>
      8a:	0c 94 b1 17 	jmp	0x2f62	; 0x2f62 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 7a 17 	jmp	0x2ef4	; 0x2ef4 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ae e6       	ldi	r26, 0x6E	; 110
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 96 17 	jmp	0x2f2c	; 0x2f2c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 86 17 	jmp	0x2f0c	; 0x2f0c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 a2 17 	jmp	0x2f44	; 0x2f44 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 86 17 	jmp	0x2f0c	; 0x2f0c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 a2 17 	jmp	0x2f44	; 0x2f44 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 7a 17 	jmp	0x2ef4	; 0x2ef4 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8e e6       	ldi	r24, 0x6E	; 110
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 96 17 	jmp	0x2f2c	; 0x2f2c <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 86 17 	jmp	0x2f0c	; 0x2f0c <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 a2 17 	jmp	0x2f44	; 0x2f44 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 86 17 	jmp	0x2f0c	; 0x2f0c <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 a2 17 	jmp	0x2f44	; 0x2f44 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 86 17 	jmp	0x2f0c	; 0x2f0c <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 a2 17 	jmp	0x2f44	; 0x2f44 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 8a 17 	jmp	0x2f14	; 0x2f14 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 a6 17 	jmp	0x2f4c	; 0x2f4c <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <ADC_VidSetCallBack>:

static void  (*CallBackFuncPtr)(void)= NULL;


void  ADC_VidSetCallBack (void (*LOC_funcptr)(void) )
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <ADC_VidSetCallBack+0x6>
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
     b50:	9a 83       	std	Y+2, r25	; 0x02
     b52:	89 83       	std	Y+1, r24	; 0x01
	if(LOC_funcptr  != NULL )
     b54:	89 81       	ldd	r24, Y+1	; 0x01
     b56:	9a 81       	ldd	r25, Y+2	; 0x02
     b58:	00 97       	sbiw	r24, 0x00	; 0
     b5a:	31 f0       	breq	.+12     	; 0xb68 <ADC_VidSetCallBack+0x22>
	{
		CallBackFuncPtr = LOC_funcptr ;
     b5c:	89 81       	ldd	r24, Y+1	; 0x01
     b5e:	9a 81       	ldd	r25, Y+2	; 0x02
     b60:	90 93 77 00 	sts	0x0077, r25
     b64:	80 93 76 00 	sts	0x0076, r24
	}
}
     b68:	0f 90       	pop	r0
     b6a:	0f 90       	pop	r0
     b6c:	cf 91       	pop	r28
     b6e:	df 91       	pop	r29
     b70:	08 95       	ret

00000b72 <ADC_VidInit>:


void ADC_VidInit(void)
{
     b72:	df 93       	push	r29
     b74:	cf 93       	push	r28
     b76:	cd b7       	in	r28, 0x3d	; 61
     b78:	de b7       	in	r29, 0x3e	; 62
#if Voltage_Reference__mode== Voltage_Reference_off
	CLR_BIT(ADMUX,REFS0);
	CLR_BIT(ADMUX,REFS1);              //V reference

#elif  Voltage_Reference__mode== Voltage_Reference_vcc
	SET_BIT(ADMUX,REFS0);
     b7a:	a7 e2       	ldi	r26, 0x27	; 39
     b7c:	b0 e0       	ldi	r27, 0x00	; 0
     b7e:	e7 e2       	ldi	r30, 0x27	; 39
     b80:	f0 e0       	ldi	r31, 0x00	; 0
     b82:	80 81       	ld	r24, Z
     b84:	80 64       	ori	r24, 0x40	; 64
     b86:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,REFS1);              //V reference
     b88:	a7 e2       	ldi	r26, 0x27	; 39
     b8a:	b0 e0       	ldi	r27, 0x00	; 0
     b8c:	e7 e2       	ldi	r30, 0x27	; 39
     b8e:	f0 e0       	ldi	r31, 0x00	; 0
     b90:	80 81       	ld	r24, Z
     b92:	8f 77       	andi	r24, 0x7F	; 127
     b94:	8c 93       	st	X, r24
	SET_BIT(ADMUX,REFS0);
	SET_BIT(ADMUX,REFS1);              //V reference
#endif

#if	ADC_Right_Adjust== enable
		CLR_BIT(ADMUX,ADLAR);
     b96:	a7 e2       	ldi	r26, 0x27	; 39
     b98:	b0 e0       	ldi	r27, 0x00	; 0
     b9a:	e7 e2       	ldi	r30, 0x27	; 39
     b9c:	f0 e0       	ldi	r31, 0x00	; 0
     b9e:	80 81       	ld	r24, Z
     ba0:	8f 7d       	andi	r24, 0xDF	; 223
     ba2:	8c 93       	st	X, r24
#elif prescaler_mode== prescaler_32
			SET_BIT(ADCSRA,ADPS0);
			CLR_BIT(ADCSRA,ADPS1);
			SET_BIT(ADCSRA,ADPS2);	         //Prescaler
	#elif prescaler_mode== prescaler_64
			SET_BIT(ADCSRA,ADPS2);
     ba4:	a6 e2       	ldi	r26, 0x26	; 38
     ba6:	b0 e0       	ldi	r27, 0x00	; 0
     ba8:	e6 e2       	ldi	r30, 0x26	; 38
     baa:	f0 e0       	ldi	r31, 0x00	; 0
     bac:	80 81       	ld	r24, Z
     bae:	84 60       	ori	r24, 0x04	; 4
     bb0:	8c 93       	st	X, r24
			SET_BIT(ADCSRA,ADPS1);
     bb2:	a6 e2       	ldi	r26, 0x26	; 38
     bb4:	b0 e0       	ldi	r27, 0x00	; 0
     bb6:	e6 e2       	ldi	r30, 0x26	; 38
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	80 81       	ld	r24, Z
     bbc:	82 60       	ori	r24, 0x02	; 2
     bbe:	8c 93       	st	X, r24
			CLR_BIT(ADCSRA,ADPS0);	         //Prescaler
     bc0:	a6 e2       	ldi	r26, 0x26	; 38
     bc2:	b0 e0       	ldi	r27, 0x00	; 0
     bc4:	e6 e2       	ldi	r30, 0x26	; 38
     bc6:	f0 e0       	ldi	r31, 0x00	; 0
     bc8:	80 81       	ld	r24, Z
     bca:	8e 7f       	andi	r24, 0xFE	; 254
     bcc:	8c 93       	st	X, r24
		#error  "wrong choice"
	#endif


#if Auto_Trigger_Source_Selections==Free_Running_mode
			CLR_BIT(SFIOR,ADTS0);
     bce:	a0 e5       	ldi	r26, 0x50	; 80
     bd0:	b0 e0       	ldi	r27, 0x00	; 0
     bd2:	e0 e5       	ldi	r30, 0x50	; 80
     bd4:	f0 e0       	ldi	r31, 0x00	; 0
     bd6:	80 81       	ld	r24, Z
     bd8:	8f 7d       	andi	r24, 0xDF	; 223
     bda:	8c 93       	st	X, r24
			CLR_BIT(SFIOR,ADTS1);
     bdc:	a0 e5       	ldi	r26, 0x50	; 80
     bde:	b0 e0       	ldi	r27, 0x00	; 0
     be0:	e0 e5       	ldi	r30, 0x50	; 80
     be2:	f0 e0       	ldi	r31, 0x00	; 0
     be4:	80 81       	ld	r24, Z
     be6:	8f 7b       	andi	r24, 0xBF	; 191
     be8:	8c 93       	st	X, r24
			CLR_BIT(SFIOR,ADTS2);
     bea:	a0 e5       	ldi	r26, 0x50	; 80
     bec:	b0 e0       	ldi	r27, 0x00	; 0
     bee:	e0 e5       	ldi	r30, 0x50	; 80
     bf0:	f0 e0       	ldi	r31, 0x00	; 0
     bf2:	80 81       	ld	r24, Z
     bf4:	8f 77       	andi	r24, 0x7F	; 127
     bf6:	8c 93       	st	X, r24
#else
	#error  "wrong choice"
#endif

#if	Auto_trigger== enable
			SET_BIT(ADCSRA,ADATE);
     bf8:	a6 e2       	ldi	r26, 0x26	; 38
     bfa:	b0 e0       	ldi	r27, 0x00	; 0
     bfc:	e6 e2       	ldi	r30, 0x26	; 38
     bfe:	f0 e0       	ldi	r31, 0x00	; 0
     c00:	80 81       	ld	r24, Z
     c02:	80 62       	ori	r24, 0x20	; 32
     c04:	8c 93       	st	X, r24
	#error  "wrong choice Auto_trigger"
#endif


#if	ADC_TRIGGER== enable
			SET_BIT(ADCSRA,ADEN);
     c06:	a6 e2       	ldi	r26, 0x26	; 38
     c08:	b0 e0       	ldi	r27, 0x00	; 0
     c0a:	e6 e2       	ldi	r30, 0x26	; 38
     c0c:	f0 e0       	ldi	r31, 0x00	; 0
     c0e:	80 81       	ld	r24, Z
     c10:	80 68       	ori	r24, 0x80	; 128
     c12:	8c 93       	st	X, r24
			CLR_BIT(ADCSRA,ADEN);
#else
	#error  "wrong choice Auto_trigger"
#endif

}
     c14:	cf 91       	pop	r28
     c16:	df 91       	pop	r29
     c18:	08 95       	ret

00000c1a <ADC_U16GitDigital>:

u16 ADC_U16GitDigital(u8 LOC_Channel)
{
     c1a:	df 93       	push	r29
     c1c:	cf 93       	push	r28
     c1e:	0f 92       	push	r0
     c20:	cd b7       	in	r28, 0x3d	; 61
     c22:	de b7       	in	r29, 0x3e	; 62
     c24:	89 83       	std	Y+1, r24	; 0x01
	ADMUX&=singel_ended;
     c26:	a7 e2       	ldi	r26, 0x27	; 39
     c28:	b0 e0       	ldi	r27, 0x00	; 0
     c2a:	e7 e2       	ldi	r30, 0x27	; 39
     c2c:	f0 e0       	ldi	r31, 0x00	; 0
     c2e:	80 81       	ld	r24, Z
     c30:	80 7e       	andi	r24, 0xE0	; 224
     c32:	8c 93       	st	X, r24
	ADMUX|=LOC_Channel;              //number of channel by user
     c34:	a7 e2       	ldi	r26, 0x27	; 39
     c36:	b0 e0       	ldi	r27, 0x00	; 0
     c38:	e7 e2       	ldi	r30, 0x27	; 39
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	90 81       	ld	r25, Z
     c3e:	89 81       	ldd	r24, Y+1	; 0x01
     c40:	89 2b       	or	r24, r25
     c42:	8c 93       	st	X, r24

	SET_BIT(ADCSRA,ADSC);           //Start Conversion
     c44:	a6 e2       	ldi	r26, 0x26	; 38
     c46:	b0 e0       	ldi	r27, 0x00	; 0
     c48:	e6 e2       	ldi	r30, 0x26	; 38
     c4a:	f0 e0       	ldi	r31, 0x00	; 0
     c4c:	80 81       	ld	r24, Z
     c4e:	80 64       	ori	r24, 0x40	; 64
     c50:	8c 93       	st	X, r24
	while(0==GET_BIT(ADCSRA,ADIF))  //if ADC interrupt flag=0 waite until be one
     c52:	e6 e2       	ldi	r30, 0x26	; 38
     c54:	f0 e0       	ldi	r31, 0x00	; 0
     c56:	80 81       	ld	r24, Z
     c58:	82 95       	swap	r24
     c5a:	8f 70       	andi	r24, 0x0F	; 15
     c5c:	88 2f       	mov	r24, r24
     c5e:	90 e0       	ldi	r25, 0x00	; 0
     c60:	81 70       	andi	r24, 0x01	; 1
     c62:	90 70       	andi	r25, 0x00	; 0
     c64:	00 97       	sbiw	r24, 0x00	; 0
     c66:	a9 f3       	breq	.-22     	; 0xc52 <ADC_U16GitDigital+0x38>
	{
	}
	SET_BIT(ADCSRA,ADIF);           //reset the interrupt flag over write one to be zero
     c68:	a6 e2       	ldi	r26, 0x26	; 38
     c6a:	b0 e0       	ldi	r27, 0x00	; 0
     c6c:	e6 e2       	ldi	r30, 0x26	; 38
     c6e:	f0 e0       	ldi	r31, 0x00	; 0
     c70:	80 81       	ld	r24, Z
     c72:	80 61       	ori	r24, 0x10	; 16
     c74:	8c 93       	st	X, r24
    return ADC;
     c76:	e4 e2       	ldi	r30, 0x24	; 36
     c78:	f0 e0       	ldi	r31, 0x00	; 0
     c7a:	80 81       	ld	r24, Z
     c7c:	91 81       	ldd	r25, Z+1	; 0x01

}
     c7e:	0f 90       	pop	r0
     c80:	cf 91       	pop	r28
     c82:	df 91       	pop	r29
     c84:	08 95       	ret

00000c86 <ADC_VidStartConvertion>:


void ADC_VidStartConvertion(u8  LOC_Channel)
{
     c86:	df 93       	push	r29
     c88:	cf 93       	push	r28
     c8a:	0f 92       	push	r0
     c8c:	cd b7       	in	r28, 0x3d	; 61
     c8e:	de b7       	in	r29, 0x3e	; 62
     c90:	89 83       	std	Y+1, r24	; 0x01
	ADMUX&=singel_ended;               //singel ended
     c92:	a7 e2       	ldi	r26, 0x27	; 39
     c94:	b0 e0       	ldi	r27, 0x00	; 0
     c96:	e7 e2       	ldi	r30, 0x27	; 39
     c98:	f0 e0       	ldi	r31, 0x00	; 0
     c9a:	80 81       	ld	r24, Z
     c9c:	80 7e       	andi	r24, 0xE0	; 224
     c9e:	8c 93       	st	X, r24
	ADMUX|=LOC_Channel;              //number of channel by user
     ca0:	a7 e2       	ldi	r26, 0x27	; 39
     ca2:	b0 e0       	ldi	r27, 0x00	; 0
     ca4:	e7 e2       	ldi	r30, 0x27	; 39
     ca6:	f0 e0       	ldi	r31, 0x00	; 0
     ca8:	90 81       	ld	r25, Z
     caa:	89 81       	ldd	r24, Y+1	; 0x01
     cac:	89 2b       	or	r24, r25
     cae:	8c 93       	st	X, r24

	//SET_BIT(ADCSRA,ADIE);              //enable intruppt

	SET_BIT(ADCSRA,ADSC);           //Start Conversion
     cb0:	a6 e2       	ldi	r26, 0x26	; 38
     cb2:	b0 e0       	ldi	r27, 0x00	; 0
     cb4:	e6 e2       	ldi	r30, 0x26	; 38
     cb6:	f0 e0       	ldi	r31, 0x00	; 0
     cb8:	80 81       	ld	r24, Z
     cba:	80 64       	ori	r24, 0x40	; 64
     cbc:	8c 93       	st	X, r24

}
     cbe:	0f 90       	pop	r0
     cc0:	cf 91       	pop	r28
     cc2:	df 91       	pop	r29
     cc4:	08 95       	ret

00000cc6 <ADC_VidEnableInt>:

void ADC_VidEnableInt(void)
{
     cc6:	df 93       	push	r29
     cc8:	cf 93       	push	r28
     cca:	cd b7       	in	r28, 0x3d	; 61
     ccc:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADCSRA,ADIE);              //enable intruppt
     cce:	a6 e2       	ldi	r26, 0x26	; 38
     cd0:	b0 e0       	ldi	r27, 0x00	; 0
     cd2:	e6 e2       	ldi	r30, 0x26	; 38
     cd4:	f0 e0       	ldi	r31, 0x00	; 0
     cd6:	80 81       	ld	r24, Z
     cd8:	88 60       	ori	r24, 0x08	; 8
     cda:	8c 93       	st	X, r24
	}
     cdc:	cf 91       	pop	r28
     cde:	df 91       	pop	r29
     ce0:	08 95       	ret

00000ce2 <__vector_16>:

ISR(ADC_VECT)
{
     ce2:	1f 92       	push	r1
     ce4:	0f 92       	push	r0
     ce6:	0f b6       	in	r0, 0x3f	; 63
     ce8:	0f 92       	push	r0
     cea:	11 24       	eor	r1, r1
     cec:	2f 93       	push	r18
     cee:	3f 93       	push	r19
     cf0:	4f 93       	push	r20
     cf2:	5f 93       	push	r21
     cf4:	6f 93       	push	r22
     cf6:	7f 93       	push	r23
     cf8:	8f 93       	push	r24
     cfa:	9f 93       	push	r25
     cfc:	af 93       	push	r26
     cfe:	bf 93       	push	r27
     d00:	ef 93       	push	r30
     d02:	ff 93       	push	r31
     d04:	df 93       	push	r29
     d06:	cf 93       	push	r28
     d08:	cd b7       	in	r28, 0x3d	; 61
     d0a:	de b7       	in	r29, 0x3e	; 62
	if(CallBackFuncPtr != NULL )
     d0c:	80 91 76 00 	lds	r24, 0x0076
     d10:	90 91 77 00 	lds	r25, 0x0077
     d14:	00 97       	sbiw	r24, 0x00	; 0
     d16:	29 f0       	breq	.+10     	; 0xd22 <__vector_16+0x40>
	{
		CallBackFuncPtr();
     d18:	e0 91 76 00 	lds	r30, 0x0076
     d1c:	f0 91 77 00 	lds	r31, 0x0077
     d20:	09 95       	icall
	{
		DIO_VidSetPinValue(PORTB,PIN7,1);
		DIO_VidSetPinValue(PORTB,PIN0,0);
		DIO_VidSetPinValue(PORTB,PIN1,0);
	}*/
}
     d22:	cf 91       	pop	r28
     d24:	df 91       	pop	r29
     d26:	ff 91       	pop	r31
     d28:	ef 91       	pop	r30
     d2a:	bf 91       	pop	r27
     d2c:	af 91       	pop	r26
     d2e:	9f 91       	pop	r25
     d30:	8f 91       	pop	r24
     d32:	7f 91       	pop	r23
     d34:	6f 91       	pop	r22
     d36:	5f 91       	pop	r21
     d38:	4f 91       	pop	r20
     d3a:	3f 91       	pop	r19
     d3c:	2f 91       	pop	r18
     d3e:	0f 90       	pop	r0
     d40:	0f be       	out	0x3f, r0	; 63
     d42:	0f 90       	pop	r0
     d44:	1f 90       	pop	r1
     d46:	18 95       	reti

00000d48 <DIO_VidSetPinDirection>:
#include "STD_TYPES.h"
#include "DIO_Register.h"
#include "BIT_Math.h"

void DIO_VidSetPinDirection	( u8 LOC_u8Port, u8 LOC_u8Pin, u8 LOC_u8State)
{
     d48:	df 93       	push	r29
     d4a:	cf 93       	push	r28
     d4c:	cd b7       	in	r28, 0x3d	; 61
     d4e:	de b7       	in	r29, 0x3e	; 62
     d50:	27 97       	sbiw	r28, 0x07	; 7
     d52:	0f b6       	in	r0, 0x3f	; 63
     d54:	f8 94       	cli
     d56:	de bf       	out	0x3e, r29	; 62
     d58:	0f be       	out	0x3f, r0	; 63
     d5a:	cd bf       	out	0x3d, r28	; 61
     d5c:	89 83       	std	Y+1, r24	; 0x01
     d5e:	6a 83       	std	Y+2, r22	; 0x02
     d60:	4b 83       	std	Y+3, r20	; 0x03
	if ( OUTPUT==LOC_u8State)
     d62:	8b 81       	ldd	r24, Y+3	; 0x03
     d64:	81 30       	cpi	r24, 0x01	; 1
     d66:	09 f0       	breq	.+2      	; 0xd6a <DIO_VidSetPinDirection+0x22>
     d68:	6f c0       	rjmp	.+222    	; 0xe48 <DIO_VidSetPinDirection+0x100>
	{
		switch (LOC_u8Port)
     d6a:	89 81       	ldd	r24, Y+1	; 0x01
     d6c:	28 2f       	mov	r18, r24
     d6e:	30 e0       	ldi	r19, 0x00	; 0
     d70:	3f 83       	std	Y+7, r19	; 0x07
     d72:	2e 83       	std	Y+6, r18	; 0x06
     d74:	8e 81       	ldd	r24, Y+6	; 0x06
     d76:	9f 81       	ldd	r25, Y+7	; 0x07
     d78:	81 30       	cpi	r24, 0x01	; 1
     d7a:	91 05       	cpc	r25, r1
     d7c:	49 f1       	breq	.+82     	; 0xdd0 <DIO_VidSetPinDirection+0x88>
     d7e:	2e 81       	ldd	r18, Y+6	; 0x06
     d80:	3f 81       	ldd	r19, Y+7	; 0x07
     d82:	22 30       	cpi	r18, 0x02	; 2
     d84:	31 05       	cpc	r19, r1
     d86:	2c f4       	brge	.+10     	; 0xd92 <DIO_VidSetPinDirection+0x4a>
     d88:	8e 81       	ldd	r24, Y+6	; 0x06
     d8a:	9f 81       	ldd	r25, Y+7	; 0x07
     d8c:	00 97       	sbiw	r24, 0x00	; 0
     d8e:	61 f0       	breq	.+24     	; 0xda8 <DIO_VidSetPinDirection+0x60>
     d90:	d2 c0       	rjmp	.+420    	; 0xf36 <DIO_VidSetPinDirection+0x1ee>
     d92:	2e 81       	ldd	r18, Y+6	; 0x06
     d94:	3f 81       	ldd	r19, Y+7	; 0x07
     d96:	22 30       	cpi	r18, 0x02	; 2
     d98:	31 05       	cpc	r19, r1
     d9a:	71 f1       	breq	.+92     	; 0xdf8 <DIO_VidSetPinDirection+0xb0>
     d9c:	8e 81       	ldd	r24, Y+6	; 0x06
     d9e:	9f 81       	ldd	r25, Y+7	; 0x07
     da0:	83 30       	cpi	r24, 0x03	; 3
     da2:	91 05       	cpc	r25, r1
     da4:	e9 f1       	breq	.+122    	; 0xe20 <DIO_VidSetPinDirection+0xd8>
     da6:	c7 c0       	rjmp	.+398    	; 0xf36 <DIO_VidSetPinDirection+0x1ee>
		{
		case 0: SET_BIT(DDRA, LOC_u8Pin); break;
     da8:	aa e3       	ldi	r26, 0x3A	; 58
     daa:	b0 e0       	ldi	r27, 0x00	; 0
     dac:	ea e3       	ldi	r30, 0x3A	; 58
     dae:	f0 e0       	ldi	r31, 0x00	; 0
     db0:	80 81       	ld	r24, Z
     db2:	48 2f       	mov	r20, r24
     db4:	8a 81       	ldd	r24, Y+2	; 0x02
     db6:	28 2f       	mov	r18, r24
     db8:	30 e0       	ldi	r19, 0x00	; 0
     dba:	81 e0       	ldi	r24, 0x01	; 1
     dbc:	90 e0       	ldi	r25, 0x00	; 0
     dbe:	02 2e       	mov	r0, r18
     dc0:	02 c0       	rjmp	.+4      	; 0xdc6 <DIO_VidSetPinDirection+0x7e>
     dc2:	88 0f       	add	r24, r24
     dc4:	99 1f       	adc	r25, r25
     dc6:	0a 94       	dec	r0
     dc8:	e2 f7       	brpl	.-8      	; 0xdc2 <DIO_VidSetPinDirection+0x7a>
     dca:	84 2b       	or	r24, r20
     dcc:	8c 93       	st	X, r24
     dce:	b3 c0       	rjmp	.+358    	; 0xf36 <DIO_VidSetPinDirection+0x1ee>
		case 1: SET_BIT(DDRB, LOC_u8Pin); break;
     dd0:	a7 e3       	ldi	r26, 0x37	; 55
     dd2:	b0 e0       	ldi	r27, 0x00	; 0
     dd4:	e7 e3       	ldi	r30, 0x37	; 55
     dd6:	f0 e0       	ldi	r31, 0x00	; 0
     dd8:	80 81       	ld	r24, Z
     dda:	48 2f       	mov	r20, r24
     ddc:	8a 81       	ldd	r24, Y+2	; 0x02
     dde:	28 2f       	mov	r18, r24
     de0:	30 e0       	ldi	r19, 0x00	; 0
     de2:	81 e0       	ldi	r24, 0x01	; 1
     de4:	90 e0       	ldi	r25, 0x00	; 0
     de6:	02 2e       	mov	r0, r18
     de8:	02 c0       	rjmp	.+4      	; 0xdee <DIO_VidSetPinDirection+0xa6>
     dea:	88 0f       	add	r24, r24
     dec:	99 1f       	adc	r25, r25
     dee:	0a 94       	dec	r0
     df0:	e2 f7       	brpl	.-8      	; 0xdea <DIO_VidSetPinDirection+0xa2>
     df2:	84 2b       	or	r24, r20
     df4:	8c 93       	st	X, r24
     df6:	9f c0       	rjmp	.+318    	; 0xf36 <DIO_VidSetPinDirection+0x1ee>
		case 2: SET_BIT(DDRC, LOC_u8Pin); break;
     df8:	a4 e3       	ldi	r26, 0x34	; 52
     dfa:	b0 e0       	ldi	r27, 0x00	; 0
     dfc:	e4 e3       	ldi	r30, 0x34	; 52
     dfe:	f0 e0       	ldi	r31, 0x00	; 0
     e00:	80 81       	ld	r24, Z
     e02:	48 2f       	mov	r20, r24
     e04:	8a 81       	ldd	r24, Y+2	; 0x02
     e06:	28 2f       	mov	r18, r24
     e08:	30 e0       	ldi	r19, 0x00	; 0
     e0a:	81 e0       	ldi	r24, 0x01	; 1
     e0c:	90 e0       	ldi	r25, 0x00	; 0
     e0e:	02 2e       	mov	r0, r18
     e10:	02 c0       	rjmp	.+4      	; 0xe16 <DIO_VidSetPinDirection+0xce>
     e12:	88 0f       	add	r24, r24
     e14:	99 1f       	adc	r25, r25
     e16:	0a 94       	dec	r0
     e18:	e2 f7       	brpl	.-8      	; 0xe12 <DIO_VidSetPinDirection+0xca>
     e1a:	84 2b       	or	r24, r20
     e1c:	8c 93       	st	X, r24
     e1e:	8b c0       	rjmp	.+278    	; 0xf36 <DIO_VidSetPinDirection+0x1ee>
		case 3: SET_BIT(DDRD, LOC_u8Pin); break;
     e20:	a1 e3       	ldi	r26, 0x31	; 49
     e22:	b0 e0       	ldi	r27, 0x00	; 0
     e24:	e1 e3       	ldi	r30, 0x31	; 49
     e26:	f0 e0       	ldi	r31, 0x00	; 0
     e28:	80 81       	ld	r24, Z
     e2a:	48 2f       	mov	r20, r24
     e2c:	8a 81       	ldd	r24, Y+2	; 0x02
     e2e:	28 2f       	mov	r18, r24
     e30:	30 e0       	ldi	r19, 0x00	; 0
     e32:	81 e0       	ldi	r24, 0x01	; 1
     e34:	90 e0       	ldi	r25, 0x00	; 0
     e36:	02 2e       	mov	r0, r18
     e38:	02 c0       	rjmp	.+4      	; 0xe3e <DIO_VidSetPinDirection+0xf6>
     e3a:	88 0f       	add	r24, r24
     e3c:	99 1f       	adc	r25, r25
     e3e:	0a 94       	dec	r0
     e40:	e2 f7       	brpl	.-8      	; 0xe3a <DIO_VidSetPinDirection+0xf2>
     e42:	84 2b       	or	r24, r20
     e44:	8c 93       	st	X, r24
     e46:	77 c0       	rjmp	.+238    	; 0xf36 <DIO_VidSetPinDirection+0x1ee>
		}
	}
	else if (INPUT==LOC_u8State)
     e48:	8b 81       	ldd	r24, Y+3	; 0x03
     e4a:	88 23       	and	r24, r24
     e4c:	09 f0       	breq	.+2      	; 0xe50 <DIO_VidSetPinDirection+0x108>
     e4e:	73 c0       	rjmp	.+230    	; 0xf36 <DIO_VidSetPinDirection+0x1ee>
	{
		switch (LOC_u8Port)
     e50:	89 81       	ldd	r24, Y+1	; 0x01
     e52:	28 2f       	mov	r18, r24
     e54:	30 e0       	ldi	r19, 0x00	; 0
     e56:	3d 83       	std	Y+5, r19	; 0x05
     e58:	2c 83       	std	Y+4, r18	; 0x04
     e5a:	8c 81       	ldd	r24, Y+4	; 0x04
     e5c:	9d 81       	ldd	r25, Y+5	; 0x05
     e5e:	81 30       	cpi	r24, 0x01	; 1
     e60:	91 05       	cpc	r25, r1
     e62:	59 f1       	breq	.+86     	; 0xeba <DIO_VidSetPinDirection+0x172>
     e64:	2c 81       	ldd	r18, Y+4	; 0x04
     e66:	3d 81       	ldd	r19, Y+5	; 0x05
     e68:	22 30       	cpi	r18, 0x02	; 2
     e6a:	31 05       	cpc	r19, r1
     e6c:	2c f4       	brge	.+10     	; 0xe78 <DIO_VidSetPinDirection+0x130>
     e6e:	8c 81       	ldd	r24, Y+4	; 0x04
     e70:	9d 81       	ldd	r25, Y+5	; 0x05
     e72:	00 97       	sbiw	r24, 0x00	; 0
     e74:	69 f0       	breq	.+26     	; 0xe90 <DIO_VidSetPinDirection+0x148>
     e76:	5f c0       	rjmp	.+190    	; 0xf36 <DIO_VidSetPinDirection+0x1ee>
     e78:	2c 81       	ldd	r18, Y+4	; 0x04
     e7a:	3d 81       	ldd	r19, Y+5	; 0x05
     e7c:	22 30       	cpi	r18, 0x02	; 2
     e7e:	31 05       	cpc	r19, r1
     e80:	89 f1       	breq	.+98     	; 0xee4 <DIO_VidSetPinDirection+0x19c>
     e82:	8c 81       	ldd	r24, Y+4	; 0x04
     e84:	9d 81       	ldd	r25, Y+5	; 0x05
     e86:	83 30       	cpi	r24, 0x03	; 3
     e88:	91 05       	cpc	r25, r1
     e8a:	09 f4       	brne	.+2      	; 0xe8e <DIO_VidSetPinDirection+0x146>
     e8c:	40 c0       	rjmp	.+128    	; 0xf0e <DIO_VidSetPinDirection+0x1c6>
     e8e:	53 c0       	rjmp	.+166    	; 0xf36 <DIO_VidSetPinDirection+0x1ee>
		{
		case 0: CLR_BIT(DDRA, LOC_u8Pin); break;
     e90:	aa e3       	ldi	r26, 0x3A	; 58
     e92:	b0 e0       	ldi	r27, 0x00	; 0
     e94:	ea e3       	ldi	r30, 0x3A	; 58
     e96:	f0 e0       	ldi	r31, 0x00	; 0
     e98:	80 81       	ld	r24, Z
     e9a:	48 2f       	mov	r20, r24
     e9c:	8a 81       	ldd	r24, Y+2	; 0x02
     e9e:	28 2f       	mov	r18, r24
     ea0:	30 e0       	ldi	r19, 0x00	; 0
     ea2:	81 e0       	ldi	r24, 0x01	; 1
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	02 2e       	mov	r0, r18
     ea8:	02 c0       	rjmp	.+4      	; 0xeae <DIO_VidSetPinDirection+0x166>
     eaa:	88 0f       	add	r24, r24
     eac:	99 1f       	adc	r25, r25
     eae:	0a 94       	dec	r0
     eb0:	e2 f7       	brpl	.-8      	; 0xeaa <DIO_VidSetPinDirection+0x162>
     eb2:	80 95       	com	r24
     eb4:	84 23       	and	r24, r20
     eb6:	8c 93       	st	X, r24
     eb8:	3e c0       	rjmp	.+124    	; 0xf36 <DIO_VidSetPinDirection+0x1ee>
		case 1: CLR_BIT(DDRB, LOC_u8Pin); break;
     eba:	a7 e3       	ldi	r26, 0x37	; 55
     ebc:	b0 e0       	ldi	r27, 0x00	; 0
     ebe:	e7 e3       	ldi	r30, 0x37	; 55
     ec0:	f0 e0       	ldi	r31, 0x00	; 0
     ec2:	80 81       	ld	r24, Z
     ec4:	48 2f       	mov	r20, r24
     ec6:	8a 81       	ldd	r24, Y+2	; 0x02
     ec8:	28 2f       	mov	r18, r24
     eca:	30 e0       	ldi	r19, 0x00	; 0
     ecc:	81 e0       	ldi	r24, 0x01	; 1
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	02 2e       	mov	r0, r18
     ed2:	02 c0       	rjmp	.+4      	; 0xed8 <DIO_VidSetPinDirection+0x190>
     ed4:	88 0f       	add	r24, r24
     ed6:	99 1f       	adc	r25, r25
     ed8:	0a 94       	dec	r0
     eda:	e2 f7       	brpl	.-8      	; 0xed4 <DIO_VidSetPinDirection+0x18c>
     edc:	80 95       	com	r24
     ede:	84 23       	and	r24, r20
     ee0:	8c 93       	st	X, r24
     ee2:	29 c0       	rjmp	.+82     	; 0xf36 <DIO_VidSetPinDirection+0x1ee>
		case 2: CLR_BIT(DDRC, LOC_u8Pin); break;
     ee4:	a4 e3       	ldi	r26, 0x34	; 52
     ee6:	b0 e0       	ldi	r27, 0x00	; 0
     ee8:	e4 e3       	ldi	r30, 0x34	; 52
     eea:	f0 e0       	ldi	r31, 0x00	; 0
     eec:	80 81       	ld	r24, Z
     eee:	48 2f       	mov	r20, r24
     ef0:	8a 81       	ldd	r24, Y+2	; 0x02
     ef2:	28 2f       	mov	r18, r24
     ef4:	30 e0       	ldi	r19, 0x00	; 0
     ef6:	81 e0       	ldi	r24, 0x01	; 1
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	02 2e       	mov	r0, r18
     efc:	02 c0       	rjmp	.+4      	; 0xf02 <DIO_VidSetPinDirection+0x1ba>
     efe:	88 0f       	add	r24, r24
     f00:	99 1f       	adc	r25, r25
     f02:	0a 94       	dec	r0
     f04:	e2 f7       	brpl	.-8      	; 0xefe <DIO_VidSetPinDirection+0x1b6>
     f06:	80 95       	com	r24
     f08:	84 23       	and	r24, r20
     f0a:	8c 93       	st	X, r24
     f0c:	14 c0       	rjmp	.+40     	; 0xf36 <DIO_VidSetPinDirection+0x1ee>
		case 3: CLR_BIT(DDRD, LOC_u8Pin); break;
     f0e:	a1 e3       	ldi	r26, 0x31	; 49
     f10:	b0 e0       	ldi	r27, 0x00	; 0
     f12:	e1 e3       	ldi	r30, 0x31	; 49
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	80 81       	ld	r24, Z
     f18:	48 2f       	mov	r20, r24
     f1a:	8a 81       	ldd	r24, Y+2	; 0x02
     f1c:	28 2f       	mov	r18, r24
     f1e:	30 e0       	ldi	r19, 0x00	; 0
     f20:	81 e0       	ldi	r24, 0x01	; 1
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	02 2e       	mov	r0, r18
     f26:	02 c0       	rjmp	.+4      	; 0xf2c <DIO_VidSetPinDirection+0x1e4>
     f28:	88 0f       	add	r24, r24
     f2a:	99 1f       	adc	r25, r25
     f2c:	0a 94       	dec	r0
     f2e:	e2 f7       	brpl	.-8      	; 0xf28 <DIO_VidSetPinDirection+0x1e0>
     f30:	80 95       	com	r24
     f32:	84 23       	and	r24, r20
     f34:	8c 93       	st	X, r24
		}
	}
}
     f36:	27 96       	adiw	r28, 0x07	; 7
     f38:	0f b6       	in	r0, 0x3f	; 63
     f3a:	f8 94       	cli
     f3c:	de bf       	out	0x3e, r29	; 62
     f3e:	0f be       	out	0x3f, r0	; 63
     f40:	cd bf       	out	0x3d, r28	; 61
     f42:	cf 91       	pop	r28
     f44:	df 91       	pop	r29
     f46:	08 95       	ret

00000f48 <DIO_VidSetPinValue>:

void DIO_VidSetPinValue	( u8 LOC_u8Port, u8 LOC_u8Pin, u8 LOC_u8Value)
{
     f48:	df 93       	push	r29
     f4a:	cf 93       	push	r28
     f4c:	cd b7       	in	r28, 0x3d	; 61
     f4e:	de b7       	in	r29, 0x3e	; 62
     f50:	27 97       	sbiw	r28, 0x07	; 7
     f52:	0f b6       	in	r0, 0x3f	; 63
     f54:	f8 94       	cli
     f56:	de bf       	out	0x3e, r29	; 62
     f58:	0f be       	out	0x3f, r0	; 63
     f5a:	cd bf       	out	0x3d, r28	; 61
     f5c:	89 83       	std	Y+1, r24	; 0x01
     f5e:	6a 83       	std	Y+2, r22	; 0x02
     f60:	4b 83       	std	Y+3, r20	; 0x03
	if ( 1==LOC_u8Value)
     f62:	8b 81       	ldd	r24, Y+3	; 0x03
     f64:	81 30       	cpi	r24, 0x01	; 1
     f66:	09 f0       	breq	.+2      	; 0xf6a <DIO_VidSetPinValue+0x22>
     f68:	6f c0       	rjmp	.+222    	; 0x1048 <DIO_VidSetPinValue+0x100>
	{
		switch (LOC_u8Port)
     f6a:	89 81       	ldd	r24, Y+1	; 0x01
     f6c:	28 2f       	mov	r18, r24
     f6e:	30 e0       	ldi	r19, 0x00	; 0
     f70:	3f 83       	std	Y+7, r19	; 0x07
     f72:	2e 83       	std	Y+6, r18	; 0x06
     f74:	8e 81       	ldd	r24, Y+6	; 0x06
     f76:	9f 81       	ldd	r25, Y+7	; 0x07
     f78:	81 30       	cpi	r24, 0x01	; 1
     f7a:	91 05       	cpc	r25, r1
     f7c:	49 f1       	breq	.+82     	; 0xfd0 <DIO_VidSetPinValue+0x88>
     f7e:	2e 81       	ldd	r18, Y+6	; 0x06
     f80:	3f 81       	ldd	r19, Y+7	; 0x07
     f82:	22 30       	cpi	r18, 0x02	; 2
     f84:	31 05       	cpc	r19, r1
     f86:	2c f4       	brge	.+10     	; 0xf92 <DIO_VidSetPinValue+0x4a>
     f88:	8e 81       	ldd	r24, Y+6	; 0x06
     f8a:	9f 81       	ldd	r25, Y+7	; 0x07
     f8c:	00 97       	sbiw	r24, 0x00	; 0
     f8e:	61 f0       	breq	.+24     	; 0xfa8 <DIO_VidSetPinValue+0x60>
     f90:	d2 c0       	rjmp	.+420    	; 0x1136 <DIO_VidSetPinValue+0x1ee>
     f92:	2e 81       	ldd	r18, Y+6	; 0x06
     f94:	3f 81       	ldd	r19, Y+7	; 0x07
     f96:	22 30       	cpi	r18, 0x02	; 2
     f98:	31 05       	cpc	r19, r1
     f9a:	71 f1       	breq	.+92     	; 0xff8 <DIO_VidSetPinValue+0xb0>
     f9c:	8e 81       	ldd	r24, Y+6	; 0x06
     f9e:	9f 81       	ldd	r25, Y+7	; 0x07
     fa0:	83 30       	cpi	r24, 0x03	; 3
     fa2:	91 05       	cpc	r25, r1
     fa4:	e9 f1       	breq	.+122    	; 0x1020 <DIO_VidSetPinValue+0xd8>
     fa6:	c7 c0       	rjmp	.+398    	; 0x1136 <DIO_VidSetPinValue+0x1ee>
		{
		case 0: SET_BIT(PORTA_1, LOC_u8Pin); break;
     fa8:	ab e3       	ldi	r26, 0x3B	; 59
     faa:	b0 e0       	ldi	r27, 0x00	; 0
     fac:	eb e3       	ldi	r30, 0x3B	; 59
     fae:	f0 e0       	ldi	r31, 0x00	; 0
     fb0:	80 81       	ld	r24, Z
     fb2:	48 2f       	mov	r20, r24
     fb4:	8a 81       	ldd	r24, Y+2	; 0x02
     fb6:	28 2f       	mov	r18, r24
     fb8:	30 e0       	ldi	r19, 0x00	; 0
     fba:	81 e0       	ldi	r24, 0x01	; 1
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	02 2e       	mov	r0, r18
     fc0:	02 c0       	rjmp	.+4      	; 0xfc6 <DIO_VidSetPinValue+0x7e>
     fc2:	88 0f       	add	r24, r24
     fc4:	99 1f       	adc	r25, r25
     fc6:	0a 94       	dec	r0
     fc8:	e2 f7       	brpl	.-8      	; 0xfc2 <DIO_VidSetPinValue+0x7a>
     fca:	84 2b       	or	r24, r20
     fcc:	8c 93       	st	X, r24
     fce:	b3 c0       	rjmp	.+358    	; 0x1136 <DIO_VidSetPinValue+0x1ee>
		case 1: SET_BIT(PORTB_1, LOC_u8Pin); break;
     fd0:	a8 e3       	ldi	r26, 0x38	; 56
     fd2:	b0 e0       	ldi	r27, 0x00	; 0
     fd4:	e8 e3       	ldi	r30, 0x38	; 56
     fd6:	f0 e0       	ldi	r31, 0x00	; 0
     fd8:	80 81       	ld	r24, Z
     fda:	48 2f       	mov	r20, r24
     fdc:	8a 81       	ldd	r24, Y+2	; 0x02
     fde:	28 2f       	mov	r18, r24
     fe0:	30 e0       	ldi	r19, 0x00	; 0
     fe2:	81 e0       	ldi	r24, 0x01	; 1
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	02 2e       	mov	r0, r18
     fe8:	02 c0       	rjmp	.+4      	; 0xfee <DIO_VidSetPinValue+0xa6>
     fea:	88 0f       	add	r24, r24
     fec:	99 1f       	adc	r25, r25
     fee:	0a 94       	dec	r0
     ff0:	e2 f7       	brpl	.-8      	; 0xfea <DIO_VidSetPinValue+0xa2>
     ff2:	84 2b       	or	r24, r20
     ff4:	8c 93       	st	X, r24
     ff6:	9f c0       	rjmp	.+318    	; 0x1136 <DIO_VidSetPinValue+0x1ee>
		case 2: SET_BIT(PORTC_1, LOC_u8Pin); break;
     ff8:	a5 e3       	ldi	r26, 0x35	; 53
     ffa:	b0 e0       	ldi	r27, 0x00	; 0
     ffc:	e5 e3       	ldi	r30, 0x35	; 53
     ffe:	f0 e0       	ldi	r31, 0x00	; 0
    1000:	80 81       	ld	r24, Z
    1002:	48 2f       	mov	r20, r24
    1004:	8a 81       	ldd	r24, Y+2	; 0x02
    1006:	28 2f       	mov	r18, r24
    1008:	30 e0       	ldi	r19, 0x00	; 0
    100a:	81 e0       	ldi	r24, 0x01	; 1
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	02 2e       	mov	r0, r18
    1010:	02 c0       	rjmp	.+4      	; 0x1016 <DIO_VidSetPinValue+0xce>
    1012:	88 0f       	add	r24, r24
    1014:	99 1f       	adc	r25, r25
    1016:	0a 94       	dec	r0
    1018:	e2 f7       	brpl	.-8      	; 0x1012 <DIO_VidSetPinValue+0xca>
    101a:	84 2b       	or	r24, r20
    101c:	8c 93       	st	X, r24
    101e:	8b c0       	rjmp	.+278    	; 0x1136 <DIO_VidSetPinValue+0x1ee>
		case 3: SET_BIT(PORTD_1, LOC_u8Pin); break;
    1020:	a2 e3       	ldi	r26, 0x32	; 50
    1022:	b0 e0       	ldi	r27, 0x00	; 0
    1024:	e2 e3       	ldi	r30, 0x32	; 50
    1026:	f0 e0       	ldi	r31, 0x00	; 0
    1028:	80 81       	ld	r24, Z
    102a:	48 2f       	mov	r20, r24
    102c:	8a 81       	ldd	r24, Y+2	; 0x02
    102e:	28 2f       	mov	r18, r24
    1030:	30 e0       	ldi	r19, 0x00	; 0
    1032:	81 e0       	ldi	r24, 0x01	; 1
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	02 2e       	mov	r0, r18
    1038:	02 c0       	rjmp	.+4      	; 0x103e <DIO_VidSetPinValue+0xf6>
    103a:	88 0f       	add	r24, r24
    103c:	99 1f       	adc	r25, r25
    103e:	0a 94       	dec	r0
    1040:	e2 f7       	brpl	.-8      	; 0x103a <DIO_VidSetPinValue+0xf2>
    1042:	84 2b       	or	r24, r20
    1044:	8c 93       	st	X, r24
    1046:	77 c0       	rjmp	.+238    	; 0x1136 <DIO_VidSetPinValue+0x1ee>
		}
	}
	else if (0==LOC_u8Value)
    1048:	8b 81       	ldd	r24, Y+3	; 0x03
    104a:	88 23       	and	r24, r24
    104c:	09 f0       	breq	.+2      	; 0x1050 <DIO_VidSetPinValue+0x108>
    104e:	73 c0       	rjmp	.+230    	; 0x1136 <DIO_VidSetPinValue+0x1ee>
	{
		switch (LOC_u8Port)
    1050:	89 81       	ldd	r24, Y+1	; 0x01
    1052:	28 2f       	mov	r18, r24
    1054:	30 e0       	ldi	r19, 0x00	; 0
    1056:	3d 83       	std	Y+5, r19	; 0x05
    1058:	2c 83       	std	Y+4, r18	; 0x04
    105a:	8c 81       	ldd	r24, Y+4	; 0x04
    105c:	9d 81       	ldd	r25, Y+5	; 0x05
    105e:	81 30       	cpi	r24, 0x01	; 1
    1060:	91 05       	cpc	r25, r1
    1062:	59 f1       	breq	.+86     	; 0x10ba <DIO_VidSetPinValue+0x172>
    1064:	2c 81       	ldd	r18, Y+4	; 0x04
    1066:	3d 81       	ldd	r19, Y+5	; 0x05
    1068:	22 30       	cpi	r18, 0x02	; 2
    106a:	31 05       	cpc	r19, r1
    106c:	2c f4       	brge	.+10     	; 0x1078 <DIO_VidSetPinValue+0x130>
    106e:	8c 81       	ldd	r24, Y+4	; 0x04
    1070:	9d 81       	ldd	r25, Y+5	; 0x05
    1072:	00 97       	sbiw	r24, 0x00	; 0
    1074:	69 f0       	breq	.+26     	; 0x1090 <DIO_VidSetPinValue+0x148>
    1076:	5f c0       	rjmp	.+190    	; 0x1136 <DIO_VidSetPinValue+0x1ee>
    1078:	2c 81       	ldd	r18, Y+4	; 0x04
    107a:	3d 81       	ldd	r19, Y+5	; 0x05
    107c:	22 30       	cpi	r18, 0x02	; 2
    107e:	31 05       	cpc	r19, r1
    1080:	89 f1       	breq	.+98     	; 0x10e4 <DIO_VidSetPinValue+0x19c>
    1082:	8c 81       	ldd	r24, Y+4	; 0x04
    1084:	9d 81       	ldd	r25, Y+5	; 0x05
    1086:	83 30       	cpi	r24, 0x03	; 3
    1088:	91 05       	cpc	r25, r1
    108a:	09 f4       	brne	.+2      	; 0x108e <DIO_VidSetPinValue+0x146>
    108c:	40 c0       	rjmp	.+128    	; 0x110e <DIO_VidSetPinValue+0x1c6>
    108e:	53 c0       	rjmp	.+166    	; 0x1136 <DIO_VidSetPinValue+0x1ee>
		{
		case 0: CLR_BIT(PORTA_1, LOC_u8Pin); break;
    1090:	ab e3       	ldi	r26, 0x3B	; 59
    1092:	b0 e0       	ldi	r27, 0x00	; 0
    1094:	eb e3       	ldi	r30, 0x3B	; 59
    1096:	f0 e0       	ldi	r31, 0x00	; 0
    1098:	80 81       	ld	r24, Z
    109a:	48 2f       	mov	r20, r24
    109c:	8a 81       	ldd	r24, Y+2	; 0x02
    109e:	28 2f       	mov	r18, r24
    10a0:	30 e0       	ldi	r19, 0x00	; 0
    10a2:	81 e0       	ldi	r24, 0x01	; 1
    10a4:	90 e0       	ldi	r25, 0x00	; 0
    10a6:	02 2e       	mov	r0, r18
    10a8:	02 c0       	rjmp	.+4      	; 0x10ae <DIO_VidSetPinValue+0x166>
    10aa:	88 0f       	add	r24, r24
    10ac:	99 1f       	adc	r25, r25
    10ae:	0a 94       	dec	r0
    10b0:	e2 f7       	brpl	.-8      	; 0x10aa <DIO_VidSetPinValue+0x162>
    10b2:	80 95       	com	r24
    10b4:	84 23       	and	r24, r20
    10b6:	8c 93       	st	X, r24
    10b8:	3e c0       	rjmp	.+124    	; 0x1136 <DIO_VidSetPinValue+0x1ee>
		case 1: CLR_BIT(PORTB_1, LOC_u8Pin); break;
    10ba:	a8 e3       	ldi	r26, 0x38	; 56
    10bc:	b0 e0       	ldi	r27, 0x00	; 0
    10be:	e8 e3       	ldi	r30, 0x38	; 56
    10c0:	f0 e0       	ldi	r31, 0x00	; 0
    10c2:	80 81       	ld	r24, Z
    10c4:	48 2f       	mov	r20, r24
    10c6:	8a 81       	ldd	r24, Y+2	; 0x02
    10c8:	28 2f       	mov	r18, r24
    10ca:	30 e0       	ldi	r19, 0x00	; 0
    10cc:	81 e0       	ldi	r24, 0x01	; 1
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	02 2e       	mov	r0, r18
    10d2:	02 c0       	rjmp	.+4      	; 0x10d8 <DIO_VidSetPinValue+0x190>
    10d4:	88 0f       	add	r24, r24
    10d6:	99 1f       	adc	r25, r25
    10d8:	0a 94       	dec	r0
    10da:	e2 f7       	brpl	.-8      	; 0x10d4 <DIO_VidSetPinValue+0x18c>
    10dc:	80 95       	com	r24
    10de:	84 23       	and	r24, r20
    10e0:	8c 93       	st	X, r24
    10e2:	29 c0       	rjmp	.+82     	; 0x1136 <DIO_VidSetPinValue+0x1ee>
		case 2: CLR_BIT(PORTC_1, LOC_u8Pin); break;
    10e4:	a5 e3       	ldi	r26, 0x35	; 53
    10e6:	b0 e0       	ldi	r27, 0x00	; 0
    10e8:	e5 e3       	ldi	r30, 0x35	; 53
    10ea:	f0 e0       	ldi	r31, 0x00	; 0
    10ec:	80 81       	ld	r24, Z
    10ee:	48 2f       	mov	r20, r24
    10f0:	8a 81       	ldd	r24, Y+2	; 0x02
    10f2:	28 2f       	mov	r18, r24
    10f4:	30 e0       	ldi	r19, 0x00	; 0
    10f6:	81 e0       	ldi	r24, 0x01	; 1
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	02 2e       	mov	r0, r18
    10fc:	02 c0       	rjmp	.+4      	; 0x1102 <DIO_VidSetPinValue+0x1ba>
    10fe:	88 0f       	add	r24, r24
    1100:	99 1f       	adc	r25, r25
    1102:	0a 94       	dec	r0
    1104:	e2 f7       	brpl	.-8      	; 0x10fe <DIO_VidSetPinValue+0x1b6>
    1106:	80 95       	com	r24
    1108:	84 23       	and	r24, r20
    110a:	8c 93       	st	X, r24
    110c:	14 c0       	rjmp	.+40     	; 0x1136 <DIO_VidSetPinValue+0x1ee>
		case 3: CLR_BIT(PORTD_1, LOC_u8Pin); break;
    110e:	a2 e3       	ldi	r26, 0x32	; 50
    1110:	b0 e0       	ldi	r27, 0x00	; 0
    1112:	e2 e3       	ldi	r30, 0x32	; 50
    1114:	f0 e0       	ldi	r31, 0x00	; 0
    1116:	80 81       	ld	r24, Z
    1118:	48 2f       	mov	r20, r24
    111a:	8a 81       	ldd	r24, Y+2	; 0x02
    111c:	28 2f       	mov	r18, r24
    111e:	30 e0       	ldi	r19, 0x00	; 0
    1120:	81 e0       	ldi	r24, 0x01	; 1
    1122:	90 e0       	ldi	r25, 0x00	; 0
    1124:	02 2e       	mov	r0, r18
    1126:	02 c0       	rjmp	.+4      	; 0x112c <DIO_VidSetPinValue+0x1e4>
    1128:	88 0f       	add	r24, r24
    112a:	99 1f       	adc	r25, r25
    112c:	0a 94       	dec	r0
    112e:	e2 f7       	brpl	.-8      	; 0x1128 <DIO_VidSetPinValue+0x1e0>
    1130:	80 95       	com	r24
    1132:	84 23       	and	r24, r20
    1134:	8c 93       	st	X, r24
		}
	}
}
    1136:	27 96       	adiw	r28, 0x07	; 7
    1138:	0f b6       	in	r0, 0x3f	; 63
    113a:	f8 94       	cli
    113c:	de bf       	out	0x3e, r29	; 62
    113e:	0f be       	out	0x3f, r0	; 63
    1140:	cd bf       	out	0x3d, r28	; 61
    1142:	cf 91       	pop	r28
    1144:	df 91       	pop	r29
    1146:	08 95       	ret

00001148 <DIO_VidSetPortDirection>:

void DIO_VidSetPortDirection	( u8 LOC_u8Port, u8 LOC_u8Value)
{
    1148:	df 93       	push	r29
    114a:	cf 93       	push	r28
    114c:	00 d0       	rcall	.+0      	; 0x114e <DIO_VidSetPortDirection+0x6>
    114e:	00 d0       	rcall	.+0      	; 0x1150 <DIO_VidSetPortDirection+0x8>
    1150:	cd b7       	in	r28, 0x3d	; 61
    1152:	de b7       	in	r29, 0x3e	; 62
    1154:	89 83       	std	Y+1, r24	; 0x01
    1156:	6a 83       	std	Y+2, r22	; 0x02
	switch (LOC_u8Port)
    1158:	89 81       	ldd	r24, Y+1	; 0x01
    115a:	28 2f       	mov	r18, r24
    115c:	30 e0       	ldi	r19, 0x00	; 0
    115e:	3c 83       	std	Y+4, r19	; 0x04
    1160:	2b 83       	std	Y+3, r18	; 0x03
    1162:	8b 81       	ldd	r24, Y+3	; 0x03
    1164:	9c 81       	ldd	r25, Y+4	; 0x04
    1166:	81 30       	cpi	r24, 0x01	; 1
    1168:	91 05       	cpc	r25, r1
    116a:	d1 f0       	breq	.+52     	; 0x11a0 <DIO_VidSetPortDirection+0x58>
    116c:	2b 81       	ldd	r18, Y+3	; 0x03
    116e:	3c 81       	ldd	r19, Y+4	; 0x04
    1170:	22 30       	cpi	r18, 0x02	; 2
    1172:	31 05       	cpc	r19, r1
    1174:	2c f4       	brge	.+10     	; 0x1180 <DIO_VidSetPortDirection+0x38>
    1176:	8b 81       	ldd	r24, Y+3	; 0x03
    1178:	9c 81       	ldd	r25, Y+4	; 0x04
    117a:	00 97       	sbiw	r24, 0x00	; 0
    117c:	61 f0       	breq	.+24     	; 0x1196 <DIO_VidSetPortDirection+0x4e>
    117e:	1e c0       	rjmp	.+60     	; 0x11bc <DIO_VidSetPortDirection+0x74>
    1180:	2b 81       	ldd	r18, Y+3	; 0x03
    1182:	3c 81       	ldd	r19, Y+4	; 0x04
    1184:	22 30       	cpi	r18, 0x02	; 2
    1186:	31 05       	cpc	r19, r1
    1188:	81 f0       	breq	.+32     	; 0x11aa <DIO_VidSetPortDirection+0x62>
    118a:	8b 81       	ldd	r24, Y+3	; 0x03
    118c:	9c 81       	ldd	r25, Y+4	; 0x04
    118e:	83 30       	cpi	r24, 0x03	; 3
    1190:	91 05       	cpc	r25, r1
    1192:	81 f0       	breq	.+32     	; 0x11b4 <DIO_VidSetPortDirection+0x6c>
    1194:	13 c0       	rjmp	.+38     	; 0x11bc <DIO_VidSetPortDirection+0x74>
	{
	case 0: DDRA = LOC_u8Value; break;
    1196:	ea e3       	ldi	r30, 0x3A	; 58
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	8a 81       	ldd	r24, Y+2	; 0x02
    119c:	80 83       	st	Z, r24
    119e:	0e c0       	rjmp	.+28     	; 0x11bc <DIO_VidSetPortDirection+0x74>
	case 1: DDRB = LOC_u8Value; break;
    11a0:	e7 e3       	ldi	r30, 0x37	; 55
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	8a 81       	ldd	r24, Y+2	; 0x02
    11a6:	80 83       	st	Z, r24
    11a8:	09 c0       	rjmp	.+18     	; 0x11bc <DIO_VidSetPortDirection+0x74>
	case 2: DDRC = LOC_u8Value; break;
    11aa:	e4 e3       	ldi	r30, 0x34	; 52
    11ac:	f0 e0       	ldi	r31, 0x00	; 0
    11ae:	8a 81       	ldd	r24, Y+2	; 0x02
    11b0:	80 83       	st	Z, r24
    11b2:	04 c0       	rjmp	.+8      	; 0x11bc <DIO_VidSetPortDirection+0x74>
	case 3: DDRD = LOC_u8Value; break;
    11b4:	e1 e3       	ldi	r30, 0x31	; 49
    11b6:	f0 e0       	ldi	r31, 0x00	; 0
    11b8:	8a 81       	ldd	r24, Y+2	; 0x02
    11ba:	80 83       	st	Z, r24
	}
}
    11bc:	0f 90       	pop	r0
    11be:	0f 90       	pop	r0
    11c0:	0f 90       	pop	r0
    11c2:	0f 90       	pop	r0
    11c4:	cf 91       	pop	r28
    11c6:	df 91       	pop	r29
    11c8:	08 95       	ret

000011ca <DIO_VidSetPortValue>:

void DIO_VidSetPortValue	( u8 LOC_u8Port, u8 LOC_u8Value)
{
    11ca:	df 93       	push	r29
    11cc:	cf 93       	push	r28
    11ce:	00 d0       	rcall	.+0      	; 0x11d0 <DIO_VidSetPortValue+0x6>
    11d0:	00 d0       	rcall	.+0      	; 0x11d2 <DIO_VidSetPortValue+0x8>
    11d2:	cd b7       	in	r28, 0x3d	; 61
    11d4:	de b7       	in	r29, 0x3e	; 62
    11d6:	89 83       	std	Y+1, r24	; 0x01
    11d8:	6a 83       	std	Y+2, r22	; 0x02
	switch (LOC_u8Port)
    11da:	89 81       	ldd	r24, Y+1	; 0x01
    11dc:	28 2f       	mov	r18, r24
    11de:	30 e0       	ldi	r19, 0x00	; 0
    11e0:	3c 83       	std	Y+4, r19	; 0x04
    11e2:	2b 83       	std	Y+3, r18	; 0x03
    11e4:	8b 81       	ldd	r24, Y+3	; 0x03
    11e6:	9c 81       	ldd	r25, Y+4	; 0x04
    11e8:	81 30       	cpi	r24, 0x01	; 1
    11ea:	91 05       	cpc	r25, r1
    11ec:	d1 f0       	breq	.+52     	; 0x1222 <DIO_VidSetPortValue+0x58>
    11ee:	2b 81       	ldd	r18, Y+3	; 0x03
    11f0:	3c 81       	ldd	r19, Y+4	; 0x04
    11f2:	22 30       	cpi	r18, 0x02	; 2
    11f4:	31 05       	cpc	r19, r1
    11f6:	2c f4       	brge	.+10     	; 0x1202 <DIO_VidSetPortValue+0x38>
    11f8:	8b 81       	ldd	r24, Y+3	; 0x03
    11fa:	9c 81       	ldd	r25, Y+4	; 0x04
    11fc:	00 97       	sbiw	r24, 0x00	; 0
    11fe:	61 f0       	breq	.+24     	; 0x1218 <DIO_VidSetPortValue+0x4e>
    1200:	1e c0       	rjmp	.+60     	; 0x123e <DIO_VidSetPortValue+0x74>
    1202:	2b 81       	ldd	r18, Y+3	; 0x03
    1204:	3c 81       	ldd	r19, Y+4	; 0x04
    1206:	22 30       	cpi	r18, 0x02	; 2
    1208:	31 05       	cpc	r19, r1
    120a:	81 f0       	breq	.+32     	; 0x122c <DIO_VidSetPortValue+0x62>
    120c:	8b 81       	ldd	r24, Y+3	; 0x03
    120e:	9c 81       	ldd	r25, Y+4	; 0x04
    1210:	83 30       	cpi	r24, 0x03	; 3
    1212:	91 05       	cpc	r25, r1
    1214:	81 f0       	breq	.+32     	; 0x1236 <DIO_VidSetPortValue+0x6c>
    1216:	13 c0       	rjmp	.+38     	; 0x123e <DIO_VidSetPortValue+0x74>
	{
	case 0: PORTA_1 = LOC_u8Value; break;
    1218:	eb e3       	ldi	r30, 0x3B	; 59
    121a:	f0 e0       	ldi	r31, 0x00	; 0
    121c:	8a 81       	ldd	r24, Y+2	; 0x02
    121e:	80 83       	st	Z, r24
    1220:	0e c0       	rjmp	.+28     	; 0x123e <DIO_VidSetPortValue+0x74>
	case 1: PORTB_1 = LOC_u8Value; break;
    1222:	e8 e3       	ldi	r30, 0x38	; 56
    1224:	f0 e0       	ldi	r31, 0x00	; 0
    1226:	8a 81       	ldd	r24, Y+2	; 0x02
    1228:	80 83       	st	Z, r24
    122a:	09 c0       	rjmp	.+18     	; 0x123e <DIO_VidSetPortValue+0x74>
	case 2: PORTC_1 = LOC_u8Value; break;
    122c:	e5 e3       	ldi	r30, 0x35	; 53
    122e:	f0 e0       	ldi	r31, 0x00	; 0
    1230:	8a 81       	ldd	r24, Y+2	; 0x02
    1232:	80 83       	st	Z, r24
    1234:	04 c0       	rjmp	.+8      	; 0x123e <DIO_VidSetPortValue+0x74>
	case 3: PORTD_1 = LOC_u8Value; break;
    1236:	e2 e3       	ldi	r30, 0x32	; 50
    1238:	f0 e0       	ldi	r31, 0x00	; 0
    123a:	8a 81       	ldd	r24, Y+2	; 0x02
    123c:	80 83       	st	Z, r24
	}
}
    123e:	0f 90       	pop	r0
    1240:	0f 90       	pop	r0
    1242:	0f 90       	pop	r0
    1244:	0f 90       	pop	r0
    1246:	cf 91       	pop	r28
    1248:	df 91       	pop	r29
    124a:	08 95       	ret

0000124c <DIO_u8GetPinValue>:

u8 	 DIO_u8GetPinValue	( u8 LOC_u8Port, u8 LOC_u8Pin)
{
    124c:	df 93       	push	r29
    124e:	cf 93       	push	r28
    1250:	00 d0       	rcall	.+0      	; 0x1252 <DIO_u8GetPinValue+0x6>
    1252:	00 d0       	rcall	.+0      	; 0x1254 <DIO_u8GetPinValue+0x8>
    1254:	0f 92       	push	r0
    1256:	cd b7       	in	r28, 0x3d	; 61
    1258:	de b7       	in	r29, 0x3e	; 62
    125a:	8a 83       	std	Y+2, r24	; 0x02
    125c:	6b 83       	std	Y+3, r22	; 0x03
	u8 value;
	switch (LOC_u8Port)
    125e:	8a 81       	ldd	r24, Y+2	; 0x02
    1260:	28 2f       	mov	r18, r24
    1262:	30 e0       	ldi	r19, 0x00	; 0
    1264:	3d 83       	std	Y+5, r19	; 0x05
    1266:	2c 83       	std	Y+4, r18	; 0x04
    1268:	4c 81       	ldd	r20, Y+4	; 0x04
    126a:	5d 81       	ldd	r21, Y+5	; 0x05
    126c:	41 30       	cpi	r20, 0x01	; 1
    126e:	51 05       	cpc	r21, r1
    1270:	41 f1       	breq	.+80     	; 0x12c2 <DIO_u8GetPinValue+0x76>
    1272:	8c 81       	ldd	r24, Y+4	; 0x04
    1274:	9d 81       	ldd	r25, Y+5	; 0x05
    1276:	82 30       	cpi	r24, 0x02	; 2
    1278:	91 05       	cpc	r25, r1
    127a:	34 f4       	brge	.+12     	; 0x1288 <DIO_u8GetPinValue+0x3c>
    127c:	2c 81       	ldd	r18, Y+4	; 0x04
    127e:	3d 81       	ldd	r19, Y+5	; 0x05
    1280:	21 15       	cp	r18, r1
    1282:	31 05       	cpc	r19, r1
    1284:	61 f0       	breq	.+24     	; 0x129e <DIO_u8GetPinValue+0x52>
    1286:	52 c0       	rjmp	.+164    	; 0x132c <DIO_u8GetPinValue+0xe0>
    1288:	4c 81       	ldd	r20, Y+4	; 0x04
    128a:	5d 81       	ldd	r21, Y+5	; 0x05
    128c:	42 30       	cpi	r20, 0x02	; 2
    128e:	51 05       	cpc	r21, r1
    1290:	51 f1       	breq	.+84     	; 0x12e6 <DIO_u8GetPinValue+0x9a>
    1292:	8c 81       	ldd	r24, Y+4	; 0x04
    1294:	9d 81       	ldd	r25, Y+5	; 0x05
    1296:	83 30       	cpi	r24, 0x03	; 3
    1298:	91 05       	cpc	r25, r1
    129a:	b9 f1       	breq	.+110    	; 0x130a <DIO_u8GetPinValue+0xbe>
    129c:	47 c0       	rjmp	.+142    	; 0x132c <DIO_u8GetPinValue+0xe0>
	{
	case 0: value = GET_BIT(PINA, LOC_u8Pin); break;
    129e:	e9 e3       	ldi	r30, 0x39	; 57
    12a0:	f0 e0       	ldi	r31, 0x00	; 0
    12a2:	80 81       	ld	r24, Z
    12a4:	28 2f       	mov	r18, r24
    12a6:	30 e0       	ldi	r19, 0x00	; 0
    12a8:	8b 81       	ldd	r24, Y+3	; 0x03
    12aa:	88 2f       	mov	r24, r24
    12ac:	90 e0       	ldi	r25, 0x00	; 0
    12ae:	a9 01       	movw	r20, r18
    12b0:	02 c0       	rjmp	.+4      	; 0x12b6 <DIO_u8GetPinValue+0x6a>
    12b2:	55 95       	asr	r21
    12b4:	47 95       	ror	r20
    12b6:	8a 95       	dec	r24
    12b8:	e2 f7       	brpl	.-8      	; 0x12b2 <DIO_u8GetPinValue+0x66>
    12ba:	ca 01       	movw	r24, r20
    12bc:	81 70       	andi	r24, 0x01	; 1
    12be:	89 83       	std	Y+1, r24	; 0x01
    12c0:	35 c0       	rjmp	.+106    	; 0x132c <DIO_u8GetPinValue+0xe0>
	case 1: value = GET_BIT(PINB, LOC_u8Pin); break;
    12c2:	e6 e3       	ldi	r30, 0x36	; 54
    12c4:	f0 e0       	ldi	r31, 0x00	; 0
    12c6:	80 81       	ld	r24, Z
    12c8:	28 2f       	mov	r18, r24
    12ca:	30 e0       	ldi	r19, 0x00	; 0
    12cc:	8b 81       	ldd	r24, Y+3	; 0x03
    12ce:	88 2f       	mov	r24, r24
    12d0:	90 e0       	ldi	r25, 0x00	; 0
    12d2:	a9 01       	movw	r20, r18
    12d4:	02 c0       	rjmp	.+4      	; 0x12da <DIO_u8GetPinValue+0x8e>
    12d6:	55 95       	asr	r21
    12d8:	47 95       	ror	r20
    12da:	8a 95       	dec	r24
    12dc:	e2 f7       	brpl	.-8      	; 0x12d6 <DIO_u8GetPinValue+0x8a>
    12de:	ca 01       	movw	r24, r20
    12e0:	81 70       	andi	r24, 0x01	; 1
    12e2:	89 83       	std	Y+1, r24	; 0x01
    12e4:	23 c0       	rjmp	.+70     	; 0x132c <DIO_u8GetPinValue+0xe0>
	case 2: value = GET_BIT(PINC, LOC_u8Pin); break;
    12e6:	e3 e3       	ldi	r30, 0x33	; 51
    12e8:	f0 e0       	ldi	r31, 0x00	; 0
    12ea:	80 81       	ld	r24, Z
    12ec:	28 2f       	mov	r18, r24
    12ee:	30 e0       	ldi	r19, 0x00	; 0
    12f0:	8b 81       	ldd	r24, Y+3	; 0x03
    12f2:	88 2f       	mov	r24, r24
    12f4:	90 e0       	ldi	r25, 0x00	; 0
    12f6:	a9 01       	movw	r20, r18
    12f8:	02 c0       	rjmp	.+4      	; 0x12fe <DIO_u8GetPinValue+0xb2>
    12fa:	55 95       	asr	r21
    12fc:	47 95       	ror	r20
    12fe:	8a 95       	dec	r24
    1300:	e2 f7       	brpl	.-8      	; 0x12fa <DIO_u8GetPinValue+0xae>
    1302:	ca 01       	movw	r24, r20
    1304:	81 70       	andi	r24, 0x01	; 1
    1306:	89 83       	std	Y+1, r24	; 0x01
    1308:	11 c0       	rjmp	.+34     	; 0x132c <DIO_u8GetPinValue+0xe0>
	case 3: value = GET_BIT(PIND, LOC_u8Pin); break;
    130a:	e0 e3       	ldi	r30, 0x30	; 48
    130c:	f0 e0       	ldi	r31, 0x00	; 0
    130e:	80 81       	ld	r24, Z
    1310:	28 2f       	mov	r18, r24
    1312:	30 e0       	ldi	r19, 0x00	; 0
    1314:	8b 81       	ldd	r24, Y+3	; 0x03
    1316:	88 2f       	mov	r24, r24
    1318:	90 e0       	ldi	r25, 0x00	; 0
    131a:	a9 01       	movw	r20, r18
    131c:	02 c0       	rjmp	.+4      	; 0x1322 <DIO_u8GetPinValue+0xd6>
    131e:	55 95       	asr	r21
    1320:	47 95       	ror	r20
    1322:	8a 95       	dec	r24
    1324:	e2 f7       	brpl	.-8      	; 0x131e <DIO_u8GetPinValue+0xd2>
    1326:	ca 01       	movw	r24, r20
    1328:	81 70       	andi	r24, 0x01	; 1
    132a:	89 83       	std	Y+1, r24	; 0x01
	}
	return value;
    132c:	89 81       	ldd	r24, Y+1	; 0x01
}
    132e:	0f 90       	pop	r0
    1330:	0f 90       	pop	r0
    1332:	0f 90       	pop	r0
    1334:	0f 90       	pop	r0
    1336:	0f 90       	pop	r0
    1338:	cf 91       	pop	r28
    133a:	df 91       	pop	r29
    133c:	08 95       	ret

0000133e <DIO_VidToggPinValue>:




void DIO_VidToggPinValue	( u8 LOC_u8Port, u8 LOC_u8Pin, u8 LOC_u8Value)
{
    133e:	df 93       	push	r29
    1340:	cf 93       	push	r28
    1342:	00 d0       	rcall	.+0      	; 0x1344 <DIO_VidToggPinValue+0x6>
    1344:	00 d0       	rcall	.+0      	; 0x1346 <DIO_VidToggPinValue+0x8>
    1346:	0f 92       	push	r0
    1348:	cd b7       	in	r28, 0x3d	; 61
    134a:	de b7       	in	r29, 0x3e	; 62
    134c:	89 83       	std	Y+1, r24	; 0x01
    134e:	6a 83       	std	Y+2, r22	; 0x02
    1350:	4b 83       	std	Y+3, r20	; 0x03
	if ( 1==LOC_u8Value)
    1352:	8b 81       	ldd	r24, Y+3	; 0x03
    1354:	81 30       	cpi	r24, 0x01	; 1
    1356:	09 f0       	breq	.+2      	; 0x135a <DIO_VidToggPinValue+0x1c>
    1358:	6e c0       	rjmp	.+220    	; 0x1436 <DIO_VidToggPinValue+0xf8>
	{

		switch (LOC_u8Port)
    135a:	89 81       	ldd	r24, Y+1	; 0x01
    135c:	28 2f       	mov	r18, r24
    135e:	30 e0       	ldi	r19, 0x00	; 0
    1360:	3d 83       	std	Y+5, r19	; 0x05
    1362:	2c 83       	std	Y+4, r18	; 0x04
    1364:	8c 81       	ldd	r24, Y+4	; 0x04
    1366:	9d 81       	ldd	r25, Y+5	; 0x05
    1368:	81 30       	cpi	r24, 0x01	; 1
    136a:	91 05       	cpc	r25, r1
    136c:	49 f1       	breq	.+82     	; 0x13c0 <DIO_VidToggPinValue+0x82>
    136e:	2c 81       	ldd	r18, Y+4	; 0x04
    1370:	3d 81       	ldd	r19, Y+5	; 0x05
    1372:	22 30       	cpi	r18, 0x02	; 2
    1374:	31 05       	cpc	r19, r1
    1376:	2c f4       	brge	.+10     	; 0x1382 <DIO_VidToggPinValue+0x44>
    1378:	8c 81       	ldd	r24, Y+4	; 0x04
    137a:	9d 81       	ldd	r25, Y+5	; 0x05
    137c:	00 97       	sbiw	r24, 0x00	; 0
    137e:	61 f0       	breq	.+24     	; 0x1398 <DIO_VidToggPinValue+0x5a>
    1380:	5a c0       	rjmp	.+180    	; 0x1436 <DIO_VidToggPinValue+0xf8>
    1382:	2c 81       	ldd	r18, Y+4	; 0x04
    1384:	3d 81       	ldd	r19, Y+5	; 0x05
    1386:	22 30       	cpi	r18, 0x02	; 2
    1388:	31 05       	cpc	r19, r1
    138a:	71 f1       	breq	.+92     	; 0x13e8 <DIO_VidToggPinValue+0xaa>
    138c:	8c 81       	ldd	r24, Y+4	; 0x04
    138e:	9d 81       	ldd	r25, Y+5	; 0x05
    1390:	83 30       	cpi	r24, 0x03	; 3
    1392:	91 05       	cpc	r25, r1
    1394:	e9 f1       	breq	.+122    	; 0x1410 <DIO_VidToggPinValue+0xd2>
    1396:	4f c0       	rjmp	.+158    	; 0x1436 <DIO_VidToggPinValue+0xf8>
		{
		case 0: TOG_BIT(PORTA_1, LOC_u8Pin); break;
    1398:	ab e3       	ldi	r26, 0x3B	; 59
    139a:	b0 e0       	ldi	r27, 0x00	; 0
    139c:	eb e3       	ldi	r30, 0x3B	; 59
    139e:	f0 e0       	ldi	r31, 0x00	; 0
    13a0:	80 81       	ld	r24, Z
    13a2:	48 2f       	mov	r20, r24
    13a4:	8a 81       	ldd	r24, Y+2	; 0x02
    13a6:	28 2f       	mov	r18, r24
    13a8:	30 e0       	ldi	r19, 0x00	; 0
    13aa:	81 e0       	ldi	r24, 0x01	; 1
    13ac:	90 e0       	ldi	r25, 0x00	; 0
    13ae:	02 2e       	mov	r0, r18
    13b0:	02 c0       	rjmp	.+4      	; 0x13b6 <DIO_VidToggPinValue+0x78>
    13b2:	88 0f       	add	r24, r24
    13b4:	99 1f       	adc	r25, r25
    13b6:	0a 94       	dec	r0
    13b8:	e2 f7       	brpl	.-8      	; 0x13b2 <DIO_VidToggPinValue+0x74>
    13ba:	84 27       	eor	r24, r20
    13bc:	8c 93       	st	X, r24
    13be:	3b c0       	rjmp	.+118    	; 0x1436 <DIO_VidToggPinValue+0xf8>
		case 1: TOG_BIT(PORTB_1, LOC_u8Pin); break;
    13c0:	a8 e3       	ldi	r26, 0x38	; 56
    13c2:	b0 e0       	ldi	r27, 0x00	; 0
    13c4:	e8 e3       	ldi	r30, 0x38	; 56
    13c6:	f0 e0       	ldi	r31, 0x00	; 0
    13c8:	80 81       	ld	r24, Z
    13ca:	48 2f       	mov	r20, r24
    13cc:	8a 81       	ldd	r24, Y+2	; 0x02
    13ce:	28 2f       	mov	r18, r24
    13d0:	30 e0       	ldi	r19, 0x00	; 0
    13d2:	81 e0       	ldi	r24, 0x01	; 1
    13d4:	90 e0       	ldi	r25, 0x00	; 0
    13d6:	02 2e       	mov	r0, r18
    13d8:	02 c0       	rjmp	.+4      	; 0x13de <DIO_VidToggPinValue+0xa0>
    13da:	88 0f       	add	r24, r24
    13dc:	99 1f       	adc	r25, r25
    13de:	0a 94       	dec	r0
    13e0:	e2 f7       	brpl	.-8      	; 0x13da <DIO_VidToggPinValue+0x9c>
    13e2:	84 27       	eor	r24, r20
    13e4:	8c 93       	st	X, r24
    13e6:	27 c0       	rjmp	.+78     	; 0x1436 <DIO_VidToggPinValue+0xf8>
		case 2: TOG_BIT(PORTC_1, LOC_u8Pin); break;
    13e8:	a5 e3       	ldi	r26, 0x35	; 53
    13ea:	b0 e0       	ldi	r27, 0x00	; 0
    13ec:	e5 e3       	ldi	r30, 0x35	; 53
    13ee:	f0 e0       	ldi	r31, 0x00	; 0
    13f0:	80 81       	ld	r24, Z
    13f2:	48 2f       	mov	r20, r24
    13f4:	8a 81       	ldd	r24, Y+2	; 0x02
    13f6:	28 2f       	mov	r18, r24
    13f8:	30 e0       	ldi	r19, 0x00	; 0
    13fa:	81 e0       	ldi	r24, 0x01	; 1
    13fc:	90 e0       	ldi	r25, 0x00	; 0
    13fe:	02 2e       	mov	r0, r18
    1400:	02 c0       	rjmp	.+4      	; 0x1406 <DIO_VidToggPinValue+0xc8>
    1402:	88 0f       	add	r24, r24
    1404:	99 1f       	adc	r25, r25
    1406:	0a 94       	dec	r0
    1408:	e2 f7       	brpl	.-8      	; 0x1402 <DIO_VidToggPinValue+0xc4>
    140a:	84 27       	eor	r24, r20
    140c:	8c 93       	st	X, r24
    140e:	13 c0       	rjmp	.+38     	; 0x1436 <DIO_VidToggPinValue+0xf8>
		case 3: TOG_BIT(PORTD_1, LOC_u8Pin); break;
    1410:	a2 e3       	ldi	r26, 0x32	; 50
    1412:	b0 e0       	ldi	r27, 0x00	; 0
    1414:	e2 e3       	ldi	r30, 0x32	; 50
    1416:	f0 e0       	ldi	r31, 0x00	; 0
    1418:	80 81       	ld	r24, Z
    141a:	48 2f       	mov	r20, r24
    141c:	8a 81       	ldd	r24, Y+2	; 0x02
    141e:	28 2f       	mov	r18, r24
    1420:	30 e0       	ldi	r19, 0x00	; 0
    1422:	81 e0       	ldi	r24, 0x01	; 1
    1424:	90 e0       	ldi	r25, 0x00	; 0
    1426:	02 2e       	mov	r0, r18
    1428:	02 c0       	rjmp	.+4      	; 0x142e <DIO_VidToggPinValue+0xf0>
    142a:	88 0f       	add	r24, r24
    142c:	99 1f       	adc	r25, r25
    142e:	0a 94       	dec	r0
    1430:	e2 f7       	brpl	.-8      	; 0x142a <DIO_VidToggPinValue+0xec>
    1432:	84 27       	eor	r24, r20
    1434:	8c 93       	st	X, r24
		}
	}
}
    1436:	0f 90       	pop	r0
    1438:	0f 90       	pop	r0
    143a:	0f 90       	pop	r0
    143c:	0f 90       	pop	r0
    143e:	0f 90       	pop	r0
    1440:	cf 91       	pop	r28
    1442:	df 91       	pop	r29
    1444:	08 95       	ret

00001446 <EXI_Enable>:
#include "DIO_Register.h"
#include "DIO_Interface.h"
#include <avr/delay.h>
void EXI_Enable(void)

{
    1446:	df 93       	push	r29
    1448:	cf 93       	push	r28
    144a:	cd b7       	in	r28, 0x3d	; 61
    144c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GICR,INT1);
    144e:	ab e5       	ldi	r26, 0x5B	; 91
    1450:	b0 e0       	ldi	r27, 0x00	; 0
    1452:	eb e5       	ldi	r30, 0x5B	; 91
    1454:	f0 e0       	ldi	r31, 0x00	; 0
    1456:	80 81       	ld	r24, Z
    1458:	80 68       	ori	r24, 0x80	; 128
    145a:	8c 93       	st	X, r24
}
    145c:	cf 91       	pop	r28
    145e:	df 91       	pop	r29
    1460:	08 95       	ret

00001462 <EXI_Disable>:
void EXI_Disable(void)
{
    1462:	df 93       	push	r29
    1464:	cf 93       	push	r28
    1466:	cd b7       	in	r28, 0x3d	; 61
    1468:	de b7       	in	r29, 0x3e	; 62
    CLR_BIT(GICR,INT1);
    146a:	ab e5       	ldi	r26, 0x5B	; 91
    146c:	b0 e0       	ldi	r27, 0x00	; 0
    146e:	eb e5       	ldi	r30, 0x5B	; 91
    1470:	f0 e0       	ldi	r31, 0x00	; 0
    1472:	80 81       	ld	r24, Z
    1474:	8f 77       	andi	r24, 0x7F	; 127
    1476:	8c 93       	st	X, r24
}
    1478:	cf 91       	pop	r28
    147a:	df 91       	pop	r29
    147c:	08 95       	ret

0000147e <EXI_VidInt>:
void EXI_VidInt(void)
{
    147e:	df 93       	push	r29
    1480:	cf 93       	push	r28
    1482:	cd b7       	in	r28, 0x3d	; 61
    1484:	de b7       	in	r29, 0x3e	; 62
	DIO_VidSetPinDirection(PORTD,PIN3, INPUT);
    1486:	83 e0       	ldi	r24, 0x03	; 3
    1488:	63 e0       	ldi	r22, 0x03	; 3
    148a:	40 e0       	ldi	r20, 0x00	; 0
    148c:	0e 94 a4 06 	call	0xd48	; 0xd48 <DIO_VidSetPinDirection>
	DIO_VidSetPinValue(PORTD,PIN3, 1);
    1490:	83 e0       	ldi	r24, 0x03	; 3
    1492:	63 e0       	ldi	r22, 0x03	; 3
    1494:	41 e0       	ldi	r20, 0x01	; 1
    1496:	0e 94 a4 07 	call	0xf48	; 0xf48 <DIO_VidSetPinValue>
	#if control_sens==falling
			CLR_BIT(MCUCR,ISC00);
			SET_BIT(MCUCR,ISC01);
	#elif control_sens==rising
			SET_BIT(MCUCR,ISC00);
    149a:	a5 e5       	ldi	r26, 0x55	; 85
    149c:	b0 e0       	ldi	r27, 0x00	; 0
    149e:	e5 e5       	ldi	r30, 0x55	; 85
    14a0:	f0 e0       	ldi	r31, 0x00	; 0
    14a2:	80 81       	ld	r24, Z
    14a4:	81 60       	ori	r24, 0x01	; 1
    14a6:	8c 93       	st	X, r24
			SET_BIT(MCUCR,ISC01);
    14a8:	a5 e5       	ldi	r26, 0x55	; 85
    14aa:	b0 e0       	ldi	r27, 0x00	; 0
    14ac:	e5 e5       	ldi	r30, 0x55	; 85
    14ae:	f0 e0       	ldi	r31, 0x00	; 0
    14b0:	80 81       	ld	r24, Z
    14b2:	82 60       	ori	r24, 0x02	; 2
    14b4:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,ISC01);
	#else
		#error  "wrong choice"
	#endif

}
    14b6:	cf 91       	pop	r28
    14b8:	df 91       	pop	r29
    14ba:	08 95       	ret

000014bc <__vector_2>:


ISR (INT1_VECT)
{
    14bc:	1f 92       	push	r1
    14be:	0f 92       	push	r0
    14c0:	0f b6       	in	r0, 0x3f	; 63
    14c2:	0f 92       	push	r0
    14c4:	11 24       	eor	r1, r1
    14c6:	2f 93       	push	r18
    14c8:	3f 93       	push	r19
    14ca:	4f 93       	push	r20
    14cc:	5f 93       	push	r21
    14ce:	6f 93       	push	r22
    14d0:	7f 93       	push	r23
    14d2:	8f 93       	push	r24
    14d4:	9f 93       	push	r25
    14d6:	af 93       	push	r26
    14d8:	bf 93       	push	r27
    14da:	ef 93       	push	r30
    14dc:	ff 93       	push	r31
    14de:	df 93       	push	r29
    14e0:	cf 93       	push	r28
    14e2:	cd b7       	in	r28, 0x3d	; 61
    14e4:	de b7       	in	r29, 0x3e	; 62
    14e6:	2e 97       	sbiw	r28, 0x0e	; 14
    14e8:	de bf       	out	0x3e, r29	; 62
    14ea:	cd bf       	out	0x3d, r28	; 61
		DIO_VidSetPinValue(PORTA,PIN0,1);
    14ec:	80 e0       	ldi	r24, 0x00	; 0
    14ee:	60 e0       	ldi	r22, 0x00	; 0
    14f0:	41 e0       	ldi	r20, 0x01	; 1
    14f2:	0e 94 a4 07 	call	0xf48	; 0xf48 <DIO_VidSetPinValue>
    14f6:	80 e0       	ldi	r24, 0x00	; 0
    14f8:	90 e0       	ldi	r25, 0x00	; 0
    14fa:	aa e7       	ldi	r26, 0x7A	; 122
    14fc:	b5 e4       	ldi	r27, 0x45	; 69
    14fe:	8b 87       	std	Y+11, r24	; 0x0b
    1500:	9c 87       	std	Y+12, r25	; 0x0c
    1502:	ad 87       	std	Y+13, r26	; 0x0d
    1504:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1506:	6b 85       	ldd	r22, Y+11	; 0x0b
    1508:	7c 85       	ldd	r23, Y+12	; 0x0c
    150a:	8d 85       	ldd	r24, Y+13	; 0x0d
    150c:	9e 85       	ldd	r25, Y+14	; 0x0e
    150e:	20 e0       	ldi	r18, 0x00	; 0
    1510:	30 e0       	ldi	r19, 0x00	; 0
    1512:	4a ef       	ldi	r20, 0xFA	; 250
    1514:	54 e4       	ldi	r21, 0x44	; 68
    1516:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    151a:	dc 01       	movw	r26, r24
    151c:	cb 01       	movw	r24, r22
    151e:	8f 83       	std	Y+7, r24	; 0x07
    1520:	98 87       	std	Y+8, r25	; 0x08
    1522:	a9 87       	std	Y+9, r26	; 0x09
    1524:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1526:	6f 81       	ldd	r22, Y+7	; 0x07
    1528:	78 85       	ldd	r23, Y+8	; 0x08
    152a:	89 85       	ldd	r24, Y+9	; 0x09
    152c:	9a 85       	ldd	r25, Y+10	; 0x0a
    152e:	20 e0       	ldi	r18, 0x00	; 0
    1530:	30 e0       	ldi	r19, 0x00	; 0
    1532:	40 e8       	ldi	r20, 0x80	; 128
    1534:	5f e3       	ldi	r21, 0x3F	; 63
    1536:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    153a:	88 23       	and	r24, r24
    153c:	2c f4       	brge	.+10     	; 0x1548 <__vector_2+0x8c>
		__ticks = 1;
    153e:	81 e0       	ldi	r24, 0x01	; 1
    1540:	90 e0       	ldi	r25, 0x00	; 0
    1542:	9e 83       	std	Y+6, r25	; 0x06
    1544:	8d 83       	std	Y+5, r24	; 0x05
    1546:	3f c0       	rjmp	.+126    	; 0x15c6 <__vector_2+0x10a>
	else if (__tmp > 65535)
    1548:	6f 81       	ldd	r22, Y+7	; 0x07
    154a:	78 85       	ldd	r23, Y+8	; 0x08
    154c:	89 85       	ldd	r24, Y+9	; 0x09
    154e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1550:	20 e0       	ldi	r18, 0x00	; 0
    1552:	3f ef       	ldi	r19, 0xFF	; 255
    1554:	4f e7       	ldi	r20, 0x7F	; 127
    1556:	57 e4       	ldi	r21, 0x47	; 71
    1558:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    155c:	18 16       	cp	r1, r24
    155e:	4c f5       	brge	.+82     	; 0x15b2 <__vector_2+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1560:	6b 85       	ldd	r22, Y+11	; 0x0b
    1562:	7c 85       	ldd	r23, Y+12	; 0x0c
    1564:	8d 85       	ldd	r24, Y+13	; 0x0d
    1566:	9e 85       	ldd	r25, Y+14	; 0x0e
    1568:	20 e0       	ldi	r18, 0x00	; 0
    156a:	30 e0       	ldi	r19, 0x00	; 0
    156c:	40 e2       	ldi	r20, 0x20	; 32
    156e:	51 e4       	ldi	r21, 0x41	; 65
    1570:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1574:	dc 01       	movw	r26, r24
    1576:	cb 01       	movw	r24, r22
    1578:	bc 01       	movw	r22, r24
    157a:	cd 01       	movw	r24, r26
    157c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1580:	dc 01       	movw	r26, r24
    1582:	cb 01       	movw	r24, r22
    1584:	9e 83       	std	Y+6, r25	; 0x06
    1586:	8d 83       	std	Y+5, r24	; 0x05
    1588:	0f c0       	rjmp	.+30     	; 0x15a8 <__vector_2+0xec>
    158a:	88 ec       	ldi	r24, 0xC8	; 200
    158c:	90 e0       	ldi	r25, 0x00	; 0
    158e:	9c 83       	std	Y+4, r25	; 0x04
    1590:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1592:	8b 81       	ldd	r24, Y+3	; 0x03
    1594:	9c 81       	ldd	r25, Y+4	; 0x04
    1596:	01 97       	sbiw	r24, 0x01	; 1
    1598:	f1 f7       	brne	.-4      	; 0x1596 <__vector_2+0xda>
    159a:	9c 83       	std	Y+4, r25	; 0x04
    159c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    159e:	8d 81       	ldd	r24, Y+5	; 0x05
    15a0:	9e 81       	ldd	r25, Y+6	; 0x06
    15a2:	01 97       	sbiw	r24, 0x01	; 1
    15a4:	9e 83       	std	Y+6, r25	; 0x06
    15a6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15a8:	8d 81       	ldd	r24, Y+5	; 0x05
    15aa:	9e 81       	ldd	r25, Y+6	; 0x06
    15ac:	00 97       	sbiw	r24, 0x00	; 0
    15ae:	69 f7       	brne	.-38     	; 0x158a <__vector_2+0xce>
    15b0:	14 c0       	rjmp	.+40     	; 0x15da <__vector_2+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15b2:	6f 81       	ldd	r22, Y+7	; 0x07
    15b4:	78 85       	ldd	r23, Y+8	; 0x08
    15b6:	89 85       	ldd	r24, Y+9	; 0x09
    15b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    15ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15be:	dc 01       	movw	r26, r24
    15c0:	cb 01       	movw	r24, r22
    15c2:	9e 83       	std	Y+6, r25	; 0x06
    15c4:	8d 83       	std	Y+5, r24	; 0x05
    15c6:	8d 81       	ldd	r24, Y+5	; 0x05
    15c8:	9e 81       	ldd	r25, Y+6	; 0x06
    15ca:	9a 83       	std	Y+2, r25	; 0x02
    15cc:	89 83       	std	Y+1, r24	; 0x01
    15ce:	89 81       	ldd	r24, Y+1	; 0x01
    15d0:	9a 81       	ldd	r25, Y+2	; 0x02
    15d2:	01 97       	sbiw	r24, 0x01	; 1
    15d4:	f1 f7       	brne	.-4      	; 0x15d2 <__vector_2+0x116>
    15d6:	9a 83       	std	Y+2, r25	; 0x02
    15d8:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(4000);
}
    15da:	2e 96       	adiw	r28, 0x0e	; 14
    15dc:	de bf       	out	0x3e, r29	; 62
    15de:	cd bf       	out	0x3d, r28	; 61
    15e0:	cf 91       	pop	r28
    15e2:	df 91       	pop	r29
    15e4:	ff 91       	pop	r31
    15e6:	ef 91       	pop	r30
    15e8:	bf 91       	pop	r27
    15ea:	af 91       	pop	r26
    15ec:	9f 91       	pop	r25
    15ee:	8f 91       	pop	r24
    15f0:	7f 91       	pop	r23
    15f2:	6f 91       	pop	r22
    15f4:	5f 91       	pop	r21
    15f6:	4f 91       	pop	r20
    15f8:	3f 91       	pop	r19
    15fa:	2f 91       	pop	r18
    15fc:	0f 90       	pop	r0
    15fe:	0f be       	out	0x3f, r0	; 63
    1600:	0f 90       	pop	r0
    1602:	1f 90       	pop	r1
    1604:	18 95       	reti

00001606 <GIE_Enable>:
#include "GIE_Regster.h"
#include "BIT_MATH.h"

void GIE_Enable(void)

{
    1606:	df 93       	push	r29
    1608:	cf 93       	push	r28
    160a:	cd b7       	in	r28, 0x3d	; 61
    160c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,7);
    160e:	af e5       	ldi	r26, 0x5F	; 95
    1610:	b0 e0       	ldi	r27, 0x00	; 0
    1612:	ef e5       	ldi	r30, 0x5F	; 95
    1614:	f0 e0       	ldi	r31, 0x00	; 0
    1616:	80 81       	ld	r24, Z
    1618:	80 68       	ori	r24, 0x80	; 128
    161a:	8c 93       	st	X, r24
}
    161c:	cf 91       	pop	r28
    161e:	df 91       	pop	r29
    1620:	08 95       	ret

00001622 <GIE_Disable>:

void GIE_Disable(void)
{
    1622:	df 93       	push	r29
    1624:	cf 93       	push	r28
    1626:	cd b7       	in	r28, 0x3d	; 61
    1628:	de b7       	in	r29, 0x3e	; 62
    CLR_BIT(SREG,INT0);
    162a:	af e5       	ldi	r26, 0x5F	; 95
    162c:	b0 e0       	ldi	r27, 0x00	; 0
    162e:	ef e5       	ldi	r30, 0x5F	; 95
    1630:	f0 e0       	ldi	r31, 0x00	; 0
    1632:	80 81       	ld	r24, Z
    1634:	8f 7b       	andi	r24, 0xBF	; 191
    1636:	8c 93       	st	X, r24
}
    1638:	cf 91       	pop	r28
    163a:	df 91       	pop	r29
    163c:	08 95       	ret

0000163e <LCD_Vid4Initialization>:
#include "avr/delay.h"

static u8 InitStepFinishid= 0;

void LCD_Vid4Initialization(void)
{
    163e:	df 93       	push	r29
    1640:	cf 93       	push	r28
    1642:	cd b7       	in	r28, 0x3d	; 61
    1644:	de b7       	in	r29, 0x3e	; 62
    1646:	e8 97       	sbiw	r28, 0x38	; 56
    1648:	0f b6       	in	r0, 0x3f	; 63
    164a:	f8 94       	cli
    164c:	de bf       	out	0x3e, r29	; 62
    164e:	0f be       	out	0x3f, r0	; 63
    1650:	cd bf       	out	0x3d, r28	; 61
	DIO_VidSetPortDirection(LCD_PORT, 0xff);
    1652:	80 e0       	ldi	r24, 0x00	; 0
    1654:	6f ef       	ldi	r22, 0xFF	; 255
    1656:	0e 94 a4 08 	call	0x1148	; 0x1148 <DIO_VidSetPortDirection>
	DIO_VidSetPinDirection(LCD_INIT,LCD_RS,1);   //RS
    165a:	83 e0       	ldi	r24, 0x03	; 3
    165c:	60 e0       	ldi	r22, 0x00	; 0
    165e:	41 e0       	ldi	r20, 0x01	; 1
    1660:	0e 94 a4 06 	call	0xd48	; 0xd48 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(LCD_INIT,LCD_RW,1);   //RW
    1664:	83 e0       	ldi	r24, 0x03	; 3
    1666:	61 e0       	ldi	r22, 0x01	; 1
    1668:	41 e0       	ldi	r20, 0x01	; 1
    166a:	0e 94 a4 06 	call	0xd48	; 0xd48 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(LCD_INIT,LCD_EN,1);   //EN
    166e:	83 e0       	ldi	r24, 0x03	; 3
    1670:	62 e0       	ldi	r22, 0x02	; 2
    1672:	41 e0       	ldi	r20, 0x01	; 1
    1674:	0e 94 a4 06 	call	0xd48	; 0xd48 <DIO_VidSetPinDirection>
    1678:	80 e0       	ldi	r24, 0x00	; 0
    167a:	90 e0       	ldi	r25, 0x00	; 0
    167c:	a8 e4       	ldi	r26, 0x48	; 72
    167e:	b2 e4       	ldi	r27, 0x42	; 66
    1680:	8d ab       	std	Y+53, r24	; 0x35
    1682:	9e ab       	std	Y+54, r25	; 0x36
    1684:	af ab       	std	Y+55, r26	; 0x37
    1686:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1688:	6d a9       	ldd	r22, Y+53	; 0x35
    168a:	7e a9       	ldd	r23, Y+54	; 0x36
    168c:	8f a9       	ldd	r24, Y+55	; 0x37
    168e:	98 ad       	ldd	r25, Y+56	; 0x38
    1690:	20 e0       	ldi	r18, 0x00	; 0
    1692:	30 e0       	ldi	r19, 0x00	; 0
    1694:	4a ef       	ldi	r20, 0xFA	; 250
    1696:	54 e4       	ldi	r21, 0x44	; 68
    1698:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    169c:	dc 01       	movw	r26, r24
    169e:	cb 01       	movw	r24, r22
    16a0:	89 ab       	std	Y+49, r24	; 0x31
    16a2:	9a ab       	std	Y+50, r25	; 0x32
    16a4:	ab ab       	std	Y+51, r26	; 0x33
    16a6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    16a8:	69 a9       	ldd	r22, Y+49	; 0x31
    16aa:	7a a9       	ldd	r23, Y+50	; 0x32
    16ac:	8b a9       	ldd	r24, Y+51	; 0x33
    16ae:	9c a9       	ldd	r25, Y+52	; 0x34
    16b0:	20 e0       	ldi	r18, 0x00	; 0
    16b2:	30 e0       	ldi	r19, 0x00	; 0
    16b4:	40 e8       	ldi	r20, 0x80	; 128
    16b6:	5f e3       	ldi	r21, 0x3F	; 63
    16b8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16bc:	88 23       	and	r24, r24
    16be:	2c f4       	brge	.+10     	; 0x16ca <LCD_Vid4Initialization+0x8c>
		__ticks = 1;
    16c0:	81 e0       	ldi	r24, 0x01	; 1
    16c2:	90 e0       	ldi	r25, 0x00	; 0
    16c4:	98 ab       	std	Y+48, r25	; 0x30
    16c6:	8f a7       	std	Y+47, r24	; 0x2f
    16c8:	3f c0       	rjmp	.+126    	; 0x1748 <LCD_Vid4Initialization+0x10a>
	else if (__tmp > 65535)
    16ca:	69 a9       	ldd	r22, Y+49	; 0x31
    16cc:	7a a9       	ldd	r23, Y+50	; 0x32
    16ce:	8b a9       	ldd	r24, Y+51	; 0x33
    16d0:	9c a9       	ldd	r25, Y+52	; 0x34
    16d2:	20 e0       	ldi	r18, 0x00	; 0
    16d4:	3f ef       	ldi	r19, 0xFF	; 255
    16d6:	4f e7       	ldi	r20, 0x7F	; 127
    16d8:	57 e4       	ldi	r21, 0x47	; 71
    16da:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16de:	18 16       	cp	r1, r24
    16e0:	4c f5       	brge	.+82     	; 0x1734 <LCD_Vid4Initialization+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16e2:	6d a9       	ldd	r22, Y+53	; 0x35
    16e4:	7e a9       	ldd	r23, Y+54	; 0x36
    16e6:	8f a9       	ldd	r24, Y+55	; 0x37
    16e8:	98 ad       	ldd	r25, Y+56	; 0x38
    16ea:	20 e0       	ldi	r18, 0x00	; 0
    16ec:	30 e0       	ldi	r19, 0x00	; 0
    16ee:	40 e2       	ldi	r20, 0x20	; 32
    16f0:	51 e4       	ldi	r21, 0x41	; 65
    16f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16f6:	dc 01       	movw	r26, r24
    16f8:	cb 01       	movw	r24, r22
    16fa:	bc 01       	movw	r22, r24
    16fc:	cd 01       	movw	r24, r26
    16fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1702:	dc 01       	movw	r26, r24
    1704:	cb 01       	movw	r24, r22
    1706:	98 ab       	std	Y+48, r25	; 0x30
    1708:	8f a7       	std	Y+47, r24	; 0x2f
    170a:	0f c0       	rjmp	.+30     	; 0x172a <LCD_Vid4Initialization+0xec>
    170c:	88 ec       	ldi	r24, 0xC8	; 200
    170e:	90 e0       	ldi	r25, 0x00	; 0
    1710:	9e a7       	std	Y+46, r25	; 0x2e
    1712:	8d a7       	std	Y+45, r24	; 0x2d
    1714:	8d a5       	ldd	r24, Y+45	; 0x2d
    1716:	9e a5       	ldd	r25, Y+46	; 0x2e
    1718:	01 97       	sbiw	r24, 0x01	; 1
    171a:	f1 f7       	brne	.-4      	; 0x1718 <LCD_Vid4Initialization+0xda>
    171c:	9e a7       	std	Y+46, r25	; 0x2e
    171e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1720:	8f a5       	ldd	r24, Y+47	; 0x2f
    1722:	98 a9       	ldd	r25, Y+48	; 0x30
    1724:	01 97       	sbiw	r24, 0x01	; 1
    1726:	98 ab       	std	Y+48, r25	; 0x30
    1728:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    172a:	8f a5       	ldd	r24, Y+47	; 0x2f
    172c:	98 a9       	ldd	r25, Y+48	; 0x30
    172e:	00 97       	sbiw	r24, 0x00	; 0
    1730:	69 f7       	brne	.-38     	; 0x170c <LCD_Vid4Initialization+0xce>
    1732:	14 c0       	rjmp	.+40     	; 0x175c <LCD_Vid4Initialization+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1734:	69 a9       	ldd	r22, Y+49	; 0x31
    1736:	7a a9       	ldd	r23, Y+50	; 0x32
    1738:	8b a9       	ldd	r24, Y+51	; 0x33
    173a:	9c a9       	ldd	r25, Y+52	; 0x34
    173c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1740:	dc 01       	movw	r26, r24
    1742:	cb 01       	movw	r24, r22
    1744:	98 ab       	std	Y+48, r25	; 0x30
    1746:	8f a7       	std	Y+47, r24	; 0x2f
    1748:	8f a5       	ldd	r24, Y+47	; 0x2f
    174a:	98 a9       	ldd	r25, Y+48	; 0x30
    174c:	9c a7       	std	Y+44, r25	; 0x2c
    174e:	8b a7       	std	Y+43, r24	; 0x2b
    1750:	8b a5       	ldd	r24, Y+43	; 0x2b
    1752:	9c a5       	ldd	r25, Y+44	; 0x2c
    1754:	01 97       	sbiw	r24, 0x01	; 1
    1756:	f1 f7       	brne	.-4      	; 0x1754 <LCD_Vid4Initialization+0x116>
    1758:	9c a7       	std	Y+44, r25	; 0x2c
    175a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(50); // wait for LCD to initialize

	LCD_VidWrite4Cmd(0x20);
    175c:	80 e2       	ldi	r24, 0x20	; 32
    175e:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <LCD_VidWrite4Cmd>
	LCD_VidWrite4Cmd(0x20);
    1762:	80 e2       	ldi	r24, 0x20	; 32
    1764:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <LCD_VidWrite4Cmd>
	LCD_VidWrite4Cmd(0x80);
    1768:	80 e8       	ldi	r24, 0x80	; 128
    176a:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <LCD_VidWrite4Cmd>
    176e:	80 e0       	ldi	r24, 0x00	; 0
    1770:	90 e0       	ldi	r25, 0x00	; 0
    1772:	a0 e0       	ldi	r26, 0x00	; 0
    1774:	b0 e4       	ldi	r27, 0x40	; 64
    1776:	8f a3       	std	Y+39, r24	; 0x27
    1778:	98 a7       	std	Y+40, r25	; 0x28
    177a:	a9 a7       	std	Y+41, r26	; 0x29
    177c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    177e:	6f a1       	ldd	r22, Y+39	; 0x27
    1780:	78 a5       	ldd	r23, Y+40	; 0x28
    1782:	89 a5       	ldd	r24, Y+41	; 0x29
    1784:	9a a5       	ldd	r25, Y+42	; 0x2a
    1786:	20 e0       	ldi	r18, 0x00	; 0
    1788:	30 e0       	ldi	r19, 0x00	; 0
    178a:	4a ef       	ldi	r20, 0xFA	; 250
    178c:	54 e4       	ldi	r21, 0x44	; 68
    178e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1792:	dc 01       	movw	r26, r24
    1794:	cb 01       	movw	r24, r22
    1796:	8b a3       	std	Y+35, r24	; 0x23
    1798:	9c a3       	std	Y+36, r25	; 0x24
    179a:	ad a3       	std	Y+37, r26	; 0x25
    179c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    179e:	6b a1       	ldd	r22, Y+35	; 0x23
    17a0:	7c a1       	ldd	r23, Y+36	; 0x24
    17a2:	8d a1       	ldd	r24, Y+37	; 0x25
    17a4:	9e a1       	ldd	r25, Y+38	; 0x26
    17a6:	20 e0       	ldi	r18, 0x00	; 0
    17a8:	30 e0       	ldi	r19, 0x00	; 0
    17aa:	40 e8       	ldi	r20, 0x80	; 128
    17ac:	5f e3       	ldi	r21, 0x3F	; 63
    17ae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17b2:	88 23       	and	r24, r24
    17b4:	2c f4       	brge	.+10     	; 0x17c0 <LCD_Vid4Initialization+0x182>
		__ticks = 1;
    17b6:	81 e0       	ldi	r24, 0x01	; 1
    17b8:	90 e0       	ldi	r25, 0x00	; 0
    17ba:	9a a3       	std	Y+34, r25	; 0x22
    17bc:	89 a3       	std	Y+33, r24	; 0x21
    17be:	3f c0       	rjmp	.+126    	; 0x183e <LCD_Vid4Initialization+0x200>
	else if (__tmp > 65535)
    17c0:	6b a1       	ldd	r22, Y+35	; 0x23
    17c2:	7c a1       	ldd	r23, Y+36	; 0x24
    17c4:	8d a1       	ldd	r24, Y+37	; 0x25
    17c6:	9e a1       	ldd	r25, Y+38	; 0x26
    17c8:	20 e0       	ldi	r18, 0x00	; 0
    17ca:	3f ef       	ldi	r19, 0xFF	; 255
    17cc:	4f e7       	ldi	r20, 0x7F	; 127
    17ce:	57 e4       	ldi	r21, 0x47	; 71
    17d0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17d4:	18 16       	cp	r1, r24
    17d6:	4c f5       	brge	.+82     	; 0x182a <LCD_Vid4Initialization+0x1ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17d8:	6f a1       	ldd	r22, Y+39	; 0x27
    17da:	78 a5       	ldd	r23, Y+40	; 0x28
    17dc:	89 a5       	ldd	r24, Y+41	; 0x29
    17de:	9a a5       	ldd	r25, Y+42	; 0x2a
    17e0:	20 e0       	ldi	r18, 0x00	; 0
    17e2:	30 e0       	ldi	r19, 0x00	; 0
    17e4:	40 e2       	ldi	r20, 0x20	; 32
    17e6:	51 e4       	ldi	r21, 0x41	; 65
    17e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17ec:	dc 01       	movw	r26, r24
    17ee:	cb 01       	movw	r24, r22
    17f0:	bc 01       	movw	r22, r24
    17f2:	cd 01       	movw	r24, r26
    17f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17f8:	dc 01       	movw	r26, r24
    17fa:	cb 01       	movw	r24, r22
    17fc:	9a a3       	std	Y+34, r25	; 0x22
    17fe:	89 a3       	std	Y+33, r24	; 0x21
    1800:	0f c0       	rjmp	.+30     	; 0x1820 <LCD_Vid4Initialization+0x1e2>
    1802:	88 ec       	ldi	r24, 0xC8	; 200
    1804:	90 e0       	ldi	r25, 0x00	; 0
    1806:	98 a3       	std	Y+32, r25	; 0x20
    1808:	8f 8f       	std	Y+31, r24	; 0x1f
    180a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    180c:	98 a1       	ldd	r25, Y+32	; 0x20
    180e:	01 97       	sbiw	r24, 0x01	; 1
    1810:	f1 f7       	brne	.-4      	; 0x180e <LCD_Vid4Initialization+0x1d0>
    1812:	98 a3       	std	Y+32, r25	; 0x20
    1814:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1816:	89 a1       	ldd	r24, Y+33	; 0x21
    1818:	9a a1       	ldd	r25, Y+34	; 0x22
    181a:	01 97       	sbiw	r24, 0x01	; 1
    181c:	9a a3       	std	Y+34, r25	; 0x22
    181e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1820:	89 a1       	ldd	r24, Y+33	; 0x21
    1822:	9a a1       	ldd	r25, Y+34	; 0x22
    1824:	00 97       	sbiw	r24, 0x00	; 0
    1826:	69 f7       	brne	.-38     	; 0x1802 <LCD_Vid4Initialization+0x1c4>
    1828:	14 c0       	rjmp	.+40     	; 0x1852 <LCD_Vid4Initialization+0x214>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    182a:	6b a1       	ldd	r22, Y+35	; 0x23
    182c:	7c a1       	ldd	r23, Y+36	; 0x24
    182e:	8d a1       	ldd	r24, Y+37	; 0x25
    1830:	9e a1       	ldd	r25, Y+38	; 0x26
    1832:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1836:	dc 01       	movw	r26, r24
    1838:	cb 01       	movw	r24, r22
    183a:	9a a3       	std	Y+34, r25	; 0x22
    183c:	89 a3       	std	Y+33, r24	; 0x21
    183e:	89 a1       	ldd	r24, Y+33	; 0x21
    1840:	9a a1       	ldd	r25, Y+34	; 0x22
    1842:	9e 8f       	std	Y+30, r25	; 0x1e
    1844:	8d 8f       	std	Y+29, r24	; 0x1d
    1846:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1848:	9e 8d       	ldd	r25, Y+30	; 0x1e
    184a:	01 97       	sbiw	r24, 0x01	; 1
    184c:	f1 f7       	brne	.-4      	; 0x184a <LCD_Vid4Initialization+0x20c>
    184e:	9e 8f       	std	Y+30, r25	; 0x1e
    1850:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);
	LCD_VidWrite4Cmd(0x00);
    1852:	80 e0       	ldi	r24, 0x00	; 0
    1854:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <LCD_VidWrite4Cmd>
	LCD_VidWrite4Cmd(0xC0);
    1858:	80 ec       	ldi	r24, 0xC0	; 192
    185a:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <LCD_VidWrite4Cmd>
    185e:	80 e0       	ldi	r24, 0x00	; 0
    1860:	90 e0       	ldi	r25, 0x00	; 0
    1862:	a0 e8       	ldi	r26, 0x80	; 128
    1864:	bf e3       	ldi	r27, 0x3F	; 63
    1866:	89 8f       	std	Y+25, r24	; 0x19
    1868:	9a 8f       	std	Y+26, r25	; 0x1a
    186a:	ab 8f       	std	Y+27, r26	; 0x1b
    186c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    186e:	69 8d       	ldd	r22, Y+25	; 0x19
    1870:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1872:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1874:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1876:	20 e0       	ldi	r18, 0x00	; 0
    1878:	30 e0       	ldi	r19, 0x00	; 0
    187a:	4a ef       	ldi	r20, 0xFA	; 250
    187c:	54 e4       	ldi	r21, 0x44	; 68
    187e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1882:	dc 01       	movw	r26, r24
    1884:	cb 01       	movw	r24, r22
    1886:	8d 8b       	std	Y+21, r24	; 0x15
    1888:	9e 8b       	std	Y+22, r25	; 0x16
    188a:	af 8b       	std	Y+23, r26	; 0x17
    188c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    188e:	6d 89       	ldd	r22, Y+21	; 0x15
    1890:	7e 89       	ldd	r23, Y+22	; 0x16
    1892:	8f 89       	ldd	r24, Y+23	; 0x17
    1894:	98 8d       	ldd	r25, Y+24	; 0x18
    1896:	20 e0       	ldi	r18, 0x00	; 0
    1898:	30 e0       	ldi	r19, 0x00	; 0
    189a:	40 e8       	ldi	r20, 0x80	; 128
    189c:	5f e3       	ldi	r21, 0x3F	; 63
    189e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18a2:	88 23       	and	r24, r24
    18a4:	2c f4       	brge	.+10     	; 0x18b0 <LCD_Vid4Initialization+0x272>
		__ticks = 1;
    18a6:	81 e0       	ldi	r24, 0x01	; 1
    18a8:	90 e0       	ldi	r25, 0x00	; 0
    18aa:	9c 8b       	std	Y+20, r25	; 0x14
    18ac:	8b 8b       	std	Y+19, r24	; 0x13
    18ae:	3f c0       	rjmp	.+126    	; 0x192e <LCD_Vid4Initialization+0x2f0>
	else if (__tmp > 65535)
    18b0:	6d 89       	ldd	r22, Y+21	; 0x15
    18b2:	7e 89       	ldd	r23, Y+22	; 0x16
    18b4:	8f 89       	ldd	r24, Y+23	; 0x17
    18b6:	98 8d       	ldd	r25, Y+24	; 0x18
    18b8:	20 e0       	ldi	r18, 0x00	; 0
    18ba:	3f ef       	ldi	r19, 0xFF	; 255
    18bc:	4f e7       	ldi	r20, 0x7F	; 127
    18be:	57 e4       	ldi	r21, 0x47	; 71
    18c0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18c4:	18 16       	cp	r1, r24
    18c6:	4c f5       	brge	.+82     	; 0x191a <LCD_Vid4Initialization+0x2dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18c8:	69 8d       	ldd	r22, Y+25	; 0x19
    18ca:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18cc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18ce:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18d0:	20 e0       	ldi	r18, 0x00	; 0
    18d2:	30 e0       	ldi	r19, 0x00	; 0
    18d4:	40 e2       	ldi	r20, 0x20	; 32
    18d6:	51 e4       	ldi	r21, 0x41	; 65
    18d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18dc:	dc 01       	movw	r26, r24
    18de:	cb 01       	movw	r24, r22
    18e0:	bc 01       	movw	r22, r24
    18e2:	cd 01       	movw	r24, r26
    18e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18e8:	dc 01       	movw	r26, r24
    18ea:	cb 01       	movw	r24, r22
    18ec:	9c 8b       	std	Y+20, r25	; 0x14
    18ee:	8b 8b       	std	Y+19, r24	; 0x13
    18f0:	0f c0       	rjmp	.+30     	; 0x1910 <LCD_Vid4Initialization+0x2d2>
    18f2:	88 ec       	ldi	r24, 0xC8	; 200
    18f4:	90 e0       	ldi	r25, 0x00	; 0
    18f6:	9a 8b       	std	Y+18, r25	; 0x12
    18f8:	89 8b       	std	Y+17, r24	; 0x11
    18fa:	89 89       	ldd	r24, Y+17	; 0x11
    18fc:	9a 89       	ldd	r25, Y+18	; 0x12
    18fe:	01 97       	sbiw	r24, 0x01	; 1
    1900:	f1 f7       	brne	.-4      	; 0x18fe <LCD_Vid4Initialization+0x2c0>
    1902:	9a 8b       	std	Y+18, r25	; 0x12
    1904:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1906:	8b 89       	ldd	r24, Y+19	; 0x13
    1908:	9c 89       	ldd	r25, Y+20	; 0x14
    190a:	01 97       	sbiw	r24, 0x01	; 1
    190c:	9c 8b       	std	Y+20, r25	; 0x14
    190e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1910:	8b 89       	ldd	r24, Y+19	; 0x13
    1912:	9c 89       	ldd	r25, Y+20	; 0x14
    1914:	00 97       	sbiw	r24, 0x00	; 0
    1916:	69 f7       	brne	.-38     	; 0x18f2 <LCD_Vid4Initialization+0x2b4>
    1918:	14 c0       	rjmp	.+40     	; 0x1942 <LCD_Vid4Initialization+0x304>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    191a:	6d 89       	ldd	r22, Y+21	; 0x15
    191c:	7e 89       	ldd	r23, Y+22	; 0x16
    191e:	8f 89       	ldd	r24, Y+23	; 0x17
    1920:	98 8d       	ldd	r25, Y+24	; 0x18
    1922:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1926:	dc 01       	movw	r26, r24
    1928:	cb 01       	movw	r24, r22
    192a:	9c 8b       	std	Y+20, r25	; 0x14
    192c:	8b 8b       	std	Y+19, r24	; 0x13
    192e:	8b 89       	ldd	r24, Y+19	; 0x13
    1930:	9c 89       	ldd	r25, Y+20	; 0x14
    1932:	98 8b       	std	Y+16, r25	; 0x10
    1934:	8f 87       	std	Y+15, r24	; 0x0f
    1936:	8f 85       	ldd	r24, Y+15	; 0x0f
    1938:	98 89       	ldd	r25, Y+16	; 0x10
    193a:	01 97       	sbiw	r24, 0x01	; 1
    193c:	f1 f7       	brne	.-4      	; 0x193a <LCD_Vid4Initialization+0x2fc>
    193e:	98 8b       	std	Y+16, r25	; 0x10
    1940:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_VidWrite4Cmd(0x00);
    1942:	80 e0       	ldi	r24, 0x00	; 0
    1944:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <LCD_VidWrite4Cmd>
	LCD_VidWrite4Cmd(0x10);
    1948:	80 e1       	ldi	r24, 0x10	; 16
    194a:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <LCD_VidWrite4Cmd>
    194e:	80 e0       	ldi	r24, 0x00	; 0
    1950:	90 e0       	ldi	r25, 0x00	; 0
    1952:	a0 e0       	ldi	r26, 0x00	; 0
    1954:	b0 e4       	ldi	r27, 0x40	; 64
    1956:	8b 87       	std	Y+11, r24	; 0x0b
    1958:	9c 87       	std	Y+12, r25	; 0x0c
    195a:	ad 87       	std	Y+13, r26	; 0x0d
    195c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    195e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1960:	7c 85       	ldd	r23, Y+12	; 0x0c
    1962:	8d 85       	ldd	r24, Y+13	; 0x0d
    1964:	9e 85       	ldd	r25, Y+14	; 0x0e
    1966:	20 e0       	ldi	r18, 0x00	; 0
    1968:	30 e0       	ldi	r19, 0x00	; 0
    196a:	4a ef       	ldi	r20, 0xFA	; 250
    196c:	54 e4       	ldi	r21, 0x44	; 68
    196e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1972:	dc 01       	movw	r26, r24
    1974:	cb 01       	movw	r24, r22
    1976:	8f 83       	std	Y+7, r24	; 0x07
    1978:	98 87       	std	Y+8, r25	; 0x08
    197a:	a9 87       	std	Y+9, r26	; 0x09
    197c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    197e:	6f 81       	ldd	r22, Y+7	; 0x07
    1980:	78 85       	ldd	r23, Y+8	; 0x08
    1982:	89 85       	ldd	r24, Y+9	; 0x09
    1984:	9a 85       	ldd	r25, Y+10	; 0x0a
    1986:	20 e0       	ldi	r18, 0x00	; 0
    1988:	30 e0       	ldi	r19, 0x00	; 0
    198a:	40 e8       	ldi	r20, 0x80	; 128
    198c:	5f e3       	ldi	r21, 0x3F	; 63
    198e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1992:	88 23       	and	r24, r24
    1994:	2c f4       	brge	.+10     	; 0x19a0 <LCD_Vid4Initialization+0x362>
		__ticks = 1;
    1996:	81 e0       	ldi	r24, 0x01	; 1
    1998:	90 e0       	ldi	r25, 0x00	; 0
    199a:	9e 83       	std	Y+6, r25	; 0x06
    199c:	8d 83       	std	Y+5, r24	; 0x05
    199e:	3f c0       	rjmp	.+126    	; 0x1a1e <LCD_Vid4Initialization+0x3e0>
	else if (__tmp > 65535)
    19a0:	6f 81       	ldd	r22, Y+7	; 0x07
    19a2:	78 85       	ldd	r23, Y+8	; 0x08
    19a4:	89 85       	ldd	r24, Y+9	; 0x09
    19a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    19a8:	20 e0       	ldi	r18, 0x00	; 0
    19aa:	3f ef       	ldi	r19, 0xFF	; 255
    19ac:	4f e7       	ldi	r20, 0x7F	; 127
    19ae:	57 e4       	ldi	r21, 0x47	; 71
    19b0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19b4:	18 16       	cp	r1, r24
    19b6:	4c f5       	brge	.+82     	; 0x1a0a <LCD_Vid4Initialization+0x3cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    19ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    19bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    19be:	9e 85       	ldd	r25, Y+14	; 0x0e
    19c0:	20 e0       	ldi	r18, 0x00	; 0
    19c2:	30 e0       	ldi	r19, 0x00	; 0
    19c4:	40 e2       	ldi	r20, 0x20	; 32
    19c6:	51 e4       	ldi	r21, 0x41	; 65
    19c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19cc:	dc 01       	movw	r26, r24
    19ce:	cb 01       	movw	r24, r22
    19d0:	bc 01       	movw	r22, r24
    19d2:	cd 01       	movw	r24, r26
    19d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19d8:	dc 01       	movw	r26, r24
    19da:	cb 01       	movw	r24, r22
    19dc:	9e 83       	std	Y+6, r25	; 0x06
    19de:	8d 83       	std	Y+5, r24	; 0x05
    19e0:	0f c0       	rjmp	.+30     	; 0x1a00 <LCD_Vid4Initialization+0x3c2>
    19e2:	88 ec       	ldi	r24, 0xC8	; 200
    19e4:	90 e0       	ldi	r25, 0x00	; 0
    19e6:	9c 83       	std	Y+4, r25	; 0x04
    19e8:	8b 83       	std	Y+3, r24	; 0x03
    19ea:	8b 81       	ldd	r24, Y+3	; 0x03
    19ec:	9c 81       	ldd	r25, Y+4	; 0x04
    19ee:	01 97       	sbiw	r24, 0x01	; 1
    19f0:	f1 f7       	brne	.-4      	; 0x19ee <LCD_Vid4Initialization+0x3b0>
    19f2:	9c 83       	std	Y+4, r25	; 0x04
    19f4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19f6:	8d 81       	ldd	r24, Y+5	; 0x05
    19f8:	9e 81       	ldd	r25, Y+6	; 0x06
    19fa:	01 97       	sbiw	r24, 0x01	; 1
    19fc:	9e 83       	std	Y+6, r25	; 0x06
    19fe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a00:	8d 81       	ldd	r24, Y+5	; 0x05
    1a02:	9e 81       	ldd	r25, Y+6	; 0x06
    1a04:	00 97       	sbiw	r24, 0x00	; 0
    1a06:	69 f7       	brne	.-38     	; 0x19e2 <LCD_Vid4Initialization+0x3a4>
    1a08:	14 c0       	rjmp	.+40     	; 0x1a32 <LCD_Vid4Initialization+0x3f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a0a:	6f 81       	ldd	r22, Y+7	; 0x07
    1a0c:	78 85       	ldd	r23, Y+8	; 0x08
    1a0e:	89 85       	ldd	r24, Y+9	; 0x09
    1a10:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a16:	dc 01       	movw	r26, r24
    1a18:	cb 01       	movw	r24, r22
    1a1a:	9e 83       	std	Y+6, r25	; 0x06
    1a1c:	8d 83       	std	Y+5, r24	; 0x05
    1a1e:	8d 81       	ldd	r24, Y+5	; 0x05
    1a20:	9e 81       	ldd	r25, Y+6	; 0x06
    1a22:	9a 83       	std	Y+2, r25	; 0x02
    1a24:	89 83       	std	Y+1, r24	; 0x01
    1a26:	89 81       	ldd	r24, Y+1	; 0x01
    1a28:	9a 81       	ldd	r25, Y+2	; 0x02
    1a2a:	01 97       	sbiw	r24, 0x01	; 1
    1a2c:	f1 f7       	brne	.-4      	; 0x1a2a <LCD_Vid4Initialization+0x3ec>
    1a2e:	9a 83       	std	Y+2, r25	; 0x02
    1a30:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	InitStepFinishid=1;
    1a32:	81 e0       	ldi	r24, 0x01	; 1
    1a34:	80 93 78 00 	sts	0x0078, r24
}
    1a38:	e8 96       	adiw	r28, 0x38	; 56
    1a3a:	0f b6       	in	r0, 0x3f	; 63
    1a3c:	f8 94       	cli
    1a3e:	de bf       	out	0x3e, r29	; 62
    1a40:	0f be       	out	0x3f, r0	; 63
    1a42:	cd bf       	out	0x3d, r28	; 61
    1a44:	cf 91       	pop	r28
    1a46:	df 91       	pop	r29
    1a48:	08 95       	ret

00001a4a <LCD_VidWrite4Cmd>:


void LCD_VidWrite4Cmd(u8 LOC_Cmd)
{
    1a4a:	0f 93       	push	r16
    1a4c:	1f 93       	push	r17
    1a4e:	df 93       	push	r29
    1a50:	cf 93       	push	r28
    1a52:	cd b7       	in	r28, 0x3d	; 61
    1a54:	de b7       	in	r29, 0x3e	; 62
    1a56:	c7 54       	subi	r28, 0x47	; 71
    1a58:	d0 40       	sbci	r29, 0x00	; 0
    1a5a:	0f b6       	in	r0, 0x3f	; 63
    1a5c:	f8 94       	cli
    1a5e:	de bf       	out	0x3e, r29	; 62
    1a60:	0f be       	out	0x3f, r0	; 63
    1a62:	cd bf       	out	0x3d, r28	; 61
    1a64:	fe 01       	movw	r30, r28
    1a66:	e9 5b       	subi	r30, 0xB9	; 185
    1a68:	ff 4f       	sbci	r31, 0xFF	; 255
    1a6a:	80 83       	st	Z, r24
	DIO_VidSetPinValue(LCD_INIT,LCD_RS,0);
    1a6c:	83 e0       	ldi	r24, 0x03	; 3
    1a6e:	60 e0       	ldi	r22, 0x00	; 0
    1a70:	40 e0       	ldi	r20, 0x00	; 0
    1a72:	0e 94 a4 07 	call	0xf48	; 0xf48 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(LCD_INIT,LCD_RW,0);
    1a76:	83 e0       	ldi	r24, 0x03	; 3
    1a78:	61 e0       	ldi	r22, 0x01	; 1
    1a7a:	40 e0       	ldi	r20, 0x00	; 0
    1a7c:	0e 94 a4 07 	call	0xf48	; 0xf48 <DIO_VidSetPinValue>

	DIO_VidSetPinValue(LCD_PORT,PIN4,GET_BIT(LOC_Cmd,4));
    1a80:	fe 01       	movw	r30, r28
    1a82:	e9 5b       	subi	r30, 0xB9	; 185
    1a84:	ff 4f       	sbci	r31, 0xFF	; 255
    1a86:	80 81       	ld	r24, Z
    1a88:	82 95       	swap	r24
    1a8a:	8f 70       	andi	r24, 0x0F	; 15
    1a8c:	98 2f       	mov	r25, r24
    1a8e:	91 70       	andi	r25, 0x01	; 1
    1a90:	80 e0       	ldi	r24, 0x00	; 0
    1a92:	64 e0       	ldi	r22, 0x04	; 4
    1a94:	49 2f       	mov	r20, r25
    1a96:	0e 94 a4 07 	call	0xf48	; 0xf48 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(LCD_PORT,PIN5,GET_BIT(LOC_Cmd,5));
    1a9a:	fe 01       	movw	r30, r28
    1a9c:	e9 5b       	subi	r30, 0xB9	; 185
    1a9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1aa0:	80 81       	ld	r24, Z
    1aa2:	82 95       	swap	r24
    1aa4:	86 95       	lsr	r24
    1aa6:	87 70       	andi	r24, 0x07	; 7
    1aa8:	98 2f       	mov	r25, r24
    1aaa:	91 70       	andi	r25, 0x01	; 1
    1aac:	80 e0       	ldi	r24, 0x00	; 0
    1aae:	65 e0       	ldi	r22, 0x05	; 5
    1ab0:	49 2f       	mov	r20, r25
    1ab2:	0e 94 a4 07 	call	0xf48	; 0xf48 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(LCD_PORT,PIN6,GET_BIT(LOC_Cmd,6));
    1ab6:	fe 01       	movw	r30, r28
    1ab8:	e9 5b       	subi	r30, 0xB9	; 185
    1aba:	ff 4f       	sbci	r31, 0xFF	; 255
    1abc:	80 81       	ld	r24, Z
    1abe:	82 95       	swap	r24
    1ac0:	86 95       	lsr	r24
    1ac2:	86 95       	lsr	r24
    1ac4:	83 70       	andi	r24, 0x03	; 3
    1ac6:	98 2f       	mov	r25, r24
    1ac8:	91 70       	andi	r25, 0x01	; 1
    1aca:	80 e0       	ldi	r24, 0x00	; 0
    1acc:	66 e0       	ldi	r22, 0x06	; 6
    1ace:	49 2f       	mov	r20, r25
    1ad0:	0e 94 a4 07 	call	0xf48	; 0xf48 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(LCD_PORT,PIN7,GET_BIT(LOC_Cmd,7));
    1ad4:	fe 01       	movw	r30, r28
    1ad6:	e9 5b       	subi	r30, 0xB9	; 185
    1ad8:	ff 4f       	sbci	r31, 0xFF	; 255
    1ada:	80 81       	ld	r24, Z
    1adc:	98 2f       	mov	r25, r24
    1ade:	99 1f       	adc	r25, r25
    1ae0:	99 27       	eor	r25, r25
    1ae2:	99 1f       	adc	r25, r25
    1ae4:	80 e0       	ldi	r24, 0x00	; 0
    1ae6:	67 e0       	ldi	r22, 0x07	; 7
    1ae8:	49 2f       	mov	r20, r25
    1aea:	0e 94 a4 07 	call	0xf48	; 0xf48 <DIO_VidSetPinValue>

	DIO_VidSetPinValue(LCD_INIT,LCD_EN,1);
    1aee:	83 e0       	ldi	r24, 0x03	; 3
    1af0:	62 e0       	ldi	r22, 0x02	; 2
    1af2:	41 e0       	ldi	r20, 0x01	; 1
    1af4:	0e 94 a4 07 	call	0xf48	; 0xf48 <DIO_VidSetPinValue>
    1af8:	fe 01       	movw	r30, r28
    1afa:	ed 5b       	subi	r30, 0xBD	; 189
    1afc:	ff 4f       	sbci	r31, 0xFF	; 255
    1afe:	80 e0       	ldi	r24, 0x00	; 0
    1b00:	90 e0       	ldi	r25, 0x00	; 0
    1b02:	a0 e8       	ldi	r26, 0x80	; 128
    1b04:	bf e3       	ldi	r27, 0x3F	; 63
    1b06:	80 83       	st	Z, r24
    1b08:	91 83       	std	Z+1, r25	; 0x01
    1b0a:	a2 83       	std	Z+2, r26	; 0x02
    1b0c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b0e:	8e 01       	movw	r16, r28
    1b10:	01 5c       	subi	r16, 0xC1	; 193
    1b12:	1f 4f       	sbci	r17, 0xFF	; 255
    1b14:	fe 01       	movw	r30, r28
    1b16:	ed 5b       	subi	r30, 0xBD	; 189
    1b18:	ff 4f       	sbci	r31, 0xFF	; 255
    1b1a:	60 81       	ld	r22, Z
    1b1c:	71 81       	ldd	r23, Z+1	; 0x01
    1b1e:	82 81       	ldd	r24, Z+2	; 0x02
    1b20:	93 81       	ldd	r25, Z+3	; 0x03
    1b22:	20 e0       	ldi	r18, 0x00	; 0
    1b24:	30 e0       	ldi	r19, 0x00	; 0
    1b26:	4a ef       	ldi	r20, 0xFA	; 250
    1b28:	54 e4       	ldi	r21, 0x44	; 68
    1b2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b2e:	dc 01       	movw	r26, r24
    1b30:	cb 01       	movw	r24, r22
    1b32:	f8 01       	movw	r30, r16
    1b34:	80 83       	st	Z, r24
    1b36:	91 83       	std	Z+1, r25	; 0x01
    1b38:	a2 83       	std	Z+2, r26	; 0x02
    1b3a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b3c:	fe 01       	movw	r30, r28
    1b3e:	ff 96       	adiw	r30, 0x3f	; 63
    1b40:	60 81       	ld	r22, Z
    1b42:	71 81       	ldd	r23, Z+1	; 0x01
    1b44:	82 81       	ldd	r24, Z+2	; 0x02
    1b46:	93 81       	ldd	r25, Z+3	; 0x03
    1b48:	20 e0       	ldi	r18, 0x00	; 0
    1b4a:	30 e0       	ldi	r19, 0x00	; 0
    1b4c:	40 e8       	ldi	r20, 0x80	; 128
    1b4e:	5f e3       	ldi	r21, 0x3F	; 63
    1b50:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b54:	88 23       	and	r24, r24
    1b56:	2c f4       	brge	.+10     	; 0x1b62 <LCD_VidWrite4Cmd+0x118>
		__ticks = 1;
    1b58:	81 e0       	ldi	r24, 0x01	; 1
    1b5a:	90 e0       	ldi	r25, 0x00	; 0
    1b5c:	9e af       	std	Y+62, r25	; 0x3e
    1b5e:	8d af       	std	Y+61, r24	; 0x3d
    1b60:	46 c0       	rjmp	.+140    	; 0x1bee <LCD_VidWrite4Cmd+0x1a4>
	else if (__tmp > 65535)
    1b62:	fe 01       	movw	r30, r28
    1b64:	ff 96       	adiw	r30, 0x3f	; 63
    1b66:	60 81       	ld	r22, Z
    1b68:	71 81       	ldd	r23, Z+1	; 0x01
    1b6a:	82 81       	ldd	r24, Z+2	; 0x02
    1b6c:	93 81       	ldd	r25, Z+3	; 0x03
    1b6e:	20 e0       	ldi	r18, 0x00	; 0
    1b70:	3f ef       	ldi	r19, 0xFF	; 255
    1b72:	4f e7       	ldi	r20, 0x7F	; 127
    1b74:	57 e4       	ldi	r21, 0x47	; 71
    1b76:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b7a:	18 16       	cp	r1, r24
    1b7c:	64 f5       	brge	.+88     	; 0x1bd6 <LCD_VidWrite4Cmd+0x18c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b7e:	fe 01       	movw	r30, r28
    1b80:	ed 5b       	subi	r30, 0xBD	; 189
    1b82:	ff 4f       	sbci	r31, 0xFF	; 255
    1b84:	60 81       	ld	r22, Z
    1b86:	71 81       	ldd	r23, Z+1	; 0x01
    1b88:	82 81       	ldd	r24, Z+2	; 0x02
    1b8a:	93 81       	ldd	r25, Z+3	; 0x03
    1b8c:	20 e0       	ldi	r18, 0x00	; 0
    1b8e:	30 e0       	ldi	r19, 0x00	; 0
    1b90:	40 e2       	ldi	r20, 0x20	; 32
    1b92:	51 e4       	ldi	r21, 0x41	; 65
    1b94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b98:	dc 01       	movw	r26, r24
    1b9a:	cb 01       	movw	r24, r22
    1b9c:	bc 01       	movw	r22, r24
    1b9e:	cd 01       	movw	r24, r26
    1ba0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ba4:	dc 01       	movw	r26, r24
    1ba6:	cb 01       	movw	r24, r22
    1ba8:	9e af       	std	Y+62, r25	; 0x3e
    1baa:	8d af       	std	Y+61, r24	; 0x3d
    1bac:	0f c0       	rjmp	.+30     	; 0x1bcc <LCD_VidWrite4Cmd+0x182>
    1bae:	88 ec       	ldi	r24, 0xC8	; 200
    1bb0:	90 e0       	ldi	r25, 0x00	; 0
    1bb2:	9c af       	std	Y+60, r25	; 0x3c
    1bb4:	8b af       	std	Y+59, r24	; 0x3b
    1bb6:	8b ad       	ldd	r24, Y+59	; 0x3b
    1bb8:	9c ad       	ldd	r25, Y+60	; 0x3c
    1bba:	01 97       	sbiw	r24, 0x01	; 1
    1bbc:	f1 f7       	brne	.-4      	; 0x1bba <LCD_VidWrite4Cmd+0x170>
    1bbe:	9c af       	std	Y+60, r25	; 0x3c
    1bc0:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bc2:	8d ad       	ldd	r24, Y+61	; 0x3d
    1bc4:	9e ad       	ldd	r25, Y+62	; 0x3e
    1bc6:	01 97       	sbiw	r24, 0x01	; 1
    1bc8:	9e af       	std	Y+62, r25	; 0x3e
    1bca:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bcc:	8d ad       	ldd	r24, Y+61	; 0x3d
    1bce:	9e ad       	ldd	r25, Y+62	; 0x3e
    1bd0:	00 97       	sbiw	r24, 0x00	; 0
    1bd2:	69 f7       	brne	.-38     	; 0x1bae <LCD_VidWrite4Cmd+0x164>
    1bd4:	16 c0       	rjmp	.+44     	; 0x1c02 <LCD_VidWrite4Cmd+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bd6:	fe 01       	movw	r30, r28
    1bd8:	ff 96       	adiw	r30, 0x3f	; 63
    1bda:	60 81       	ld	r22, Z
    1bdc:	71 81       	ldd	r23, Z+1	; 0x01
    1bde:	82 81       	ldd	r24, Z+2	; 0x02
    1be0:	93 81       	ldd	r25, Z+3	; 0x03
    1be2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1be6:	dc 01       	movw	r26, r24
    1be8:	cb 01       	movw	r24, r22
    1bea:	9e af       	std	Y+62, r25	; 0x3e
    1bec:	8d af       	std	Y+61, r24	; 0x3d
    1bee:	8d ad       	ldd	r24, Y+61	; 0x3d
    1bf0:	9e ad       	ldd	r25, Y+62	; 0x3e
    1bf2:	9a af       	std	Y+58, r25	; 0x3a
    1bf4:	89 af       	std	Y+57, r24	; 0x39
    1bf6:	89 ad       	ldd	r24, Y+57	; 0x39
    1bf8:	9a ad       	ldd	r25, Y+58	; 0x3a
    1bfa:	01 97       	sbiw	r24, 0x01	; 1
    1bfc:	f1 f7       	brne	.-4      	; 0x1bfa <LCD_VidWrite4Cmd+0x1b0>
    1bfe:	9a af       	std	Y+58, r25	; 0x3a
    1c00:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);
	DIO_VidSetPinValue(LCD_INIT,LCD_EN,0);
    1c02:	83 e0       	ldi	r24, 0x03	; 3
    1c04:	62 e0       	ldi	r22, 0x02	; 2
    1c06:	40 e0       	ldi	r20, 0x00	; 0
    1c08:	0e 94 a4 07 	call	0xf48	; 0xf48 <DIO_VidSetPinValue>
    1c0c:	80 e0       	ldi	r24, 0x00	; 0
    1c0e:	90 e0       	ldi	r25, 0x00	; 0
    1c10:	a0 e8       	ldi	r26, 0x80	; 128
    1c12:	bf e3       	ldi	r27, 0x3F	; 63
    1c14:	8d ab       	std	Y+53, r24	; 0x35
    1c16:	9e ab       	std	Y+54, r25	; 0x36
    1c18:	af ab       	std	Y+55, r26	; 0x37
    1c1a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c1c:	6d a9       	ldd	r22, Y+53	; 0x35
    1c1e:	7e a9       	ldd	r23, Y+54	; 0x36
    1c20:	8f a9       	ldd	r24, Y+55	; 0x37
    1c22:	98 ad       	ldd	r25, Y+56	; 0x38
    1c24:	20 e0       	ldi	r18, 0x00	; 0
    1c26:	30 e0       	ldi	r19, 0x00	; 0
    1c28:	4a ef       	ldi	r20, 0xFA	; 250
    1c2a:	54 e4       	ldi	r21, 0x44	; 68
    1c2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c30:	dc 01       	movw	r26, r24
    1c32:	cb 01       	movw	r24, r22
    1c34:	89 ab       	std	Y+49, r24	; 0x31
    1c36:	9a ab       	std	Y+50, r25	; 0x32
    1c38:	ab ab       	std	Y+51, r26	; 0x33
    1c3a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1c3c:	69 a9       	ldd	r22, Y+49	; 0x31
    1c3e:	7a a9       	ldd	r23, Y+50	; 0x32
    1c40:	8b a9       	ldd	r24, Y+51	; 0x33
    1c42:	9c a9       	ldd	r25, Y+52	; 0x34
    1c44:	20 e0       	ldi	r18, 0x00	; 0
    1c46:	30 e0       	ldi	r19, 0x00	; 0
    1c48:	40 e8       	ldi	r20, 0x80	; 128
    1c4a:	5f e3       	ldi	r21, 0x3F	; 63
    1c4c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c50:	88 23       	and	r24, r24
    1c52:	2c f4       	brge	.+10     	; 0x1c5e <LCD_VidWrite4Cmd+0x214>
		__ticks = 1;
    1c54:	81 e0       	ldi	r24, 0x01	; 1
    1c56:	90 e0       	ldi	r25, 0x00	; 0
    1c58:	98 ab       	std	Y+48, r25	; 0x30
    1c5a:	8f a7       	std	Y+47, r24	; 0x2f
    1c5c:	3f c0       	rjmp	.+126    	; 0x1cdc <LCD_VidWrite4Cmd+0x292>
	else if (__tmp > 65535)
    1c5e:	69 a9       	ldd	r22, Y+49	; 0x31
    1c60:	7a a9       	ldd	r23, Y+50	; 0x32
    1c62:	8b a9       	ldd	r24, Y+51	; 0x33
    1c64:	9c a9       	ldd	r25, Y+52	; 0x34
    1c66:	20 e0       	ldi	r18, 0x00	; 0
    1c68:	3f ef       	ldi	r19, 0xFF	; 255
    1c6a:	4f e7       	ldi	r20, 0x7F	; 127
    1c6c:	57 e4       	ldi	r21, 0x47	; 71
    1c6e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c72:	18 16       	cp	r1, r24
    1c74:	4c f5       	brge	.+82     	; 0x1cc8 <LCD_VidWrite4Cmd+0x27e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c76:	6d a9       	ldd	r22, Y+53	; 0x35
    1c78:	7e a9       	ldd	r23, Y+54	; 0x36
    1c7a:	8f a9       	ldd	r24, Y+55	; 0x37
    1c7c:	98 ad       	ldd	r25, Y+56	; 0x38
    1c7e:	20 e0       	ldi	r18, 0x00	; 0
    1c80:	30 e0       	ldi	r19, 0x00	; 0
    1c82:	40 e2       	ldi	r20, 0x20	; 32
    1c84:	51 e4       	ldi	r21, 0x41	; 65
    1c86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c8a:	dc 01       	movw	r26, r24
    1c8c:	cb 01       	movw	r24, r22
    1c8e:	bc 01       	movw	r22, r24
    1c90:	cd 01       	movw	r24, r26
    1c92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c96:	dc 01       	movw	r26, r24
    1c98:	cb 01       	movw	r24, r22
    1c9a:	98 ab       	std	Y+48, r25	; 0x30
    1c9c:	8f a7       	std	Y+47, r24	; 0x2f
    1c9e:	0f c0       	rjmp	.+30     	; 0x1cbe <LCD_VidWrite4Cmd+0x274>
    1ca0:	88 ec       	ldi	r24, 0xC8	; 200
    1ca2:	90 e0       	ldi	r25, 0x00	; 0
    1ca4:	9e a7       	std	Y+46, r25	; 0x2e
    1ca6:	8d a7       	std	Y+45, r24	; 0x2d
    1ca8:	8d a5       	ldd	r24, Y+45	; 0x2d
    1caa:	9e a5       	ldd	r25, Y+46	; 0x2e
    1cac:	01 97       	sbiw	r24, 0x01	; 1
    1cae:	f1 f7       	brne	.-4      	; 0x1cac <LCD_VidWrite4Cmd+0x262>
    1cb0:	9e a7       	std	Y+46, r25	; 0x2e
    1cb2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cb4:	8f a5       	ldd	r24, Y+47	; 0x2f
    1cb6:	98 a9       	ldd	r25, Y+48	; 0x30
    1cb8:	01 97       	sbiw	r24, 0x01	; 1
    1cba:	98 ab       	std	Y+48, r25	; 0x30
    1cbc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cbe:	8f a5       	ldd	r24, Y+47	; 0x2f
    1cc0:	98 a9       	ldd	r25, Y+48	; 0x30
    1cc2:	00 97       	sbiw	r24, 0x00	; 0
    1cc4:	69 f7       	brne	.-38     	; 0x1ca0 <LCD_VidWrite4Cmd+0x256>
    1cc6:	14 c0       	rjmp	.+40     	; 0x1cf0 <LCD_VidWrite4Cmd+0x2a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cc8:	69 a9       	ldd	r22, Y+49	; 0x31
    1cca:	7a a9       	ldd	r23, Y+50	; 0x32
    1ccc:	8b a9       	ldd	r24, Y+51	; 0x33
    1cce:	9c a9       	ldd	r25, Y+52	; 0x34
    1cd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cd4:	dc 01       	movw	r26, r24
    1cd6:	cb 01       	movw	r24, r22
    1cd8:	98 ab       	std	Y+48, r25	; 0x30
    1cda:	8f a7       	std	Y+47, r24	; 0x2f
    1cdc:	8f a5       	ldd	r24, Y+47	; 0x2f
    1cde:	98 a9       	ldd	r25, Y+48	; 0x30
    1ce0:	9c a7       	std	Y+44, r25	; 0x2c
    1ce2:	8b a7       	std	Y+43, r24	; 0x2b
    1ce4:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ce6:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ce8:	01 97       	sbiw	r24, 0x01	; 1
    1cea:	f1 f7       	brne	.-4      	; 0x1ce8 <LCD_VidWrite4Cmd+0x29e>
    1cec:	9c a7       	std	Y+44, r25	; 0x2c
    1cee:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);

	if(InitStepFinishid)
    1cf0:	80 91 78 00 	lds	r24, 0x0078
    1cf4:	88 23       	and	r24, r24
    1cf6:	09 f4       	brne	.+2      	; 0x1cfa <LCD_VidWrite4Cmd+0x2b0>
    1cf8:	20 c1       	rjmp	.+576    	; 0x1f3a <LCD_VidWrite4Cmd+0x4f0>
	{
		DIO_VidSetPinValue(LCD_PORT,PIN4,GET_BIT(LOC_Cmd,0));
    1cfa:	fe 01       	movw	r30, r28
    1cfc:	e9 5b       	subi	r30, 0xB9	; 185
    1cfe:	ff 4f       	sbci	r31, 0xFF	; 255
    1d00:	80 81       	ld	r24, Z
    1d02:	98 2f       	mov	r25, r24
    1d04:	91 70       	andi	r25, 0x01	; 1
    1d06:	80 e0       	ldi	r24, 0x00	; 0
    1d08:	64 e0       	ldi	r22, 0x04	; 4
    1d0a:	49 2f       	mov	r20, r25
    1d0c:	0e 94 a4 07 	call	0xf48	; 0xf48 <DIO_VidSetPinValue>
		DIO_VidSetPinValue(LCD_PORT,PIN5,GET_BIT(LOC_Cmd,1));
    1d10:	fe 01       	movw	r30, r28
    1d12:	e9 5b       	subi	r30, 0xB9	; 185
    1d14:	ff 4f       	sbci	r31, 0xFF	; 255
    1d16:	80 81       	ld	r24, Z
    1d18:	86 95       	lsr	r24
    1d1a:	98 2f       	mov	r25, r24
    1d1c:	91 70       	andi	r25, 0x01	; 1
    1d1e:	80 e0       	ldi	r24, 0x00	; 0
    1d20:	65 e0       	ldi	r22, 0x05	; 5
    1d22:	49 2f       	mov	r20, r25
    1d24:	0e 94 a4 07 	call	0xf48	; 0xf48 <DIO_VidSetPinValue>
		DIO_VidSetPinValue(LCD_PORT,PIN6,GET_BIT(LOC_Cmd,2));
    1d28:	fe 01       	movw	r30, r28
    1d2a:	e9 5b       	subi	r30, 0xB9	; 185
    1d2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d2e:	80 81       	ld	r24, Z
    1d30:	86 95       	lsr	r24
    1d32:	86 95       	lsr	r24
    1d34:	98 2f       	mov	r25, r24
    1d36:	91 70       	andi	r25, 0x01	; 1
    1d38:	80 e0       	ldi	r24, 0x00	; 0
    1d3a:	66 e0       	ldi	r22, 0x06	; 6
    1d3c:	49 2f       	mov	r20, r25
    1d3e:	0e 94 a4 07 	call	0xf48	; 0xf48 <DIO_VidSetPinValue>
		DIO_VidSetPinValue(LCD_PORT,PIN7,GET_BIT(LOC_Cmd,3));
    1d42:	fe 01       	movw	r30, r28
    1d44:	e9 5b       	subi	r30, 0xB9	; 185
    1d46:	ff 4f       	sbci	r31, 0xFF	; 255
    1d48:	80 81       	ld	r24, Z
    1d4a:	86 95       	lsr	r24
    1d4c:	86 95       	lsr	r24
    1d4e:	86 95       	lsr	r24
    1d50:	98 2f       	mov	r25, r24
    1d52:	91 70       	andi	r25, 0x01	; 1
    1d54:	80 e0       	ldi	r24, 0x00	; 0
    1d56:	67 e0       	ldi	r22, 0x07	; 7
    1d58:	49 2f       	mov	r20, r25
    1d5a:	0e 94 a4 07 	call	0xf48	; 0xf48 <DIO_VidSetPinValue>

		DIO_VidSetPinValue(LCD_INIT,LCD_EN,1);
    1d5e:	83 e0       	ldi	r24, 0x03	; 3
    1d60:	62 e0       	ldi	r22, 0x02	; 2
    1d62:	41 e0       	ldi	r20, 0x01	; 1
    1d64:	0e 94 a4 07 	call	0xf48	; 0xf48 <DIO_VidSetPinValue>
    1d68:	80 e0       	ldi	r24, 0x00	; 0
    1d6a:	90 e0       	ldi	r25, 0x00	; 0
    1d6c:	a0 e8       	ldi	r26, 0x80	; 128
    1d6e:	bf e3       	ldi	r27, 0x3F	; 63
    1d70:	8f a3       	std	Y+39, r24	; 0x27
    1d72:	98 a7       	std	Y+40, r25	; 0x28
    1d74:	a9 a7       	std	Y+41, r26	; 0x29
    1d76:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d78:	6f a1       	ldd	r22, Y+39	; 0x27
    1d7a:	78 a5       	ldd	r23, Y+40	; 0x28
    1d7c:	89 a5       	ldd	r24, Y+41	; 0x29
    1d7e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d80:	20 e0       	ldi	r18, 0x00	; 0
    1d82:	30 e0       	ldi	r19, 0x00	; 0
    1d84:	4a ef       	ldi	r20, 0xFA	; 250
    1d86:	54 e4       	ldi	r21, 0x44	; 68
    1d88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d8c:	dc 01       	movw	r26, r24
    1d8e:	cb 01       	movw	r24, r22
    1d90:	8b a3       	std	Y+35, r24	; 0x23
    1d92:	9c a3       	std	Y+36, r25	; 0x24
    1d94:	ad a3       	std	Y+37, r26	; 0x25
    1d96:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1d98:	6b a1       	ldd	r22, Y+35	; 0x23
    1d9a:	7c a1       	ldd	r23, Y+36	; 0x24
    1d9c:	8d a1       	ldd	r24, Y+37	; 0x25
    1d9e:	9e a1       	ldd	r25, Y+38	; 0x26
    1da0:	20 e0       	ldi	r18, 0x00	; 0
    1da2:	30 e0       	ldi	r19, 0x00	; 0
    1da4:	40 e8       	ldi	r20, 0x80	; 128
    1da6:	5f e3       	ldi	r21, 0x3F	; 63
    1da8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1dac:	88 23       	and	r24, r24
    1dae:	2c f4       	brge	.+10     	; 0x1dba <LCD_VidWrite4Cmd+0x370>
		__ticks = 1;
    1db0:	81 e0       	ldi	r24, 0x01	; 1
    1db2:	90 e0       	ldi	r25, 0x00	; 0
    1db4:	9a a3       	std	Y+34, r25	; 0x22
    1db6:	89 a3       	std	Y+33, r24	; 0x21
    1db8:	3f c0       	rjmp	.+126    	; 0x1e38 <LCD_VidWrite4Cmd+0x3ee>
	else if (__tmp > 65535)
    1dba:	6b a1       	ldd	r22, Y+35	; 0x23
    1dbc:	7c a1       	ldd	r23, Y+36	; 0x24
    1dbe:	8d a1       	ldd	r24, Y+37	; 0x25
    1dc0:	9e a1       	ldd	r25, Y+38	; 0x26
    1dc2:	20 e0       	ldi	r18, 0x00	; 0
    1dc4:	3f ef       	ldi	r19, 0xFF	; 255
    1dc6:	4f e7       	ldi	r20, 0x7F	; 127
    1dc8:	57 e4       	ldi	r21, 0x47	; 71
    1dca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1dce:	18 16       	cp	r1, r24
    1dd0:	4c f5       	brge	.+82     	; 0x1e24 <LCD_VidWrite4Cmd+0x3da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dd2:	6f a1       	ldd	r22, Y+39	; 0x27
    1dd4:	78 a5       	ldd	r23, Y+40	; 0x28
    1dd6:	89 a5       	ldd	r24, Y+41	; 0x29
    1dd8:	9a a5       	ldd	r25, Y+42	; 0x2a
    1dda:	20 e0       	ldi	r18, 0x00	; 0
    1ddc:	30 e0       	ldi	r19, 0x00	; 0
    1dde:	40 e2       	ldi	r20, 0x20	; 32
    1de0:	51 e4       	ldi	r21, 0x41	; 65
    1de2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1de6:	dc 01       	movw	r26, r24
    1de8:	cb 01       	movw	r24, r22
    1dea:	bc 01       	movw	r22, r24
    1dec:	cd 01       	movw	r24, r26
    1dee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1df2:	dc 01       	movw	r26, r24
    1df4:	cb 01       	movw	r24, r22
    1df6:	9a a3       	std	Y+34, r25	; 0x22
    1df8:	89 a3       	std	Y+33, r24	; 0x21
    1dfa:	0f c0       	rjmp	.+30     	; 0x1e1a <LCD_VidWrite4Cmd+0x3d0>
    1dfc:	88 ec       	ldi	r24, 0xC8	; 200
    1dfe:	90 e0       	ldi	r25, 0x00	; 0
    1e00:	98 a3       	std	Y+32, r25	; 0x20
    1e02:	8f 8f       	std	Y+31, r24	; 0x1f
    1e04:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1e06:	98 a1       	ldd	r25, Y+32	; 0x20
    1e08:	01 97       	sbiw	r24, 0x01	; 1
    1e0a:	f1 f7       	brne	.-4      	; 0x1e08 <LCD_VidWrite4Cmd+0x3be>
    1e0c:	98 a3       	std	Y+32, r25	; 0x20
    1e0e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e10:	89 a1       	ldd	r24, Y+33	; 0x21
    1e12:	9a a1       	ldd	r25, Y+34	; 0x22
    1e14:	01 97       	sbiw	r24, 0x01	; 1
    1e16:	9a a3       	std	Y+34, r25	; 0x22
    1e18:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e1a:	89 a1       	ldd	r24, Y+33	; 0x21
    1e1c:	9a a1       	ldd	r25, Y+34	; 0x22
    1e1e:	00 97       	sbiw	r24, 0x00	; 0
    1e20:	69 f7       	brne	.-38     	; 0x1dfc <LCD_VidWrite4Cmd+0x3b2>
    1e22:	14 c0       	rjmp	.+40     	; 0x1e4c <LCD_VidWrite4Cmd+0x402>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e24:	6b a1       	ldd	r22, Y+35	; 0x23
    1e26:	7c a1       	ldd	r23, Y+36	; 0x24
    1e28:	8d a1       	ldd	r24, Y+37	; 0x25
    1e2a:	9e a1       	ldd	r25, Y+38	; 0x26
    1e2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e30:	dc 01       	movw	r26, r24
    1e32:	cb 01       	movw	r24, r22
    1e34:	9a a3       	std	Y+34, r25	; 0x22
    1e36:	89 a3       	std	Y+33, r24	; 0x21
    1e38:	89 a1       	ldd	r24, Y+33	; 0x21
    1e3a:	9a a1       	ldd	r25, Y+34	; 0x22
    1e3c:	9e 8f       	std	Y+30, r25	; 0x1e
    1e3e:	8d 8f       	std	Y+29, r24	; 0x1d
    1e40:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e42:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1e44:	01 97       	sbiw	r24, 0x01	; 1
    1e46:	f1 f7       	brne	.-4      	; 0x1e44 <LCD_VidWrite4Cmd+0x3fa>
    1e48:	9e 8f       	std	Y+30, r25	; 0x1e
    1e4a:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1);
		DIO_VidSetPinValue(LCD_INIT,LCD_EN,0);
    1e4c:	83 e0       	ldi	r24, 0x03	; 3
    1e4e:	62 e0       	ldi	r22, 0x02	; 2
    1e50:	40 e0       	ldi	r20, 0x00	; 0
    1e52:	0e 94 a4 07 	call	0xf48	; 0xf48 <DIO_VidSetPinValue>
    1e56:	80 e0       	ldi	r24, 0x00	; 0
    1e58:	90 e0       	ldi	r25, 0x00	; 0
    1e5a:	a0 e8       	ldi	r26, 0x80	; 128
    1e5c:	bf e3       	ldi	r27, 0x3F	; 63
    1e5e:	89 8f       	std	Y+25, r24	; 0x19
    1e60:	9a 8f       	std	Y+26, r25	; 0x1a
    1e62:	ab 8f       	std	Y+27, r26	; 0x1b
    1e64:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e66:	69 8d       	ldd	r22, Y+25	; 0x19
    1e68:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e6a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e6c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e6e:	20 e0       	ldi	r18, 0x00	; 0
    1e70:	30 e0       	ldi	r19, 0x00	; 0
    1e72:	4a ef       	ldi	r20, 0xFA	; 250
    1e74:	54 e4       	ldi	r21, 0x44	; 68
    1e76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e7a:	dc 01       	movw	r26, r24
    1e7c:	cb 01       	movw	r24, r22
    1e7e:	8d 8b       	std	Y+21, r24	; 0x15
    1e80:	9e 8b       	std	Y+22, r25	; 0x16
    1e82:	af 8b       	std	Y+23, r26	; 0x17
    1e84:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1e86:	6d 89       	ldd	r22, Y+21	; 0x15
    1e88:	7e 89       	ldd	r23, Y+22	; 0x16
    1e8a:	8f 89       	ldd	r24, Y+23	; 0x17
    1e8c:	98 8d       	ldd	r25, Y+24	; 0x18
    1e8e:	20 e0       	ldi	r18, 0x00	; 0
    1e90:	30 e0       	ldi	r19, 0x00	; 0
    1e92:	40 e8       	ldi	r20, 0x80	; 128
    1e94:	5f e3       	ldi	r21, 0x3F	; 63
    1e96:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e9a:	88 23       	and	r24, r24
    1e9c:	2c f4       	brge	.+10     	; 0x1ea8 <LCD_VidWrite4Cmd+0x45e>
		__ticks = 1;
    1e9e:	81 e0       	ldi	r24, 0x01	; 1
    1ea0:	90 e0       	ldi	r25, 0x00	; 0
    1ea2:	9c 8b       	std	Y+20, r25	; 0x14
    1ea4:	8b 8b       	std	Y+19, r24	; 0x13
    1ea6:	3f c0       	rjmp	.+126    	; 0x1f26 <LCD_VidWrite4Cmd+0x4dc>
	else if (__tmp > 65535)
    1ea8:	6d 89       	ldd	r22, Y+21	; 0x15
    1eaa:	7e 89       	ldd	r23, Y+22	; 0x16
    1eac:	8f 89       	ldd	r24, Y+23	; 0x17
    1eae:	98 8d       	ldd	r25, Y+24	; 0x18
    1eb0:	20 e0       	ldi	r18, 0x00	; 0
    1eb2:	3f ef       	ldi	r19, 0xFF	; 255
    1eb4:	4f e7       	ldi	r20, 0x7F	; 127
    1eb6:	57 e4       	ldi	r21, 0x47	; 71
    1eb8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ebc:	18 16       	cp	r1, r24
    1ebe:	4c f5       	brge	.+82     	; 0x1f12 <LCD_VidWrite4Cmd+0x4c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ec0:	69 8d       	ldd	r22, Y+25	; 0x19
    1ec2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ec4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ec6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ec8:	20 e0       	ldi	r18, 0x00	; 0
    1eca:	30 e0       	ldi	r19, 0x00	; 0
    1ecc:	40 e2       	ldi	r20, 0x20	; 32
    1ece:	51 e4       	ldi	r21, 0x41	; 65
    1ed0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ed4:	dc 01       	movw	r26, r24
    1ed6:	cb 01       	movw	r24, r22
    1ed8:	bc 01       	movw	r22, r24
    1eda:	cd 01       	movw	r24, r26
    1edc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ee0:	dc 01       	movw	r26, r24
    1ee2:	cb 01       	movw	r24, r22
    1ee4:	9c 8b       	std	Y+20, r25	; 0x14
    1ee6:	8b 8b       	std	Y+19, r24	; 0x13
    1ee8:	0f c0       	rjmp	.+30     	; 0x1f08 <LCD_VidWrite4Cmd+0x4be>
    1eea:	88 ec       	ldi	r24, 0xC8	; 200
    1eec:	90 e0       	ldi	r25, 0x00	; 0
    1eee:	9a 8b       	std	Y+18, r25	; 0x12
    1ef0:	89 8b       	std	Y+17, r24	; 0x11
    1ef2:	89 89       	ldd	r24, Y+17	; 0x11
    1ef4:	9a 89       	ldd	r25, Y+18	; 0x12
    1ef6:	01 97       	sbiw	r24, 0x01	; 1
    1ef8:	f1 f7       	brne	.-4      	; 0x1ef6 <LCD_VidWrite4Cmd+0x4ac>
    1efa:	9a 8b       	std	Y+18, r25	; 0x12
    1efc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1efe:	8b 89       	ldd	r24, Y+19	; 0x13
    1f00:	9c 89       	ldd	r25, Y+20	; 0x14
    1f02:	01 97       	sbiw	r24, 0x01	; 1
    1f04:	9c 8b       	std	Y+20, r25	; 0x14
    1f06:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f08:	8b 89       	ldd	r24, Y+19	; 0x13
    1f0a:	9c 89       	ldd	r25, Y+20	; 0x14
    1f0c:	00 97       	sbiw	r24, 0x00	; 0
    1f0e:	69 f7       	brne	.-38     	; 0x1eea <LCD_VidWrite4Cmd+0x4a0>
    1f10:	14 c0       	rjmp	.+40     	; 0x1f3a <LCD_VidWrite4Cmd+0x4f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f12:	6d 89       	ldd	r22, Y+21	; 0x15
    1f14:	7e 89       	ldd	r23, Y+22	; 0x16
    1f16:	8f 89       	ldd	r24, Y+23	; 0x17
    1f18:	98 8d       	ldd	r25, Y+24	; 0x18
    1f1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f1e:	dc 01       	movw	r26, r24
    1f20:	cb 01       	movw	r24, r22
    1f22:	9c 8b       	std	Y+20, r25	; 0x14
    1f24:	8b 8b       	std	Y+19, r24	; 0x13
    1f26:	8b 89       	ldd	r24, Y+19	; 0x13
    1f28:	9c 89       	ldd	r25, Y+20	; 0x14
    1f2a:	98 8b       	std	Y+16, r25	; 0x10
    1f2c:	8f 87       	std	Y+15, r24	; 0x0f
    1f2e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f30:	98 89       	ldd	r25, Y+16	; 0x10
    1f32:	01 97       	sbiw	r24, 0x01	; 1
    1f34:	f1 f7       	brne	.-4      	; 0x1f32 <LCD_VidWrite4Cmd+0x4e8>
    1f36:	98 8b       	std	Y+16, r25	; 0x10
    1f38:	8f 87       	std	Y+15, r24	; 0x0f
    1f3a:	80 e0       	ldi	r24, 0x00	; 0
    1f3c:	90 e0       	ldi	r25, 0x00	; 0
    1f3e:	a0 e0       	ldi	r26, 0x00	; 0
    1f40:	b0 e4       	ldi	r27, 0x40	; 64
    1f42:	8b 87       	std	Y+11, r24	; 0x0b
    1f44:	9c 87       	std	Y+12, r25	; 0x0c
    1f46:	ad 87       	std	Y+13, r26	; 0x0d
    1f48:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f4a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f4c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f4e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f50:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f52:	20 e0       	ldi	r18, 0x00	; 0
    1f54:	30 e0       	ldi	r19, 0x00	; 0
    1f56:	4a ef       	ldi	r20, 0xFA	; 250
    1f58:	54 e4       	ldi	r21, 0x44	; 68
    1f5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f5e:	dc 01       	movw	r26, r24
    1f60:	cb 01       	movw	r24, r22
    1f62:	8f 83       	std	Y+7, r24	; 0x07
    1f64:	98 87       	std	Y+8, r25	; 0x08
    1f66:	a9 87       	std	Y+9, r26	; 0x09
    1f68:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f6a:	6f 81       	ldd	r22, Y+7	; 0x07
    1f6c:	78 85       	ldd	r23, Y+8	; 0x08
    1f6e:	89 85       	ldd	r24, Y+9	; 0x09
    1f70:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f72:	20 e0       	ldi	r18, 0x00	; 0
    1f74:	30 e0       	ldi	r19, 0x00	; 0
    1f76:	40 e8       	ldi	r20, 0x80	; 128
    1f78:	5f e3       	ldi	r21, 0x3F	; 63
    1f7a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f7e:	88 23       	and	r24, r24
    1f80:	2c f4       	brge	.+10     	; 0x1f8c <LCD_VidWrite4Cmd+0x542>
		__ticks = 1;
    1f82:	81 e0       	ldi	r24, 0x01	; 1
    1f84:	90 e0       	ldi	r25, 0x00	; 0
    1f86:	9e 83       	std	Y+6, r25	; 0x06
    1f88:	8d 83       	std	Y+5, r24	; 0x05
    1f8a:	3f c0       	rjmp	.+126    	; 0x200a <LCD_VidWrite4Cmd+0x5c0>
	else if (__tmp > 65535)
    1f8c:	6f 81       	ldd	r22, Y+7	; 0x07
    1f8e:	78 85       	ldd	r23, Y+8	; 0x08
    1f90:	89 85       	ldd	r24, Y+9	; 0x09
    1f92:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f94:	20 e0       	ldi	r18, 0x00	; 0
    1f96:	3f ef       	ldi	r19, 0xFF	; 255
    1f98:	4f e7       	ldi	r20, 0x7F	; 127
    1f9a:	57 e4       	ldi	r21, 0x47	; 71
    1f9c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fa0:	18 16       	cp	r1, r24
    1fa2:	4c f5       	brge	.+82     	; 0x1ff6 <LCD_VidWrite4Cmd+0x5ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fa4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fa6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fa8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1faa:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fac:	20 e0       	ldi	r18, 0x00	; 0
    1fae:	30 e0       	ldi	r19, 0x00	; 0
    1fb0:	40 e2       	ldi	r20, 0x20	; 32
    1fb2:	51 e4       	ldi	r21, 0x41	; 65
    1fb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fb8:	dc 01       	movw	r26, r24
    1fba:	cb 01       	movw	r24, r22
    1fbc:	bc 01       	movw	r22, r24
    1fbe:	cd 01       	movw	r24, r26
    1fc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fc4:	dc 01       	movw	r26, r24
    1fc6:	cb 01       	movw	r24, r22
    1fc8:	9e 83       	std	Y+6, r25	; 0x06
    1fca:	8d 83       	std	Y+5, r24	; 0x05
    1fcc:	0f c0       	rjmp	.+30     	; 0x1fec <LCD_VidWrite4Cmd+0x5a2>
    1fce:	88 ec       	ldi	r24, 0xC8	; 200
    1fd0:	90 e0       	ldi	r25, 0x00	; 0
    1fd2:	9c 83       	std	Y+4, r25	; 0x04
    1fd4:	8b 83       	std	Y+3, r24	; 0x03
    1fd6:	8b 81       	ldd	r24, Y+3	; 0x03
    1fd8:	9c 81       	ldd	r25, Y+4	; 0x04
    1fda:	01 97       	sbiw	r24, 0x01	; 1
    1fdc:	f1 f7       	brne	.-4      	; 0x1fda <LCD_VidWrite4Cmd+0x590>
    1fde:	9c 83       	std	Y+4, r25	; 0x04
    1fe0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fe2:	8d 81       	ldd	r24, Y+5	; 0x05
    1fe4:	9e 81       	ldd	r25, Y+6	; 0x06
    1fe6:	01 97       	sbiw	r24, 0x01	; 1
    1fe8:	9e 83       	std	Y+6, r25	; 0x06
    1fea:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fec:	8d 81       	ldd	r24, Y+5	; 0x05
    1fee:	9e 81       	ldd	r25, Y+6	; 0x06
    1ff0:	00 97       	sbiw	r24, 0x00	; 0
    1ff2:	69 f7       	brne	.-38     	; 0x1fce <LCD_VidWrite4Cmd+0x584>
    1ff4:	14 c0       	rjmp	.+40     	; 0x201e <LCD_VidWrite4Cmd+0x5d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ff6:	6f 81       	ldd	r22, Y+7	; 0x07
    1ff8:	78 85       	ldd	r23, Y+8	; 0x08
    1ffa:	89 85       	ldd	r24, Y+9	; 0x09
    1ffc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ffe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2002:	dc 01       	movw	r26, r24
    2004:	cb 01       	movw	r24, r22
    2006:	9e 83       	std	Y+6, r25	; 0x06
    2008:	8d 83       	std	Y+5, r24	; 0x05
    200a:	8d 81       	ldd	r24, Y+5	; 0x05
    200c:	9e 81       	ldd	r25, Y+6	; 0x06
    200e:	9a 83       	std	Y+2, r25	; 0x02
    2010:	89 83       	std	Y+1, r24	; 0x01
    2012:	89 81       	ldd	r24, Y+1	; 0x01
    2014:	9a 81       	ldd	r25, Y+2	; 0x02
    2016:	01 97       	sbiw	r24, 0x01	; 1
    2018:	f1 f7       	brne	.-4      	; 0x2016 <LCD_VidWrite4Cmd+0x5cc>
    201a:	9a 83       	std	Y+2, r25	; 0x02
    201c:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1);
	}
	_delay_ms(2);
}
    201e:	c9 5b       	subi	r28, 0xB9	; 185
    2020:	df 4f       	sbci	r29, 0xFF	; 255
    2022:	0f b6       	in	r0, 0x3f	; 63
    2024:	f8 94       	cli
    2026:	de bf       	out	0x3e, r29	; 62
    2028:	0f be       	out	0x3f, r0	; 63
    202a:	cd bf       	out	0x3d, r28	; 61
    202c:	cf 91       	pop	r28
    202e:	df 91       	pop	r29
    2030:	1f 91       	pop	r17
    2032:	0f 91       	pop	r16
    2034:	08 95       	ret

00002036 <LCD_VidWrite4Data>:


void LCD_VidWrite4Data(u8 LOC_Data)
{
    2036:	df 93       	push	r29
    2038:	cf 93       	push	r28
    203a:	cd b7       	in	r28, 0x3d	; 61
    203c:	de b7       	in	r29, 0x3e	; 62
    203e:	ab 97       	sbiw	r28, 0x2b	; 43
    2040:	0f b6       	in	r0, 0x3f	; 63
    2042:	f8 94       	cli
    2044:	de bf       	out	0x3e, r29	; 62
    2046:	0f be       	out	0x3f, r0	; 63
    2048:	cd bf       	out	0x3d, r28	; 61
    204a:	8b a7       	std	Y+43, r24	; 0x2b
	DIO_VidSetPinValue(LCD_INIT,LCD_RS,1);
    204c:	83 e0       	ldi	r24, 0x03	; 3
    204e:	60 e0       	ldi	r22, 0x00	; 0
    2050:	41 e0       	ldi	r20, 0x01	; 1
    2052:	0e 94 a4 07 	call	0xf48	; 0xf48 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(LCD_INIT,LCD_RW,0);
    2056:	83 e0       	ldi	r24, 0x03	; 3
    2058:	61 e0       	ldi	r22, 0x01	; 1
    205a:	40 e0       	ldi	r20, 0x00	; 0
    205c:	0e 94 a4 07 	call	0xf48	; 0xf48 <DIO_VidSetPinValue>

	DIO_VidSetPinValue(LCD_PORT,PIN4,GET_BIT(LOC_Data,4));
    2060:	8b a5       	ldd	r24, Y+43	; 0x2b
    2062:	82 95       	swap	r24
    2064:	8f 70       	andi	r24, 0x0F	; 15
    2066:	98 2f       	mov	r25, r24
    2068:	91 70       	andi	r25, 0x01	; 1
    206a:	80 e0       	ldi	r24, 0x00	; 0
    206c:	64 e0       	ldi	r22, 0x04	; 4
    206e:	49 2f       	mov	r20, r25
    2070:	0e 94 a4 07 	call	0xf48	; 0xf48 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(LCD_PORT,PIN5,GET_BIT(LOC_Data,5));
    2074:	8b a5       	ldd	r24, Y+43	; 0x2b
    2076:	82 95       	swap	r24
    2078:	86 95       	lsr	r24
    207a:	87 70       	andi	r24, 0x07	; 7
    207c:	98 2f       	mov	r25, r24
    207e:	91 70       	andi	r25, 0x01	; 1
    2080:	80 e0       	ldi	r24, 0x00	; 0
    2082:	65 e0       	ldi	r22, 0x05	; 5
    2084:	49 2f       	mov	r20, r25
    2086:	0e 94 a4 07 	call	0xf48	; 0xf48 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(LCD_PORT,PIN6,GET_BIT(LOC_Data,6));
    208a:	8b a5       	ldd	r24, Y+43	; 0x2b
    208c:	82 95       	swap	r24
    208e:	86 95       	lsr	r24
    2090:	86 95       	lsr	r24
    2092:	83 70       	andi	r24, 0x03	; 3
    2094:	98 2f       	mov	r25, r24
    2096:	91 70       	andi	r25, 0x01	; 1
    2098:	80 e0       	ldi	r24, 0x00	; 0
    209a:	66 e0       	ldi	r22, 0x06	; 6
    209c:	49 2f       	mov	r20, r25
    209e:	0e 94 a4 07 	call	0xf48	; 0xf48 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(LCD_PORT,PIN7,GET_BIT(LOC_Data,7));
    20a2:	8b a5       	ldd	r24, Y+43	; 0x2b
    20a4:	98 2f       	mov	r25, r24
    20a6:	99 1f       	adc	r25, r25
    20a8:	99 27       	eor	r25, r25
    20aa:	99 1f       	adc	r25, r25
    20ac:	80 e0       	ldi	r24, 0x00	; 0
    20ae:	67 e0       	ldi	r22, 0x07	; 7
    20b0:	49 2f       	mov	r20, r25
    20b2:	0e 94 a4 07 	call	0xf48	; 0xf48 <DIO_VidSetPinValue>

	DIO_VidSetPinValue(LCD_INIT,LCD_EN,1);
    20b6:	83 e0       	ldi	r24, 0x03	; 3
    20b8:	62 e0       	ldi	r22, 0x02	; 2
    20ba:	41 e0       	ldi	r20, 0x01	; 1
    20bc:	0e 94 a4 07 	call	0xf48	; 0xf48 <DIO_VidSetPinValue>
    20c0:	80 e0       	ldi	r24, 0x00	; 0
    20c2:	90 e0       	ldi	r25, 0x00	; 0
    20c4:	a0 e8       	ldi	r26, 0x80	; 128
    20c6:	bf e3       	ldi	r27, 0x3F	; 63
    20c8:	8f a3       	std	Y+39, r24	; 0x27
    20ca:	98 a7       	std	Y+40, r25	; 0x28
    20cc:	a9 a7       	std	Y+41, r26	; 0x29
    20ce:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20d0:	6f a1       	ldd	r22, Y+39	; 0x27
    20d2:	78 a5       	ldd	r23, Y+40	; 0x28
    20d4:	89 a5       	ldd	r24, Y+41	; 0x29
    20d6:	9a a5       	ldd	r25, Y+42	; 0x2a
    20d8:	20 e0       	ldi	r18, 0x00	; 0
    20da:	30 e0       	ldi	r19, 0x00	; 0
    20dc:	4a ef       	ldi	r20, 0xFA	; 250
    20de:	54 e4       	ldi	r21, 0x44	; 68
    20e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20e4:	dc 01       	movw	r26, r24
    20e6:	cb 01       	movw	r24, r22
    20e8:	8b a3       	std	Y+35, r24	; 0x23
    20ea:	9c a3       	std	Y+36, r25	; 0x24
    20ec:	ad a3       	std	Y+37, r26	; 0x25
    20ee:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    20f0:	6b a1       	ldd	r22, Y+35	; 0x23
    20f2:	7c a1       	ldd	r23, Y+36	; 0x24
    20f4:	8d a1       	ldd	r24, Y+37	; 0x25
    20f6:	9e a1       	ldd	r25, Y+38	; 0x26
    20f8:	20 e0       	ldi	r18, 0x00	; 0
    20fa:	30 e0       	ldi	r19, 0x00	; 0
    20fc:	40 e8       	ldi	r20, 0x80	; 128
    20fe:	5f e3       	ldi	r21, 0x3F	; 63
    2100:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2104:	88 23       	and	r24, r24
    2106:	2c f4       	brge	.+10     	; 0x2112 <LCD_VidWrite4Data+0xdc>
		__ticks = 1;
    2108:	81 e0       	ldi	r24, 0x01	; 1
    210a:	90 e0       	ldi	r25, 0x00	; 0
    210c:	9a a3       	std	Y+34, r25	; 0x22
    210e:	89 a3       	std	Y+33, r24	; 0x21
    2110:	3f c0       	rjmp	.+126    	; 0x2190 <LCD_VidWrite4Data+0x15a>
	else if (__tmp > 65535)
    2112:	6b a1       	ldd	r22, Y+35	; 0x23
    2114:	7c a1       	ldd	r23, Y+36	; 0x24
    2116:	8d a1       	ldd	r24, Y+37	; 0x25
    2118:	9e a1       	ldd	r25, Y+38	; 0x26
    211a:	20 e0       	ldi	r18, 0x00	; 0
    211c:	3f ef       	ldi	r19, 0xFF	; 255
    211e:	4f e7       	ldi	r20, 0x7F	; 127
    2120:	57 e4       	ldi	r21, 0x47	; 71
    2122:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2126:	18 16       	cp	r1, r24
    2128:	4c f5       	brge	.+82     	; 0x217c <LCD_VidWrite4Data+0x146>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    212a:	6f a1       	ldd	r22, Y+39	; 0x27
    212c:	78 a5       	ldd	r23, Y+40	; 0x28
    212e:	89 a5       	ldd	r24, Y+41	; 0x29
    2130:	9a a5       	ldd	r25, Y+42	; 0x2a
    2132:	20 e0       	ldi	r18, 0x00	; 0
    2134:	30 e0       	ldi	r19, 0x00	; 0
    2136:	40 e2       	ldi	r20, 0x20	; 32
    2138:	51 e4       	ldi	r21, 0x41	; 65
    213a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    213e:	dc 01       	movw	r26, r24
    2140:	cb 01       	movw	r24, r22
    2142:	bc 01       	movw	r22, r24
    2144:	cd 01       	movw	r24, r26
    2146:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    214a:	dc 01       	movw	r26, r24
    214c:	cb 01       	movw	r24, r22
    214e:	9a a3       	std	Y+34, r25	; 0x22
    2150:	89 a3       	std	Y+33, r24	; 0x21
    2152:	0f c0       	rjmp	.+30     	; 0x2172 <LCD_VidWrite4Data+0x13c>
    2154:	88 ec       	ldi	r24, 0xC8	; 200
    2156:	90 e0       	ldi	r25, 0x00	; 0
    2158:	98 a3       	std	Y+32, r25	; 0x20
    215a:	8f 8f       	std	Y+31, r24	; 0x1f
    215c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    215e:	98 a1       	ldd	r25, Y+32	; 0x20
    2160:	01 97       	sbiw	r24, 0x01	; 1
    2162:	f1 f7       	brne	.-4      	; 0x2160 <LCD_VidWrite4Data+0x12a>
    2164:	98 a3       	std	Y+32, r25	; 0x20
    2166:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2168:	89 a1       	ldd	r24, Y+33	; 0x21
    216a:	9a a1       	ldd	r25, Y+34	; 0x22
    216c:	01 97       	sbiw	r24, 0x01	; 1
    216e:	9a a3       	std	Y+34, r25	; 0x22
    2170:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2172:	89 a1       	ldd	r24, Y+33	; 0x21
    2174:	9a a1       	ldd	r25, Y+34	; 0x22
    2176:	00 97       	sbiw	r24, 0x00	; 0
    2178:	69 f7       	brne	.-38     	; 0x2154 <LCD_VidWrite4Data+0x11e>
    217a:	14 c0       	rjmp	.+40     	; 0x21a4 <LCD_VidWrite4Data+0x16e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    217c:	6b a1       	ldd	r22, Y+35	; 0x23
    217e:	7c a1       	ldd	r23, Y+36	; 0x24
    2180:	8d a1       	ldd	r24, Y+37	; 0x25
    2182:	9e a1       	ldd	r25, Y+38	; 0x26
    2184:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2188:	dc 01       	movw	r26, r24
    218a:	cb 01       	movw	r24, r22
    218c:	9a a3       	std	Y+34, r25	; 0x22
    218e:	89 a3       	std	Y+33, r24	; 0x21
    2190:	89 a1       	ldd	r24, Y+33	; 0x21
    2192:	9a a1       	ldd	r25, Y+34	; 0x22
    2194:	9e 8f       	std	Y+30, r25	; 0x1e
    2196:	8d 8f       	std	Y+29, r24	; 0x1d
    2198:	8d 8d       	ldd	r24, Y+29	; 0x1d
    219a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    219c:	01 97       	sbiw	r24, 0x01	; 1
    219e:	f1 f7       	brne	.-4      	; 0x219c <LCD_VidWrite4Data+0x166>
    21a0:	9e 8f       	std	Y+30, r25	; 0x1e
    21a2:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	DIO_VidSetPinValue(LCD_INIT,LCD_EN,0);
    21a4:	83 e0       	ldi	r24, 0x03	; 3
    21a6:	62 e0       	ldi	r22, 0x02	; 2
    21a8:	40 e0       	ldi	r20, 0x00	; 0
    21aa:	0e 94 a4 07 	call	0xf48	; 0xf48 <DIO_VidSetPinValue>

	DIO_VidSetPinValue(LCD_PORT,PIN4,GET_BIT(LOC_Data,0));
    21ae:	8b a5       	ldd	r24, Y+43	; 0x2b
    21b0:	98 2f       	mov	r25, r24
    21b2:	91 70       	andi	r25, 0x01	; 1
    21b4:	80 e0       	ldi	r24, 0x00	; 0
    21b6:	64 e0       	ldi	r22, 0x04	; 4
    21b8:	49 2f       	mov	r20, r25
    21ba:	0e 94 a4 07 	call	0xf48	; 0xf48 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(LCD_PORT,PIN5,GET_BIT(LOC_Data,1));
    21be:	8b a5       	ldd	r24, Y+43	; 0x2b
    21c0:	86 95       	lsr	r24
    21c2:	98 2f       	mov	r25, r24
    21c4:	91 70       	andi	r25, 0x01	; 1
    21c6:	80 e0       	ldi	r24, 0x00	; 0
    21c8:	65 e0       	ldi	r22, 0x05	; 5
    21ca:	49 2f       	mov	r20, r25
    21cc:	0e 94 a4 07 	call	0xf48	; 0xf48 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(LCD_PORT,PIN6,GET_BIT(LOC_Data,2));
    21d0:	8b a5       	ldd	r24, Y+43	; 0x2b
    21d2:	86 95       	lsr	r24
    21d4:	86 95       	lsr	r24
    21d6:	98 2f       	mov	r25, r24
    21d8:	91 70       	andi	r25, 0x01	; 1
    21da:	80 e0       	ldi	r24, 0x00	; 0
    21dc:	66 e0       	ldi	r22, 0x06	; 6
    21de:	49 2f       	mov	r20, r25
    21e0:	0e 94 a4 07 	call	0xf48	; 0xf48 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(LCD_PORT,PIN7,GET_BIT(LOC_Data,3));
    21e4:	8b a5       	ldd	r24, Y+43	; 0x2b
    21e6:	86 95       	lsr	r24
    21e8:	86 95       	lsr	r24
    21ea:	86 95       	lsr	r24
    21ec:	98 2f       	mov	r25, r24
    21ee:	91 70       	andi	r25, 0x01	; 1
    21f0:	80 e0       	ldi	r24, 0x00	; 0
    21f2:	67 e0       	ldi	r22, 0x07	; 7
    21f4:	49 2f       	mov	r20, r25
    21f6:	0e 94 a4 07 	call	0xf48	; 0xf48 <DIO_VidSetPinValue>

	DIO_VidSetPinValue(LCD_INIT,LCD_EN,1);
    21fa:	83 e0       	ldi	r24, 0x03	; 3
    21fc:	62 e0       	ldi	r22, 0x02	; 2
    21fe:	41 e0       	ldi	r20, 0x01	; 1
    2200:	0e 94 a4 07 	call	0xf48	; 0xf48 <DIO_VidSetPinValue>
    2204:	80 e0       	ldi	r24, 0x00	; 0
    2206:	90 e0       	ldi	r25, 0x00	; 0
    2208:	a0 e8       	ldi	r26, 0x80	; 128
    220a:	bf e3       	ldi	r27, 0x3F	; 63
    220c:	89 8f       	std	Y+25, r24	; 0x19
    220e:	9a 8f       	std	Y+26, r25	; 0x1a
    2210:	ab 8f       	std	Y+27, r26	; 0x1b
    2212:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2214:	69 8d       	ldd	r22, Y+25	; 0x19
    2216:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2218:	8b 8d       	ldd	r24, Y+27	; 0x1b
    221a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    221c:	20 e0       	ldi	r18, 0x00	; 0
    221e:	30 e0       	ldi	r19, 0x00	; 0
    2220:	4a ef       	ldi	r20, 0xFA	; 250
    2222:	54 e4       	ldi	r21, 0x44	; 68
    2224:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2228:	dc 01       	movw	r26, r24
    222a:	cb 01       	movw	r24, r22
    222c:	8d 8b       	std	Y+21, r24	; 0x15
    222e:	9e 8b       	std	Y+22, r25	; 0x16
    2230:	af 8b       	std	Y+23, r26	; 0x17
    2232:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2234:	6d 89       	ldd	r22, Y+21	; 0x15
    2236:	7e 89       	ldd	r23, Y+22	; 0x16
    2238:	8f 89       	ldd	r24, Y+23	; 0x17
    223a:	98 8d       	ldd	r25, Y+24	; 0x18
    223c:	20 e0       	ldi	r18, 0x00	; 0
    223e:	30 e0       	ldi	r19, 0x00	; 0
    2240:	40 e8       	ldi	r20, 0x80	; 128
    2242:	5f e3       	ldi	r21, 0x3F	; 63
    2244:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2248:	88 23       	and	r24, r24
    224a:	2c f4       	brge	.+10     	; 0x2256 <LCD_VidWrite4Data+0x220>
		__ticks = 1;
    224c:	81 e0       	ldi	r24, 0x01	; 1
    224e:	90 e0       	ldi	r25, 0x00	; 0
    2250:	9c 8b       	std	Y+20, r25	; 0x14
    2252:	8b 8b       	std	Y+19, r24	; 0x13
    2254:	3f c0       	rjmp	.+126    	; 0x22d4 <LCD_VidWrite4Data+0x29e>
	else if (__tmp > 65535)
    2256:	6d 89       	ldd	r22, Y+21	; 0x15
    2258:	7e 89       	ldd	r23, Y+22	; 0x16
    225a:	8f 89       	ldd	r24, Y+23	; 0x17
    225c:	98 8d       	ldd	r25, Y+24	; 0x18
    225e:	20 e0       	ldi	r18, 0x00	; 0
    2260:	3f ef       	ldi	r19, 0xFF	; 255
    2262:	4f e7       	ldi	r20, 0x7F	; 127
    2264:	57 e4       	ldi	r21, 0x47	; 71
    2266:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    226a:	18 16       	cp	r1, r24
    226c:	4c f5       	brge	.+82     	; 0x22c0 <LCD_VidWrite4Data+0x28a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    226e:	69 8d       	ldd	r22, Y+25	; 0x19
    2270:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2272:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2274:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2276:	20 e0       	ldi	r18, 0x00	; 0
    2278:	30 e0       	ldi	r19, 0x00	; 0
    227a:	40 e2       	ldi	r20, 0x20	; 32
    227c:	51 e4       	ldi	r21, 0x41	; 65
    227e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2282:	dc 01       	movw	r26, r24
    2284:	cb 01       	movw	r24, r22
    2286:	bc 01       	movw	r22, r24
    2288:	cd 01       	movw	r24, r26
    228a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    228e:	dc 01       	movw	r26, r24
    2290:	cb 01       	movw	r24, r22
    2292:	9c 8b       	std	Y+20, r25	; 0x14
    2294:	8b 8b       	std	Y+19, r24	; 0x13
    2296:	0f c0       	rjmp	.+30     	; 0x22b6 <LCD_VidWrite4Data+0x280>
    2298:	88 ec       	ldi	r24, 0xC8	; 200
    229a:	90 e0       	ldi	r25, 0x00	; 0
    229c:	9a 8b       	std	Y+18, r25	; 0x12
    229e:	89 8b       	std	Y+17, r24	; 0x11
    22a0:	89 89       	ldd	r24, Y+17	; 0x11
    22a2:	9a 89       	ldd	r25, Y+18	; 0x12
    22a4:	01 97       	sbiw	r24, 0x01	; 1
    22a6:	f1 f7       	brne	.-4      	; 0x22a4 <LCD_VidWrite4Data+0x26e>
    22a8:	9a 8b       	std	Y+18, r25	; 0x12
    22aa:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22ac:	8b 89       	ldd	r24, Y+19	; 0x13
    22ae:	9c 89       	ldd	r25, Y+20	; 0x14
    22b0:	01 97       	sbiw	r24, 0x01	; 1
    22b2:	9c 8b       	std	Y+20, r25	; 0x14
    22b4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22b6:	8b 89       	ldd	r24, Y+19	; 0x13
    22b8:	9c 89       	ldd	r25, Y+20	; 0x14
    22ba:	00 97       	sbiw	r24, 0x00	; 0
    22bc:	69 f7       	brne	.-38     	; 0x2298 <LCD_VidWrite4Data+0x262>
    22be:	14 c0       	rjmp	.+40     	; 0x22e8 <LCD_VidWrite4Data+0x2b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22c0:	6d 89       	ldd	r22, Y+21	; 0x15
    22c2:	7e 89       	ldd	r23, Y+22	; 0x16
    22c4:	8f 89       	ldd	r24, Y+23	; 0x17
    22c6:	98 8d       	ldd	r25, Y+24	; 0x18
    22c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22cc:	dc 01       	movw	r26, r24
    22ce:	cb 01       	movw	r24, r22
    22d0:	9c 8b       	std	Y+20, r25	; 0x14
    22d2:	8b 8b       	std	Y+19, r24	; 0x13
    22d4:	8b 89       	ldd	r24, Y+19	; 0x13
    22d6:	9c 89       	ldd	r25, Y+20	; 0x14
    22d8:	98 8b       	std	Y+16, r25	; 0x10
    22da:	8f 87       	std	Y+15, r24	; 0x0f
    22dc:	8f 85       	ldd	r24, Y+15	; 0x0f
    22de:	98 89       	ldd	r25, Y+16	; 0x10
    22e0:	01 97       	sbiw	r24, 0x01	; 1
    22e2:	f1 f7       	brne	.-4      	; 0x22e0 <LCD_VidWrite4Data+0x2aa>
    22e4:	98 8b       	std	Y+16, r25	; 0x10
    22e6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_VidSetPinValue(LCD_INIT,LCD_EN,0);
    22e8:	83 e0       	ldi	r24, 0x03	; 3
    22ea:	62 e0       	ldi	r22, 0x02	; 2
    22ec:	40 e0       	ldi	r20, 0x00	; 0
    22ee:	0e 94 a4 07 	call	0xf48	; 0xf48 <DIO_VidSetPinValue>
    22f2:	80 e0       	ldi	r24, 0x00	; 0
    22f4:	90 e0       	ldi	r25, 0x00	; 0
    22f6:	a0 e0       	ldi	r26, 0x00	; 0
    22f8:	b0 e4       	ldi	r27, 0x40	; 64
    22fa:	8b 87       	std	Y+11, r24	; 0x0b
    22fc:	9c 87       	std	Y+12, r25	; 0x0c
    22fe:	ad 87       	std	Y+13, r26	; 0x0d
    2300:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2302:	6b 85       	ldd	r22, Y+11	; 0x0b
    2304:	7c 85       	ldd	r23, Y+12	; 0x0c
    2306:	8d 85       	ldd	r24, Y+13	; 0x0d
    2308:	9e 85       	ldd	r25, Y+14	; 0x0e
    230a:	20 e0       	ldi	r18, 0x00	; 0
    230c:	30 e0       	ldi	r19, 0x00	; 0
    230e:	4a ef       	ldi	r20, 0xFA	; 250
    2310:	54 e4       	ldi	r21, 0x44	; 68
    2312:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2316:	dc 01       	movw	r26, r24
    2318:	cb 01       	movw	r24, r22
    231a:	8f 83       	std	Y+7, r24	; 0x07
    231c:	98 87       	std	Y+8, r25	; 0x08
    231e:	a9 87       	std	Y+9, r26	; 0x09
    2320:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2322:	6f 81       	ldd	r22, Y+7	; 0x07
    2324:	78 85       	ldd	r23, Y+8	; 0x08
    2326:	89 85       	ldd	r24, Y+9	; 0x09
    2328:	9a 85       	ldd	r25, Y+10	; 0x0a
    232a:	20 e0       	ldi	r18, 0x00	; 0
    232c:	30 e0       	ldi	r19, 0x00	; 0
    232e:	40 e8       	ldi	r20, 0x80	; 128
    2330:	5f e3       	ldi	r21, 0x3F	; 63
    2332:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2336:	88 23       	and	r24, r24
    2338:	2c f4       	brge	.+10     	; 0x2344 <LCD_VidWrite4Data+0x30e>
		__ticks = 1;
    233a:	81 e0       	ldi	r24, 0x01	; 1
    233c:	90 e0       	ldi	r25, 0x00	; 0
    233e:	9e 83       	std	Y+6, r25	; 0x06
    2340:	8d 83       	std	Y+5, r24	; 0x05
    2342:	3f c0       	rjmp	.+126    	; 0x23c2 <LCD_VidWrite4Data+0x38c>
	else if (__tmp > 65535)
    2344:	6f 81       	ldd	r22, Y+7	; 0x07
    2346:	78 85       	ldd	r23, Y+8	; 0x08
    2348:	89 85       	ldd	r24, Y+9	; 0x09
    234a:	9a 85       	ldd	r25, Y+10	; 0x0a
    234c:	20 e0       	ldi	r18, 0x00	; 0
    234e:	3f ef       	ldi	r19, 0xFF	; 255
    2350:	4f e7       	ldi	r20, 0x7F	; 127
    2352:	57 e4       	ldi	r21, 0x47	; 71
    2354:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2358:	18 16       	cp	r1, r24
    235a:	4c f5       	brge	.+82     	; 0x23ae <LCD_VidWrite4Data+0x378>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    235c:	6b 85       	ldd	r22, Y+11	; 0x0b
    235e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2360:	8d 85       	ldd	r24, Y+13	; 0x0d
    2362:	9e 85       	ldd	r25, Y+14	; 0x0e
    2364:	20 e0       	ldi	r18, 0x00	; 0
    2366:	30 e0       	ldi	r19, 0x00	; 0
    2368:	40 e2       	ldi	r20, 0x20	; 32
    236a:	51 e4       	ldi	r21, 0x41	; 65
    236c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2370:	dc 01       	movw	r26, r24
    2372:	cb 01       	movw	r24, r22
    2374:	bc 01       	movw	r22, r24
    2376:	cd 01       	movw	r24, r26
    2378:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    237c:	dc 01       	movw	r26, r24
    237e:	cb 01       	movw	r24, r22
    2380:	9e 83       	std	Y+6, r25	; 0x06
    2382:	8d 83       	std	Y+5, r24	; 0x05
    2384:	0f c0       	rjmp	.+30     	; 0x23a4 <LCD_VidWrite4Data+0x36e>
    2386:	88 ec       	ldi	r24, 0xC8	; 200
    2388:	90 e0       	ldi	r25, 0x00	; 0
    238a:	9c 83       	std	Y+4, r25	; 0x04
    238c:	8b 83       	std	Y+3, r24	; 0x03
    238e:	8b 81       	ldd	r24, Y+3	; 0x03
    2390:	9c 81       	ldd	r25, Y+4	; 0x04
    2392:	01 97       	sbiw	r24, 0x01	; 1
    2394:	f1 f7       	brne	.-4      	; 0x2392 <LCD_VidWrite4Data+0x35c>
    2396:	9c 83       	std	Y+4, r25	; 0x04
    2398:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    239a:	8d 81       	ldd	r24, Y+5	; 0x05
    239c:	9e 81       	ldd	r25, Y+6	; 0x06
    239e:	01 97       	sbiw	r24, 0x01	; 1
    23a0:	9e 83       	std	Y+6, r25	; 0x06
    23a2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23a4:	8d 81       	ldd	r24, Y+5	; 0x05
    23a6:	9e 81       	ldd	r25, Y+6	; 0x06
    23a8:	00 97       	sbiw	r24, 0x00	; 0
    23aa:	69 f7       	brne	.-38     	; 0x2386 <LCD_VidWrite4Data+0x350>
    23ac:	14 c0       	rjmp	.+40     	; 0x23d6 <LCD_VidWrite4Data+0x3a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23ae:	6f 81       	ldd	r22, Y+7	; 0x07
    23b0:	78 85       	ldd	r23, Y+8	; 0x08
    23b2:	89 85       	ldd	r24, Y+9	; 0x09
    23b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    23b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23ba:	dc 01       	movw	r26, r24
    23bc:	cb 01       	movw	r24, r22
    23be:	9e 83       	std	Y+6, r25	; 0x06
    23c0:	8d 83       	std	Y+5, r24	; 0x05
    23c2:	8d 81       	ldd	r24, Y+5	; 0x05
    23c4:	9e 81       	ldd	r25, Y+6	; 0x06
    23c6:	9a 83       	std	Y+2, r25	; 0x02
    23c8:	89 83       	std	Y+1, r24	; 0x01
    23ca:	89 81       	ldd	r24, Y+1	; 0x01
    23cc:	9a 81       	ldd	r25, Y+2	; 0x02
    23ce:	01 97       	sbiw	r24, 0x01	; 1
    23d0:	f1 f7       	brne	.-4      	; 0x23ce <LCD_VidWrite4Data+0x398>
    23d2:	9a 83       	std	Y+2, r25	; 0x02
    23d4:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(2);

}
    23d6:	ab 96       	adiw	r28, 0x2b	; 43
    23d8:	0f b6       	in	r0, 0x3f	; 63
    23da:	f8 94       	cli
    23dc:	de bf       	out	0x3e, r29	; 62
    23de:	0f be       	out	0x3f, r0	; 63
    23e0:	cd bf       	out	0x3d, r28	; 61
    23e2:	cf 91       	pop	r28
    23e4:	df 91       	pop	r29
    23e6:	08 95       	ret

000023e8 <LCD_Write4String>:

void LCD_Write4String(u8* str,u8 row,u8 col)
{
    23e8:	df 93       	push	r29
    23ea:	cf 93       	push	r28
    23ec:	00 d0       	rcall	.+0      	; 0x23ee <LCD_Write4String+0x6>
    23ee:	00 d0       	rcall	.+0      	; 0x23f0 <LCD_Write4String+0x8>
    23f0:	00 d0       	rcall	.+0      	; 0x23f2 <LCD_Write4String+0xa>
    23f2:	cd b7       	in	r28, 0x3d	; 61
    23f4:	de b7       	in	r29, 0x3e	; 62
    23f6:	9c 83       	std	Y+4, r25	; 0x04
    23f8:	8b 83       	std	Y+3, r24	; 0x03
    23fa:	6d 83       	std	Y+5, r22	; 0x05
    23fc:	4e 83       	std	Y+6, r20	; 0x06
	LCD_GoToPosition(row,col);
    23fe:	8d 81       	ldd	r24, Y+5	; 0x05
    2400:	6e 81       	ldd	r22, Y+6	; 0x06
    2402:	0e 94 bc 12 	call	0x2578	; 0x2578 <LCD_GoToPosition>
	u8 index=0;
    2406:	1a 82       	std	Y+2, r1	; 0x02
	u8 line0=0;
    2408:	19 82       	std	Y+1, r1	; 0x01
    240a:	8a c0       	rjmp	.+276    	; 0x2520 <LCD_Write4String+0x138>
	while (str[index] !='\0' && ((row*16)+(col+index))<32)
	{
		if (((row*16)+(col+index))<16&&(line0==0))
    240c:	8d 81       	ldd	r24, Y+5	; 0x05
    240e:	88 2f       	mov	r24, r24
    2410:	90 e0       	ldi	r25, 0x00	; 0
    2412:	ac 01       	movw	r20, r24
    2414:	42 95       	swap	r20
    2416:	52 95       	swap	r21
    2418:	50 7f       	andi	r21, 0xF0	; 240
    241a:	54 27       	eor	r21, r20
    241c:	40 7f       	andi	r20, 0xF0	; 240
    241e:	54 27       	eor	r21, r20
    2420:	8e 81       	ldd	r24, Y+6	; 0x06
    2422:	28 2f       	mov	r18, r24
    2424:	30 e0       	ldi	r19, 0x00	; 0
    2426:	8a 81       	ldd	r24, Y+2	; 0x02
    2428:	88 2f       	mov	r24, r24
    242a:	90 e0       	ldi	r25, 0x00	; 0
    242c:	82 0f       	add	r24, r18
    242e:	93 1f       	adc	r25, r19
    2430:	84 0f       	add	r24, r20
    2432:	95 1f       	adc	r25, r21
    2434:	80 31       	cpi	r24, 0x10	; 16
    2436:	91 05       	cpc	r25, r1
    2438:	94 f4       	brge	.+36     	; 0x245e <LCD_Write4String+0x76>
    243a:	89 81       	ldd	r24, Y+1	; 0x01
    243c:	88 23       	and	r24, r24
    243e:	79 f4       	brne	.+30     	; 0x245e <LCD_Write4String+0x76>
		{
			LCD_VidWrite4Data(str[index]);
    2440:	8a 81       	ldd	r24, Y+2	; 0x02
    2442:	28 2f       	mov	r18, r24
    2444:	30 e0       	ldi	r19, 0x00	; 0
    2446:	8b 81       	ldd	r24, Y+3	; 0x03
    2448:	9c 81       	ldd	r25, Y+4	; 0x04
    244a:	fc 01       	movw	r30, r24
    244c:	e2 0f       	add	r30, r18
    244e:	f3 1f       	adc	r31, r19
    2450:	80 81       	ld	r24, Z
    2452:	0e 94 1b 10 	call	0x2036	; 0x2036 <LCD_VidWrite4Data>
			index++;
    2456:	8a 81       	ldd	r24, Y+2	; 0x02
    2458:	8f 5f       	subi	r24, 0xFF	; 255
    245a:	8a 83       	std	Y+2, r24	; 0x02
    245c:	61 c0       	rjmp	.+194    	; 0x2520 <LCD_Write4String+0x138>
		}
		else if (((row*16)+(col+index))>=16&& ((row*16)+(col+index))<32 &&(line0==0))
    245e:	8d 81       	ldd	r24, Y+5	; 0x05
    2460:	88 2f       	mov	r24, r24
    2462:	90 e0       	ldi	r25, 0x00	; 0
    2464:	ac 01       	movw	r20, r24
    2466:	42 95       	swap	r20
    2468:	52 95       	swap	r21
    246a:	50 7f       	andi	r21, 0xF0	; 240
    246c:	54 27       	eor	r21, r20
    246e:	40 7f       	andi	r20, 0xF0	; 240
    2470:	54 27       	eor	r21, r20
    2472:	8e 81       	ldd	r24, Y+6	; 0x06
    2474:	28 2f       	mov	r18, r24
    2476:	30 e0       	ldi	r19, 0x00	; 0
    2478:	8a 81       	ldd	r24, Y+2	; 0x02
    247a:	88 2f       	mov	r24, r24
    247c:	90 e0       	ldi	r25, 0x00	; 0
    247e:	82 0f       	add	r24, r18
    2480:	93 1f       	adc	r25, r19
    2482:	84 0f       	add	r24, r20
    2484:	95 1f       	adc	r25, r21
    2486:	80 31       	cpi	r24, 0x10	; 16
    2488:	91 05       	cpc	r25, r1
    248a:	14 f1       	brlt	.+68     	; 0x24d0 <LCD_Write4String+0xe8>
    248c:	8d 81       	ldd	r24, Y+5	; 0x05
    248e:	88 2f       	mov	r24, r24
    2490:	90 e0       	ldi	r25, 0x00	; 0
    2492:	ac 01       	movw	r20, r24
    2494:	42 95       	swap	r20
    2496:	52 95       	swap	r21
    2498:	50 7f       	andi	r21, 0xF0	; 240
    249a:	54 27       	eor	r21, r20
    249c:	40 7f       	andi	r20, 0xF0	; 240
    249e:	54 27       	eor	r21, r20
    24a0:	8e 81       	ldd	r24, Y+6	; 0x06
    24a2:	28 2f       	mov	r18, r24
    24a4:	30 e0       	ldi	r19, 0x00	; 0
    24a6:	8a 81       	ldd	r24, Y+2	; 0x02
    24a8:	88 2f       	mov	r24, r24
    24aa:	90 e0       	ldi	r25, 0x00	; 0
    24ac:	82 0f       	add	r24, r18
    24ae:	93 1f       	adc	r25, r19
    24b0:	84 0f       	add	r24, r20
    24b2:	95 1f       	adc	r25, r21
    24b4:	80 32       	cpi	r24, 0x20	; 32
    24b6:	91 05       	cpc	r25, r1
    24b8:	5c f4       	brge	.+22     	; 0x24d0 <LCD_Write4String+0xe8>
    24ba:	89 81       	ldd	r24, Y+1	; 0x01
    24bc:	88 23       	and	r24, r24
    24be:	41 f4       	brne	.+16     	; 0x24d0 <LCD_Write4String+0xe8>
		{
			LCD_GoToPosition(1,col);
    24c0:	81 e0       	ldi	r24, 0x01	; 1
    24c2:	6e 81       	ldd	r22, Y+6	; 0x06
    24c4:	0e 94 bc 12 	call	0x2578	; 0x2578 <LCD_GoToPosition>
			line0++;
    24c8:	89 81       	ldd	r24, Y+1	; 0x01
    24ca:	8f 5f       	subi	r24, 0xFF	; 255
    24cc:	89 83       	std	Y+1, r24	; 0x01
    24ce:	28 c0       	rjmp	.+80     	; 0x2520 <LCD_Write4String+0x138>
		}
		else if (((row*16)+(col+index))<32&&(line0==1))
    24d0:	8d 81       	ldd	r24, Y+5	; 0x05
    24d2:	88 2f       	mov	r24, r24
    24d4:	90 e0       	ldi	r25, 0x00	; 0
    24d6:	ac 01       	movw	r20, r24
    24d8:	42 95       	swap	r20
    24da:	52 95       	swap	r21
    24dc:	50 7f       	andi	r21, 0xF0	; 240
    24de:	54 27       	eor	r21, r20
    24e0:	40 7f       	andi	r20, 0xF0	; 240
    24e2:	54 27       	eor	r21, r20
    24e4:	8e 81       	ldd	r24, Y+6	; 0x06
    24e6:	28 2f       	mov	r18, r24
    24e8:	30 e0       	ldi	r19, 0x00	; 0
    24ea:	8a 81       	ldd	r24, Y+2	; 0x02
    24ec:	88 2f       	mov	r24, r24
    24ee:	90 e0       	ldi	r25, 0x00	; 0
    24f0:	82 0f       	add	r24, r18
    24f2:	93 1f       	adc	r25, r19
    24f4:	84 0f       	add	r24, r20
    24f6:	95 1f       	adc	r25, r21
    24f8:	80 32       	cpi	r24, 0x20	; 32
    24fa:	91 05       	cpc	r25, r1
    24fc:	8c f4       	brge	.+34     	; 0x2520 <LCD_Write4String+0x138>
    24fe:	89 81       	ldd	r24, Y+1	; 0x01
    2500:	81 30       	cpi	r24, 0x01	; 1
    2502:	71 f4       	brne	.+28     	; 0x2520 <LCD_Write4String+0x138>
		{
			LCD_VidWrite4Data(str[index]);
    2504:	8a 81       	ldd	r24, Y+2	; 0x02
    2506:	28 2f       	mov	r18, r24
    2508:	30 e0       	ldi	r19, 0x00	; 0
    250a:	8b 81       	ldd	r24, Y+3	; 0x03
    250c:	9c 81       	ldd	r25, Y+4	; 0x04
    250e:	fc 01       	movw	r30, r24
    2510:	e2 0f       	add	r30, r18
    2512:	f3 1f       	adc	r31, r19
    2514:	80 81       	ld	r24, Z
    2516:	0e 94 1b 10 	call	0x2036	; 0x2036 <LCD_VidWrite4Data>
			index++;
    251a:	8a 81       	ldd	r24, Y+2	; 0x02
    251c:	8f 5f       	subi	r24, 0xFF	; 255
    251e:	8a 83       	std	Y+2, r24	; 0x02
void LCD_Write4String(u8* str,u8 row,u8 col)
{
	LCD_GoToPosition(row,col);
	u8 index=0;
	u8 line0=0;
	while (str[index] !='\0' && ((row*16)+(col+index))<32)
    2520:	8a 81       	ldd	r24, Y+2	; 0x02
    2522:	28 2f       	mov	r18, r24
    2524:	30 e0       	ldi	r19, 0x00	; 0
    2526:	8b 81       	ldd	r24, Y+3	; 0x03
    2528:	9c 81       	ldd	r25, Y+4	; 0x04
    252a:	fc 01       	movw	r30, r24
    252c:	e2 0f       	add	r30, r18
    252e:	f3 1f       	adc	r31, r19
    2530:	80 81       	ld	r24, Z
    2532:	88 23       	and	r24, r24
    2534:	c1 f0       	breq	.+48     	; 0x2566 <LCD_Write4String+0x17e>
    2536:	8d 81       	ldd	r24, Y+5	; 0x05
    2538:	88 2f       	mov	r24, r24
    253a:	90 e0       	ldi	r25, 0x00	; 0
    253c:	ac 01       	movw	r20, r24
    253e:	42 95       	swap	r20
    2540:	52 95       	swap	r21
    2542:	50 7f       	andi	r21, 0xF0	; 240
    2544:	54 27       	eor	r21, r20
    2546:	40 7f       	andi	r20, 0xF0	; 240
    2548:	54 27       	eor	r21, r20
    254a:	8e 81       	ldd	r24, Y+6	; 0x06
    254c:	28 2f       	mov	r18, r24
    254e:	30 e0       	ldi	r19, 0x00	; 0
    2550:	8a 81       	ldd	r24, Y+2	; 0x02
    2552:	88 2f       	mov	r24, r24
    2554:	90 e0       	ldi	r25, 0x00	; 0
    2556:	82 0f       	add	r24, r18
    2558:	93 1f       	adc	r25, r19
    255a:	84 0f       	add	r24, r20
    255c:	95 1f       	adc	r25, r21
    255e:	80 32       	cpi	r24, 0x20	; 32
    2560:	91 05       	cpc	r25, r1
    2562:	0c f4       	brge	.+2      	; 0x2566 <LCD_Write4String+0x17e>
    2564:	53 cf       	rjmp	.-346    	; 0x240c <LCD_Write4String+0x24>
		{
			LCD_VidWrite4Data(str[index]);
			index++;
		}
	}
}
    2566:	26 96       	adiw	r28, 0x06	; 6
    2568:	0f b6       	in	r0, 0x3f	; 63
    256a:	f8 94       	cli
    256c:	de bf       	out	0x3e, r29	; 62
    256e:	0f be       	out	0x3f, r0	; 63
    2570:	cd bf       	out	0x3d, r28	; 61
    2572:	cf 91       	pop	r28
    2574:	df 91       	pop	r29
    2576:	08 95       	ret

00002578 <LCD_GoToPosition>:

void LCD_GoToPosition(u8 row,u8 col)
{
    2578:	df 93       	push	r29
    257a:	cf 93       	push	r28
    257c:	00 d0       	rcall	.+0      	; 0x257e <LCD_GoToPosition+0x6>
    257e:	0f 92       	push	r0
    2580:	cd b7       	in	r28, 0x3d	; 61
    2582:	de b7       	in	r29, 0x3e	; 62
    2584:	8a 83       	std	Y+2, r24	; 0x02
    2586:	6b 83       	std	Y+3, r22	; 0x03
	u8 adress;
	adress= (row*0x40)+col;
    2588:	8a 81       	ldd	r24, Y+2	; 0x02
    258a:	88 2f       	mov	r24, r24
    258c:	90 e0       	ldi	r25, 0x00	; 0
    258e:	00 24       	eor	r0, r0
    2590:	96 95       	lsr	r25
    2592:	87 95       	ror	r24
    2594:	07 94       	ror	r0
    2596:	96 95       	lsr	r25
    2598:	87 95       	ror	r24
    259a:	07 94       	ror	r0
    259c:	98 2f       	mov	r25, r24
    259e:	80 2d       	mov	r24, r0
    25a0:	98 2f       	mov	r25, r24
    25a2:	8b 81       	ldd	r24, Y+3	; 0x03
    25a4:	89 0f       	add	r24, r25
    25a6:	89 83       	std	Y+1, r24	; 0x01
	adress = SET_BIT(adress,7);
    25a8:	89 81       	ldd	r24, Y+1	; 0x01
    25aa:	80 68       	ori	r24, 0x80	; 128
    25ac:	89 83       	std	Y+1, r24	; 0x01
	LCD_VidWrite4Cmd(adress);
    25ae:	89 81       	ldd	r24, Y+1	; 0x01
    25b0:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <LCD_VidWrite4Cmd>
}
    25b4:	0f 90       	pop	r0
    25b6:	0f 90       	pop	r0
    25b8:	0f 90       	pop	r0
    25ba:	cf 91       	pop	r28
    25bc:	df 91       	pop	r29
    25be:	08 95       	ret

000025c0 <LCD_VidDisp4Number>:

void LCD_VidDisp4Number(u32 number)
{
    25c0:	df 93       	push	r29
    25c2:	cf 93       	push	r28
    25c4:	cd b7       	in	r28, 0x3d	; 61
    25c6:	de b7       	in	r29, 0x3e	; 62
    25c8:	68 97       	sbiw	r28, 0x18	; 24
    25ca:	0f b6       	in	r0, 0x3f	; 63
    25cc:	f8 94       	cli
    25ce:	de bf       	out	0x3e, r29	; 62
    25d0:	0f be       	out	0x3f, r0	; 63
    25d2:	cd bf       	out	0x3d, r28	; 61
    25d4:	6d 8b       	std	Y+21, r22	; 0x15
    25d6:	7e 8b       	std	Y+22, r23	; 0x16
    25d8:	8f 8b       	std	Y+23, r24	; 0x17
    25da:	98 8f       	std	Y+24, r25	; 0x18

	u32 digit=0;
    25dc:	1f 82       	std	Y+7, r1	; 0x07
    25de:	18 86       	std	Y+8, r1	; 0x08
    25e0:	19 86       	std	Y+9, r1	; 0x09
    25e2:	1a 86       	std	Y+10, r1	; 0x0a
	u16 i=0;
    25e4:	1e 82       	std	Y+6, r1	; 0x06
    25e6:	1d 82       	std	Y+5, r1	; 0x05
	u32 f=0;
    25e8:	19 82       	std	Y+1, r1	; 0x01
    25ea:	1a 82       	std	Y+2, r1	; 0x02
    25ec:	1b 82       	std	Y+3, r1	; 0x03
    25ee:	1c 82       	std	Y+4, r1	; 0x04
    25f0:	45 c0       	rjmp	.+138    	; 0x267c <LCD_VidDisp4Number+0xbc>
	u8 number_holder[10];

	while(number>0)
	{
		f=number%10;
    25f2:	8d 89       	ldd	r24, Y+21	; 0x15
    25f4:	9e 89       	ldd	r25, Y+22	; 0x16
    25f6:	af 89       	ldd	r26, Y+23	; 0x17
    25f8:	b8 8d       	ldd	r27, Y+24	; 0x18
    25fa:	2a e0       	ldi	r18, 0x0A	; 10
    25fc:	30 e0       	ldi	r19, 0x00	; 0
    25fe:	40 e0       	ldi	r20, 0x00	; 0
    2600:	50 e0       	ldi	r21, 0x00	; 0
    2602:	bc 01       	movw	r22, r24
    2604:	cd 01       	movw	r24, r26
    2606:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <__udivmodsi4>
    260a:	dc 01       	movw	r26, r24
    260c:	cb 01       	movw	r24, r22
    260e:	89 83       	std	Y+1, r24	; 0x01
    2610:	9a 83       	std	Y+2, r25	; 0x02
    2612:	ab 83       	std	Y+3, r26	; 0x03
    2614:	bc 83       	std	Y+4, r27	; 0x04
		number_holder[i]=f;
    2616:	2d 81       	ldd	r18, Y+5	; 0x05
    2618:	3e 81       	ldd	r19, Y+6	; 0x06
    261a:	49 81       	ldd	r20, Y+1	; 0x01
    261c:	ce 01       	movw	r24, r28
    261e:	0b 96       	adiw	r24, 0x0b	; 11
    2620:	fc 01       	movw	r30, r24
    2622:	e2 0f       	add	r30, r18
    2624:	f3 1f       	adc	r31, r19
    2626:	40 83       	st	Z, r20
		number=number/10;
    2628:	8d 89       	ldd	r24, Y+21	; 0x15
    262a:	9e 89       	ldd	r25, Y+22	; 0x16
    262c:	af 89       	ldd	r26, Y+23	; 0x17
    262e:	b8 8d       	ldd	r27, Y+24	; 0x18
    2630:	2a e0       	ldi	r18, 0x0A	; 10
    2632:	30 e0       	ldi	r19, 0x00	; 0
    2634:	40 e0       	ldi	r20, 0x00	; 0
    2636:	50 e0       	ldi	r21, 0x00	; 0
    2638:	bc 01       	movw	r22, r24
    263a:	cd 01       	movw	r24, r26
    263c:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <__udivmodsi4>
    2640:	da 01       	movw	r26, r20
    2642:	c9 01       	movw	r24, r18
    2644:	8d 8b       	std	Y+21, r24	; 0x15
    2646:	9e 8b       	std	Y+22, r25	; 0x16
    2648:	af 8b       	std	Y+23, r26	; 0x17
    264a:	b8 8f       	std	Y+24, r27	; 0x18
		i++;
    264c:	8d 81       	ldd	r24, Y+5	; 0x05
    264e:	9e 81       	ldd	r25, Y+6	; 0x06
    2650:	01 96       	adiw	r24, 0x01	; 1
    2652:	9e 83       	std	Y+6, r25	; 0x06
    2654:	8d 83       	std	Y+5, r24	; 0x05
		digit++;
    2656:	8f 81       	ldd	r24, Y+7	; 0x07
    2658:	98 85       	ldd	r25, Y+8	; 0x08
    265a:	a9 85       	ldd	r26, Y+9	; 0x09
    265c:	ba 85       	ldd	r27, Y+10	; 0x0a
    265e:	01 96       	adiw	r24, 0x01	; 1
    2660:	a1 1d       	adc	r26, r1
    2662:	b1 1d       	adc	r27, r1
    2664:	8f 83       	std	Y+7, r24	; 0x07
    2666:	98 87       	std	Y+8, r25	; 0x08
    2668:	a9 87       	std	Y+9, r26	; 0x09
    266a:	ba 87       	std	Y+10, r27	; 0x0a
		if(number==0)
    266c:	8d 89       	ldd	r24, Y+21	; 0x15
    266e:	9e 89       	ldd	r25, Y+22	; 0x16
    2670:	af 89       	ldd	r26, Y+23	; 0x17
    2672:	b8 8d       	ldd	r27, Y+24	; 0x18
    2674:	00 97       	sbiw	r24, 0x00	; 0
    2676:	a1 05       	cpc	r26, r1
    2678:	b1 05       	cpc	r27, r1
    267a:	49 f0       	breq	.+18     	; 0x268e <LCD_VidDisp4Number+0xce>
	u32 digit=0;
	u16 i=0;
	u32 f=0;
	u8 number_holder[10];

	while(number>0)
    267c:	8d 89       	ldd	r24, Y+21	; 0x15
    267e:	9e 89       	ldd	r25, Y+22	; 0x16
    2680:	af 89       	ldd	r26, Y+23	; 0x17
    2682:	b8 8d       	ldd	r27, Y+24	; 0x18
    2684:	00 97       	sbiw	r24, 0x00	; 0
    2686:	a1 05       	cpc	r26, r1
    2688:	b1 05       	cpc	r27, r1
    268a:	09 f0       	breq	.+2      	; 0x268e <LCD_VidDisp4Number+0xce>
    268c:	b2 cf       	rjmp	.-156    	; 0x25f2 <LCD_VidDisp4Number+0x32>
		i++;
		digit++;
		if(number==0)
		{break;}
	}
	for(i=digit;i>0;i--)
    268e:	8f 81       	ldd	r24, Y+7	; 0x07
    2690:	98 85       	ldd	r25, Y+8	; 0x08
    2692:	9e 83       	std	Y+6, r25	; 0x06
    2694:	8d 83       	std	Y+5, r24	; 0x05
    2696:	13 c0       	rjmp	.+38     	; 0x26be <LCD_VidDisp4Number+0xfe>
	{
		LCD_VidWrite4Data(number_holder[i-1]+48);
    2698:	8d 81       	ldd	r24, Y+5	; 0x05
    269a:	9e 81       	ldd	r25, Y+6	; 0x06
    269c:	9c 01       	movw	r18, r24
    269e:	21 50       	subi	r18, 0x01	; 1
    26a0:	30 40       	sbci	r19, 0x00	; 0
    26a2:	ce 01       	movw	r24, r28
    26a4:	0b 96       	adiw	r24, 0x0b	; 11
    26a6:	fc 01       	movw	r30, r24
    26a8:	e2 0f       	add	r30, r18
    26aa:	f3 1f       	adc	r31, r19
    26ac:	80 81       	ld	r24, Z
    26ae:	80 5d       	subi	r24, 0xD0	; 208
    26b0:	0e 94 1b 10 	call	0x2036	; 0x2036 <LCD_VidWrite4Data>
		i++;
		digit++;
		if(number==0)
		{break;}
	}
	for(i=digit;i>0;i--)
    26b4:	8d 81       	ldd	r24, Y+5	; 0x05
    26b6:	9e 81       	ldd	r25, Y+6	; 0x06
    26b8:	01 97       	sbiw	r24, 0x01	; 1
    26ba:	9e 83       	std	Y+6, r25	; 0x06
    26bc:	8d 83       	std	Y+5, r24	; 0x05
    26be:	8d 81       	ldd	r24, Y+5	; 0x05
    26c0:	9e 81       	ldd	r25, Y+6	; 0x06
    26c2:	00 97       	sbiw	r24, 0x00	; 0
    26c4:	49 f7       	brne	.-46     	; 0x2698 <LCD_VidDisp4Number+0xd8>
	{
		LCD_VidWrite4Data(number_holder[i-1]+48);
	}

}
    26c6:	68 96       	adiw	r28, 0x18	; 24
    26c8:	0f b6       	in	r0, 0x3f	; 63
    26ca:	f8 94       	cli
    26cc:	de bf       	out	0x3e, r29	; 62
    26ce:	0f be       	out	0x3f, r0	; 63
    26d0:	cd bf       	out	0x3d, r28	; 61
    26d2:	cf 91       	pop	r28
    26d4:	df 91       	pop	r29
    26d6:	08 95       	ret

000026d8 <LCD_VidGoto4CGRAM>:

void LCD_VidGoto4CGRAM()
{
    26d8:	df 93       	push	r29
    26da:	cf 93       	push	r28
    26dc:	cd b7       	in	r28, 0x3d	; 61
    26de:	de b7       	in	r29, 0x3e	; 62
	LCD_VidWrite4Cmd(SET_CGRAM_ADDRESS);
    26e0:	80 e4       	ldi	r24, 0x40	; 64
    26e2:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <LCD_VidWrite4Cmd>
}
    26e6:	cf 91       	pop	r28
    26e8:	df 91       	pop	r29
    26ea:	08 95       	ret

000026ec <LCD_StoreCustomChr>:

void LCD_StoreCustomChr(u8* LOC_pattern, u8 LOC_CGRAM_Index)
{
    26ec:	df 93       	push	r29
    26ee:	cf 93       	push	r28
    26f0:	00 d0       	rcall	.+0      	; 0x26f2 <LCD_StoreCustomChr+0x6>
    26f2:	00 d0       	rcall	.+0      	; 0x26f4 <LCD_StoreCustomChr+0x8>
    26f4:	0f 92       	push	r0
    26f6:	cd b7       	in	r28, 0x3d	; 61
    26f8:	de b7       	in	r29, 0x3e	; 62
    26fa:	9c 83       	std	Y+4, r25	; 0x04
    26fc:	8b 83       	std	Y+3, r24	; 0x03
    26fe:	6d 83       	std	Y+5, r22	; 0x05
	u8 LOC_Adress;
	u8 LOC_Adress_Index;
	if(LOC_CGRAM_Index < 8)
    2700:	8d 81       	ldd	r24, Y+5	; 0x05
    2702:	88 30       	cpi	r24, 0x08	; 8
    2704:	18 f5       	brcc	.+70     	; 0x274c <LCD_StoreCustomChr+0x60>
	{
		LOC_Adress = LOC_CGRAM_Index *8;
    2706:	8d 81       	ldd	r24, Y+5	; 0x05
    2708:	88 2f       	mov	r24, r24
    270a:	90 e0       	ldi	r25, 0x00	; 0
    270c:	88 0f       	add	r24, r24
    270e:	99 1f       	adc	r25, r25
    2710:	88 0f       	add	r24, r24
    2712:	99 1f       	adc	r25, r25
    2714:	88 0f       	add	r24, r24
    2716:	99 1f       	adc	r25, r25
    2718:	8a 83       	std	Y+2, r24	; 0x02
		LOC_Adress = SET_BIT(LOC_Adress,6);
    271a:	8a 81       	ldd	r24, Y+2	; 0x02
    271c:	80 64       	ori	r24, 0x40	; 64
    271e:	8a 83       	std	Y+2, r24	; 0x02
		LCD_VidWrite4Cmd(LOC_Adress);
    2720:	8a 81       	ldd	r24, Y+2	; 0x02
    2722:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <LCD_VidWrite4Cmd>
		for(LOC_Adress_Index=0;LOC_Adress_Index<8;LOC_Adress_Index++)
    2726:	19 82       	std	Y+1, r1	; 0x01
    2728:	0e c0       	rjmp	.+28     	; 0x2746 <LCD_StoreCustomChr+0x5a>
		{
			LCD_VidWrite4Data(LOC_pattern[LOC_Adress_Index]);
    272a:	89 81       	ldd	r24, Y+1	; 0x01
    272c:	28 2f       	mov	r18, r24
    272e:	30 e0       	ldi	r19, 0x00	; 0
    2730:	8b 81       	ldd	r24, Y+3	; 0x03
    2732:	9c 81       	ldd	r25, Y+4	; 0x04
    2734:	fc 01       	movw	r30, r24
    2736:	e2 0f       	add	r30, r18
    2738:	f3 1f       	adc	r31, r19
    273a:	80 81       	ld	r24, Z
    273c:	0e 94 1b 10 	call	0x2036	; 0x2036 <LCD_VidWrite4Data>
	if(LOC_CGRAM_Index < 8)
	{
		LOC_Adress = LOC_CGRAM_Index *8;
		LOC_Adress = SET_BIT(LOC_Adress,6);
		LCD_VidWrite4Cmd(LOC_Adress);
		for(LOC_Adress_Index=0;LOC_Adress_Index<8;LOC_Adress_Index++)
    2740:	89 81       	ldd	r24, Y+1	; 0x01
    2742:	8f 5f       	subi	r24, 0xFF	; 255
    2744:	89 83       	std	Y+1, r24	; 0x01
    2746:	89 81       	ldd	r24, Y+1	; 0x01
    2748:	88 30       	cpi	r24, 0x08	; 8
    274a:	78 f3       	brcs	.-34     	; 0x272a <LCD_StoreCustomChr+0x3e>
		{
			LCD_VidWrite4Data(LOC_pattern[LOC_Adress_Index]);
		}
	}
	LCD_VidWrite4Cmd(RETURN_HOME);
    274c:	82 e0       	ldi	r24, 0x02	; 2
    274e:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <LCD_VidWrite4Cmd>
}
    2752:	0f 90       	pop	r0
    2754:	0f 90       	pop	r0
    2756:	0f 90       	pop	r0
    2758:	0f 90       	pop	r0
    275a:	0f 90       	pop	r0
    275c:	cf 91       	pop	r28
    275e:	df 91       	pop	r29
    2760:	08 95       	ret

00002762 <LCD_Disply>:

void LCD_Disply(u8 LOC_CGRAM_Index,u8 LOC_row,u8 LOC_col)
{
    2762:	df 93       	push	r29
    2764:	cf 93       	push	r28
    2766:	00 d0       	rcall	.+0      	; 0x2768 <LCD_Disply+0x6>
    2768:	0f 92       	push	r0
    276a:	cd b7       	in	r28, 0x3d	; 61
    276c:	de b7       	in	r29, 0x3e	; 62
    276e:	89 83       	std	Y+1, r24	; 0x01
    2770:	6a 83       	std	Y+2, r22	; 0x02
    2772:	4b 83       	std	Y+3, r20	; 0x03
	LCD_GoToPosition(LOC_row,LOC_col);
    2774:	8a 81       	ldd	r24, Y+2	; 0x02
    2776:	6b 81       	ldd	r22, Y+3	; 0x03
    2778:	0e 94 bc 12 	call	0x2578	; 0x2578 <LCD_GoToPosition>

	LCD_VidWrite4Data(LOC_CGRAM_Index);
    277c:	89 81       	ldd	r24, Y+1	; 0x01
    277e:	0e 94 1b 10 	call	0x2036	; 0x2036 <LCD_VidWrite4Data>
}
    2782:	0f 90       	pop	r0
    2784:	0f 90       	pop	r0
    2786:	0f 90       	pop	r0
    2788:	cf 91       	pop	r28
    278a:	df 91       	pop	r29
    278c:	08 95       	ret

0000278e <LCD_clearpostion>:


void LCD_clearpostion(void)
{
    278e:	df 93       	push	r29
    2790:	cf 93       	push	r28
    2792:	cd b7       	in	r28, 0x3d	; 61
    2794:	de b7       	in	r29, 0x3e	; 62
	LCD_VidGoto4CGRAM();
    2796:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <LCD_VidGoto4CGRAM>

	LCD_VidWrite4Data(0b00000000);
    279a:	80 e0       	ldi	r24, 0x00	; 0
    279c:	0e 94 1b 10 	call	0x2036	; 0x2036 <LCD_VidWrite4Data>
	LCD_VidWrite4Data(0b00000000);
    27a0:	80 e0       	ldi	r24, 0x00	; 0
    27a2:	0e 94 1b 10 	call	0x2036	; 0x2036 <LCD_VidWrite4Data>
	LCD_VidWrite4Data(0b00000000);
    27a6:	80 e0       	ldi	r24, 0x00	; 0
    27a8:	0e 94 1b 10 	call	0x2036	; 0x2036 <LCD_VidWrite4Data>
	LCD_VidWrite4Data(0b00000000);
    27ac:	80 e0       	ldi	r24, 0x00	; 0
    27ae:	0e 94 1b 10 	call	0x2036	; 0x2036 <LCD_VidWrite4Data>
	LCD_VidWrite4Data(0b00000000);
    27b2:	80 e0       	ldi	r24, 0x00	; 0
    27b4:	0e 94 1b 10 	call	0x2036	; 0x2036 <LCD_VidWrite4Data>
	LCD_VidWrite4Data(0b00000000);
    27b8:	80 e0       	ldi	r24, 0x00	; 0
    27ba:	0e 94 1b 10 	call	0x2036	; 0x2036 <LCD_VidWrite4Data>
	LCD_VidWrite4Data(0b00000000);
    27be:	80 e0       	ldi	r24, 0x00	; 0
    27c0:	0e 94 1b 10 	call	0x2036	; 0x2036 <LCD_VidWrite4Data>
	LCD_VidWrite4Data(0b00000000);
    27c4:	80 e0       	ldi	r24, 0x00	; 0
    27c6:	0e 94 1b 10 	call	0x2036	; 0x2036 <LCD_VidWrite4Data>

}
    27ca:	cf 91       	pop	r28
    27cc:	df 91       	pop	r29
    27ce:	08 95       	ret

000027d0 <TIMER_VidSetCallBack>:

static void  (*CallBackFuncPtr)(void)= NULL;
//static void  (*CallBackFuncPtr_TIMER1)(void)= NULL;

void  TIMER_VidSetCallBack (void (*LOC_funcptr)(void) )
{
    27d0:	df 93       	push	r29
    27d2:	cf 93       	push	r28
    27d4:	00 d0       	rcall	.+0      	; 0x27d6 <TIMER_VidSetCallBack+0x6>
    27d6:	cd b7       	in	r28, 0x3d	; 61
    27d8:	de b7       	in	r29, 0x3e	; 62
    27da:	9a 83       	std	Y+2, r25	; 0x02
    27dc:	89 83       	std	Y+1, r24	; 0x01
	if(LOC_funcptr  != NULL )
    27de:	89 81       	ldd	r24, Y+1	; 0x01
    27e0:	9a 81       	ldd	r25, Y+2	; 0x02
    27e2:	00 97       	sbiw	r24, 0x00	; 0
    27e4:	31 f0       	breq	.+12     	; 0x27f2 <TIMER_VidSetCallBack+0x22>
	{
		CallBackFuncPtr = LOC_funcptr ;
    27e6:	89 81       	ldd	r24, Y+1	; 0x01
    27e8:	9a 81       	ldd	r25, Y+2	; 0x02
    27ea:	90 93 7a 00 	sts	0x007A, r25
    27ee:	80 93 79 00 	sts	0x0079, r24
	}
}
    27f2:	0f 90       	pop	r0
    27f4:	0f 90       	pop	r0
    27f6:	cf 91       	pop	r28
    27f8:	df 91       	pop	r29
    27fa:	08 95       	ret

000027fc <TIMER_VidEnable>:
		CallBackFuncPtr = LOC_funcptr_1 ;
	}
}
*/
void TIMER_VidEnable(void)
{
    27fc:	df 93       	push	r29
    27fe:	cf 93       	push	r28
    2800:	cd b7       	in	r28, 0x3d	; 61
    2802:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR0,WGM01);
#elif type_of__mode== CTC_Mode
	CLR_BIT(TCCR0,WGM00);
	SET_BIT(TCCR0,WGM01);
#elif type_of__mode== Fast_PWM_Mode
	SET_BIT(TCCR0,WGM00);
    2804:	a3 e5       	ldi	r26, 0x53	; 83
    2806:	b0 e0       	ldi	r27, 0x00	; 0
    2808:	e3 e5       	ldi	r30, 0x53	; 83
    280a:	f0 e0       	ldi	r31, 0x00	; 0
    280c:	80 81       	ld	r24, Z
    280e:	80 64       	ori	r24, 0x40	; 64
    2810:	8c 93       	st	X, r24
	SET_BIT(TCCR0,WGM01);
    2812:	a3 e5       	ldi	r26, 0x53	; 83
    2814:	b0 e0       	ldi	r27, 0x00	; 0
    2816:	e3 e5       	ldi	r30, 0x53	; 83
    2818:	f0 e0       	ldi	r31, 0x00	; 0
    281a:	80 81       	ld	r24, Z
    281c:	88 60       	ori	r24, 0x08	; 8
    281e:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,COM01);
#elif comper_mode== Compare_Output_Mode_2
	SET_BIT(TCCR0,COM00);
	CLR_BIT(TCCR0,COM01);
#elif comper_mode== Compare_Output_Mode_3
	CLR_BIT(TCCR0,COM00);
    2820:	a3 e5       	ldi	r26, 0x53	; 83
    2822:	b0 e0       	ldi	r27, 0x00	; 0
    2824:	e3 e5       	ldi	r30, 0x53	; 83
    2826:	f0 e0       	ldi	r31, 0x00	; 0
    2828:	80 81       	ld	r24, Z
    282a:	8f 7e       	andi	r24, 0xEF	; 239
    282c:	8c 93       	st	X, r24
	SET_BIT(TCCR0,COM01);
    282e:	a3 e5       	ldi	r26, 0x53	; 83
    2830:	b0 e0       	ldi	r27, 0x00	; 0
    2832:	e3 e5       	ldi	r30, 0x53	; 83
    2834:	f0 e0       	ldi	r31, 0x00	; 0
    2836:	80 81       	ld	r24, Z
    2838:	80 62       	ori	r24, 0x20	; 32
    283a:	8c 93       	st	X, r24
#elif prescaler_mode== prescaler_256
	CLR_BIT(TCCR0,CS00);
	CLR_BIT(TCCR0,CS01);
	SET_BIT(TCCR0,CS02);
#elif prescaler_mode== prescaler_1024
		SET_BIT(TCCR0,CS00);
    283c:	a3 e5       	ldi	r26, 0x53	; 83
    283e:	b0 e0       	ldi	r27, 0x00	; 0
    2840:	e3 e5       	ldi	r30, 0x53	; 83
    2842:	f0 e0       	ldi	r31, 0x00	; 0
    2844:	80 81       	ld	r24, Z
    2846:	81 60       	ori	r24, 0x01	; 1
    2848:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,CS01);
    284a:	a3 e5       	ldi	r26, 0x53	; 83
    284c:	b0 e0       	ldi	r27, 0x00	; 0
    284e:	e3 e5       	ldi	r30, 0x53	; 83
    2850:	f0 e0       	ldi	r31, 0x00	; 0
    2852:	80 81       	ld	r24, Z
    2854:	8d 7f       	andi	r24, 0xFD	; 253
    2856:	8c 93       	st	X, r24
		SET_BIT(TCCR0,CS02);
    2858:	a3 e5       	ldi	r26, 0x53	; 83
    285a:	b0 e0       	ldi	r27, 0x00	; 0
    285c:	e3 e5       	ldi	r30, 0x53	; 83
    285e:	f0 e0       	ldi	r31, 0x00	; 0
    2860:	80 81       	ld	r24, Z
    2862:	84 60       	ori	r24, 0x04	; 4
    2864:	8c 93       	st	X, r24

	//ENABLE INTRRUPT OVERFLOW
#if	interrupt_overflow_enabled== enable
		SET_BIT(TIMSK,TOIEO);
#elif interrupt_overflow_enabled== disable
		CLR_BIT(TIMSK,TOIEO);
    2866:	a9 e5       	ldi	r26, 0x59	; 89
    2868:	b0 e0       	ldi	r27, 0x00	; 0
    286a:	e9 e5       	ldi	r30, 0x59	; 89
    286c:	f0 e0       	ldi	r31, 0x00	; 0
    286e:	80 81       	ld	r24, Z
    2870:	8e 7f       	andi	r24, 0xFE	; 254
    2872:	8c 93       	st	X, r24

	//OCR CTC MODE
#if	interrupt_Compare_Match_enabled== enable
		SET_BIT(TIMSK,OCIE0);
#elif interrupt_Compare_Match_enabled== disable   //OCR CTC MODE
		CLR_BIT(TIMSK,OCIE0);
    2874:	a9 e5       	ldi	r26, 0x59	; 89
    2876:	b0 e0       	ldi	r27, 0x00	; 0
    2878:	e9 e5       	ldi	r30, 0x59	; 89
    287a:	f0 e0       	ldi	r31, 0x00	; 0
    287c:	80 81       	ld	r24, Z
    287e:	8d 7f       	andi	r24, 0xFD	; 253
    2880:	8c 93       	st	X, r24
#else
	#error  "wrong choice"
#endif

}
    2882:	cf 91       	pop	r28
    2884:	df 91       	pop	r29
    2886:	08 95       	ret

00002888 <TIMER_1_VidEnable>:
void TIMER_1_VidEnable(void)
{
    2888:	df 93       	push	r29
    288a:	cf 93       	push	r28
    288c:	cd b7       	in	r28, 0x3d	; 61
    288e:	de b7       	in	r29, 0x3e	; 62

		//NON INVERTER MODE
		CLR_BIT(TCCR1A,COM1A0);
    2890:	af e4       	ldi	r26, 0x4F	; 79
    2892:	b0 e0       	ldi	r27, 0x00	; 0
    2894:	ef e4       	ldi	r30, 0x4F	; 79
    2896:	f0 e0       	ldi	r31, 0x00	; 0
    2898:	80 81       	ld	r24, Z
    289a:	8f 7b       	andi	r24, 0xBF	; 191
    289c:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,COM1A1);
    289e:	af e4       	ldi	r26, 0x4F	; 79
    28a0:	b0 e0       	ldi	r27, 0x00	; 0
    28a2:	ef e4       	ldi	r30, 0x4F	; 79
    28a4:	f0 e0       	ldi	r31, 0x00	; 0
    28a6:	80 81       	ld	r24, Z
    28a8:	80 68       	ori	r24, 0x80	; 128
    28aa:	8c 93       	st	X, r24
#if  timer_1_mode== Normal_timer_1
		//overflow MODE
		CLR_BIT(TCCR1A,WGM10);
    28ac:	af e4       	ldi	r26, 0x4F	; 79
    28ae:	b0 e0       	ldi	r27, 0x00	; 0
    28b0:	ef e4       	ldi	r30, 0x4F	; 79
    28b2:	f0 e0       	ldi	r31, 0x00	; 0
    28b4:	80 81       	ld	r24, Z
    28b6:	8e 7f       	andi	r24, 0xFE	; 254
    28b8:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,WGM11);
    28ba:	af e4       	ldi	r26, 0x4F	; 79
    28bc:	b0 e0       	ldi	r27, 0x00	; 0
    28be:	ef e4       	ldi	r30, 0x4F	; 79
    28c0:	f0 e0       	ldi	r31, 0x00	; 0
    28c2:	80 81       	ld	r24, Z
    28c4:	8d 7f       	andi	r24, 0xFD	; 253
    28c6:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,WGM12);
    28c8:	ae e4       	ldi	r26, 0x4E	; 78
    28ca:	b0 e0       	ldi	r27, 0x00	; 0
    28cc:	ee e4       	ldi	r30, 0x4E	; 78
    28ce:	f0 e0       	ldi	r31, 0x00	; 0
    28d0:	80 81       	ld	r24, Z
    28d2:	87 7f       	andi	r24, 0xF7	; 247
    28d4:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,WGM13);
    28d6:	ae e4       	ldi	r26, 0x4E	; 78
    28d8:	b0 e0       	ldi	r27, 0x00	; 0
    28da:	ee e4       	ldi	r30, 0x4E	; 78
    28dc:	f0 e0       	ldi	r31, 0x00	; 0
    28de:	80 81       	ld	r24, Z
    28e0:	8f 7e       	andi	r24, 0xEF	; 239
    28e2:	8c 93       	st	X, r24
	    SET_BIT(TCCR1B,WGM13);
#else
             #error  "wrong mode timer_1 choice"
#endif
	    //prescaler 156
	    CLR_BIT(TCCR1B,CS10);
    28e4:	ae e4       	ldi	r26, 0x4E	; 78
    28e6:	b0 e0       	ldi	r27, 0x00	; 0
    28e8:	ee e4       	ldi	r30, 0x4E	; 78
    28ea:	f0 e0       	ldi	r31, 0x00	; 0
    28ec:	80 81       	ld	r24, Z
    28ee:	8e 7f       	andi	r24, 0xFE	; 254
    28f0:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,CS11);
    28f2:	ae e4       	ldi	r26, 0x4E	; 78
    28f4:	b0 e0       	ldi	r27, 0x00	; 0
    28f6:	ee e4       	ldi	r30, 0x4E	; 78
    28f8:	f0 e0       	ldi	r31, 0x00	; 0
    28fa:	80 81       	ld	r24, Z
    28fc:	8d 7f       	andi	r24, 0xFD	; 253
    28fe:	8c 93       	st	X, r24
	    SET_BIT(TCCR1B,CS12);
    2900:	ae e4       	ldi	r26, 0x4E	; 78
    2902:	b0 e0       	ldi	r27, 0x00	; 0
    2904:	ee e4       	ldi	r30, 0x4E	; 78
    2906:	f0 e0       	ldi	r31, 0x00	; 0
    2908:	80 81       	ld	r24, Z
    290a:	84 60       	ori	r24, 0x04	; 4
    290c:	8c 93       	st	X, r24
		//intrrupt enable
		SET_BIT(TIMSK,TOIE1);
    290e:	a9 e5       	ldi	r26, 0x59	; 89
    2910:	b0 e0       	ldi	r27, 0x00	; 0
    2912:	e9 e5       	ldi	r30, 0x59	; 89
    2914:	f0 e0       	ldi	r31, 0x00	; 0
    2916:	80 81       	ld	r24, Z
    2918:	84 60       	ori	r24, 0x04	; 4
    291a:	8c 93       	st	X, r24
}
    291c:	cf 91       	pop	r28
    291e:	df 91       	pop	r29
    2920:	08 95       	ret

00002922 <TIMER_1_INPUT_CAPUER_VidEnable>:

void TIMER_1_INPUT_CAPUER_VidEnable(void)
{
    2922:	df 93       	push	r29
    2924:	cf 93       	push	r28
    2926:	cd b7       	in	r28, 0x3d	; 61
    2928:	de b7       	in	r29, 0x3e	; 62

		//Input Capture Edge Select
	    SET_BIT(TCCR1B,ICES1);
    292a:	ae e4       	ldi	r26, 0x4E	; 78
    292c:	b0 e0       	ldi	r27, 0x00	; 0
    292e:	ee e4       	ldi	r30, 0x4E	; 78
    2930:	f0 e0       	ldi	r31, 0x00	; 0
    2932:	80 81       	ld	r24, Z
    2934:	80 64       	ori	r24, 0x40	; 64
    2936:	8c 93       	st	X, r24
	    //ENABLE INPUT CAPUTER INTRRUPT
	   SET_BIT(TIMSK,TICIE1);
    2938:	a9 e5       	ldi	r26, 0x59	; 89
    293a:	b0 e0       	ldi	r27, 0x00	; 0
    293c:	e9 e5       	ldi	r30, 0x59	; 89
    293e:	f0 e0       	ldi	r31, 0x00	; 0
    2940:	80 81       	ld	r24, Z
    2942:	80 62       	ori	r24, 0x20	; 32
    2944:	8c 93       	st	X, r24
}
    2946:	cf 91       	pop	r28
    2948:	df 91       	pop	r29
    294a:	08 95       	ret

0000294c <Tim1_Count0_ICR1>:

void Tim1_Count0_ICR1(u16 Loc_u8TCNTvalue)
{
    294c:	df 93       	push	r29
    294e:	cf 93       	push	r28
    2950:	00 d0       	rcall	.+0      	; 0x2952 <Tim1_Count0_ICR1+0x6>
    2952:	cd b7       	in	r28, 0x3d	; 61
    2954:	de b7       	in	r29, 0x3e	; 62
    2956:	9a 83       	std	Y+2, r25	; 0x02
    2958:	89 83       	std	Y+1, r24	; 0x01
	ICR1=Loc_u8TCNTvalue;
    295a:	e6 e4       	ldi	r30, 0x46	; 70
    295c:	f0 e0       	ldi	r31, 0x00	; 0
    295e:	89 81       	ldd	r24, Y+1	; 0x01
    2960:	9a 81       	ldd	r25, Y+2	; 0x02
    2962:	91 83       	std	Z+1, r25	; 0x01
    2964:	80 83       	st	Z, r24
}
    2966:	0f 90       	pop	r0
    2968:	0f 90       	pop	r0
    296a:	cf 91       	pop	r28
    296c:	df 91       	pop	r29
    296e:	08 95       	ret

00002970 <Tim1_Count0_OCR1A>:
void Tim1_Count0_OCR1A(u16 Loc_u8OCRvalue)
{
    2970:	df 93       	push	r29
    2972:	cf 93       	push	r28
    2974:	00 d0       	rcall	.+0      	; 0x2976 <Tim1_Count0_OCR1A+0x6>
    2976:	cd b7       	in	r28, 0x3d	; 61
    2978:	de b7       	in	r29, 0x3e	; 62
    297a:	9a 83       	std	Y+2, r25	; 0x02
    297c:	89 83       	std	Y+1, r24	; 0x01
	OCR1A=Loc_u8OCRvalue;
    297e:	ea e4       	ldi	r30, 0x4A	; 74
    2980:	f0 e0       	ldi	r31, 0x00	; 0
    2982:	89 81       	ldd	r24, Y+1	; 0x01
    2984:	9a 81       	ldd	r25, Y+2	; 0x02
    2986:	91 83       	std	Z+1, r25	; 0x01
    2988:	80 83       	st	Z, r24
}
    298a:	0f 90       	pop	r0
    298c:	0f 90       	pop	r0
    298e:	cf 91       	pop	r28
    2990:	df 91       	pop	r29
    2992:	08 95       	ret

00002994 <Tim_Count0_VidCounterReg>:

void Tim_Count0_VidCounterReg(u8 Loc_u8TCNTvalue)
{
    2994:	df 93       	push	r29
    2996:	cf 93       	push	r28
    2998:	0f 92       	push	r0
    299a:	cd b7       	in	r28, 0x3d	; 61
    299c:	de b7       	in	r29, 0x3e	; 62
    299e:	89 83       	std	Y+1, r24	; 0x01
	TCNT0=Loc_u8TCNTvalue;
    29a0:	e2 e5       	ldi	r30, 0x52	; 82
    29a2:	f0 e0       	ldi	r31, 0x00	; 0
    29a4:	89 81       	ldd	r24, Y+1	; 0x01
    29a6:	80 83       	st	Z, r24
}
    29a8:	0f 90       	pop	r0
    29aa:	cf 91       	pop	r28
    29ac:	df 91       	pop	r29
    29ae:	08 95       	ret

000029b0 <Tim_Count0_VidCompareReg>:
void Tim_Count0_VidCompareReg(u8 Loc_u8OCRvalue)
{
    29b0:	df 93       	push	r29
    29b2:	cf 93       	push	r28
    29b4:	0f 92       	push	r0
    29b6:	cd b7       	in	r28, 0x3d	; 61
    29b8:	de b7       	in	r29, 0x3e	; 62
    29ba:	89 83       	std	Y+1, r24	; 0x01
	OCR0=Loc_u8OCRvalue;
    29bc:	ec e5       	ldi	r30, 0x5C	; 92
    29be:	f0 e0       	ldi	r31, 0x00	; 0
    29c0:	89 81       	ldd	r24, Y+1	; 0x01
    29c2:	80 83       	st	Z, r24
}
    29c4:	0f 90       	pop	r0
    29c6:	cf 91       	pop	r28
    29c8:	df 91       	pop	r29
    29ca:	08 95       	ret

000029cc <Set_Duty_cycle>:
void Set_Duty_cycle(u8 Loc_u8OCRvalue)
{
    29cc:	df 93       	push	r29
    29ce:	cf 93       	push	r28
    29d0:	0f 92       	push	r0
    29d2:	cd b7       	in	r28, 0x3d	; 61
    29d4:	de b7       	in	r29, 0x3e	; 62
    29d6:	89 83       	std	Y+1, r24	; 0x01
	OCR0=Loc_u8OCRvalue;
    29d8:	ec e5       	ldi	r30, 0x5C	; 92
    29da:	f0 e0       	ldi	r31, 0x00	; 0
    29dc:	89 81       	ldd	r24, Y+1	; 0x01
    29de:	80 83       	st	Z, r24
}
    29e0:	0f 90       	pop	r0
    29e2:	cf 91       	pop	r28
    29e4:	df 91       	pop	r29
    29e6:	08 95       	ret

000029e8 <u16_return_ICR1>:

u16 u16_return_ICR1(void)
{
    29e8:	df 93       	push	r29
    29ea:	cf 93       	push	r28
    29ec:	cd b7       	in	r28, 0x3d	; 61
    29ee:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    29f0:	e6 e4       	ldi	r30, 0x46	; 70
    29f2:	f0 e0       	ldi	r31, 0x00	; 0
    29f4:	80 81       	ld	r24, Z
    29f6:	91 81       	ldd	r25, Z+1	; 0x01
}
    29f8:	cf 91       	pop	r28
    29fa:	df 91       	pop	r29
    29fc:	08 95       	ret

000029fe <u8_TOGAL_ICES1>:

void u8_TOGAL_ICES1(void)
{
    29fe:	df 93       	push	r29
    2a00:	cf 93       	push	r28
    2a02:	cd b7       	in	r28, 0x3d	; 61
    2a04:	de b7       	in	r29, 0x3e	; 62
	TOG_BIT(TCCR1B,ICES1);
    2a06:	ae e4       	ldi	r26, 0x4E	; 78
    2a08:	b0 e0       	ldi	r27, 0x00	; 0
    2a0a:	ee e4       	ldi	r30, 0x4E	; 78
    2a0c:	f0 e0       	ldi	r31, 0x00	; 0
    2a0e:	90 81       	ld	r25, Z
    2a10:	80 e4       	ldi	r24, 0x40	; 64
    2a12:	89 27       	eor	r24, r25
    2a14:	8c 93       	st	X, r24
}
    2a16:	cf 91       	pop	r28
    2a18:	df 91       	pop	r29
    2a1a:	08 95       	ret

00002a1c <__vector_10>:

//isr
ISR(TIMER_CTC_VECT)
{
    2a1c:	1f 92       	push	r1
    2a1e:	0f 92       	push	r0
    2a20:	0f b6       	in	r0, 0x3f	; 63
    2a22:	0f 92       	push	r0
    2a24:	11 24       	eor	r1, r1
    2a26:	2f 93       	push	r18
    2a28:	3f 93       	push	r19
    2a2a:	4f 93       	push	r20
    2a2c:	5f 93       	push	r21
    2a2e:	6f 93       	push	r22
    2a30:	7f 93       	push	r23
    2a32:	8f 93       	push	r24
    2a34:	9f 93       	push	r25
    2a36:	af 93       	push	r26
    2a38:	bf 93       	push	r27
    2a3a:	ef 93       	push	r30
    2a3c:	ff 93       	push	r31
    2a3e:	df 93       	push	r29
    2a40:	cf 93       	push	r28
    2a42:	cd b7       	in	r28, 0x3d	; 61
    2a44:	de b7       	in	r29, 0x3e	; 62
	if(CallBackFuncPtr != NULL )
    2a46:	80 91 79 00 	lds	r24, 0x0079
    2a4a:	90 91 7a 00 	lds	r25, 0x007A
    2a4e:	00 97       	sbiw	r24, 0x00	; 0
    2a50:	29 f0       	breq	.+10     	; 0x2a5c <__vector_10+0x40>
	{
		CallBackFuncPtr();
    2a52:	e0 91 79 00 	lds	r30, 0x0079
    2a56:	f0 91 7a 00 	lds	r31, 0x007A
    2a5a:	09 95       	icall
	}
 }
    2a5c:	cf 91       	pop	r28
    2a5e:	df 91       	pop	r29
    2a60:	ff 91       	pop	r31
    2a62:	ef 91       	pop	r30
    2a64:	bf 91       	pop	r27
    2a66:	af 91       	pop	r26
    2a68:	9f 91       	pop	r25
    2a6a:	8f 91       	pop	r24
    2a6c:	7f 91       	pop	r23
    2a6e:	6f 91       	pop	r22
    2a70:	5f 91       	pop	r21
    2a72:	4f 91       	pop	r20
    2a74:	3f 91       	pop	r19
    2a76:	2f 91       	pop	r18
    2a78:	0f 90       	pop	r0
    2a7a:	0f be       	out	0x3f, r0	; 63
    2a7c:	0f 90       	pop	r0
    2a7e:	1f 90       	pop	r1
    2a80:	18 95       	reti

00002a82 <main>:
volatile u32 snap_2=0;
volatile u32 snap_3=0;
volatile u8 OV=0;
//void func_1(void);
int main (void)
{
    2a82:	df 93       	push	r29
    2a84:	cf 93       	push	r28
    2a86:	cd b7       	in	r28, 0x3d	; 61
    2a88:	de b7       	in	r29, 0x3e	; 62

	//DIO INTIALIZATION
	DIO_VidSetPinDirection(PORTB,PIN3,OUTPUT);
    2a8a:	81 e0       	ldi	r24, 0x01	; 1
    2a8c:	63 e0       	ldi	r22, 0x03	; 3
    2a8e:	41 e0       	ldi	r20, 0x01	; 1
    2a90:	0e 94 a4 06 	call	0xd48	; 0xd48 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(PORTD,PIN6,INPUT);
    2a94:	83 e0       	ldi	r24, 0x03	; 3
    2a96:	66 e0       	ldi	r22, 0x06	; 6
    2a98:	40 e0       	ldi	r20, 0x00	; 0
    2a9a:	0e 94 a4 06 	call	0xd48	; 0xd48 <DIO_VidSetPinDirection>

	//GLUBAL INTRRUPT ENABALE
	GIE_Enable();
    2a9e:	0e 94 03 0b 	call	0x1606	; 0x1606 <GIE_Enable>
	//TIMER_0 INT
	TIMER_VidEnable();
    2aa2:	0e 94 fe 13 	call	0x27fc	; 0x27fc <TIMER_VidEnable>
	//OCR TIMER 0
	Tim_Count0_VidCompareReg(128);
    2aa6:	80 e8       	ldi	r24, 0x80	; 128
    2aa8:	0e 94 d8 14 	call	0x29b0	; 0x29b0 <Tim_Count0_VidCompareReg>
	//TIMER_1 INTI
	TIMER_1_VidEnable();
    2aac:	0e 94 44 14 	call	0x2888	; 0x2888 <TIMER_1_VidEnable>
	//INPUT CABTURE TIMER 1 ENABE
	TIMER_1_INPUT_CAPUER_VidEnable();
    2ab0:	0e 94 91 14 	call	0x2922	; 0x2922 <TIMER_1_INPUT_CAPUER_VidEnable>
	//lcd int
	LCD_Vid4Initialization();
    2ab4:	0e 94 1f 0b 	call	0x163e	; 0x163e <LCD_Vid4Initialization>
while(1)
	{
	if(3==flag)
    2ab8:	80 91 7b 00 	lds	r24, 0x007B
    2abc:	83 30       	cpi	r24, 0x03	; 3
    2abe:	e1 f7       	brne	.-8      	; 0x2ab8 <main+0x36>
	{
		Vid_Read_PWM();
    2ac0:	0e 94 2e 16 	call	0x2c5c	; 0x2c5c <Vid_Read_PWM>
    2ac4:	f9 cf       	rjmp	.-14     	; 0x2ab8 <main+0x36>

00002ac6 <__vector_6>:
	}
return 0;
}

ISR(TIMER_1_CAPT_VECT)
{
    2ac6:	1f 92       	push	r1
    2ac8:	0f 92       	push	r0
    2aca:	0f b6       	in	r0, 0x3f	; 63
    2acc:	0f 92       	push	r0
    2ace:	11 24       	eor	r1, r1
    2ad0:	ef 92       	push	r14
    2ad2:	ff 92       	push	r15
    2ad4:	0f 93       	push	r16
    2ad6:	1f 93       	push	r17
    2ad8:	2f 93       	push	r18
    2ada:	3f 93       	push	r19
    2adc:	4f 93       	push	r20
    2ade:	5f 93       	push	r21
    2ae0:	6f 93       	push	r22
    2ae2:	7f 93       	push	r23
    2ae4:	8f 93       	push	r24
    2ae6:	9f 93       	push	r25
    2ae8:	af 93       	push	r26
    2aea:	bf 93       	push	r27
    2aec:	ef 93       	push	r30
    2aee:	ff 93       	push	r31
    2af0:	df 93       	push	r29
    2af2:	cf 93       	push	r28
    2af4:	cd b7       	in	r28, 0x3d	; 61
    2af6:	de b7       	in	r29, 0x3e	; 62
	if(0==flag)
    2af8:	80 91 7b 00 	lds	r24, 0x007B
    2afc:	88 23       	and	r24, r24
    2afe:	49 f5       	brne	.+82     	; 0x2b52 <__vector_6+0x8c>
	{
		snap_1=u16_return_ICR1()+OV*65535;
    2b00:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <u16_return_ICR1>
    2b04:	7c 01       	movw	r14, r24
    2b06:	00 e0       	ldi	r16, 0x00	; 0
    2b08:	10 e0       	ldi	r17, 0x00	; 0
    2b0a:	80 91 88 00 	lds	r24, 0x0088
    2b0e:	88 2f       	mov	r24, r24
    2b10:	90 e0       	ldi	r25, 0x00	; 0
    2b12:	a0 e0       	ldi	r26, 0x00	; 0
    2b14:	b0 e0       	ldi	r27, 0x00	; 0
    2b16:	2f ef       	ldi	r18, 0xFF	; 255
    2b18:	3f ef       	ldi	r19, 0xFF	; 255
    2b1a:	40 e0       	ldi	r20, 0x00	; 0
    2b1c:	50 e0       	ldi	r21, 0x00	; 0
    2b1e:	bc 01       	movw	r22, r24
    2b20:	cd 01       	movw	r24, r26
    2b22:	0e 94 39 17 	call	0x2e72	; 0x2e72 <__mulsi3>
    2b26:	dc 01       	movw	r26, r24
    2b28:	cb 01       	movw	r24, r22
    2b2a:	8e 0d       	add	r24, r14
    2b2c:	9f 1d       	adc	r25, r15
    2b2e:	a0 1f       	adc	r26, r16
    2b30:	b1 1f       	adc	r27, r17
    2b32:	80 93 7c 00 	sts	0x007C, r24
    2b36:	90 93 7d 00 	sts	0x007D, r25
    2b3a:	a0 93 7e 00 	sts	0x007E, r26
    2b3e:	b0 93 7f 00 	sts	0x007F, r27
		OV=0;
    2b42:	10 92 88 00 	sts	0x0088, r1
		flag=1;
    2b46:	81 e0       	ldi	r24, 0x01	; 1
    2b48:	80 93 7b 00 	sts	0x007B, r24
		u8_TOGAL_ICES1();
    2b4c:	0e 94 ff 14 	call	0x29fe	; 0x29fe <u8_TOGAL_ICES1>
    2b50:	57 c0       	rjmp	.+174    	; 0x2c00 <__vector_6+0x13a>
	}
	else if(1==flag)
    2b52:	80 91 7b 00 	lds	r24, 0x007B
    2b56:	81 30       	cpi	r24, 0x01	; 1
    2b58:	49 f5       	brne	.+82     	; 0x2bac <__vector_6+0xe6>
	{
		snap_2=u16_return_ICR1()+OV*65535;
    2b5a:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <u16_return_ICR1>
    2b5e:	7c 01       	movw	r14, r24
    2b60:	00 e0       	ldi	r16, 0x00	; 0
    2b62:	10 e0       	ldi	r17, 0x00	; 0
    2b64:	80 91 88 00 	lds	r24, 0x0088
    2b68:	88 2f       	mov	r24, r24
    2b6a:	90 e0       	ldi	r25, 0x00	; 0
    2b6c:	a0 e0       	ldi	r26, 0x00	; 0
    2b6e:	b0 e0       	ldi	r27, 0x00	; 0
    2b70:	2f ef       	ldi	r18, 0xFF	; 255
    2b72:	3f ef       	ldi	r19, 0xFF	; 255
    2b74:	40 e0       	ldi	r20, 0x00	; 0
    2b76:	50 e0       	ldi	r21, 0x00	; 0
    2b78:	bc 01       	movw	r22, r24
    2b7a:	cd 01       	movw	r24, r26
    2b7c:	0e 94 39 17 	call	0x2e72	; 0x2e72 <__mulsi3>
    2b80:	dc 01       	movw	r26, r24
    2b82:	cb 01       	movw	r24, r22
    2b84:	8e 0d       	add	r24, r14
    2b86:	9f 1d       	adc	r25, r15
    2b88:	a0 1f       	adc	r26, r16
    2b8a:	b1 1f       	adc	r27, r17
    2b8c:	80 93 80 00 	sts	0x0080, r24
    2b90:	90 93 81 00 	sts	0x0081, r25
    2b94:	a0 93 82 00 	sts	0x0082, r26
    2b98:	b0 93 83 00 	sts	0x0083, r27
		OV=0;
    2b9c:	10 92 88 00 	sts	0x0088, r1
		flag=2;
    2ba0:	82 e0       	ldi	r24, 0x02	; 2
    2ba2:	80 93 7b 00 	sts	0x007B, r24
		u8_TOGAL_ICES1();
    2ba6:	0e 94 ff 14 	call	0x29fe	; 0x29fe <u8_TOGAL_ICES1>
    2baa:	2a c0       	rjmp	.+84     	; 0x2c00 <__vector_6+0x13a>
	}
	else if(2==flag)
    2bac:	80 91 7b 00 	lds	r24, 0x007B
    2bb0:	82 30       	cpi	r24, 0x02	; 2
    2bb2:	31 f5       	brne	.+76     	; 0x2c00 <__vector_6+0x13a>
	{
		snap_3=u16_return_ICR1()+OV*65535;
    2bb4:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <u16_return_ICR1>
    2bb8:	7c 01       	movw	r14, r24
    2bba:	00 e0       	ldi	r16, 0x00	; 0
    2bbc:	10 e0       	ldi	r17, 0x00	; 0
    2bbe:	80 91 88 00 	lds	r24, 0x0088
    2bc2:	88 2f       	mov	r24, r24
    2bc4:	90 e0       	ldi	r25, 0x00	; 0
    2bc6:	a0 e0       	ldi	r26, 0x00	; 0
    2bc8:	b0 e0       	ldi	r27, 0x00	; 0
    2bca:	2f ef       	ldi	r18, 0xFF	; 255
    2bcc:	3f ef       	ldi	r19, 0xFF	; 255
    2bce:	40 e0       	ldi	r20, 0x00	; 0
    2bd0:	50 e0       	ldi	r21, 0x00	; 0
    2bd2:	bc 01       	movw	r22, r24
    2bd4:	cd 01       	movw	r24, r26
    2bd6:	0e 94 39 17 	call	0x2e72	; 0x2e72 <__mulsi3>
    2bda:	dc 01       	movw	r26, r24
    2bdc:	cb 01       	movw	r24, r22
    2bde:	8e 0d       	add	r24, r14
    2be0:	9f 1d       	adc	r25, r15
    2be2:	a0 1f       	adc	r26, r16
    2be4:	b1 1f       	adc	r27, r17
    2be6:	80 93 84 00 	sts	0x0084, r24
    2bea:	90 93 85 00 	sts	0x0085, r25
    2bee:	a0 93 86 00 	sts	0x0086, r26
    2bf2:	b0 93 87 00 	sts	0x0087, r27
		OV=0;
    2bf6:	10 92 88 00 	sts	0x0088, r1
		flag=3;
    2bfa:	83 e0       	ldi	r24, 0x03	; 3
    2bfc:	80 93 7b 00 	sts	0x007B, r24
	}
}
    2c00:	cf 91       	pop	r28
    2c02:	df 91       	pop	r29
    2c04:	ff 91       	pop	r31
    2c06:	ef 91       	pop	r30
    2c08:	bf 91       	pop	r27
    2c0a:	af 91       	pop	r26
    2c0c:	9f 91       	pop	r25
    2c0e:	8f 91       	pop	r24
    2c10:	7f 91       	pop	r23
    2c12:	6f 91       	pop	r22
    2c14:	5f 91       	pop	r21
    2c16:	4f 91       	pop	r20
    2c18:	3f 91       	pop	r19
    2c1a:	2f 91       	pop	r18
    2c1c:	1f 91       	pop	r17
    2c1e:	0f 91       	pop	r16
    2c20:	ff 90       	pop	r15
    2c22:	ef 90       	pop	r14
    2c24:	0f 90       	pop	r0
    2c26:	0f be       	out	0x3f, r0	; 63
    2c28:	0f 90       	pop	r0
    2c2a:	1f 90       	pop	r1
    2c2c:	18 95       	reti

00002c2e <__vector_9>:
ISR(TIMER_1_OVF_VECT)
{
    2c2e:	1f 92       	push	r1
    2c30:	0f 92       	push	r0
    2c32:	0f b6       	in	r0, 0x3f	; 63
    2c34:	0f 92       	push	r0
    2c36:	11 24       	eor	r1, r1
    2c38:	8f 93       	push	r24
    2c3a:	df 93       	push	r29
    2c3c:	cf 93       	push	r28
    2c3e:	cd b7       	in	r28, 0x3d	; 61
    2c40:	de b7       	in	r29, 0x3e	; 62
	OV++;
    2c42:	80 91 88 00 	lds	r24, 0x0088
    2c46:	8f 5f       	subi	r24, 0xFF	; 255
    2c48:	80 93 88 00 	sts	0x0088, r24
}
    2c4c:	cf 91       	pop	r28
    2c4e:	df 91       	pop	r29
    2c50:	8f 91       	pop	r24
    2c52:	0f 90       	pop	r0
    2c54:	0f be       	out	0x3f, r0	; 63
    2c56:	0f 90       	pop	r0
    2c58:	1f 90       	pop	r1
    2c5a:	18 95       	reti

00002c5c <Vid_Read_PWM>:

void Vid_Read_PWM(void)
{
    2c5c:	6f 92       	push	r6
    2c5e:	7f 92       	push	r7
    2c60:	8f 92       	push	r8
    2c62:	9f 92       	push	r9
    2c64:	af 92       	push	r10
    2c66:	bf 92       	push	r11
    2c68:	cf 92       	push	r12
    2c6a:	df 92       	push	r13
    2c6c:	ef 92       	push	r14
    2c6e:	ff 92       	push	r15
    2c70:	0f 93       	push	r16
    2c72:	1f 93       	push	r17
    2c74:	df 93       	push	r29
    2c76:	cf 93       	push	r28
    2c78:	00 d0       	rcall	.+0      	; 0x2c7a <Vid_Read_PWM+0x1e>
    2c7a:	00 d0       	rcall	.+0      	; 0x2c7c <Vid_Read_PWM+0x20>
    2c7c:	cd b7       	in	r28, 0x3d	; 61
    2c7e:	de b7       	in	r29, 0x3e	; 62
	u16 duty= 0;
    2c80:	1c 82       	std	Y+4, r1	; 0x04
    2c82:	1b 82       	std	Y+3, r1	; 0x03
	u16 frq=0;
    2c84:	1a 82       	std	Y+2, r1	; 0x02
    2c86:	19 82       	std	Y+1, r1	; 0x01
	duty=((snap_2-snap_1)*100)/((snap_2-snap_1)+(snap_3-snap_2));
    2c88:	20 91 80 00 	lds	r18, 0x0080
    2c8c:	30 91 81 00 	lds	r19, 0x0081
    2c90:	40 91 82 00 	lds	r20, 0x0082
    2c94:	50 91 83 00 	lds	r21, 0x0083
    2c98:	80 91 7c 00 	lds	r24, 0x007C
    2c9c:	90 91 7d 00 	lds	r25, 0x007D
    2ca0:	a0 91 7e 00 	lds	r26, 0x007E
    2ca4:	b0 91 7f 00 	lds	r27, 0x007F
    2ca8:	39 01       	movw	r6, r18
    2caa:	4a 01       	movw	r8, r20
    2cac:	68 1a       	sub	r6, r24
    2cae:	79 0a       	sbc	r7, r25
    2cb0:	8a 0a       	sbc	r8, r26
    2cb2:	9b 0a       	sbc	r9, r27
    2cb4:	d4 01       	movw	r26, r8
    2cb6:	c3 01       	movw	r24, r6
    2cb8:	24 e6       	ldi	r18, 0x64	; 100
    2cba:	30 e0       	ldi	r19, 0x00	; 0
    2cbc:	40 e0       	ldi	r20, 0x00	; 0
    2cbe:	50 e0       	ldi	r21, 0x00	; 0
    2cc0:	bc 01       	movw	r22, r24
    2cc2:	cd 01       	movw	r24, r26
    2cc4:	0e 94 39 17 	call	0x2e72	; 0x2e72 <__mulsi3>
    2cc8:	5b 01       	movw	r10, r22
    2cca:	6c 01       	movw	r12, r24
    2ccc:	20 91 80 00 	lds	r18, 0x0080
    2cd0:	30 91 81 00 	lds	r19, 0x0081
    2cd4:	40 91 82 00 	lds	r20, 0x0082
    2cd8:	50 91 83 00 	lds	r21, 0x0083
    2cdc:	80 91 7c 00 	lds	r24, 0x007C
    2ce0:	90 91 7d 00 	lds	r25, 0x007D
    2ce4:	a0 91 7e 00 	lds	r26, 0x007E
    2ce8:	b0 91 7f 00 	lds	r27, 0x007F
    2cec:	79 01       	movw	r14, r18
    2cee:	8a 01       	movw	r16, r20
    2cf0:	e8 1a       	sub	r14, r24
    2cf2:	f9 0a       	sbc	r15, r25
    2cf4:	0a 0b       	sbc	r16, r26
    2cf6:	1b 0b       	sbc	r17, r27
    2cf8:	20 91 84 00 	lds	r18, 0x0084
    2cfc:	30 91 85 00 	lds	r19, 0x0085
    2d00:	40 91 86 00 	lds	r20, 0x0086
    2d04:	50 91 87 00 	lds	r21, 0x0087
    2d08:	80 91 80 00 	lds	r24, 0x0080
    2d0c:	90 91 81 00 	lds	r25, 0x0081
    2d10:	a0 91 82 00 	lds	r26, 0x0082
    2d14:	b0 91 83 00 	lds	r27, 0x0083
    2d18:	39 01       	movw	r6, r18
    2d1a:	4a 01       	movw	r8, r20
    2d1c:	68 1a       	sub	r6, r24
    2d1e:	79 0a       	sbc	r7, r25
    2d20:	8a 0a       	sbc	r8, r26
    2d22:	9b 0a       	sbc	r9, r27
    2d24:	d4 01       	movw	r26, r8
    2d26:	c3 01       	movw	r24, r6
    2d28:	a8 01       	movw	r20, r16
    2d2a:	97 01       	movw	r18, r14
    2d2c:	28 0f       	add	r18, r24
    2d2e:	39 1f       	adc	r19, r25
    2d30:	4a 1f       	adc	r20, r26
    2d32:	5b 1f       	adc	r21, r27
    2d34:	c6 01       	movw	r24, r12
    2d36:	b5 01       	movw	r22, r10
    2d38:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <__udivmodsi4>
    2d3c:	da 01       	movw	r26, r20
    2d3e:	c9 01       	movw	r24, r18
    2d40:	9c 83       	std	Y+4, r25	; 0x04
    2d42:	8b 83       	std	Y+3, r24	; 0x03
	frq=1000000*8/((snap_2-snap_1)+(snap_3-snap_2));
    2d44:	20 91 80 00 	lds	r18, 0x0080
    2d48:	30 91 81 00 	lds	r19, 0x0081
    2d4c:	40 91 82 00 	lds	r20, 0x0082
    2d50:	50 91 83 00 	lds	r21, 0x0083
    2d54:	80 91 7c 00 	lds	r24, 0x007C
    2d58:	90 91 7d 00 	lds	r25, 0x007D
    2d5c:	a0 91 7e 00 	lds	r26, 0x007E
    2d60:	b0 91 7f 00 	lds	r27, 0x007F
    2d64:	79 01       	movw	r14, r18
    2d66:	8a 01       	movw	r16, r20
    2d68:	e8 1a       	sub	r14, r24
    2d6a:	f9 0a       	sbc	r15, r25
    2d6c:	0a 0b       	sbc	r16, r26
    2d6e:	1b 0b       	sbc	r17, r27
    2d70:	20 91 84 00 	lds	r18, 0x0084
    2d74:	30 91 85 00 	lds	r19, 0x0085
    2d78:	40 91 86 00 	lds	r20, 0x0086
    2d7c:	50 91 87 00 	lds	r21, 0x0087
    2d80:	80 91 80 00 	lds	r24, 0x0080
    2d84:	90 91 81 00 	lds	r25, 0x0081
    2d88:	a0 91 82 00 	lds	r26, 0x0082
    2d8c:	b0 91 83 00 	lds	r27, 0x0083
    2d90:	49 01       	movw	r8, r18
    2d92:	5a 01       	movw	r10, r20
    2d94:	88 1a       	sub	r8, r24
    2d96:	99 0a       	sbc	r9, r25
    2d98:	aa 0a       	sbc	r10, r26
    2d9a:	bb 0a       	sbc	r11, r27
    2d9c:	d5 01       	movw	r26, r10
    2d9e:	c4 01       	movw	r24, r8
    2da0:	a8 01       	movw	r20, r16
    2da2:	97 01       	movw	r18, r14
    2da4:	28 0f       	add	r18, r24
    2da6:	39 1f       	adc	r19, r25
    2da8:	4a 1f       	adc	r20, r26
    2daa:	5b 1f       	adc	r21, r27
    2dac:	80 e0       	ldi	r24, 0x00	; 0
    2dae:	92 e1       	ldi	r25, 0x12	; 18
    2db0:	aa e7       	ldi	r26, 0x7A	; 122
    2db2:	b0 e0       	ldi	r27, 0x00	; 0
    2db4:	bc 01       	movw	r22, r24
    2db6:	cd 01       	movw	r24, r26
    2db8:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <__udivmodsi4>
    2dbc:	da 01       	movw	r26, r20
    2dbe:	c9 01       	movw	r24, r18
    2dc0:	9a 83       	std	Y+2, r25	; 0x02
    2dc2:	89 83       	std	Y+1, r24	; 0x01
	LCD_Write4String("D:",0,0);
    2dc4:	80 e6       	ldi	r24, 0x60	; 96
    2dc6:	90 e0       	ldi	r25, 0x00	; 0
    2dc8:	60 e0       	ldi	r22, 0x00	; 0
    2dca:	40 e0       	ldi	r20, 0x00	; 0
    2dcc:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <LCD_Write4String>
	LCD_VidDisp4Number(duty);
    2dd0:	8b 81       	ldd	r24, Y+3	; 0x03
    2dd2:	9c 81       	ldd	r25, Y+4	; 0x04
    2dd4:	cc 01       	movw	r24, r24
    2dd6:	a0 e0       	ldi	r26, 0x00	; 0
    2dd8:	b0 e0       	ldi	r27, 0x00	; 0
    2dda:	bc 01       	movw	r22, r24
    2ddc:	cd 01       	movw	r24, r26
    2dde:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <LCD_VidDisp4Number>
	LCD_Write4String("F:",1,0);
    2de2:	83 e6       	ldi	r24, 0x63	; 99
    2de4:	90 e0       	ldi	r25, 0x00	; 0
    2de6:	61 e0       	ldi	r22, 0x01	; 1
    2de8:	40 e0       	ldi	r20, 0x00	; 0
    2dea:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <LCD_Write4String>
	LCD_VidDisp4Number(frq);
    2dee:	89 81       	ldd	r24, Y+1	; 0x01
    2df0:	9a 81       	ldd	r25, Y+2	; 0x02
    2df2:	cc 01       	movw	r24, r24
    2df4:	a0 e0       	ldi	r26, 0x00	; 0
    2df6:	b0 e0       	ldi	r27, 0x00	; 0
    2df8:	bc 01       	movw	r22, r24
    2dfa:	cd 01       	movw	r24, r26
    2dfc:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <LCD_VidDisp4Number>
	LCD_Write4String("S2:",0,5);
    2e00:	86 e6       	ldi	r24, 0x66	; 102
    2e02:	90 e0       	ldi	r25, 0x00	; 0
    2e04:	60 e0       	ldi	r22, 0x00	; 0
    2e06:	45 e0       	ldi	r20, 0x05	; 5
    2e08:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <LCD_Write4String>
	LCD_VidDisp4Number(snap_2);
    2e0c:	80 91 80 00 	lds	r24, 0x0080
    2e10:	90 91 81 00 	lds	r25, 0x0081
    2e14:	a0 91 82 00 	lds	r26, 0x0082
    2e18:	b0 91 83 00 	lds	r27, 0x0083
    2e1c:	bc 01       	movw	r22, r24
    2e1e:	cd 01       	movw	r24, r26
    2e20:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <LCD_VidDisp4Number>
	LCD_Write4String("S3:",1,10);
    2e24:	8a e6       	ldi	r24, 0x6A	; 106
    2e26:	90 e0       	ldi	r25, 0x00	; 0
    2e28:	61 e0       	ldi	r22, 0x01	; 1
    2e2a:	4a e0       	ldi	r20, 0x0A	; 10
    2e2c:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <LCD_Write4String>
	LCD_VidDisp4Number(snap_3);
    2e30:	80 91 84 00 	lds	r24, 0x0084
    2e34:	90 91 85 00 	lds	r25, 0x0085
    2e38:	a0 91 86 00 	lds	r26, 0x0086
    2e3c:	b0 91 87 00 	lds	r27, 0x0087
    2e40:	bc 01       	movw	r22, r24
    2e42:	cd 01       	movw	r24, r26
    2e44:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <LCD_VidDisp4Number>
	flag=0;
    2e48:	10 92 7b 00 	sts	0x007B, r1
}
    2e4c:	0f 90       	pop	r0
    2e4e:	0f 90       	pop	r0
    2e50:	0f 90       	pop	r0
    2e52:	0f 90       	pop	r0
    2e54:	cf 91       	pop	r28
    2e56:	df 91       	pop	r29
    2e58:	1f 91       	pop	r17
    2e5a:	0f 91       	pop	r16
    2e5c:	ff 90       	pop	r15
    2e5e:	ef 90       	pop	r14
    2e60:	df 90       	pop	r13
    2e62:	cf 90       	pop	r12
    2e64:	bf 90       	pop	r11
    2e66:	af 90       	pop	r10
    2e68:	9f 90       	pop	r9
    2e6a:	8f 90       	pop	r8
    2e6c:	7f 90       	pop	r7
    2e6e:	6f 90       	pop	r6
    2e70:	08 95       	ret

00002e72 <__mulsi3>:
    2e72:	62 9f       	mul	r22, r18
    2e74:	d0 01       	movw	r26, r0
    2e76:	73 9f       	mul	r23, r19
    2e78:	f0 01       	movw	r30, r0
    2e7a:	82 9f       	mul	r24, r18
    2e7c:	e0 0d       	add	r30, r0
    2e7e:	f1 1d       	adc	r31, r1
    2e80:	64 9f       	mul	r22, r20
    2e82:	e0 0d       	add	r30, r0
    2e84:	f1 1d       	adc	r31, r1
    2e86:	92 9f       	mul	r25, r18
    2e88:	f0 0d       	add	r31, r0
    2e8a:	83 9f       	mul	r24, r19
    2e8c:	f0 0d       	add	r31, r0
    2e8e:	74 9f       	mul	r23, r20
    2e90:	f0 0d       	add	r31, r0
    2e92:	65 9f       	mul	r22, r21
    2e94:	f0 0d       	add	r31, r0
    2e96:	99 27       	eor	r25, r25
    2e98:	72 9f       	mul	r23, r18
    2e9a:	b0 0d       	add	r27, r0
    2e9c:	e1 1d       	adc	r30, r1
    2e9e:	f9 1f       	adc	r31, r25
    2ea0:	63 9f       	mul	r22, r19
    2ea2:	b0 0d       	add	r27, r0
    2ea4:	e1 1d       	adc	r30, r1
    2ea6:	f9 1f       	adc	r31, r25
    2ea8:	bd 01       	movw	r22, r26
    2eaa:	cf 01       	movw	r24, r30
    2eac:	11 24       	eor	r1, r1
    2eae:	08 95       	ret

00002eb0 <__udivmodsi4>:
    2eb0:	a1 e2       	ldi	r26, 0x21	; 33
    2eb2:	1a 2e       	mov	r1, r26
    2eb4:	aa 1b       	sub	r26, r26
    2eb6:	bb 1b       	sub	r27, r27
    2eb8:	fd 01       	movw	r30, r26
    2eba:	0d c0       	rjmp	.+26     	; 0x2ed6 <__udivmodsi4_ep>

00002ebc <__udivmodsi4_loop>:
    2ebc:	aa 1f       	adc	r26, r26
    2ebe:	bb 1f       	adc	r27, r27
    2ec0:	ee 1f       	adc	r30, r30
    2ec2:	ff 1f       	adc	r31, r31
    2ec4:	a2 17       	cp	r26, r18
    2ec6:	b3 07       	cpc	r27, r19
    2ec8:	e4 07       	cpc	r30, r20
    2eca:	f5 07       	cpc	r31, r21
    2ecc:	20 f0       	brcs	.+8      	; 0x2ed6 <__udivmodsi4_ep>
    2ece:	a2 1b       	sub	r26, r18
    2ed0:	b3 0b       	sbc	r27, r19
    2ed2:	e4 0b       	sbc	r30, r20
    2ed4:	f5 0b       	sbc	r31, r21

00002ed6 <__udivmodsi4_ep>:
    2ed6:	66 1f       	adc	r22, r22
    2ed8:	77 1f       	adc	r23, r23
    2eda:	88 1f       	adc	r24, r24
    2edc:	99 1f       	adc	r25, r25
    2ede:	1a 94       	dec	r1
    2ee0:	69 f7       	brne	.-38     	; 0x2ebc <__udivmodsi4_loop>
    2ee2:	60 95       	com	r22
    2ee4:	70 95       	com	r23
    2ee6:	80 95       	com	r24
    2ee8:	90 95       	com	r25
    2eea:	9b 01       	movw	r18, r22
    2eec:	ac 01       	movw	r20, r24
    2eee:	bd 01       	movw	r22, r26
    2ef0:	cf 01       	movw	r24, r30
    2ef2:	08 95       	ret

00002ef4 <__prologue_saves__>:
    2ef4:	2f 92       	push	r2
    2ef6:	3f 92       	push	r3
    2ef8:	4f 92       	push	r4
    2efa:	5f 92       	push	r5
    2efc:	6f 92       	push	r6
    2efe:	7f 92       	push	r7
    2f00:	8f 92       	push	r8
    2f02:	9f 92       	push	r9
    2f04:	af 92       	push	r10
    2f06:	bf 92       	push	r11
    2f08:	cf 92       	push	r12
    2f0a:	df 92       	push	r13
    2f0c:	ef 92       	push	r14
    2f0e:	ff 92       	push	r15
    2f10:	0f 93       	push	r16
    2f12:	1f 93       	push	r17
    2f14:	cf 93       	push	r28
    2f16:	df 93       	push	r29
    2f18:	cd b7       	in	r28, 0x3d	; 61
    2f1a:	de b7       	in	r29, 0x3e	; 62
    2f1c:	ca 1b       	sub	r28, r26
    2f1e:	db 0b       	sbc	r29, r27
    2f20:	0f b6       	in	r0, 0x3f	; 63
    2f22:	f8 94       	cli
    2f24:	de bf       	out	0x3e, r29	; 62
    2f26:	0f be       	out	0x3f, r0	; 63
    2f28:	cd bf       	out	0x3d, r28	; 61
    2f2a:	09 94       	ijmp

00002f2c <__epilogue_restores__>:
    2f2c:	2a 88       	ldd	r2, Y+18	; 0x12
    2f2e:	39 88       	ldd	r3, Y+17	; 0x11
    2f30:	48 88       	ldd	r4, Y+16	; 0x10
    2f32:	5f 84       	ldd	r5, Y+15	; 0x0f
    2f34:	6e 84       	ldd	r6, Y+14	; 0x0e
    2f36:	7d 84       	ldd	r7, Y+13	; 0x0d
    2f38:	8c 84       	ldd	r8, Y+12	; 0x0c
    2f3a:	9b 84       	ldd	r9, Y+11	; 0x0b
    2f3c:	aa 84       	ldd	r10, Y+10	; 0x0a
    2f3e:	b9 84       	ldd	r11, Y+9	; 0x09
    2f40:	c8 84       	ldd	r12, Y+8	; 0x08
    2f42:	df 80       	ldd	r13, Y+7	; 0x07
    2f44:	ee 80       	ldd	r14, Y+6	; 0x06
    2f46:	fd 80       	ldd	r15, Y+5	; 0x05
    2f48:	0c 81       	ldd	r16, Y+4	; 0x04
    2f4a:	1b 81       	ldd	r17, Y+3	; 0x03
    2f4c:	aa 81       	ldd	r26, Y+2	; 0x02
    2f4e:	b9 81       	ldd	r27, Y+1	; 0x01
    2f50:	ce 0f       	add	r28, r30
    2f52:	d1 1d       	adc	r29, r1
    2f54:	0f b6       	in	r0, 0x3f	; 63
    2f56:	f8 94       	cli
    2f58:	de bf       	out	0x3e, r29	; 62
    2f5a:	0f be       	out	0x3f, r0	; 63
    2f5c:	cd bf       	out	0x3d, r28	; 61
    2f5e:	ed 01       	movw	r28, r26
    2f60:	08 95       	ret

00002f62 <_exit>:
    2f62:	f8 94       	cli

00002f64 <__stop_program>:
    2f64:	ff cf       	rjmp	.-2      	; 0x2f64 <__stop_program>
